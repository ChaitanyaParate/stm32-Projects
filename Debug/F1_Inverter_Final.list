
F1_Inverter_Final.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008a70  08000110  08000110  00001110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000388  08008b80  08008b80  00009b80  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008f08  08008f08  0000a068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08008f08  08008f08  0000a068  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08008f08  08008f08  0000a068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008f08  08008f08  00009f08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008f0c  08008f0c  00009f0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08008f10  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000013d0  20000068  08008f78  0000a068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001438  08008f78  0000a438  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000a068  2**0
                  CONTENTS, READONLY
 12 .debug_info   000129ef  00000000  00000000  0000a091  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002eca  00000000  00000000  0001ca80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001200  00000000  00000000  0001f950  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e05  00000000  00000000  00020b50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000199d5  00000000  00000000  00021955  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013bfa  00000000  00000000  0003b32a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00093eb9  00000000  00000000  0004ef24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e2ddd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000535c  00000000  00000000  000e2e20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000050  00000000  00000000  000e817c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000068 	.word	0x20000068
 800012c:	00000000 	.word	0x00000000
 8000130:	08008b68 	.word	0x08008b68

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000006c 	.word	0x2000006c
 800014c:	08008b68 	.word	0x08008b68

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	@ 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_d2iz>:
 80009fc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a00:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a04:	d215      	bcs.n	8000a32 <__aeabi_d2iz+0x36>
 8000a06:	d511      	bpl.n	8000a2c <__aeabi_d2iz+0x30>
 8000a08:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a0c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a10:	d912      	bls.n	8000a38 <__aeabi_d2iz+0x3c>
 8000a12:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a16:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a1a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a1e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a22:	fa23 f002 	lsr.w	r0, r3, r2
 8000a26:	bf18      	it	ne
 8000a28:	4240      	negne	r0, r0
 8000a2a:	4770      	bx	lr
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a36:	d105      	bne.n	8000a44 <__aeabi_d2iz+0x48>
 8000a38:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a3c:	bf08      	it	eq
 8000a3e:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a42:	4770      	bx	lr
 8000a44:	f04f 0000 	mov.w	r0, #0
 8000a48:	4770      	bx	lr
 8000a4a:	bf00      	nop

08000a4c <__aeabi_d2uiz>:
 8000a4c:	004a      	lsls	r2, r1, #1
 8000a4e:	d211      	bcs.n	8000a74 <__aeabi_d2uiz+0x28>
 8000a50:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a54:	d211      	bcs.n	8000a7a <__aeabi_d2uiz+0x2e>
 8000a56:	d50d      	bpl.n	8000a74 <__aeabi_d2uiz+0x28>
 8000a58:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a60:	d40e      	bmi.n	8000a80 <__aeabi_d2uiz+0x34>
 8000a62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a66:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a6e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a72:	4770      	bx	lr
 8000a74:	f04f 0000 	mov.w	r0, #0
 8000a78:	4770      	bx	lr
 8000a7a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a7e:	d102      	bne.n	8000a86 <__aeabi_d2uiz+0x3a>
 8000a80:	f04f 30ff 	mov.w	r0, #4294967295
 8000a84:	4770      	bx	lr
 8000a86:	f04f 0000 	mov.w	r0, #0
 8000a8a:	4770      	bx	lr

08000a8c <__aeabi_d2f>:
 8000a8c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a90:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a94:	bf24      	itt	cs
 8000a96:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a9a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a9e:	d90d      	bls.n	8000abc <__aeabi_d2f+0x30>
 8000aa0:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000aa4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aac:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000ab0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab4:	bf08      	it	eq
 8000ab6:	f020 0001 	biceq.w	r0, r0, #1
 8000aba:	4770      	bx	lr
 8000abc:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000ac0:	d121      	bne.n	8000b06 <__aeabi_d2f+0x7a>
 8000ac2:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000ac6:	bfbc      	itt	lt
 8000ac8:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000acc:	4770      	bxlt	lr
 8000ace:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000ad2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad6:	f1c2 0218 	rsb	r2, r2, #24
 8000ada:	f1c2 0c20 	rsb	ip, r2, #32
 8000ade:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ae2:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae6:	bf18      	it	ne
 8000ae8:	f040 0001 	orrne.w	r0, r0, #1
 8000aec:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000af0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af8:	ea40 000c 	orr.w	r0, r0, ip
 8000afc:	fa23 f302 	lsr.w	r3, r3, r2
 8000b00:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b04:	e7cc      	b.n	8000aa0 <__aeabi_d2f+0x14>
 8000b06:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b0a:	d107      	bne.n	8000b1c <__aeabi_d2f+0x90>
 8000b0c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b10:	bf1e      	ittt	ne
 8000b12:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b16:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b1a:	4770      	bxne	lr
 8000b1c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b20:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b24:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b28:	4770      	bx	lr
 8000b2a:	bf00      	nop

08000b2c <__aeabi_frsub>:
 8000b2c:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b30:	e002      	b.n	8000b38 <__addsf3>
 8000b32:	bf00      	nop

08000b34 <__aeabi_fsub>:
 8000b34:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b38 <__addsf3>:
 8000b38:	0042      	lsls	r2, r0, #1
 8000b3a:	bf1f      	itttt	ne
 8000b3c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b40:	ea92 0f03 	teqne	r2, r3
 8000b44:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b48:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b4c:	d06a      	beq.n	8000c24 <__addsf3+0xec>
 8000b4e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b52:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b56:	bfc1      	itttt	gt
 8000b58:	18d2      	addgt	r2, r2, r3
 8000b5a:	4041      	eorgt	r1, r0
 8000b5c:	4048      	eorgt	r0, r1
 8000b5e:	4041      	eorgt	r1, r0
 8000b60:	bfb8      	it	lt
 8000b62:	425b      	neglt	r3, r3
 8000b64:	2b19      	cmp	r3, #25
 8000b66:	bf88      	it	hi
 8000b68:	4770      	bxhi	lr
 8000b6a:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000b6e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b72:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000b76:	bf18      	it	ne
 8000b78:	4240      	negne	r0, r0
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000b82:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000b86:	bf18      	it	ne
 8000b88:	4249      	negne	r1, r1
 8000b8a:	ea92 0f03 	teq	r2, r3
 8000b8e:	d03f      	beq.n	8000c10 <__addsf3+0xd8>
 8000b90:	f1a2 0201 	sub.w	r2, r2, #1
 8000b94:	fa41 fc03 	asr.w	ip, r1, r3
 8000b98:	eb10 000c 	adds.w	r0, r0, ip
 8000b9c:	f1c3 0320 	rsb	r3, r3, #32
 8000ba0:	fa01 f103 	lsl.w	r1, r1, r3
 8000ba4:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000ba8:	d502      	bpl.n	8000bb0 <__addsf3+0x78>
 8000baa:	4249      	negs	r1, r1
 8000bac:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bb0:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000bb4:	d313      	bcc.n	8000bde <__addsf3+0xa6>
 8000bb6:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000bba:	d306      	bcc.n	8000bca <__addsf3+0x92>
 8000bbc:	0840      	lsrs	r0, r0, #1
 8000bbe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bc2:	f102 0201 	add.w	r2, r2, #1
 8000bc6:	2afe      	cmp	r2, #254	@ 0xfe
 8000bc8:	d251      	bcs.n	8000c6e <__addsf3+0x136>
 8000bca:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000bce:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bd2:	bf08      	it	eq
 8000bd4:	f020 0001 	biceq.w	r0, r0, #1
 8000bd8:	ea40 0003 	orr.w	r0, r0, r3
 8000bdc:	4770      	bx	lr
 8000bde:	0049      	lsls	r1, r1, #1
 8000be0:	eb40 0000 	adc.w	r0, r0, r0
 8000be4:	3a01      	subs	r2, #1
 8000be6:	bf28      	it	cs
 8000be8:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000bec:	d2ed      	bcs.n	8000bca <__addsf3+0x92>
 8000bee:	fab0 fc80 	clz	ip, r0
 8000bf2:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bf6:	ebb2 020c 	subs.w	r2, r2, ip
 8000bfa:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bfe:	bfaa      	itet	ge
 8000c00:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c04:	4252      	neglt	r2, r2
 8000c06:	4318      	orrge	r0, r3
 8000c08:	bfbc      	itt	lt
 8000c0a:	40d0      	lsrlt	r0, r2
 8000c0c:	4318      	orrlt	r0, r3
 8000c0e:	4770      	bx	lr
 8000c10:	f092 0f00 	teq	r2, #0
 8000c14:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c18:	bf06      	itte	eq
 8000c1a:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c1e:	3201      	addeq	r2, #1
 8000c20:	3b01      	subne	r3, #1
 8000c22:	e7b5      	b.n	8000b90 <__addsf3+0x58>
 8000c24:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c28:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c2c:	bf18      	it	ne
 8000c2e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c32:	d021      	beq.n	8000c78 <__addsf3+0x140>
 8000c34:	ea92 0f03 	teq	r2, r3
 8000c38:	d004      	beq.n	8000c44 <__addsf3+0x10c>
 8000c3a:	f092 0f00 	teq	r2, #0
 8000c3e:	bf08      	it	eq
 8000c40:	4608      	moveq	r0, r1
 8000c42:	4770      	bx	lr
 8000c44:	ea90 0f01 	teq	r0, r1
 8000c48:	bf1c      	itt	ne
 8000c4a:	2000      	movne	r0, #0
 8000c4c:	4770      	bxne	lr
 8000c4e:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c52:	d104      	bne.n	8000c5e <__addsf3+0x126>
 8000c54:	0040      	lsls	r0, r0, #1
 8000c56:	bf28      	it	cs
 8000c58:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c5c:	4770      	bx	lr
 8000c5e:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c62:	bf3c      	itt	cc
 8000c64:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000c68:	4770      	bxcc	lr
 8000c6a:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c6e:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000c72:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c76:	4770      	bx	lr
 8000c78:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c7c:	bf16      	itet	ne
 8000c7e:	4608      	movne	r0, r1
 8000c80:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c84:	4601      	movne	r1, r0
 8000c86:	0242      	lsls	r2, r0, #9
 8000c88:	bf06      	itte	eq
 8000c8a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c8e:	ea90 0f01 	teqeq	r0, r1
 8000c92:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000c96:	4770      	bx	lr

08000c98 <__aeabi_ui2f>:
 8000c98:	f04f 0300 	mov.w	r3, #0
 8000c9c:	e004      	b.n	8000ca8 <__aeabi_i2f+0x8>
 8000c9e:	bf00      	nop

08000ca0 <__aeabi_i2f>:
 8000ca0:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000ca4:	bf48      	it	mi
 8000ca6:	4240      	negmi	r0, r0
 8000ca8:	ea5f 0c00 	movs.w	ip, r0
 8000cac:	bf08      	it	eq
 8000cae:	4770      	bxeq	lr
 8000cb0:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000cb4:	4601      	mov	r1, r0
 8000cb6:	f04f 0000 	mov.w	r0, #0
 8000cba:	e01c      	b.n	8000cf6 <__aeabi_l2f+0x2a>

08000cbc <__aeabi_ul2f>:
 8000cbc:	ea50 0201 	orrs.w	r2, r0, r1
 8000cc0:	bf08      	it	eq
 8000cc2:	4770      	bxeq	lr
 8000cc4:	f04f 0300 	mov.w	r3, #0
 8000cc8:	e00a      	b.n	8000ce0 <__aeabi_l2f+0x14>
 8000cca:	bf00      	nop

08000ccc <__aeabi_l2f>:
 8000ccc:	ea50 0201 	orrs.w	r2, r0, r1
 8000cd0:	bf08      	it	eq
 8000cd2:	4770      	bxeq	lr
 8000cd4:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000cd8:	d502      	bpl.n	8000ce0 <__aeabi_l2f+0x14>
 8000cda:	4240      	negs	r0, r0
 8000cdc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce0:	ea5f 0c01 	movs.w	ip, r1
 8000ce4:	bf02      	ittt	eq
 8000ce6:	4684      	moveq	ip, r0
 8000ce8:	4601      	moveq	r1, r0
 8000cea:	2000      	moveq	r0, #0
 8000cec:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000cf0:	bf08      	it	eq
 8000cf2:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000cf6:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000cfa:	fabc f28c 	clz	r2, ip
 8000cfe:	3a08      	subs	r2, #8
 8000d00:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d04:	db10      	blt.n	8000d28 <__aeabi_l2f+0x5c>
 8000d06:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d0a:	4463      	add	r3, ip
 8000d0c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d10:	f1c2 0220 	rsb	r2, r2, #32
 8000d14:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d18:	fa20 f202 	lsr.w	r2, r0, r2
 8000d1c:	eb43 0002 	adc.w	r0, r3, r2
 8000d20:	bf08      	it	eq
 8000d22:	f020 0001 	biceq.w	r0, r0, #1
 8000d26:	4770      	bx	lr
 8000d28:	f102 0220 	add.w	r2, r2, #32
 8000d2c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d30:	f1c2 0220 	rsb	r2, r2, #32
 8000d34:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d38:	fa21 f202 	lsr.w	r2, r1, r2
 8000d3c:	eb43 0002 	adc.w	r0, r3, r2
 8000d40:	bf08      	it	eq
 8000d42:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d46:	4770      	bx	lr

08000d48 <__aeabi_fmul>:
 8000d48:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d4c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d50:	bf1e      	ittt	ne
 8000d52:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d56:	ea92 0f0c 	teqne	r2, ip
 8000d5a:	ea93 0f0c 	teqne	r3, ip
 8000d5e:	d06f      	beq.n	8000e40 <__aeabi_fmul+0xf8>
 8000d60:	441a      	add	r2, r3
 8000d62:	ea80 0c01 	eor.w	ip, r0, r1
 8000d66:	0240      	lsls	r0, r0, #9
 8000d68:	bf18      	it	ne
 8000d6a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d6e:	d01e      	beq.n	8000dae <__aeabi_fmul+0x66>
 8000d70:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000d74:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d78:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d7c:	fba0 3101 	umull	r3, r1, r0, r1
 8000d80:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000d84:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000d88:	bf3e      	ittt	cc
 8000d8a:	0049      	lslcc	r1, r1, #1
 8000d8c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d90:	005b      	lslcc	r3, r3, #1
 8000d92:	ea40 0001 	orr.w	r0, r0, r1
 8000d96:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000d9a:	2afd      	cmp	r2, #253	@ 0xfd
 8000d9c:	d81d      	bhi.n	8000dda <__aeabi_fmul+0x92>
 8000d9e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000da2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000da6:	bf08      	it	eq
 8000da8:	f020 0001 	biceq.w	r0, r0, #1
 8000dac:	4770      	bx	lr
 8000dae:	f090 0f00 	teq	r0, #0
 8000db2:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000db6:	bf08      	it	eq
 8000db8:	0249      	lsleq	r1, r1, #9
 8000dba:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dbe:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dc2:	3a7f      	subs	r2, #127	@ 0x7f
 8000dc4:	bfc2      	ittt	gt
 8000dc6:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000dca:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dce:	4770      	bxgt	lr
 8000dd0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000dd4:	f04f 0300 	mov.w	r3, #0
 8000dd8:	3a01      	subs	r2, #1
 8000dda:	dc5d      	bgt.n	8000e98 <__aeabi_fmul+0x150>
 8000ddc:	f112 0f19 	cmn.w	r2, #25
 8000de0:	bfdc      	itt	le
 8000de2:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000de6:	4770      	bxle	lr
 8000de8:	f1c2 0200 	rsb	r2, r2, #0
 8000dec:	0041      	lsls	r1, r0, #1
 8000dee:	fa21 f102 	lsr.w	r1, r1, r2
 8000df2:	f1c2 0220 	rsb	r2, r2, #32
 8000df6:	fa00 fc02 	lsl.w	ip, r0, r2
 8000dfa:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dfe:	f140 0000 	adc.w	r0, r0, #0
 8000e02:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e06:	bf08      	it	eq
 8000e08:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e0c:	4770      	bx	lr
 8000e0e:	f092 0f00 	teq	r2, #0
 8000e12:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000e16:	bf02      	ittt	eq
 8000e18:	0040      	lsleq	r0, r0, #1
 8000e1a:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000e1e:	3a01      	subeq	r2, #1
 8000e20:	d0f9      	beq.n	8000e16 <__aeabi_fmul+0xce>
 8000e22:	ea40 000c 	orr.w	r0, r0, ip
 8000e26:	f093 0f00 	teq	r3, #0
 8000e2a:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000e2e:	bf02      	ittt	eq
 8000e30:	0049      	lsleq	r1, r1, #1
 8000e32:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000e36:	3b01      	subeq	r3, #1
 8000e38:	d0f9      	beq.n	8000e2e <__aeabi_fmul+0xe6>
 8000e3a:	ea41 010c 	orr.w	r1, r1, ip
 8000e3e:	e78f      	b.n	8000d60 <__aeabi_fmul+0x18>
 8000e40:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e44:	ea92 0f0c 	teq	r2, ip
 8000e48:	bf18      	it	ne
 8000e4a:	ea93 0f0c 	teqne	r3, ip
 8000e4e:	d00a      	beq.n	8000e66 <__aeabi_fmul+0x11e>
 8000e50:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000e54:	bf18      	it	ne
 8000e56:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000e5a:	d1d8      	bne.n	8000e0e <__aeabi_fmul+0xc6>
 8000e5c:	ea80 0001 	eor.w	r0, r0, r1
 8000e60:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e64:	4770      	bx	lr
 8000e66:	f090 0f00 	teq	r0, #0
 8000e6a:	bf17      	itett	ne
 8000e6c:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000e70:	4608      	moveq	r0, r1
 8000e72:	f091 0f00 	teqne	r1, #0
 8000e76:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000e7a:	d014      	beq.n	8000ea6 <__aeabi_fmul+0x15e>
 8000e7c:	ea92 0f0c 	teq	r2, ip
 8000e80:	d101      	bne.n	8000e86 <__aeabi_fmul+0x13e>
 8000e82:	0242      	lsls	r2, r0, #9
 8000e84:	d10f      	bne.n	8000ea6 <__aeabi_fmul+0x15e>
 8000e86:	ea93 0f0c 	teq	r3, ip
 8000e8a:	d103      	bne.n	8000e94 <__aeabi_fmul+0x14c>
 8000e8c:	024b      	lsls	r3, r1, #9
 8000e8e:	bf18      	it	ne
 8000e90:	4608      	movne	r0, r1
 8000e92:	d108      	bne.n	8000ea6 <__aeabi_fmul+0x15e>
 8000e94:	ea80 0001 	eor.w	r0, r0, r1
 8000e98:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e9c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ea0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ea4:	4770      	bx	lr
 8000ea6:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000eaa:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000eae:	4770      	bx	lr

08000eb0 <__aeabi_fdiv>:
 8000eb0:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000eb4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000eb8:	bf1e      	ittt	ne
 8000eba:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000ebe:	ea92 0f0c 	teqne	r2, ip
 8000ec2:	ea93 0f0c 	teqne	r3, ip
 8000ec6:	d069      	beq.n	8000f9c <__aeabi_fdiv+0xec>
 8000ec8:	eba2 0203 	sub.w	r2, r2, r3
 8000ecc:	ea80 0c01 	eor.w	ip, r0, r1
 8000ed0:	0249      	lsls	r1, r1, #9
 8000ed2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ed6:	d037      	beq.n	8000f48 <__aeabi_fdiv+0x98>
 8000ed8:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000edc:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000ee0:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ee4:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000ee8:	428b      	cmp	r3, r1
 8000eea:	bf38      	it	cc
 8000eec:	005b      	lslcc	r3, r3, #1
 8000eee:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000ef2:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000ef6:	428b      	cmp	r3, r1
 8000ef8:	bf24      	itt	cs
 8000efa:	1a5b      	subcs	r3, r3, r1
 8000efc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f00:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f04:	bf24      	itt	cs
 8000f06:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f0a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f0e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f12:	bf24      	itt	cs
 8000f14:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f18:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f1c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f20:	bf24      	itt	cs
 8000f22:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f26:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f2a:	011b      	lsls	r3, r3, #4
 8000f2c:	bf18      	it	ne
 8000f2e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f32:	d1e0      	bne.n	8000ef6 <__aeabi_fdiv+0x46>
 8000f34:	2afd      	cmp	r2, #253	@ 0xfd
 8000f36:	f63f af50 	bhi.w	8000dda <__aeabi_fmul+0x92>
 8000f3a:	428b      	cmp	r3, r1
 8000f3c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f40:	bf08      	it	eq
 8000f42:	f020 0001 	biceq.w	r0, r0, #1
 8000f46:	4770      	bx	lr
 8000f48:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000f4c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f50:	327f      	adds	r2, #127	@ 0x7f
 8000f52:	bfc2      	ittt	gt
 8000f54:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000f58:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f5c:	4770      	bxgt	lr
 8000f5e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f62:	f04f 0300 	mov.w	r3, #0
 8000f66:	3a01      	subs	r2, #1
 8000f68:	e737      	b.n	8000dda <__aeabi_fmul+0x92>
 8000f6a:	f092 0f00 	teq	r2, #0
 8000f6e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000f72:	bf02      	ittt	eq
 8000f74:	0040      	lsleq	r0, r0, #1
 8000f76:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000f7a:	3a01      	subeq	r2, #1
 8000f7c:	d0f9      	beq.n	8000f72 <__aeabi_fdiv+0xc2>
 8000f7e:	ea40 000c 	orr.w	r0, r0, ip
 8000f82:	f093 0f00 	teq	r3, #0
 8000f86:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000f8a:	bf02      	ittt	eq
 8000f8c:	0049      	lsleq	r1, r1, #1
 8000f8e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000f92:	3b01      	subeq	r3, #1
 8000f94:	d0f9      	beq.n	8000f8a <__aeabi_fdiv+0xda>
 8000f96:	ea41 010c 	orr.w	r1, r1, ip
 8000f9a:	e795      	b.n	8000ec8 <__aeabi_fdiv+0x18>
 8000f9c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fa0:	ea92 0f0c 	teq	r2, ip
 8000fa4:	d108      	bne.n	8000fb8 <__aeabi_fdiv+0x108>
 8000fa6:	0242      	lsls	r2, r0, #9
 8000fa8:	f47f af7d 	bne.w	8000ea6 <__aeabi_fmul+0x15e>
 8000fac:	ea93 0f0c 	teq	r3, ip
 8000fb0:	f47f af70 	bne.w	8000e94 <__aeabi_fmul+0x14c>
 8000fb4:	4608      	mov	r0, r1
 8000fb6:	e776      	b.n	8000ea6 <__aeabi_fmul+0x15e>
 8000fb8:	ea93 0f0c 	teq	r3, ip
 8000fbc:	d104      	bne.n	8000fc8 <__aeabi_fdiv+0x118>
 8000fbe:	024b      	lsls	r3, r1, #9
 8000fc0:	f43f af4c 	beq.w	8000e5c <__aeabi_fmul+0x114>
 8000fc4:	4608      	mov	r0, r1
 8000fc6:	e76e      	b.n	8000ea6 <__aeabi_fmul+0x15e>
 8000fc8:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000fcc:	bf18      	it	ne
 8000fce:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000fd2:	d1ca      	bne.n	8000f6a <__aeabi_fdiv+0xba>
 8000fd4:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000fd8:	f47f af5c 	bne.w	8000e94 <__aeabi_fmul+0x14c>
 8000fdc:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000fe0:	f47f af3c 	bne.w	8000e5c <__aeabi_fmul+0x114>
 8000fe4:	e75f      	b.n	8000ea6 <__aeabi_fmul+0x15e>
 8000fe6:	bf00      	nop

08000fe8 <__aeabi_f2uiz>:
 8000fe8:	0042      	lsls	r2, r0, #1
 8000fea:	d20e      	bcs.n	800100a <__aeabi_f2uiz+0x22>
 8000fec:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000ff0:	d30b      	bcc.n	800100a <__aeabi_f2uiz+0x22>
 8000ff2:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000ff6:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000ffa:	d409      	bmi.n	8001010 <__aeabi_f2uiz+0x28>
 8000ffc:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001000:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001004:	fa23 f002 	lsr.w	r0, r3, r2
 8001008:	4770      	bx	lr
 800100a:	f04f 0000 	mov.w	r0, #0
 800100e:	4770      	bx	lr
 8001010:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8001014:	d101      	bne.n	800101a <__aeabi_f2uiz+0x32>
 8001016:	0242      	lsls	r2, r0, #9
 8001018:	d102      	bne.n	8001020 <__aeabi_f2uiz+0x38>
 800101a:	f04f 30ff 	mov.w	r0, #4294967295
 800101e:	4770      	bx	lr
 8001020:	f04f 0000 	mov.w	r0, #0
 8001024:	4770      	bx	lr
 8001026:	bf00      	nop

08001028 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001028:	b480      	push	{r7}
 800102a:	b085      	sub	sp, #20
 800102c:	af00      	add	r7, sp, #0
 800102e:	60f8      	str	r0, [r7, #12]
 8001030:	60b9      	str	r1, [r7, #8]
 8001032:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	4a06      	ldr	r2, [pc, #24]	@ (8001050 <vApplicationGetIdleTaskMemory+0x28>)
 8001038:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800103a:	68bb      	ldr	r3, [r7, #8]
 800103c:	4a05      	ldr	r2, [pc, #20]	@ (8001054 <vApplicationGetIdleTaskMemory+0x2c>)
 800103e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	2280      	movs	r2, #128	@ 0x80
 8001044:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8001046:	bf00      	nop
 8001048:	3714      	adds	r7, #20
 800104a:	46bd      	mov	sp, r7
 800104c:	bc80      	pop	{r7}
 800104e:	4770      	bx	lr
 8001050:	20000084 	.word	0x20000084
 8001054:	200000d8 	.word	0x200000d8

08001058 <HAL_UART_RxCpltCallback>:
uint8_t sw, frequency, amplitude;
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8001058:	b580      	push	{r7, lr}
 800105a:	b084      	sub	sp, #16
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]


	switch(atoi(rxdata[0])){
 8001060:	4b20      	ldr	r3, [pc, #128]	@ (80010e4 <HAL_UART_RxCpltCallback+0x8c>)
 8001062:	781b      	ldrb	r3, [r3, #0]
 8001064:	4618      	mov	r0, r3
 8001066:	f006 fbcf 	bl	8007808 <atoi>
 800106a:	4603      	mov	r3, r0
 800106c:	2b00      	cmp	r3, #0
 800106e:	d002      	beq.n	8001076 <HAL_UART_RxCpltCallback+0x1e>
 8001070:	2b01      	cmp	r3, #1
 8001072:	d009      	beq.n	8001088 <HAL_UART_RxCpltCallback+0x30>
 8001074:	e026      	b.n	80010c4 <HAL_UART_RxCpltCallback+0x6c>
			case 0: SYSTEM_STATE = 0;
 8001076:	4b1c      	ldr	r3, [pc, #112]	@ (80010e8 <HAL_UART_RxCpltCallback+0x90>)
 8001078:	2200      	movs	r2, #0
 800107a:	701a      	strb	r2, [r3, #0]
					invCommand(0, 0, 0);
 800107c:	2200      	movs	r2, #0
 800107e:	2100      	movs	r1, #0
 8001080:	2000      	movs	r0, #0
 8001082:	f000 fa5b 	bl	800153c <invCommand>
					break;
 8001086:	e023      	b.n	80010d0 <HAL_UART_RxCpltCallback+0x78>

			case 1: SYSTEM_STATE = 1;
 8001088:	4b17      	ldr	r3, [pc, #92]	@ (80010e8 <HAL_UART_RxCpltCallback+0x90>)
 800108a:	2201      	movs	r2, #1
 800108c:	701a      	strb	r2, [r3, #0]
					uint8_t freq;
					freq = atoi(rxdata[1]);
 800108e:	4b15      	ldr	r3, [pc, #84]	@ (80010e4 <HAL_UART_RxCpltCallback+0x8c>)
 8001090:	785b      	ldrb	r3, [r3, #1]
 8001092:	4618      	mov	r0, r3
 8001094:	f006 fbb8 	bl	8007808 <atoi>
 8001098:	4603      	mov	r3, r0
 800109a:	73fb      	strb	r3, [r7, #15]

					uint8_t amp = atoi(rxdata[2]) / 10;
 800109c:	4b11      	ldr	r3, [pc, #68]	@ (80010e4 <HAL_UART_RxCpltCallback+0x8c>)
 800109e:	789b      	ldrb	r3, [r3, #2]
 80010a0:	4618      	mov	r0, r3
 80010a2:	f006 fbb1 	bl	8007808 <atoi>
 80010a6:	4603      	mov	r3, r0
 80010a8:	4a10      	ldr	r2, [pc, #64]	@ (80010ec <HAL_UART_RxCpltCallback+0x94>)
 80010aa:	fb82 1203 	smull	r1, r2, r2, r3
 80010ae:	1092      	asrs	r2, r2, #2
 80010b0:	17db      	asrs	r3, r3, #31
 80010b2:	1ad3      	subs	r3, r2, r3
 80010b4:	73bb      	strb	r3, [r7, #14]
					invCommand(1, amp, freq);
 80010b6:	7bfa      	ldrb	r2, [r7, #15]
 80010b8:	7bbb      	ldrb	r3, [r7, #14]
 80010ba:	4619      	mov	r1, r3
 80010bc:	2001      	movs	r0, #1
 80010be:	f000 fa3d 	bl	800153c <invCommand>
					break;
 80010c2:	e005      	b.n	80010d0 <HAL_UART_RxCpltCallback+0x78>


			default:invCommand(0, 0, 0);
 80010c4:	2200      	movs	r2, #0
 80010c6:	2100      	movs	r1, #0
 80010c8:	2000      	movs	r0, #0
 80010ca:	f000 fa37 	bl	800153c <invCommand>
					break;
 80010ce:	bf00      	nop
		}

	HAL_UART_Receive_DMA(&huart3, rxdata, sizeof(rxdata));
 80010d0:	2203      	movs	r2, #3
 80010d2:	4904      	ldr	r1, [pc, #16]	@ (80010e4 <HAL_UART_RxCpltCallback+0x8c>)
 80010d4:	4806      	ldr	r0, [pc, #24]	@ (80010f0 <HAL_UART_RxCpltCallback+0x98>)
 80010d6:	f003 f96f 	bl	80043b8 <HAL_UART_Receive_DMA>

}
 80010da:	bf00      	nop
 80010dc:	3710      	adds	r7, #16
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	bf00      	nop
 80010e4:	200003bc 	.word	0x200003bc
 80010e8:	200003c6 	.word	0x200003c6
 80010ec:	66666667 	.word	0x66666667
 80010f0:	20000320 	.word	0x20000320

080010f4 <ERROR_FUNCTION>:

void ERROR_FUNCTION(int error_code){
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b082      	sub	sp, #8
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
	//HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
	invCommand(0, 0, 0);
 80010fc:	2200      	movs	r2, #0
 80010fe:	2100      	movs	r1, #0
 8001100:	2000      	movs	r0, #0
 8001102:	f000 fa1b 	bl	800153c <invCommand>
	SYSTEM_STATE = 0;
 8001106:	4b0b      	ldr	r3, [pc, #44]	@ (8001134 <ERROR_FUNCTION+0x40>)
 8001108:	2200      	movs	r2, #0
 800110a:	701a      	strb	r2, [r3, #0]
	txdata[0] = SYSTEM_STATE;
 800110c:	4b09      	ldr	r3, [pc, #36]	@ (8001134 <ERROR_FUNCTION+0x40>)
 800110e:	781a      	ldrb	r2, [r3, #0]
 8001110:	4b09      	ldr	r3, [pc, #36]	@ (8001138 <ERROR_FUNCTION+0x44>)
 8001112:	701a      	strb	r2, [r3, #0]
	txdata[1] = error_code;
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	b2da      	uxtb	r2, r3
 8001118:	4b07      	ldr	r3, [pc, #28]	@ (8001138 <ERROR_FUNCTION+0x44>)
 800111a:	705a      	strb	r2, [r3, #1]
	osSemaphoreRelease(myBinarySem01Handle);
 800111c:	4b07      	ldr	r3, [pc, #28]	@ (800113c <ERROR_FUNCTION+0x48>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	4618      	mov	r0, r3
 8001122:	f004 f91f 	bl	8005364 <osSemaphoreRelease>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001126:	b672      	cpsid	i
}
 8001128:	bf00      	nop
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_SET);*/
//	}
}
 800112a:	bf00      	nop
 800112c:	3708      	adds	r7, #8
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	200003c6 	.word	0x200003c6
 8001138:	200003c0 	.word	0x200003c0
 800113c:	200003b8 	.word	0x200003b8

08001140 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001140:	b5b0      	push	{r4, r5, r7, lr}
 8001142:	b098      	sub	sp, #96	@ 0x60
 8001144:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001146:	f000 ff87 	bl	8002058 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800114a:	f000 f867 	bl	800121c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800114e:	f000 f985 	bl	800145c <MX_GPIO_Init>
  MX_DMA_Init();
 8001152:	f000 f965 	bl	8001420 <MX_DMA_Init>
  MX_TIM1_Init();
 8001156:	f000 f89d 	bl	8001294 <MX_TIM1_Init>
  MX_USART3_UART_Init();
 800115a:	f000 f937 	bl	80013cc <MX_USART3_UART_Init>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of myBinarySem01 */
  osSemaphoreDef(myBinarySem01);
 800115e:	2300      	movs	r3, #0
 8001160:	65bb      	str	r3, [r7, #88]	@ 0x58
 8001162:	2300      	movs	r3, #0
 8001164:	65fb      	str	r3, [r7, #92]	@ 0x5c
  myBinarySem01Handle = osSemaphoreCreate(osSemaphore(myBinarySem01), 1);
 8001166:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800116a:	2101      	movs	r1, #1
 800116c:	4618      	mov	r0, r3
 800116e:	f004 f878 	bl	8005262 <osSemaphoreCreate>
 8001172:	4603      	mov	r3, r0
 8001174:	4a20      	ldr	r2, [pc, #128]	@ (80011f8 <main+0xb8>)
 8001176:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8001178:	4b20      	ldr	r3, [pc, #128]	@ (80011fc <main+0xbc>)
 800117a:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 800117e:	461d      	mov	r5, r3
 8001180:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001182:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001184:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001188:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800118c:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001190:	2100      	movs	r1, #0
 8001192:	4618      	mov	r0, r3
 8001194:	f004 f805 	bl	80051a2 <osThreadCreate>
 8001198:	4603      	mov	r3, r0
 800119a:	4a19      	ldr	r2, [pc, #100]	@ (8001200 <main+0xc0>)
 800119c:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask02 */
  osThreadDef(myTask02, StartTask02, osPriorityNormal, 0, 128);
 800119e:	4b19      	ldr	r3, [pc, #100]	@ (8001204 <main+0xc4>)
 80011a0:	f107 0420 	add.w	r4, r7, #32
 80011a4:	461d      	mov	r5, r3
 80011a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011aa:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80011ae:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask02Handle = osThreadCreate(osThread(myTask02), NULL);
 80011b2:	f107 0320 	add.w	r3, r7, #32
 80011b6:	2100      	movs	r1, #0
 80011b8:	4618      	mov	r0, r3
 80011ba:	f003 fff2 	bl	80051a2 <osThreadCreate>
 80011be:	4603      	mov	r3, r0
 80011c0:	4a11      	ldr	r2, [pc, #68]	@ (8001208 <main+0xc8>)
 80011c2:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask03 */
  osThreadDef(myTask03, StartTask03, osPriorityNormal, 0, 128);
 80011c4:	4b11      	ldr	r3, [pc, #68]	@ (800120c <main+0xcc>)
 80011c6:	1d3c      	adds	r4, r7, #4
 80011c8:	461d      	mov	r5, r3
 80011ca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011cc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011ce:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80011d2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask03Handle = osThreadCreate(osThread(myTask03), NULL);
 80011d6:	1d3b      	adds	r3, r7, #4
 80011d8:	2100      	movs	r1, #0
 80011da:	4618      	mov	r0, r3
 80011dc:	f003 ffe1 	bl	80051a2 <osThreadCreate>
 80011e0:	4603      	mov	r3, r0
 80011e2:	4a0b      	ldr	r2, [pc, #44]	@ (8001210 <main+0xd0>)
 80011e4:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */

  HAL_UART_Receive_DMA(&huart3, rxdata, sizeof(rxdata));
 80011e6:	2203      	movs	r2, #3
 80011e8:	490a      	ldr	r1, [pc, #40]	@ (8001214 <main+0xd4>)
 80011ea:	480b      	ldr	r0, [pc, #44]	@ (8001218 <main+0xd8>)
 80011ec:	f003 f8e4 	bl	80043b8 <HAL_UART_Receive_DMA>
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80011f0:	f003 ffd0 	bl	8005194 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80011f4:	bf00      	nop
 80011f6:	e7fd      	b.n	80011f4 <main+0xb4>
 80011f8:	200003b8 	.word	0x200003b8
 80011fc:	08008b8c 	.word	0x08008b8c
 8001200:	200003ac 	.word	0x200003ac
 8001204:	08008bb4 	.word	0x08008bb4
 8001208:	200003b0 	.word	0x200003b0
 800120c:	08008bdc 	.word	0x08008bdc
 8001210:	200003b4 	.word	0x200003b4
 8001214:	200003bc 	.word	0x200003bc
 8001218:	20000320 	.word	0x20000320

0800121c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b090      	sub	sp, #64	@ 0x40
 8001220:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001222:	f107 0318 	add.w	r3, r7, #24
 8001226:	2228      	movs	r2, #40	@ 0x28
 8001228:	2100      	movs	r1, #0
 800122a:	4618      	mov	r0, r3
 800122c:	f006 fc32 	bl	8007a94 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001230:	1d3b      	adds	r3, r7, #4
 8001232:	2200      	movs	r2, #0
 8001234:	601a      	str	r2, [r3, #0]
 8001236:	605a      	str	r2, [r3, #4]
 8001238:	609a      	str	r2, [r3, #8]
 800123a:	60da      	str	r2, [r3, #12]
 800123c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800123e:	2302      	movs	r3, #2
 8001240:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001242:	2301      	movs	r3, #1
 8001244:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001246:	2310      	movs	r3, #16
 8001248:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800124a:	2300      	movs	r3, #0
 800124c:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800124e:	f107 0318 	add.w	r3, r7, #24
 8001252:	4618      	mov	r0, r3
 8001254:	f001 fcea 	bl	8002c2c <HAL_RCC_OscConfig>
 8001258:	4603      	mov	r3, r0
 800125a:	2b00      	cmp	r3, #0
 800125c:	d001      	beq.n	8001262 <SystemClock_Config+0x46>
  {
    Error_Handler();
 800125e:	f000 fb9f 	bl	80019a0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001262:	230f      	movs	r3, #15
 8001264:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001266:	2300      	movs	r3, #0
 8001268:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800126a:	2300      	movs	r3, #0
 800126c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800126e:	2300      	movs	r3, #0
 8001270:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001272:	2300      	movs	r3, #0
 8001274:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001276:	1d3b      	adds	r3, r7, #4
 8001278:	2100      	movs	r1, #0
 800127a:	4618      	mov	r0, r3
 800127c:	f001 ff58 	bl	8003130 <HAL_RCC_ClockConfig>
 8001280:	4603      	mov	r3, r0
 8001282:	2b00      	cmp	r3, #0
 8001284:	d001      	beq.n	800128a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8001286:	f000 fb8b 	bl	80019a0 <Error_Handler>
  }
}
 800128a:	bf00      	nop
 800128c:	3740      	adds	r7, #64	@ 0x40
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}
	...

08001294 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b092      	sub	sp, #72	@ 0x48
 8001298:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800129a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800129e:	2200      	movs	r2, #0
 80012a0:	601a      	str	r2, [r3, #0]
 80012a2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80012a4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80012a8:	2200      	movs	r2, #0
 80012aa:	601a      	str	r2, [r3, #0]
 80012ac:	605a      	str	r2, [r3, #4]
 80012ae:	609a      	str	r2, [r3, #8]
 80012b0:	60da      	str	r2, [r3, #12]
 80012b2:	611a      	str	r2, [r3, #16]
 80012b4:	615a      	str	r2, [r3, #20]
 80012b6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80012b8:	1d3b      	adds	r3, r7, #4
 80012ba:	2220      	movs	r2, #32
 80012bc:	2100      	movs	r1, #0
 80012be:	4618      	mov	r0, r3
 80012c0:	f006 fbe8 	bl	8007a94 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80012c4:	4b3f      	ldr	r3, [pc, #252]	@ (80013c4 <MX_TIM1_Init+0x130>)
 80012c6:	4a40      	ldr	r2, [pc, #256]	@ (80013c8 <MX_TIM1_Init+0x134>)
 80012c8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80012ca:	4b3e      	ldr	r3, [pc, #248]	@ (80013c4 <MX_TIM1_Init+0x130>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012d0:	4b3c      	ldr	r3, [pc, #240]	@ (80013c4 <MX_TIM1_Init+0x130>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80012d6:	4b3b      	ldr	r3, [pc, #236]	@ (80013c4 <MX_TIM1_Init+0x130>)
 80012d8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80012dc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012de:	4b39      	ldr	r3, [pc, #228]	@ (80013c4 <MX_TIM1_Init+0x130>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80012e4:	4b37      	ldr	r3, [pc, #220]	@ (80013c4 <MX_TIM1_Init+0x130>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012ea:	4b36      	ldr	r3, [pc, #216]	@ (80013c4 <MX_TIM1_Init+0x130>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80012f0:	4834      	ldr	r0, [pc, #208]	@ (80013c4 <MX_TIM1_Init+0x130>)
 80012f2:	f002 f8ab 	bl	800344c <HAL_TIM_PWM_Init>
 80012f6:	4603      	mov	r3, r0
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d001      	beq.n	8001300 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 80012fc:	f000 fb50 	bl	80019a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001300:	2300      	movs	r3, #0
 8001302:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001304:	2300      	movs	r3, #0
 8001306:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001308:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800130c:	4619      	mov	r1, r3
 800130e:	482d      	ldr	r0, [pc, #180]	@ (80013c4 <MX_TIM1_Init+0x130>)
 8001310:	f002 fee8 	bl	80040e4 <HAL_TIMEx_MasterConfigSynchronization>
 8001314:	4603      	mov	r3, r0
 8001316:	2b00      	cmp	r3, #0
 8001318:	d001      	beq.n	800131e <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 800131a:	f000 fb41 	bl	80019a0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800131e:	2360      	movs	r3, #96	@ 0x60
 8001320:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8001322:	2300      	movs	r3, #0
 8001324:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001326:	2300      	movs	r3, #0
 8001328:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800132a:	2300      	movs	r3, #0
 800132c:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800132e:	2300      	movs	r3, #0
 8001330:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001332:	2300      	movs	r3, #0
 8001334:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001336:	2300      	movs	r3, #0
 8001338:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800133a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800133e:	2200      	movs	r2, #0
 8001340:	4619      	mov	r1, r3
 8001342:	4820      	ldr	r0, [pc, #128]	@ (80013c4 <MX_TIM1_Init+0x130>)
 8001344:	f002 fac8 	bl	80038d8 <HAL_TIM_PWM_ConfigChannel>
 8001348:	4603      	mov	r3, r0
 800134a:	2b00      	cmp	r3, #0
 800134c:	d001      	beq.n	8001352 <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 800134e:	f000 fb27 	bl	80019a0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001352:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001356:	2204      	movs	r2, #4
 8001358:	4619      	mov	r1, r3
 800135a:	481a      	ldr	r0, [pc, #104]	@ (80013c4 <MX_TIM1_Init+0x130>)
 800135c:	f002 fabc 	bl	80038d8 <HAL_TIM_PWM_ConfigChannel>
 8001360:	4603      	mov	r3, r0
 8001362:	2b00      	cmp	r3, #0
 8001364:	d001      	beq.n	800136a <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 8001366:	f000 fb1b 	bl	80019a0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800136a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800136e:	2208      	movs	r2, #8
 8001370:	4619      	mov	r1, r3
 8001372:	4814      	ldr	r0, [pc, #80]	@ (80013c4 <MX_TIM1_Init+0x130>)
 8001374:	f002 fab0 	bl	80038d8 <HAL_TIM_PWM_ConfigChannel>
 8001378:	4603      	mov	r3, r0
 800137a:	2b00      	cmp	r3, #0
 800137c:	d001      	beq.n	8001382 <MX_TIM1_Init+0xee>
  {
    Error_Handler();
 800137e:	f000 fb0f 	bl	80019a0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001382:	2300      	movs	r3, #0
 8001384:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001386:	2300      	movs	r3, #0
 8001388:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800138a:	2300      	movs	r3, #0
 800138c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 150;
 800138e:	2396      	movs	r3, #150	@ 0x96
 8001390:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001392:	2300      	movs	r3, #0
 8001394:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001396:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800139a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800139c:	2300      	movs	r3, #0
 800139e:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80013a0:	1d3b      	adds	r3, r7, #4
 80013a2:	4619      	mov	r1, r3
 80013a4:	4807      	ldr	r0, [pc, #28]	@ (80013c4 <MX_TIM1_Init+0x130>)
 80013a6:	f002 fefb 	bl	80041a0 <HAL_TIMEx_ConfigBreakDeadTime>
 80013aa:	4603      	mov	r3, r0
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d001      	beq.n	80013b4 <MX_TIM1_Init+0x120>
  {
    Error_Handler();
 80013b0:	f000 faf6 	bl	80019a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80013b4:	4803      	ldr	r0, [pc, #12]	@ (80013c4 <MX_TIM1_Init+0x130>)
 80013b6:	f000 fb57 	bl	8001a68 <HAL_TIM_MspPostInit>

}
 80013ba:	bf00      	nop
 80013bc:	3748      	adds	r7, #72	@ 0x48
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	bf00      	nop
 80013c4:	200002d8 	.word	0x200002d8
 80013c8:	40012c00 	.word	0x40012c00

080013cc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80013d0:	4b11      	ldr	r3, [pc, #68]	@ (8001418 <MX_USART3_UART_Init+0x4c>)
 80013d2:	4a12      	ldr	r2, [pc, #72]	@ (800141c <MX_USART3_UART_Init+0x50>)
 80013d4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80013d6:	4b10      	ldr	r3, [pc, #64]	@ (8001418 <MX_USART3_UART_Init+0x4c>)
 80013d8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80013dc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80013de:	4b0e      	ldr	r3, [pc, #56]	@ (8001418 <MX_USART3_UART_Init+0x4c>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80013e4:	4b0c      	ldr	r3, [pc, #48]	@ (8001418 <MX_USART3_UART_Init+0x4c>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80013ea:	4b0b      	ldr	r3, [pc, #44]	@ (8001418 <MX_USART3_UART_Init+0x4c>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80013f0:	4b09      	ldr	r3, [pc, #36]	@ (8001418 <MX_USART3_UART_Init+0x4c>)
 80013f2:	220c      	movs	r2, #12
 80013f4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013f6:	4b08      	ldr	r3, [pc, #32]	@ (8001418 <MX_USART3_UART_Init+0x4c>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80013fc:	4b06      	ldr	r3, [pc, #24]	@ (8001418 <MX_USART3_UART_Init+0x4c>)
 80013fe:	2200      	movs	r2, #0
 8001400:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001402:	4805      	ldr	r0, [pc, #20]	@ (8001418 <MX_USART3_UART_Init+0x4c>)
 8001404:	f002 ff53 	bl	80042ae <HAL_UART_Init>
 8001408:	4603      	mov	r3, r0
 800140a:	2b00      	cmp	r3, #0
 800140c:	d001      	beq.n	8001412 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800140e:	f000 fac7 	bl	80019a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001412:	bf00      	nop
 8001414:	bd80      	pop	{r7, pc}
 8001416:	bf00      	nop
 8001418:	20000320 	.word	0x20000320
 800141c:	40004800 	.word	0x40004800

08001420 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b082      	sub	sp, #8
 8001424:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001426:	4b0c      	ldr	r3, [pc, #48]	@ (8001458 <MX_DMA_Init+0x38>)
 8001428:	695b      	ldr	r3, [r3, #20]
 800142a:	4a0b      	ldr	r2, [pc, #44]	@ (8001458 <MX_DMA_Init+0x38>)
 800142c:	f043 0301 	orr.w	r3, r3, #1
 8001430:	6153      	str	r3, [r2, #20]
 8001432:	4b09      	ldr	r3, [pc, #36]	@ (8001458 <MX_DMA_Init+0x38>)
 8001434:	695b      	ldr	r3, [r3, #20]
 8001436:	f003 0301 	and.w	r3, r3, #1
 800143a:	607b      	str	r3, [r7, #4]
 800143c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 5, 0);
 800143e:	2200      	movs	r2, #0
 8001440:	2105      	movs	r1, #5
 8001442:	200d      	movs	r0, #13
 8001444:	f000 ff65 	bl	8002312 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8001448:	200d      	movs	r0, #13
 800144a:	f000 ff7e 	bl	800234a <HAL_NVIC_EnableIRQ>

}
 800144e:	bf00      	nop
 8001450:	3708      	adds	r7, #8
 8001452:	46bd      	mov	sp, r7
 8001454:	bd80      	pop	{r7, pc}
 8001456:	bf00      	nop
 8001458:	40021000 	.word	0x40021000

0800145c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b088      	sub	sp, #32
 8001460:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001462:	f107 0310 	add.w	r3, r7, #16
 8001466:	2200      	movs	r2, #0
 8001468:	601a      	str	r2, [r3, #0]
 800146a:	605a      	str	r2, [r3, #4]
 800146c:	609a      	str	r2, [r3, #8]
 800146e:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001470:	4b2f      	ldr	r3, [pc, #188]	@ (8001530 <MX_GPIO_Init+0xd4>)
 8001472:	699b      	ldr	r3, [r3, #24]
 8001474:	4a2e      	ldr	r2, [pc, #184]	@ (8001530 <MX_GPIO_Init+0xd4>)
 8001476:	f043 0310 	orr.w	r3, r3, #16
 800147a:	6193      	str	r3, [r2, #24]
 800147c:	4b2c      	ldr	r3, [pc, #176]	@ (8001530 <MX_GPIO_Init+0xd4>)
 800147e:	699b      	ldr	r3, [r3, #24]
 8001480:	f003 0310 	and.w	r3, r3, #16
 8001484:	60fb      	str	r3, [r7, #12]
 8001486:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001488:	4b29      	ldr	r3, [pc, #164]	@ (8001530 <MX_GPIO_Init+0xd4>)
 800148a:	699b      	ldr	r3, [r3, #24]
 800148c:	4a28      	ldr	r2, [pc, #160]	@ (8001530 <MX_GPIO_Init+0xd4>)
 800148e:	f043 0304 	orr.w	r3, r3, #4
 8001492:	6193      	str	r3, [r2, #24]
 8001494:	4b26      	ldr	r3, [pc, #152]	@ (8001530 <MX_GPIO_Init+0xd4>)
 8001496:	699b      	ldr	r3, [r3, #24]
 8001498:	f003 0304 	and.w	r3, r3, #4
 800149c:	60bb      	str	r3, [r7, #8]
 800149e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014a0:	4b23      	ldr	r3, [pc, #140]	@ (8001530 <MX_GPIO_Init+0xd4>)
 80014a2:	699b      	ldr	r3, [r3, #24]
 80014a4:	4a22      	ldr	r2, [pc, #136]	@ (8001530 <MX_GPIO_Init+0xd4>)
 80014a6:	f043 0308 	orr.w	r3, r3, #8
 80014aa:	6193      	str	r3, [r2, #24]
 80014ac:	4b20      	ldr	r3, [pc, #128]	@ (8001530 <MX_GPIO_Init+0xd4>)
 80014ae:	699b      	ldr	r3, [r3, #24]
 80014b0:	f003 0308 	and.w	r3, r3, #8
 80014b4:	607b      	str	r3, [r7, #4]
 80014b6:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_RESET);
 80014b8:	2200      	movs	r2, #0
 80014ba:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80014be:	481d      	ldr	r0, [pc, #116]	@ (8001534 <MX_GPIO_Init+0xd8>)
 80014c0:	f001 fb9b 	bl	8002bfa <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 80014c4:	2200      	movs	r2, #0
 80014c6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80014ca:	481b      	ldr	r0, [pc, #108]	@ (8001538 <MX_GPIO_Init+0xdc>)
 80014cc:	f001 fb95 	bl	8002bfa <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 80014d0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80014d4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014d6:	2300      	movs	r3, #0
 80014d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014da:	2300      	movs	r3, #0
 80014dc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014de:	f107 0310 	add.w	r3, r7, #16
 80014e2:	4619      	mov	r1, r3
 80014e4:	4813      	ldr	r0, [pc, #76]	@ (8001534 <MX_GPIO_Init+0xd8>)
 80014e6:	f001 f9ed 	bl	80028c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 80014ea:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80014ee:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014f0:	2301      	movs	r3, #1
 80014f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f4:	2300      	movs	r3, #0
 80014f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014f8:	2302      	movs	r3, #2
 80014fa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014fc:	f107 0310 	add.w	r3, r7, #16
 8001500:	4619      	mov	r1, r3
 8001502:	480c      	ldr	r0, [pc, #48]	@ (8001534 <MX_GPIO_Init+0xd8>)
 8001504:	f001 f9de 	bl	80028c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001508:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800150c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800150e:	2301      	movs	r3, #1
 8001510:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001512:	2300      	movs	r3, #0
 8001514:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001516:	2302      	movs	r3, #2
 8001518:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800151a:	f107 0310 	add.w	r3, r7, #16
 800151e:	4619      	mov	r1, r3
 8001520:	4805      	ldr	r0, [pc, #20]	@ (8001538 <MX_GPIO_Init+0xdc>)
 8001522:	f001 f9cf 	bl	80028c4 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001526:	bf00      	nop
 8001528:	3720      	adds	r7, #32
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	40021000 	.word	0x40021000
 8001534:	40011000 	.word	0x40011000
 8001538:	40010800 	.word	0x40010800

0800153c <invCommand>:

/* USER CODE BEGIN 4 */
void invCommand(uint8_t sw1, uint8_t amplitude1, uint8_t frequency1) {
 800153c:	b480      	push	{r7}
 800153e:	b083      	sub	sp, #12
 8001540:	af00      	add	r7, sp, #0
 8001542:	4603      	mov	r3, r0
 8001544:	71fb      	strb	r3, [r7, #7]
 8001546:	460b      	mov	r3, r1
 8001548:	71bb      	strb	r3, [r7, #6]
 800154a:	4613      	mov	r3, r2
 800154c:	717b      	strb	r3, [r7, #5]

	sw = sw1;
 800154e:	4a0a      	ldr	r2, [pc, #40]	@ (8001578 <invCommand+0x3c>)
 8001550:	79fb      	ldrb	r3, [r7, #7]
 8001552:	7013      	strb	r3, [r2, #0]
	amplitude = amplitude1;
 8001554:	4a09      	ldr	r2, [pc, #36]	@ (800157c <invCommand+0x40>)
 8001556:	79bb      	ldrb	r3, [r7, #6]
 8001558:	7013      	strb	r3, [r2, #0]
	frequency = (frequency1 * 5) + 5;
 800155a:	797b      	ldrb	r3, [r7, #5]
 800155c:	3301      	adds	r3, #1
 800155e:	b2db      	uxtb	r3, r3
 8001560:	461a      	mov	r2, r3
 8001562:	0092      	lsls	r2, r2, #2
 8001564:	4413      	add	r3, r2
 8001566:	b2da      	uxtb	r2, r3
 8001568:	4b05      	ldr	r3, [pc, #20]	@ (8001580 <invCommand+0x44>)
 800156a:	701a      	strb	r2, [r3, #0]

}
 800156c:	bf00      	nop
 800156e:	370c      	adds	r7, #12
 8001570:	46bd      	mov	sp, r7
 8001572:	bc80      	pop	{r7}
 8001574:	4770      	bx	lr
 8001576:	bf00      	nop
 8001578:	200003dd 	.word	0x200003dd
 800157c:	200003df 	.word	0x200003df
 8001580:	200003de 	.word	0x200003de
 8001584:	00000000 	.word	0x00000000

08001588 <startSPWM>:
void startSPWM(float switchingFreq, float sinFreq, float amp, bool reversed) { //amp 0 to 1 and sinfrq > 0.01 to 10000 and switchingfreq from 100+
 8001588:	b5b0      	push	{r4, r5, r7, lr}
 800158a:	b086      	sub	sp, #24
 800158c:	af00      	add	r7, sp, #0
 800158e:	60f8      	str	r0, [r7, #12]
 8001590:	60b9      	str	r1, [r7, #8]
 8001592:	607a      	str	r2, [r7, #4]
 8001594:	70fb      	strb	r3, [r7, #3]
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);//max switching freq to sinfreq ratio is 25000
 8001596:	2100      	movs	r1, #0
 8001598:	48ab      	ldr	r0, [pc, #684]	@ (8001848 <startSPWM+0x2c0>)
 800159a:	f002 f849 	bl	8003630 <HAL_TIM_PWM_Stop>
	HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_1);
 800159e:	2100      	movs	r1, #0
 80015a0:	48a9      	ldr	r0, [pc, #676]	@ (8001848 <startSPWM+0x2c0>)
 80015a2:	f002 fd41 	bl	8004028 <HAL_TIMEx_PWMN_Stop>
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 80015a6:	2104      	movs	r1, #4
 80015a8:	48a7      	ldr	r0, [pc, #668]	@ (8001848 <startSPWM+0x2c0>)
 80015aa:	f002 f841 	bl	8003630 <HAL_TIM_PWM_Stop>
	HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_2);
 80015ae:	2104      	movs	r1, #4
 80015b0:	48a5      	ldr	r0, [pc, #660]	@ (8001848 <startSPWM+0x2c0>)
 80015b2:	f002 fd39 	bl	8004028 <HAL_TIMEx_PWMN_Stop>
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_3);
 80015b6:	2108      	movs	r1, #8
 80015b8:	48a3      	ldr	r0, [pc, #652]	@ (8001848 <startSPWM+0x2c0>)
 80015ba:	f002 f839 	bl	8003630 <HAL_TIM_PWM_Stop>
	HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_3);
 80015be:	2108      	movs	r1, #8
 80015c0:	48a1      	ldr	r0, [pc, #644]	@ (8001848 <startSPWM+0x2c0>)
 80015c2:	f002 fd31 	bl	8004028 <HAL_TIMEx_PWMN_Stop>
	__HAL_TIM_DISABLE_IT(&htim1, TIM_IT_UPDATE);
 80015c6:	4ba0      	ldr	r3, [pc, #640]	@ (8001848 <startSPWM+0x2c0>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	68da      	ldr	r2, [r3, #12]
 80015cc:	4b9e      	ldr	r3, [pc, #632]	@ (8001848 <startSPWM+0x2c0>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f022 0201 	bic.w	r2, r2, #1
 80015d4:	60da      	str	r2, [r3, #12]
	directionReversed = reversed;
 80015d6:	4a9d      	ldr	r2, [pc, #628]	@ (800184c <startSPWM+0x2c4>)
 80015d8:	78fb      	ldrb	r3, [r7, #3]
 80015da:	7013      	strb	r3, [r2, #0]

	if (sinFreq < 0.1) {
 80015dc:	68b8      	ldr	r0, [r7, #8]
 80015de:	f7fe ff1b 	bl	8000418 <__aeabi_f2d>
 80015e2:	a391      	add	r3, pc, #580	@ (adr r3, 8001828 <startSPWM+0x2a0>)
 80015e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015e8:	f7ff f9e0 	bl	80009ac <__aeabi_dcmplt>
 80015ec:	4603      	mov	r3, r0
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d02a      	beq.n	8001648 <startSPWM+0xc0>
		TIM1-> PSC = (0.4 / sinFreq) - 1.0;
 80015f2:	68b8      	ldr	r0, [r7, #8]
 80015f4:	f7fe ff10 	bl	8000418 <__aeabi_f2d>
 80015f8:	4602      	mov	r2, r0
 80015fa:	460b      	mov	r3, r1
 80015fc:	a18c      	add	r1, pc, #560	@ (adr r1, 8001830 <startSPWM+0x2a8>)
 80015fe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001602:	f7ff f88b 	bl	800071c <__aeabi_ddiv>
 8001606:	4602      	mov	r2, r0
 8001608:	460b      	mov	r3, r1
 800160a:	4610      	mov	r0, r2
 800160c:	4619      	mov	r1, r3
 800160e:	f04f 0200 	mov.w	r2, #0
 8001612:	4b8f      	ldr	r3, [pc, #572]	@ (8001850 <startSPWM+0x2c8>)
 8001614:	f7fe fda0 	bl	8000158 <__aeabi_dsub>
 8001618:	4602      	mov	r2, r0
 800161a:	460b      	mov	r3, r1
 800161c:	4c8d      	ldr	r4, [pc, #564]	@ (8001854 <startSPWM+0x2cc>)
 800161e:	4610      	mov	r0, r2
 8001620:	4619      	mov	r1, r3
 8001622:	f7ff fa13 	bl	8000a4c <__aeabi_d2uiz>
 8001626:	4603      	mov	r3, r0
 8001628:	62a3      	str	r3, [r4, #40]	@ 0x28
		sinFreq = 0.4;
 800162a:	4b8b      	ldr	r3, [pc, #556]	@ (8001858 <startSPWM+0x2d0>)
 800162c:	60bb      	str	r3, [r7, #8]
		switchingFreq *= TIM1->PSC;
 800162e:	4b89      	ldr	r3, [pc, #548]	@ (8001854 <startSPWM+0x2cc>)
 8001630:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001632:	4618      	mov	r0, r3
 8001634:	f7ff fb30 	bl	8000c98 <__aeabi_ui2f>
 8001638:	4603      	mov	r3, r0
 800163a:	4619      	mov	r1, r3
 800163c:	68f8      	ldr	r0, [r7, #12]
 800163e:	f7ff fb83 	bl	8000d48 <__aeabi_fmul>
 8001642:	4603      	mov	r3, r0
 8001644:	60fb      	str	r3, [r7, #12]
 8001646:	e002      	b.n	800164e <startSPWM+0xc6>

	}
	else {
		TIM1-> PSC = 0;
 8001648:	4b82      	ldr	r3, [pc, #520]	@ (8001854 <startSPWM+0x2cc>)
 800164a:	2200      	movs	r2, #0
 800164c:	629a      	str	r2, [r3, #40]	@ 0x28
	}
	samples = switchingFreq/sinFreq;
 800164e:	68b9      	ldr	r1, [r7, #8]
 8001650:	68f8      	ldr	r0, [r7, #12]
 8001652:	f7ff fc2d 	bl	8000eb0 <__aeabi_fdiv>
 8001656:	4603      	mov	r3, r0
 8001658:	4618      	mov	r0, r3
 800165a:	f7ff fcc5 	bl	8000fe8 <__aeabi_f2uiz>
 800165e:	4603      	mov	r3, r0
 8001660:	b29a      	uxth	r2, r3
 8001662:	4b7e      	ldr	r3, [pc, #504]	@ (800185c <startSPWM+0x2d4>)
 8001664:	801a      	strh	r2, [r3, #0]
	while (samples > 25000) {
 8001666:	e012      	b.n	800168e <startSPWM+0x106>
		switchingFreq-=1;
 8001668:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 800166c:	68f8      	ldr	r0, [r7, #12]
 800166e:	f7ff fa61 	bl	8000b34 <__aeabi_fsub>
 8001672:	4603      	mov	r3, r0
 8001674:	60fb      	str	r3, [r7, #12]
		samples = switchingFreq/sinFreq;
 8001676:	68b9      	ldr	r1, [r7, #8]
 8001678:	68f8      	ldr	r0, [r7, #12]
 800167a:	f7ff fc19 	bl	8000eb0 <__aeabi_fdiv>
 800167e:	4603      	mov	r3, r0
 8001680:	4618      	mov	r0, r3
 8001682:	f7ff fcb1 	bl	8000fe8 <__aeabi_f2uiz>
 8001686:	4603      	mov	r3, r0
 8001688:	b29a      	uxth	r2, r3
 800168a:	4b74      	ldr	r3, [pc, #464]	@ (800185c <startSPWM+0x2d4>)
 800168c:	801a      	strh	r2, [r3, #0]
	while (samples > 25000) {
 800168e:	4b73      	ldr	r3, [pc, #460]	@ (800185c <startSPWM+0x2d4>)
 8001690:	881b      	ldrh	r3, [r3, #0]
 8001692:	f246 12a8 	movw	r2, #25000	@ 0x61a8
 8001696:	4293      	cmp	r3, r2
 8001698:	d8e6      	bhi.n	8001668 <startSPWM+0xe0>
	}
	TIM1->ARR = HAL_RCC_GetPCLK2Freq() / (samples * sinFreq);
 800169a:	f001 fea5 	bl	80033e8 <HAL_RCC_GetPCLK2Freq>
 800169e:	4603      	mov	r3, r0
 80016a0:	4618      	mov	r0, r3
 80016a2:	f7ff faf9 	bl	8000c98 <__aeabi_ui2f>
 80016a6:	4604      	mov	r4, r0
 80016a8:	4b6c      	ldr	r3, [pc, #432]	@ (800185c <startSPWM+0x2d4>)
 80016aa:	881b      	ldrh	r3, [r3, #0]
 80016ac:	4618      	mov	r0, r3
 80016ae:	f7ff faf7 	bl	8000ca0 <__aeabi_i2f>
 80016b2:	4603      	mov	r3, r0
 80016b4:	68b9      	ldr	r1, [r7, #8]
 80016b6:	4618      	mov	r0, r3
 80016b8:	f7ff fb46 	bl	8000d48 <__aeabi_fmul>
 80016bc:	4603      	mov	r3, r0
 80016be:	4619      	mov	r1, r3
 80016c0:	4620      	mov	r0, r4
 80016c2:	f7ff fbf5 	bl	8000eb0 <__aeabi_fdiv>
 80016c6:	4603      	mov	r3, r0
 80016c8:	4c62      	ldr	r4, [pc, #392]	@ (8001854 <startSPWM+0x2cc>)
 80016ca:	4618      	mov	r0, r3
 80016cc:	f7ff fc8c 	bl	8000fe8 <__aeabi_f2uiz>
 80016d0:	4603      	mov	r3, r0
 80016d2:	62e3      	str	r3, [r4, #44]	@ 0x2c
	samples /= 3;
 80016d4:	4b61      	ldr	r3, [pc, #388]	@ (800185c <startSPWM+0x2d4>)
 80016d6:	881b      	ldrh	r3, [r3, #0]
 80016d8:	4a61      	ldr	r2, [pc, #388]	@ (8001860 <startSPWM+0x2d8>)
 80016da:	fba2 2303 	umull	r2, r3, r2, r3
 80016de:	085b      	lsrs	r3, r3, #1
 80016e0:	b29a      	uxth	r2, r3
 80016e2:	4b5e      	ldr	r3, [pc, #376]	@ (800185c <startSPWM+0x2d4>)
 80016e4:	801a      	strh	r2, [r3, #0]
	amp *= 1;
	count = 0;
 80016e6:	4b5f      	ldr	r3, [pc, #380]	@ (8001864 <startSPWM+0x2dc>)
 80016e8:	2200      	movs	r2, #0
 80016ea:	801a      	strh	r2, [r3, #0]
	num1 = 0;
 80016ec:	4b5e      	ldr	r3, [pc, #376]	@ (8001868 <startSPWM+0x2e0>)
 80016ee:	2200      	movs	r2, #0
 80016f0:	801a      	strh	r2, [r3, #0]
	free(lookUp);
 80016f2:	4b5e      	ldr	r3, [pc, #376]	@ (800186c <startSPWM+0x2e4>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	4618      	mov	r0, r3
 80016f8:	f006 f892 	bl	8007820 <free>
	lookUp = (uint16_t *)malloc(samples * sizeof(samples));
 80016fc:	4b57      	ldr	r3, [pc, #348]	@ (800185c <startSPWM+0x2d4>)
 80016fe:	881b      	ldrh	r3, [r3, #0]
 8001700:	005b      	lsls	r3, r3, #1
 8001702:	4618      	mov	r0, r3
 8001704:	f006 f884 	bl	8007810 <malloc>
 8001708:	4603      	mov	r3, r0
 800170a:	461a      	mov	r2, r3
 800170c:	4b57      	ldr	r3, [pc, #348]	@ (800186c <startSPWM+0x2e4>)
 800170e:	601a      	str	r2, [r3, #0]
	for (uint16_t i = 0; i < samples; i++) {
 8001710:	2300      	movs	r3, #0
 8001712:	82fb      	strh	r3, [r7, #22]
 8001714:	e05f      	b.n	80017d6 <startSPWM+0x24e>
		lookUp[i] = (sin(2 * 3.14 * ((double)i/(double)samples)) * (TIM1->ARR / 2.05)) * amp  + (TIM1->ARR / 2);
 8001716:	8afb      	ldrh	r3, [r7, #22]
 8001718:	4618      	mov	r0, r3
 800171a:	f7fe fe5b 	bl	80003d4 <__aeabi_ui2d>
 800171e:	4604      	mov	r4, r0
 8001720:	460d      	mov	r5, r1
 8001722:	4b4e      	ldr	r3, [pc, #312]	@ (800185c <startSPWM+0x2d4>)
 8001724:	881b      	ldrh	r3, [r3, #0]
 8001726:	4618      	mov	r0, r3
 8001728:	f7fe fe54 	bl	80003d4 <__aeabi_ui2d>
 800172c:	4602      	mov	r2, r0
 800172e:	460b      	mov	r3, r1
 8001730:	4620      	mov	r0, r4
 8001732:	4629      	mov	r1, r5
 8001734:	f7fe fff2 	bl	800071c <__aeabi_ddiv>
 8001738:	4602      	mov	r2, r0
 800173a:	460b      	mov	r3, r1
 800173c:	4610      	mov	r0, r2
 800173e:	4619      	mov	r1, r3
 8001740:	a33d      	add	r3, pc, #244	@ (adr r3, 8001838 <startSPWM+0x2b0>)
 8001742:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001746:	f7fe febf 	bl	80004c8 <__aeabi_dmul>
 800174a:	4602      	mov	r2, r0
 800174c:	460b      	mov	r3, r1
 800174e:	4610      	mov	r0, r2
 8001750:	4619      	mov	r1, r3
 8001752:	f006 fa39 	bl	8007bc8 <sin>
 8001756:	4604      	mov	r4, r0
 8001758:	460d      	mov	r5, r1
 800175a:	4b3e      	ldr	r3, [pc, #248]	@ (8001854 <startSPWM+0x2cc>)
 800175c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800175e:	4618      	mov	r0, r3
 8001760:	f7fe fe38 	bl	80003d4 <__aeabi_ui2d>
 8001764:	a336      	add	r3, pc, #216	@ (adr r3, 8001840 <startSPWM+0x2b8>)
 8001766:	e9d3 2300 	ldrd	r2, r3, [r3]
 800176a:	f7fe ffd7 	bl	800071c <__aeabi_ddiv>
 800176e:	4602      	mov	r2, r0
 8001770:	460b      	mov	r3, r1
 8001772:	4620      	mov	r0, r4
 8001774:	4629      	mov	r1, r5
 8001776:	f7fe fea7 	bl	80004c8 <__aeabi_dmul>
 800177a:	4602      	mov	r2, r0
 800177c:	460b      	mov	r3, r1
 800177e:	4614      	mov	r4, r2
 8001780:	461d      	mov	r5, r3
 8001782:	6878      	ldr	r0, [r7, #4]
 8001784:	f7fe fe48 	bl	8000418 <__aeabi_f2d>
 8001788:	4602      	mov	r2, r0
 800178a:	460b      	mov	r3, r1
 800178c:	4620      	mov	r0, r4
 800178e:	4629      	mov	r1, r5
 8001790:	f7fe fe9a 	bl	80004c8 <__aeabi_dmul>
 8001794:	4602      	mov	r2, r0
 8001796:	460b      	mov	r3, r1
 8001798:	4614      	mov	r4, r2
 800179a:	461d      	mov	r5, r3
 800179c:	4b2d      	ldr	r3, [pc, #180]	@ (8001854 <startSPWM+0x2cc>)
 800179e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017a0:	085b      	lsrs	r3, r3, #1
 80017a2:	4618      	mov	r0, r3
 80017a4:	f7fe fe16 	bl	80003d4 <__aeabi_ui2d>
 80017a8:	4602      	mov	r2, r0
 80017aa:	460b      	mov	r3, r1
 80017ac:	4620      	mov	r0, r4
 80017ae:	4629      	mov	r1, r5
 80017b0:	f7fe fcd4 	bl	800015c <__adddf3>
 80017b4:	4602      	mov	r2, r0
 80017b6:	460b      	mov	r3, r1
 80017b8:	4610      	mov	r0, r2
 80017ba:	4619      	mov	r1, r3
 80017bc:	4b2b      	ldr	r3, [pc, #172]	@ (800186c <startSPWM+0x2e4>)
 80017be:	681a      	ldr	r2, [r3, #0]
 80017c0:	8afb      	ldrh	r3, [r7, #22]
 80017c2:	005b      	lsls	r3, r3, #1
 80017c4:	18d4      	adds	r4, r2, r3
 80017c6:	f7ff f941 	bl	8000a4c <__aeabi_d2uiz>
 80017ca:	4603      	mov	r3, r0
 80017cc:	b29b      	uxth	r3, r3
 80017ce:	8023      	strh	r3, [r4, #0]
	for (uint16_t i = 0; i < samples; i++) {
 80017d0:	8afb      	ldrh	r3, [r7, #22]
 80017d2:	3301      	adds	r3, #1
 80017d4:	82fb      	strh	r3, [r7, #22]
 80017d6:	4b21      	ldr	r3, [pc, #132]	@ (800185c <startSPWM+0x2d4>)
 80017d8:	881b      	ldrh	r3, [r3, #0]
 80017da:	8afa      	ldrh	r2, [r7, #22]
 80017dc:	429a      	cmp	r2, r3
 80017de:	d39a      	bcc.n	8001716 <startSPWM+0x18e>
	}
	  __HAL_TIM_ENABLE_IT(&htim1, TIM_IT_UPDATE );
 80017e0:	4b19      	ldr	r3, [pc, #100]	@ (8001848 <startSPWM+0x2c0>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	68da      	ldr	r2, [r3, #12]
 80017e6:	4b18      	ldr	r3, [pc, #96]	@ (8001848 <startSPWM+0x2c0>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f042 0201 	orr.w	r2, r2, #1
 80017ee:	60da      	str	r2, [r3, #12]
	  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80017f0:	2100      	movs	r1, #0
 80017f2:	4815      	ldr	r0, [pc, #84]	@ (8001848 <startSPWM+0x2c0>)
 80017f4:	f001 fe7a 	bl	80034ec <HAL_TIM_PWM_Start>
	  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 80017f8:	2100      	movs	r1, #0
 80017fa:	4813      	ldr	r0, [pc, #76]	@ (8001848 <startSPWM+0x2c0>)
 80017fc:	f002 fb76 	bl	8003eec <HAL_TIMEx_PWMN_Start>
	  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8001800:	2104      	movs	r1, #4
 8001802:	4811      	ldr	r0, [pc, #68]	@ (8001848 <startSPWM+0x2c0>)
 8001804:	f001 fe72 	bl	80034ec <HAL_TIM_PWM_Start>
	  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 8001808:	2104      	movs	r1, #4
 800180a:	480f      	ldr	r0, [pc, #60]	@ (8001848 <startSPWM+0x2c0>)
 800180c:	f002 fb6e 	bl	8003eec <HAL_TIMEx_PWMN_Start>
	  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8001810:	2108      	movs	r1, #8
 8001812:	480d      	ldr	r0, [pc, #52]	@ (8001848 <startSPWM+0x2c0>)
 8001814:	f001 fe6a 	bl	80034ec <HAL_TIM_PWM_Start>
	  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3);
 8001818:	2108      	movs	r1, #8
 800181a:	480b      	ldr	r0, [pc, #44]	@ (8001848 <startSPWM+0x2c0>)
 800181c:	f002 fb66 	bl	8003eec <HAL_TIMEx_PWMN_Start>
}
 8001820:	bf00      	nop
 8001822:	3718      	adds	r7, #24
 8001824:	46bd      	mov	sp, r7
 8001826:	bdb0      	pop	{r4, r5, r7, pc}
 8001828:	9999999a 	.word	0x9999999a
 800182c:	3fb99999 	.word	0x3fb99999
 8001830:	9999999a 	.word	0x9999999a
 8001834:	3fd99999 	.word	0x3fd99999
 8001838:	51eb851f 	.word	0x51eb851f
 800183c:	40191eb8 	.word	0x40191eb8
 8001840:	66666666 	.word	0x66666666
 8001844:	40006666 	.word	0x40006666
 8001848:	200002d8 	.word	0x200002d8
 800184c:	200003dc 	.word	0x200003dc
 8001850:	3ff00000 	.word	0x3ff00000
 8001854:	40012c00 	.word	0x40012c00
 8001858:	3ecccccd 	.word	0x3ecccccd
 800185c:	200003c8 	.word	0x200003c8
 8001860:	aaaaaaab 	.word	0xaaaaaaab
 8001864:	200003d6 	.word	0x200003d6
 8001868:	200003d0 	.word	0x200003d0
 800186c:	200003cc 	.word	0x200003cc

08001870 <stopSPWM>:
void stopSPWM() {
 8001870:	b580      	push	{r7, lr}
 8001872:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 8001874:	2100      	movs	r1, #0
 8001876:	4810      	ldr	r0, [pc, #64]	@ (80018b8 <stopSPWM+0x48>)
 8001878:	f001 feda 	bl	8003630 <HAL_TIM_PWM_Stop>
	HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_1);
 800187c:	2100      	movs	r1, #0
 800187e:	480e      	ldr	r0, [pc, #56]	@ (80018b8 <stopSPWM+0x48>)
 8001880:	f002 fbd2 	bl	8004028 <HAL_TIMEx_PWMN_Stop>
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 8001884:	2104      	movs	r1, #4
 8001886:	480c      	ldr	r0, [pc, #48]	@ (80018b8 <stopSPWM+0x48>)
 8001888:	f001 fed2 	bl	8003630 <HAL_TIM_PWM_Stop>
	HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_2);
 800188c:	2104      	movs	r1, #4
 800188e:	480a      	ldr	r0, [pc, #40]	@ (80018b8 <stopSPWM+0x48>)
 8001890:	f002 fbca 	bl	8004028 <HAL_TIMEx_PWMN_Stop>
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_3);
 8001894:	2108      	movs	r1, #8
 8001896:	4808      	ldr	r0, [pc, #32]	@ (80018b8 <stopSPWM+0x48>)
 8001898:	f001 feca 	bl	8003630 <HAL_TIM_PWM_Stop>
	HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_3);
 800189c:	2108      	movs	r1, #8
 800189e:	4806      	ldr	r0, [pc, #24]	@ (80018b8 <stopSPWM+0x48>)
 80018a0:	f002 fbc2 	bl	8004028 <HAL_TIMEx_PWMN_Stop>
	__HAL_TIM_DISABLE_IT(&htim1, TIM_IT_UPDATE);
 80018a4:	4b04      	ldr	r3, [pc, #16]	@ (80018b8 <stopSPWM+0x48>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	68da      	ldr	r2, [r3, #12]
 80018aa:	4b03      	ldr	r3, [pc, #12]	@ (80018b8 <stopSPWM+0x48>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f022 0201 	bic.w	r2, r2, #1
 80018b2:	60da      	str	r2, [r3, #12]
}
 80018b4:	bf00      	nop
 80018b6:	bd80      	pop	{r7, pc}
 80018b8:	200002d8 	.word	0x200002d8

080018bc <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b082      	sub	sp, #8
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  if(SYSTEM_STATE == 1){
 80018c4:	4b14      	ldr	r3, [pc, #80]	@ (8001918 <StartDefaultTask+0x5c>)
 80018c6:	781b      	ldrb	r3, [r3, #0]
 80018c8:	2b01      	cmp	r3, #1
 80018ca:	d120      	bne.n	800190e <StartDefaultTask+0x52>

	  	  		  txdata[0] = SYSTEM_STATE;
 80018cc:	4b12      	ldr	r3, [pc, #72]	@ (8001918 <StartDefaultTask+0x5c>)
 80018ce:	781a      	ldrb	r2, [r3, #0]
 80018d0:	4b12      	ldr	r3, [pc, #72]	@ (800191c <StartDefaultTask+0x60>)
 80018d2:	701a      	strb	r2, [r3, #0]
	  	  		  txdata[1] = ERROR_CODE;
 80018d4:	4b12      	ldr	r3, [pc, #72]	@ (8001920 <StartDefaultTask+0x64>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	b2da      	uxtb	r2, r3
 80018da:	4b10      	ldr	r3, [pc, #64]	@ (800191c <StartDefaultTask+0x60>)
 80018dc:	705a      	strb	r2, [r3, #1]
	  	  		  txdata[2] = temp1_arr[0];
 80018de:	4b11      	ldr	r3, [pc, #68]	@ (8001924 <StartDefaultTask+0x68>)
 80018e0:	781b      	ldrb	r3, [r3, #0]
 80018e2:	b2da      	uxtb	r2, r3
 80018e4:	4b0d      	ldr	r3, [pc, #52]	@ (800191c <StartDefaultTask+0x60>)
 80018e6:	709a      	strb	r2, [r3, #2]
	  	  		  txdata[3] = temp1_arr[1];
 80018e8:	4b0e      	ldr	r3, [pc, #56]	@ (8001924 <StartDefaultTask+0x68>)
 80018ea:	785b      	ldrb	r3, [r3, #1]
 80018ec:	b2da      	uxtb	r2, r3
 80018ee:	4b0b      	ldr	r3, [pc, #44]	@ (800191c <StartDefaultTask+0x60>)
 80018f0:	70da      	strb	r2, [r3, #3]

	  	  		osSemaphoreRelease(myBinarySem01Handle);
 80018f2:	4b0d      	ldr	r3, [pc, #52]	@ (8001928 <StartDefaultTask+0x6c>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	4618      	mov	r0, r3
 80018f8:	f003 fd34 	bl	8005364 <osSemaphoreRelease>

	  	  		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_SET);
 80018fc:	2201      	movs	r2, #1
 80018fe:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001902:	480a      	ldr	r0, [pc, #40]	@ (800192c <StartDefaultTask+0x70>)
 8001904:	f001 f979 	bl	8002bfa <HAL_GPIO_WritePin>
	  	  		  HAL_Delay(150);
 8001908:	2096      	movs	r0, #150	@ 0x96
 800190a:	f000 fc07 	bl	800211c <HAL_Delay>
	  	  	  }
    osDelay(1);
 800190e:	2001      	movs	r0, #1
 8001910:	f003 fc93 	bl	800523a <osDelay>
	  if(SYSTEM_STATE == 1){
 8001914:	e7d6      	b.n	80018c4 <StartDefaultTask+0x8>
 8001916:	bf00      	nop
 8001918:	200003c6 	.word	0x200003c6
 800191c:	200003c0 	.word	0x200003c0
 8001920:	20000000 	.word	0x20000000
 8001924:	200003c4 	.word	0x200003c4
 8001928:	200003b8 	.word	0x200003b8
 800192c:	40011000 	.word	0x40011000

08001930 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void const * argument)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b082      	sub	sp, #8
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for(;;)
  {
	  if (osSemaphoreWait(myBinarySem01Handle, osWaitForever) == osOK){
 8001938:	4b0a      	ldr	r3, [pc, #40]	@ (8001964 <StartTask02+0x34>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f04f 31ff 	mov.w	r1, #4294967295
 8001940:	4618      	mov	r0, r3
 8001942:	f003 fcc1 	bl	80052c8 <osSemaphoreWait>
 8001946:	4603      	mov	r3, r0
 8001948:	2b00      	cmp	r3, #0
 800194a:	d1f5      	bne.n	8001938 <StartTask02+0x8>
	  	  HAL_UART_Transmit_IT(&huart3, txdata, sizeof(txdata));
 800194c:	2204      	movs	r2, #4
 800194e:	4906      	ldr	r1, [pc, #24]	@ (8001968 <StartTask02+0x38>)
 8001950:	4806      	ldr	r0, [pc, #24]	@ (800196c <StartTask02+0x3c>)
 8001952:	f002 fcfc 	bl	800434e <HAL_UART_Transmit_IT>
	  	  k++;
 8001956:	4b06      	ldr	r3, [pc, #24]	@ (8001970 <StartTask02+0x40>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	3301      	adds	r3, #1
 800195c:	4a04      	ldr	r2, [pc, #16]	@ (8001970 <StartTask02+0x40>)
 800195e:	6013      	str	r3, [r2, #0]
	  if (osSemaphoreWait(myBinarySem01Handle, osWaitForever) == osOK){
 8001960:	e7ea      	b.n	8001938 <StartTask02+0x8>
 8001962:	bf00      	nop
 8001964:	200003b8 	.word	0x200003b8
 8001968:	200003c0 	.word	0x200003c0
 800196c:	20000320 	.word	0x20000320
 8001970:	200003d8 	.word	0x200003d8

08001974 <StartTask03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask03 */
void StartTask03(void const * argument)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b082      	sub	sp, #8
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask03 */
  /* Infinite loop */
  for(;;)
  {
	  if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_14)!= GPIO_PIN_SET){
 800197c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001980:	4806      	ldr	r0, [pc, #24]	@ (800199c <StartTask03+0x28>)
 8001982:	f001 f923 	bl	8002bcc <HAL_GPIO_ReadPin>
 8001986:	4603      	mov	r3, r0
 8001988:	2b01      	cmp	r3, #1
 800198a:	d002      	beq.n	8001992 <StartTask03+0x1e>
	  	 		  ERROR_FUNCTION(VCU_ERROR);
 800198c:	2004      	movs	r0, #4
 800198e:	f7ff fbb1 	bl	80010f4 <ERROR_FUNCTION>
	  	 	  }
	  HAL_Delay(100);
 8001992:	2064      	movs	r0, #100	@ 0x64
 8001994:	f000 fbc2 	bl	800211c <HAL_Delay>
	  if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_14)!= GPIO_PIN_SET){
 8001998:	e7f0      	b.n	800197c <StartTask03+0x8>
 800199a:	bf00      	nop
 800199c:	40011000 	.word	0x40011000

080019a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019a0:	b480      	push	{r7}
 80019a2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80019a4:	b672      	cpsid	i
}
 80019a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80019a8:	bf00      	nop
 80019aa:	e7fd      	b.n	80019a8 <Error_Handler+0x8>

080019ac <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b084      	sub	sp, #16
 80019b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80019b2:	4b18      	ldr	r3, [pc, #96]	@ (8001a14 <HAL_MspInit+0x68>)
 80019b4:	699b      	ldr	r3, [r3, #24]
 80019b6:	4a17      	ldr	r2, [pc, #92]	@ (8001a14 <HAL_MspInit+0x68>)
 80019b8:	f043 0301 	orr.w	r3, r3, #1
 80019bc:	6193      	str	r3, [r2, #24]
 80019be:	4b15      	ldr	r3, [pc, #84]	@ (8001a14 <HAL_MspInit+0x68>)
 80019c0:	699b      	ldr	r3, [r3, #24]
 80019c2:	f003 0301 	and.w	r3, r3, #1
 80019c6:	60bb      	str	r3, [r7, #8]
 80019c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019ca:	4b12      	ldr	r3, [pc, #72]	@ (8001a14 <HAL_MspInit+0x68>)
 80019cc:	69db      	ldr	r3, [r3, #28]
 80019ce:	4a11      	ldr	r2, [pc, #68]	@ (8001a14 <HAL_MspInit+0x68>)
 80019d0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80019d4:	61d3      	str	r3, [r2, #28]
 80019d6:	4b0f      	ldr	r3, [pc, #60]	@ (8001a14 <HAL_MspInit+0x68>)
 80019d8:	69db      	ldr	r3, [r3, #28]
 80019da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019de:	607b      	str	r3, [r7, #4]
 80019e0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80019e2:	2200      	movs	r2, #0
 80019e4:	210f      	movs	r1, #15
 80019e6:	f06f 0001 	mvn.w	r0, #1
 80019ea:	f000 fc92 	bl	8002312 <HAL_NVIC_SetPriority>

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 80019ee:	4b0a      	ldr	r3, [pc, #40]	@ (8001a18 <HAL_MspInit+0x6c>)
 80019f0:	685b      	ldr	r3, [r3, #4]
 80019f2:	60fb      	str	r3, [r7, #12]
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80019fa:	60fb      	str	r3, [r7, #12]
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001a02:	60fb      	str	r3, [r7, #12]
 8001a04:	4a04      	ldr	r2, [pc, #16]	@ (8001a18 <HAL_MspInit+0x6c>)
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a0a:	bf00      	nop
 8001a0c:	3710      	adds	r7, #16
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bd80      	pop	{r7, pc}
 8001a12:	bf00      	nop
 8001a14:	40021000 	.word	0x40021000
 8001a18:	40010000 	.word	0x40010000

08001a1c <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b084      	sub	sp, #16
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	4a0d      	ldr	r2, [pc, #52]	@ (8001a60 <HAL_TIM_PWM_MspInit+0x44>)
 8001a2a:	4293      	cmp	r3, r2
 8001a2c:	d113      	bne.n	8001a56 <HAL_TIM_PWM_MspInit+0x3a>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001a2e:	4b0d      	ldr	r3, [pc, #52]	@ (8001a64 <HAL_TIM_PWM_MspInit+0x48>)
 8001a30:	699b      	ldr	r3, [r3, #24]
 8001a32:	4a0c      	ldr	r2, [pc, #48]	@ (8001a64 <HAL_TIM_PWM_MspInit+0x48>)
 8001a34:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001a38:	6193      	str	r3, [r2, #24]
 8001a3a:	4b0a      	ldr	r3, [pc, #40]	@ (8001a64 <HAL_TIM_PWM_MspInit+0x48>)
 8001a3c:	699b      	ldr	r3, [r3, #24]
 8001a3e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001a42:	60fb      	str	r3, [r7, #12]
 8001a44:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 5, 0);
 8001a46:	2200      	movs	r2, #0
 8001a48:	2105      	movs	r1, #5
 8001a4a:	2019      	movs	r0, #25
 8001a4c:	f000 fc61 	bl	8002312 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8001a50:	2019      	movs	r0, #25
 8001a52:	f000 fc7a 	bl	800234a <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 8001a56:	bf00      	nop
 8001a58:	3710      	adds	r7, #16
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bd80      	pop	{r7, pc}
 8001a5e:	bf00      	nop
 8001a60:	40012c00 	.word	0x40012c00
 8001a64:	40021000 	.word	0x40021000

08001a68 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b08a      	sub	sp, #40	@ 0x28
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a70:	f107 0314 	add.w	r3, r7, #20
 8001a74:	2200      	movs	r2, #0
 8001a76:	601a      	str	r2, [r3, #0]
 8001a78:	605a      	str	r2, [r3, #4]
 8001a7a:	609a      	str	r2, [r3, #8]
 8001a7c:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	4a25      	ldr	r2, [pc, #148]	@ (8001b18 <HAL_TIM_MspPostInit+0xb0>)
 8001a84:	4293      	cmp	r3, r2
 8001a86:	d142      	bne.n	8001b0e <HAL_TIM_MspPostInit+0xa6>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a88:	4b24      	ldr	r3, [pc, #144]	@ (8001b1c <HAL_TIM_MspPostInit+0xb4>)
 8001a8a:	699b      	ldr	r3, [r3, #24]
 8001a8c:	4a23      	ldr	r2, [pc, #140]	@ (8001b1c <HAL_TIM_MspPostInit+0xb4>)
 8001a8e:	f043 0304 	orr.w	r3, r3, #4
 8001a92:	6193      	str	r3, [r2, #24]
 8001a94:	4b21      	ldr	r3, [pc, #132]	@ (8001b1c <HAL_TIM_MspPostInit+0xb4>)
 8001a96:	699b      	ldr	r3, [r3, #24]
 8001a98:	f003 0304 	and.w	r3, r3, #4
 8001a9c:	613b      	str	r3, [r7, #16]
 8001a9e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001aa0:	4b1e      	ldr	r3, [pc, #120]	@ (8001b1c <HAL_TIM_MspPostInit+0xb4>)
 8001aa2:	699b      	ldr	r3, [r3, #24]
 8001aa4:	4a1d      	ldr	r2, [pc, #116]	@ (8001b1c <HAL_TIM_MspPostInit+0xb4>)
 8001aa6:	f043 0308 	orr.w	r3, r3, #8
 8001aaa:	6193      	str	r3, [r2, #24]
 8001aac:	4b1b      	ldr	r3, [pc, #108]	@ (8001b1c <HAL_TIM_MspPostInit+0xb4>)
 8001aae:	699b      	ldr	r3, [r3, #24]
 8001ab0:	f003 0308 	and.w	r3, r3, #8
 8001ab4:	60fb      	str	r3, [r7, #12]
 8001ab6:	68fb      	ldr	r3, [r7, #12]
    PB1     ------> TIM1_CH3N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8001ab8:	f44f 63f0 	mov.w	r3, #1920	@ 0x780
 8001abc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001abe:	2302      	movs	r3, #2
 8001ac0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ac2:	2302      	movs	r3, #2
 8001ac4:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ac6:	f107 0314 	add.w	r3, r7, #20
 8001aca:	4619      	mov	r1, r3
 8001acc:	4814      	ldr	r0, [pc, #80]	@ (8001b20 <HAL_TIM_MspPostInit+0xb8>)
 8001ace:	f000 fef9 	bl	80028c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001ad2:	2303      	movs	r3, #3
 8001ad4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ad6:	2302      	movs	r3, #2
 8001ad8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ada:	2302      	movs	r3, #2
 8001adc:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ade:	f107 0314 	add.w	r3, r7, #20
 8001ae2:	4619      	mov	r1, r3
 8001ae4:	480f      	ldr	r0, [pc, #60]	@ (8001b24 <HAL_TIM_MspPostInit+0xbc>)
 8001ae6:	f000 feed 	bl	80028c4 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM1_PARTIAL();
 8001aea:	4b0f      	ldr	r3, [pc, #60]	@ (8001b28 <HAL_TIM_MspPostInit+0xc0>)
 8001aec:	685b      	ldr	r3, [r3, #4]
 8001aee:	627b      	str	r3, [r7, #36]	@ 0x24
 8001af0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001af2:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8001af6:	627b      	str	r3, [r7, #36]	@ 0x24
 8001af8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001afa:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8001afe:	627b      	str	r3, [r7, #36]	@ 0x24
 8001b00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b02:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001b06:	627b      	str	r3, [r7, #36]	@ 0x24
 8001b08:	4a07      	ldr	r2, [pc, #28]	@ (8001b28 <HAL_TIM_MspPostInit+0xc0>)
 8001b0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b0c:	6053      	str	r3, [r2, #4]
    /* USER CODE BEGIN TIM1_MspPostInit 1 */

    /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001b0e:	bf00      	nop
 8001b10:	3728      	adds	r7, #40	@ 0x28
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bd80      	pop	{r7, pc}
 8001b16:	bf00      	nop
 8001b18:	40012c00 	.word	0x40012c00
 8001b1c:	40021000 	.word	0x40021000
 8001b20:	40010800 	.word	0x40010800
 8001b24:	40010c00 	.word	0x40010c00
 8001b28:	40010000 	.word	0x40010000

08001b2c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b088      	sub	sp, #32
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b34:	f107 0310 	add.w	r3, r7, #16
 8001b38:	2200      	movs	r2, #0
 8001b3a:	601a      	str	r2, [r3, #0]
 8001b3c:	605a      	str	r2, [r3, #4]
 8001b3e:	609a      	str	r2, [r3, #8]
 8001b40:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART3)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	4a34      	ldr	r2, [pc, #208]	@ (8001c18 <HAL_UART_MspInit+0xec>)
 8001b48:	4293      	cmp	r3, r2
 8001b4a:	d160      	bne.n	8001c0e <HAL_UART_MspInit+0xe2>
  {
    /* USER CODE BEGIN USART3_MspInit 0 */

    /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001b4c:	4b33      	ldr	r3, [pc, #204]	@ (8001c1c <HAL_UART_MspInit+0xf0>)
 8001b4e:	69db      	ldr	r3, [r3, #28]
 8001b50:	4a32      	ldr	r2, [pc, #200]	@ (8001c1c <HAL_UART_MspInit+0xf0>)
 8001b52:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001b56:	61d3      	str	r3, [r2, #28]
 8001b58:	4b30      	ldr	r3, [pc, #192]	@ (8001c1c <HAL_UART_MspInit+0xf0>)
 8001b5a:	69db      	ldr	r3, [r3, #28]
 8001b5c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001b60:	60fb      	str	r3, [r7, #12]
 8001b62:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b64:	4b2d      	ldr	r3, [pc, #180]	@ (8001c1c <HAL_UART_MspInit+0xf0>)
 8001b66:	699b      	ldr	r3, [r3, #24]
 8001b68:	4a2c      	ldr	r2, [pc, #176]	@ (8001c1c <HAL_UART_MspInit+0xf0>)
 8001b6a:	f043 0308 	orr.w	r3, r3, #8
 8001b6e:	6193      	str	r3, [r2, #24]
 8001b70:	4b2a      	ldr	r3, [pc, #168]	@ (8001c1c <HAL_UART_MspInit+0xf0>)
 8001b72:	699b      	ldr	r3, [r3, #24]
 8001b74:	f003 0308 	and.w	r3, r3, #8
 8001b78:	60bb      	str	r3, [r7, #8]
 8001b7a:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001b7c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001b80:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b82:	2302      	movs	r3, #2
 8001b84:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b86:	2303      	movs	r3, #3
 8001b88:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b8a:	f107 0310 	add.w	r3, r7, #16
 8001b8e:	4619      	mov	r1, r3
 8001b90:	4823      	ldr	r0, [pc, #140]	@ (8001c20 <HAL_UART_MspInit+0xf4>)
 8001b92:	f000 fe97 	bl	80028c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001b96:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001b9a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ba4:	f107 0310 	add.w	r3, r7, #16
 8001ba8:	4619      	mov	r1, r3
 8001baa:	481d      	ldr	r0, [pc, #116]	@ (8001c20 <HAL_UART_MspInit+0xf4>)
 8001bac:	f000 fe8a 	bl	80028c4 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Channel3;
 8001bb0:	4b1c      	ldr	r3, [pc, #112]	@ (8001c24 <HAL_UART_MspInit+0xf8>)
 8001bb2:	4a1d      	ldr	r2, [pc, #116]	@ (8001c28 <HAL_UART_MspInit+0xfc>)
 8001bb4:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001bb6:	4b1b      	ldr	r3, [pc, #108]	@ (8001c24 <HAL_UART_MspInit+0xf8>)
 8001bb8:	2200      	movs	r2, #0
 8001bba:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001bbc:	4b19      	ldr	r3, [pc, #100]	@ (8001c24 <HAL_UART_MspInit+0xf8>)
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001bc2:	4b18      	ldr	r3, [pc, #96]	@ (8001c24 <HAL_UART_MspInit+0xf8>)
 8001bc4:	2280      	movs	r2, #128	@ 0x80
 8001bc6:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001bc8:	4b16      	ldr	r3, [pc, #88]	@ (8001c24 <HAL_UART_MspInit+0xf8>)
 8001bca:	2200      	movs	r2, #0
 8001bcc:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001bce:	4b15      	ldr	r3, [pc, #84]	@ (8001c24 <HAL_UART_MspInit+0xf8>)
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8001bd4:	4b13      	ldr	r3, [pc, #76]	@ (8001c24 <HAL_UART_MspInit+0xf8>)
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001bda:	4b12      	ldr	r3, [pc, #72]	@ (8001c24 <HAL_UART_MspInit+0xf8>)
 8001bdc:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001be0:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8001be2:	4810      	ldr	r0, [pc, #64]	@ (8001c24 <HAL_UART_MspInit+0xf8>)
 8001be4:	f000 fbcc 	bl	8002380 <HAL_DMA_Init>
 8001be8:	4603      	mov	r3, r0
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d001      	beq.n	8001bf2 <HAL_UART_MspInit+0xc6>
    {
      Error_Handler();
 8001bee:	f7ff fed7 	bl	80019a0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	4a0b      	ldr	r2, [pc, #44]	@ (8001c24 <HAL_UART_MspInit+0xf8>)
 8001bf6:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001bf8:	4a0a      	ldr	r2, [pc, #40]	@ (8001c24 <HAL_UART_MspInit+0xf8>)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8001bfe:	2200      	movs	r2, #0
 8001c00:	2105      	movs	r1, #5
 8001c02:	2027      	movs	r0, #39	@ 0x27
 8001c04:	f000 fb85 	bl	8002312 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001c08:	2027      	movs	r0, #39	@ 0x27
 8001c0a:	f000 fb9e 	bl	800234a <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART3_MspInit 1 */

  }

}
 8001c0e:	bf00      	nop
 8001c10:	3720      	adds	r7, #32
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bd80      	pop	{r7, pc}
 8001c16:	bf00      	nop
 8001c18:	40004800 	.word	0x40004800
 8001c1c:	40021000 	.word	0x40021000
 8001c20:	40010c00 	.word	0x40010c00
 8001c24:	20000368 	.word	0x20000368
 8001c28:	40020030 	.word	0x40020030

08001c2c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001c30:	bf00      	nop
 8001c32:	e7fd      	b.n	8001c30 <NMI_Handler+0x4>

08001c34 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c34:	b480      	push	{r7}
 8001c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c38:	bf00      	nop
 8001c3a:	e7fd      	b.n	8001c38 <HardFault_Handler+0x4>

08001c3c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c40:	bf00      	nop
 8001c42:	e7fd      	b.n	8001c40 <MemManage_Handler+0x4>

08001c44 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c44:	b480      	push	{r7}
 8001c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c48:	bf00      	nop
 8001c4a:	e7fd      	b.n	8001c48 <BusFault_Handler+0x4>

08001c4c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c50:	bf00      	nop
 8001c52:	e7fd      	b.n	8001c50 <UsageFault_Handler+0x4>

08001c54 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c54:	b480      	push	{r7}
 8001c56:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c58:	bf00      	nop
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bc80      	pop	{r7}
 8001c5e:	4770      	bx	lr

08001c60 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c60:	b5b0      	push	{r4, r5, r7, lr}
 8001c62:	b082      	sub	sp, #8
 8001c64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c66:	f000 fa3d 	bl	80020e4 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001c6a:	f004 ffc5 	bl	8006bf8 <xTaskGetSchedulerState>
 8001c6e:	4603      	mov	r3, r0
 8001c70:	2b01      	cmp	r3, #1
 8001c72:	d001      	beq.n	8001c78 <SysTick_Handler+0x18>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8001c74:	f005 fb58 	bl	8007328 <xPortSysTickHandler>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  count_ramp_up++;
 8001c78:	4b5b      	ldr	r3, [pc, #364]	@ (8001de8 <SysTick_Handler+0x188>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	3301      	adds	r3, #1
 8001c7e:	4a5a      	ldr	r2, [pc, #360]	@ (8001de8 <SysTick_Handler+0x188>)
 8001c80:	6013      	str	r3, [r2, #0]
  count_ramp_up %= 100;
 8001c82:	4b59      	ldr	r3, [pc, #356]	@ (8001de8 <SysTick_Handler+0x188>)
 8001c84:	681a      	ldr	r2, [r3, #0]
 8001c86:	4b59      	ldr	r3, [pc, #356]	@ (8001dec <SysTick_Handler+0x18c>)
 8001c88:	fb83 1302 	smull	r1, r3, r3, r2
 8001c8c:	1159      	asrs	r1, r3, #5
 8001c8e:	17d3      	asrs	r3, r2, #31
 8001c90:	1acb      	subs	r3, r1, r3
 8001c92:	2164      	movs	r1, #100	@ 0x64
 8001c94:	fb01 f303 	mul.w	r3, r1, r3
 8001c98:	1ad3      	subs	r3, r2, r3
 8001c9a:	4a53      	ldr	r2, [pc, #332]	@ (8001de8 <SysTick_Handler+0x188>)
 8001c9c:	6013      	str	r3, [r2, #0]
  if (count_ramp_up == 0) {
 8001c9e:	4b52      	ldr	r3, [pc, #328]	@ (8001de8 <SysTick_Handler+0x188>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	f040 809c 	bne.w	8001de0 <SysTick_Handler+0x180>
	  if (sw == 1) {
 8001ca8:	4b51      	ldr	r3, [pc, #324]	@ (8001df0 <SysTick_Handler+0x190>)
 8001caa:	781b      	ldrb	r3, [r3, #0]
 8001cac:	2b01      	cmp	r3, #1
 8001cae:	f040 8089 	bne.w	8001dc4 <SysTick_Handler+0x164>
		  if (startupDelayCount > 50) {
 8001cb2:	4b50      	ldr	r3, [pc, #320]	@ (8001df4 <SysTick_Handler+0x194>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	2b32      	cmp	r3, #50	@ 0x32
 8001cb8:	dd7e      	ble.n	8001db8 <SysTick_Handler+0x158>
	    			if(freq < frequency){
 8001cba:	4b4f      	ldr	r3, [pc, #316]	@ (8001df8 <SysTick_Handler+0x198>)
 8001cbc:	781b      	ldrb	r3, [r3, #0]
 8001cbe:	461a      	mov	r2, r3
 8001cc0:	4b4e      	ldr	r3, [pc, #312]	@ (8001dfc <SysTick_Handler+0x19c>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	429a      	cmp	r2, r3
 8001cc6:	f340 808b 	ble.w	8001de0 <SysTick_Handler+0x180>
	    				float amp = (((float)freq)/((float)frequency)) * (((float)amplitude) / 10.0);
 8001cca:	4b4c      	ldr	r3, [pc, #304]	@ (8001dfc <SysTick_Handler+0x19c>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	4618      	mov	r0, r3
 8001cd0:	f7fe ffe6 	bl	8000ca0 <__aeabi_i2f>
 8001cd4:	4604      	mov	r4, r0
 8001cd6:	4b48      	ldr	r3, [pc, #288]	@ (8001df8 <SysTick_Handler+0x198>)
 8001cd8:	781b      	ldrb	r3, [r3, #0]
 8001cda:	4618      	mov	r0, r3
 8001cdc:	f7fe ffdc 	bl	8000c98 <__aeabi_ui2f>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	4619      	mov	r1, r3
 8001ce4:	4620      	mov	r0, r4
 8001ce6:	f7ff f8e3 	bl	8000eb0 <__aeabi_fdiv>
 8001cea:	4603      	mov	r3, r0
 8001cec:	4618      	mov	r0, r3
 8001cee:	f7fe fb93 	bl	8000418 <__aeabi_f2d>
 8001cf2:	4604      	mov	r4, r0
 8001cf4:	460d      	mov	r5, r1
 8001cf6:	4b42      	ldr	r3, [pc, #264]	@ (8001e00 <SysTick_Handler+0x1a0>)
 8001cf8:	781b      	ldrb	r3, [r3, #0]
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	f7fe ffcc 	bl	8000c98 <__aeabi_ui2f>
 8001d00:	4603      	mov	r3, r0
 8001d02:	4618      	mov	r0, r3
 8001d04:	f7fe fb88 	bl	8000418 <__aeabi_f2d>
 8001d08:	f04f 0200 	mov.w	r2, #0
 8001d0c:	4b3d      	ldr	r3, [pc, #244]	@ (8001e04 <SysTick_Handler+0x1a4>)
 8001d0e:	f7fe fd05 	bl	800071c <__aeabi_ddiv>
 8001d12:	4602      	mov	r2, r0
 8001d14:	460b      	mov	r3, r1
 8001d16:	4620      	mov	r0, r4
 8001d18:	4629      	mov	r1, r5
 8001d1a:	f7fe fbd5 	bl	80004c8 <__aeabi_dmul>
 8001d1e:	4602      	mov	r2, r0
 8001d20:	460b      	mov	r3, r1
 8001d22:	4610      	mov	r0, r2
 8001d24:	4619      	mov	r1, r3
 8001d26:	f7fe feb1 	bl	8000a8c <__aeabi_d2f>
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	607b      	str	r3, [r7, #4]
	    				if (amp >= ((float)amplitude) / 10.0) {
 8001d2e:	6878      	ldr	r0, [r7, #4]
 8001d30:	f7fe fb72 	bl	8000418 <__aeabi_f2d>
 8001d34:	4604      	mov	r4, r0
 8001d36:	460d      	mov	r5, r1
 8001d38:	4b31      	ldr	r3, [pc, #196]	@ (8001e00 <SysTick_Handler+0x1a0>)
 8001d3a:	781b      	ldrb	r3, [r3, #0]
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	f7fe ffab 	bl	8000c98 <__aeabi_ui2f>
 8001d42:	4603      	mov	r3, r0
 8001d44:	4618      	mov	r0, r3
 8001d46:	f7fe fb67 	bl	8000418 <__aeabi_f2d>
 8001d4a:	f04f 0200 	mov.w	r2, #0
 8001d4e:	4b2d      	ldr	r3, [pc, #180]	@ (8001e04 <SysTick_Handler+0x1a4>)
 8001d50:	f7fe fce4 	bl	800071c <__aeabi_ddiv>
 8001d54:	4602      	mov	r2, r0
 8001d56:	460b      	mov	r3, r1
 8001d58:	4620      	mov	r0, r4
 8001d5a:	4629      	mov	r1, r5
 8001d5c:	f7fe fe3a 	bl	80009d4 <__aeabi_dcmpge>
 8001d60:	4603      	mov	r3, r0
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d00b      	beq.n	8001d7e <SysTick_Handler+0x11e>
	    					amp = ((float)amplitude) / 10.0;
 8001d66:	4b26      	ldr	r3, [pc, #152]	@ (8001e00 <SysTick_Handler+0x1a0>)
 8001d68:	781b      	ldrb	r3, [r3, #0]
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	f7fe ff94 	bl	8000c98 <__aeabi_ui2f>
 8001d70:	4603      	mov	r3, r0
 8001d72:	4925      	ldr	r1, [pc, #148]	@ (8001e08 <SysTick_Handler+0x1a8>)
 8001d74:	4618      	mov	r0, r3
 8001d76:	f7ff f89b 	bl	8000eb0 <__aeabi_fdiv>
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	607b      	str	r3, [r7, #4]
	    				}
	    				freq++;
 8001d7e:	4b1f      	ldr	r3, [pc, #124]	@ (8001dfc <SysTick_Handler+0x19c>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	3301      	adds	r3, #1
 8001d84:	4a1d      	ldr	r2, [pc, #116]	@ (8001dfc <SysTick_Handler+0x19c>)
 8001d86:	6013      	str	r3, [r2, #0]
	    				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8001d88:	2200      	movs	r2, #0
 8001d8a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001d8e:	481f      	ldr	r0, [pc, #124]	@ (8001e0c <SysTick_Handler+0x1ac>)
 8001d90:	f000 ff33 	bl	8002bfa <HAL_GPIO_WritePin>
	    				startSPWM(10000, freq, amp, 1);
 8001d94:	4b19      	ldr	r3, [pc, #100]	@ (8001dfc <SysTick_Handler+0x19c>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	4618      	mov	r0, r3
 8001d9a:	f7fe ff81 	bl	8000ca0 <__aeabi_i2f>
 8001d9e:	4601      	mov	r1, r0
 8001da0:	2301      	movs	r3, #1
 8001da2:	687a      	ldr	r2, [r7, #4]
 8001da4:	481a      	ldr	r0, [pc, #104]	@ (8001e10 <SysTick_Handler+0x1b0>)
 8001da6:	f7ff fbef 	bl	8001588 <startSPWM>
	    				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8001daa:	2201      	movs	r2, #1
 8001dac:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001db0:	4816      	ldr	r0, [pc, #88]	@ (8001e0c <SysTick_Handler+0x1ac>)
 8001db2:	f000 ff22 	bl	8002bfa <HAL_GPIO_WritePin>
	    			freq = 5;
	    		}
  }

  /* USER CODE END SysTick_IRQn 1 */
}
 8001db6:	e013      	b.n	8001de0 <SysTick_Handler+0x180>
	    			startupDelayCount ++;
 8001db8:	4b0e      	ldr	r3, [pc, #56]	@ (8001df4 <SysTick_Handler+0x194>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	3301      	adds	r3, #1
 8001dbe:	4a0d      	ldr	r2, [pc, #52]	@ (8001df4 <SysTick_Handler+0x194>)
 8001dc0:	6013      	str	r3, [r2, #0]
}
 8001dc2:	e00d      	b.n	8001de0 <SysTick_Handler+0x180>
	    			startupDelayCount = 0;
 8001dc4:	4b0b      	ldr	r3, [pc, #44]	@ (8001df4 <SysTick_Handler+0x194>)
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	601a      	str	r2, [r3, #0]
	    			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8001dca:	2200      	movs	r2, #0
 8001dcc:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001dd0:	480e      	ldr	r0, [pc, #56]	@ (8001e0c <SysTick_Handler+0x1ac>)
 8001dd2:	f000 ff12 	bl	8002bfa <HAL_GPIO_WritePin>
	    			stopSPWM();
 8001dd6:	f7ff fd4b 	bl	8001870 <stopSPWM>
	    			freq = 5;
 8001dda:	4b08      	ldr	r3, [pc, #32]	@ (8001dfc <SysTick_Handler+0x19c>)
 8001ddc:	2205      	movs	r2, #5
 8001dde:	601a      	str	r2, [r3, #0]
}
 8001de0:	bf00      	nop
 8001de2:	3708      	adds	r7, #8
 8001de4:	46bd      	mov	sp, r7
 8001de6:	bdb0      	pop	{r4, r5, r7, pc}
 8001de8:	200003e0 	.word	0x200003e0
 8001dec:	51eb851f 	.word	0x51eb851f
 8001df0:	200003dd 	.word	0x200003dd
 8001df4:	200003e4 	.word	0x200003e4
 8001df8:	200003de 	.word	0x200003de
 8001dfc:	20000004 	.word	0x20000004
 8001e00:	200003df 	.word	0x200003df
 8001e04:	40240000 	.word	0x40240000
 8001e08:	41200000 	.word	0x41200000
 8001e0c:	40010800 	.word	0x40010800
 8001e10:	461c4000 	.word	0x461c4000

08001e14 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8001e18:	4802      	ldr	r0, [pc, #8]	@ (8001e24 <DMA1_Channel3_IRQHandler+0x10>)
 8001e1a:	f000 fc1f 	bl	800265c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8001e1e:	bf00      	nop
 8001e20:	bd80      	pop	{r7, pc}
 8001e22:	bf00      	nop
 8001e24:	20000368 	.word	0x20000368

08001e28 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001e2c:	484a      	ldr	r0, [pc, #296]	@ (8001f58 <TIM1_UP_IRQHandler+0x130>)
 8001e2e:	f001 fc63 	bl	80036f8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  count +=1;
 8001e32:	4b4a      	ldr	r3, [pc, #296]	@ (8001f5c <TIM1_UP_IRQHandler+0x134>)
 8001e34:	881b      	ldrh	r3, [r3, #0]
 8001e36:	3301      	adds	r3, #1
 8001e38:	b29a      	uxth	r2, r3
 8001e3a:	4b48      	ldr	r3, [pc, #288]	@ (8001f5c <TIM1_UP_IRQHandler+0x134>)
 8001e3c:	801a      	strh	r2, [r3, #0]
    count %= 3;
 8001e3e:	4b47      	ldr	r3, [pc, #284]	@ (8001f5c <TIM1_UP_IRQHandler+0x134>)
 8001e40:	881a      	ldrh	r2, [r3, #0]
 8001e42:	4b47      	ldr	r3, [pc, #284]	@ (8001f60 <TIM1_UP_IRQHandler+0x138>)
 8001e44:	fba3 1302 	umull	r1, r3, r3, r2
 8001e48:	0859      	lsrs	r1, r3, #1
 8001e4a:	460b      	mov	r3, r1
 8001e4c:	005b      	lsls	r3, r3, #1
 8001e4e:	440b      	add	r3, r1
 8001e50:	1ad3      	subs	r3, r2, r3
 8001e52:	b29a      	uxth	r2, r3
 8001e54:	4b41      	ldr	r3, [pc, #260]	@ (8001f5c <TIM1_UP_IRQHandler+0x134>)
 8001e56:	801a      	strh	r2, [r3, #0]
    num1+=count/2;
 8001e58:	4b40      	ldr	r3, [pc, #256]	@ (8001f5c <TIM1_UP_IRQHandler+0x134>)
 8001e5a:	881b      	ldrh	r3, [r3, #0]
 8001e5c:	085b      	lsrs	r3, r3, #1
 8001e5e:	b29a      	uxth	r2, r3
 8001e60:	4b40      	ldr	r3, [pc, #256]	@ (8001f64 <TIM1_UP_IRQHandler+0x13c>)
 8001e62:	881b      	ldrh	r3, [r3, #0]
 8001e64:	4413      	add	r3, r2
 8001e66:	b29a      	uxth	r2, r3
 8001e68:	4b3e      	ldr	r3, [pc, #248]	@ (8001f64 <TIM1_UP_IRQHandler+0x13c>)
 8001e6a:	801a      	strh	r2, [r3, #0]
    num1 %= samples;
 8001e6c:	4b3d      	ldr	r3, [pc, #244]	@ (8001f64 <TIM1_UP_IRQHandler+0x13c>)
 8001e6e:	881b      	ldrh	r3, [r3, #0]
 8001e70:	4a3d      	ldr	r2, [pc, #244]	@ (8001f68 <TIM1_UP_IRQHandler+0x140>)
 8001e72:	8812      	ldrh	r2, [r2, #0]
 8001e74:	fbb3 f1f2 	udiv	r1, r3, r2
 8001e78:	fb01 f202 	mul.w	r2, r1, r2
 8001e7c:	1a9b      	subs	r3, r3, r2
 8001e7e:	b29a      	uxth	r2, r3
 8001e80:	4b38      	ldr	r3, [pc, #224]	@ (8001f64 <TIM1_UP_IRQHandler+0x13c>)
 8001e82:	801a      	strh	r2, [r3, #0]
    num2 = num1 + (samples/3);
 8001e84:	4b38      	ldr	r3, [pc, #224]	@ (8001f68 <TIM1_UP_IRQHandler+0x140>)
 8001e86:	881b      	ldrh	r3, [r3, #0]
 8001e88:	4a35      	ldr	r2, [pc, #212]	@ (8001f60 <TIM1_UP_IRQHandler+0x138>)
 8001e8a:	fba2 2303 	umull	r2, r3, r2, r3
 8001e8e:	085b      	lsrs	r3, r3, #1
 8001e90:	b29a      	uxth	r2, r3
 8001e92:	4b34      	ldr	r3, [pc, #208]	@ (8001f64 <TIM1_UP_IRQHandler+0x13c>)
 8001e94:	881b      	ldrh	r3, [r3, #0]
 8001e96:	4413      	add	r3, r2
 8001e98:	b29a      	uxth	r2, r3
 8001e9a:	4b34      	ldr	r3, [pc, #208]	@ (8001f6c <TIM1_UP_IRQHandler+0x144>)
 8001e9c:	801a      	strh	r2, [r3, #0]
    num2 %= samples;
 8001e9e:	4b33      	ldr	r3, [pc, #204]	@ (8001f6c <TIM1_UP_IRQHandler+0x144>)
 8001ea0:	881b      	ldrh	r3, [r3, #0]
 8001ea2:	4a31      	ldr	r2, [pc, #196]	@ (8001f68 <TIM1_UP_IRQHandler+0x140>)
 8001ea4:	8812      	ldrh	r2, [r2, #0]
 8001ea6:	fbb3 f1f2 	udiv	r1, r3, r2
 8001eaa:	fb01 f202 	mul.w	r2, r1, r2
 8001eae:	1a9b      	subs	r3, r3, r2
 8001eb0:	b29a      	uxth	r2, r3
 8001eb2:	4b2e      	ldr	r3, [pc, #184]	@ (8001f6c <TIM1_UP_IRQHandler+0x144>)
 8001eb4:	801a      	strh	r2, [r3, #0]
    num3 = num2 + (samples/3);
 8001eb6:	4b2c      	ldr	r3, [pc, #176]	@ (8001f68 <TIM1_UP_IRQHandler+0x140>)
 8001eb8:	881b      	ldrh	r3, [r3, #0]
 8001eba:	4a29      	ldr	r2, [pc, #164]	@ (8001f60 <TIM1_UP_IRQHandler+0x138>)
 8001ebc:	fba2 2303 	umull	r2, r3, r2, r3
 8001ec0:	085b      	lsrs	r3, r3, #1
 8001ec2:	b29a      	uxth	r2, r3
 8001ec4:	4b29      	ldr	r3, [pc, #164]	@ (8001f6c <TIM1_UP_IRQHandler+0x144>)
 8001ec6:	881b      	ldrh	r3, [r3, #0]
 8001ec8:	4413      	add	r3, r2
 8001eca:	b29a      	uxth	r2, r3
 8001ecc:	4b28      	ldr	r3, [pc, #160]	@ (8001f70 <TIM1_UP_IRQHandler+0x148>)
 8001ece:	801a      	strh	r2, [r3, #0]
    num3 %= samples;
 8001ed0:	4b27      	ldr	r3, [pc, #156]	@ (8001f70 <TIM1_UP_IRQHandler+0x148>)
 8001ed2:	881b      	ldrh	r3, [r3, #0]
 8001ed4:	4a24      	ldr	r2, [pc, #144]	@ (8001f68 <TIM1_UP_IRQHandler+0x140>)
 8001ed6:	8812      	ldrh	r2, [r2, #0]
 8001ed8:	fbb3 f1f2 	udiv	r1, r3, r2
 8001edc:	fb01 f202 	mul.w	r2, r1, r2
 8001ee0:	1a9b      	subs	r3, r3, r2
 8001ee2:	b29a      	uxth	r2, r3
 8001ee4:	4b22      	ldr	r3, [pc, #136]	@ (8001f70 <TIM1_UP_IRQHandler+0x148>)
 8001ee6:	801a      	strh	r2, [r3, #0]
    TIM1->CCR1=lookUp[num1];
 8001ee8:	4b22      	ldr	r3, [pc, #136]	@ (8001f74 <TIM1_UP_IRQHandler+0x14c>)
 8001eea:	681a      	ldr	r2, [r3, #0]
 8001eec:	4b1d      	ldr	r3, [pc, #116]	@ (8001f64 <TIM1_UP_IRQHandler+0x13c>)
 8001eee:	881b      	ldrh	r3, [r3, #0]
 8001ef0:	005b      	lsls	r3, r3, #1
 8001ef2:	4413      	add	r3, r2
 8001ef4:	881a      	ldrh	r2, [r3, #0]
 8001ef6:	4b20      	ldr	r3, [pc, #128]	@ (8001f78 <TIM1_UP_IRQHandler+0x150>)
 8001ef8:	635a      	str	r2, [r3, #52]	@ 0x34
    if (!directionReversed) {
 8001efa:	4b20      	ldr	r3, [pc, #128]	@ (8001f7c <TIM1_UP_IRQHandler+0x154>)
 8001efc:	781b      	ldrb	r3, [r3, #0]
 8001efe:	f083 0301 	eor.w	r3, r3, #1
 8001f02:	b2db      	uxtb	r3, r3
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d012      	beq.n	8001f2e <TIM1_UP_IRQHandler+0x106>
  	  TIM1->CCR2=lookUp[num2];
 8001f08:	4b1a      	ldr	r3, [pc, #104]	@ (8001f74 <TIM1_UP_IRQHandler+0x14c>)
 8001f0a:	681a      	ldr	r2, [r3, #0]
 8001f0c:	4b17      	ldr	r3, [pc, #92]	@ (8001f6c <TIM1_UP_IRQHandler+0x144>)
 8001f0e:	881b      	ldrh	r3, [r3, #0]
 8001f10:	005b      	lsls	r3, r3, #1
 8001f12:	4413      	add	r3, r2
 8001f14:	881a      	ldrh	r2, [r3, #0]
 8001f16:	4b18      	ldr	r3, [pc, #96]	@ (8001f78 <TIM1_UP_IRQHandler+0x150>)
 8001f18:	639a      	str	r2, [r3, #56]	@ 0x38
  	  TIM1->CCR3=lookUp[num3];
 8001f1a:	4b16      	ldr	r3, [pc, #88]	@ (8001f74 <TIM1_UP_IRQHandler+0x14c>)
 8001f1c:	681a      	ldr	r2, [r3, #0]
 8001f1e:	4b14      	ldr	r3, [pc, #80]	@ (8001f70 <TIM1_UP_IRQHandler+0x148>)
 8001f20:	881b      	ldrh	r3, [r3, #0]
 8001f22:	005b      	lsls	r3, r3, #1
 8001f24:	4413      	add	r3, r2
 8001f26:	881a      	ldrh	r2, [r3, #0]
 8001f28:	4b13      	ldr	r3, [pc, #76]	@ (8001f78 <TIM1_UP_IRQHandler+0x150>)
 8001f2a:	63da      	str	r2, [r3, #60]	@ 0x3c
  	  TIM1->CCR2=lookUp[num3];
  	  TIM1->CCR3=lookUp[num2];
    }

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8001f2c:	e011      	b.n	8001f52 <TIM1_UP_IRQHandler+0x12a>
  	  TIM1->CCR2=lookUp[num3];
 8001f2e:	4b11      	ldr	r3, [pc, #68]	@ (8001f74 <TIM1_UP_IRQHandler+0x14c>)
 8001f30:	681a      	ldr	r2, [r3, #0]
 8001f32:	4b0f      	ldr	r3, [pc, #60]	@ (8001f70 <TIM1_UP_IRQHandler+0x148>)
 8001f34:	881b      	ldrh	r3, [r3, #0]
 8001f36:	005b      	lsls	r3, r3, #1
 8001f38:	4413      	add	r3, r2
 8001f3a:	881a      	ldrh	r2, [r3, #0]
 8001f3c:	4b0e      	ldr	r3, [pc, #56]	@ (8001f78 <TIM1_UP_IRQHandler+0x150>)
 8001f3e:	639a      	str	r2, [r3, #56]	@ 0x38
  	  TIM1->CCR3=lookUp[num2];
 8001f40:	4b0c      	ldr	r3, [pc, #48]	@ (8001f74 <TIM1_UP_IRQHandler+0x14c>)
 8001f42:	681a      	ldr	r2, [r3, #0]
 8001f44:	4b09      	ldr	r3, [pc, #36]	@ (8001f6c <TIM1_UP_IRQHandler+0x144>)
 8001f46:	881b      	ldrh	r3, [r3, #0]
 8001f48:	005b      	lsls	r3, r3, #1
 8001f4a:	4413      	add	r3, r2
 8001f4c:	881a      	ldrh	r2, [r3, #0]
 8001f4e:	4b0a      	ldr	r3, [pc, #40]	@ (8001f78 <TIM1_UP_IRQHandler+0x150>)
 8001f50:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8001f52:	bf00      	nop
 8001f54:	bd80      	pop	{r7, pc}
 8001f56:	bf00      	nop
 8001f58:	200002d8 	.word	0x200002d8
 8001f5c:	200003d6 	.word	0x200003d6
 8001f60:	aaaaaaab 	.word	0xaaaaaaab
 8001f64:	200003d0 	.word	0x200003d0
 8001f68:	200003c8 	.word	0x200003c8
 8001f6c:	200003d2 	.word	0x200003d2
 8001f70:	200003d4 	.word	0x200003d4
 8001f74:	200003cc 	.word	0x200003cc
 8001f78:	40012c00 	.word	0x40012c00
 8001f7c:	200003dc 	.word	0x200003dc

08001f80 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001f84:	4802      	ldr	r0, [pc, #8]	@ (8001f90 <USART3_IRQHandler+0x10>)
 8001f86:	f002 fa3d 	bl	8004404 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001f8a:	bf00      	nop
 8001f8c:	bd80      	pop	{r7, pc}
 8001f8e:	bf00      	nop
 8001f90:	20000320 	.word	0x20000320

08001f94 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b086      	sub	sp, #24
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f9c:	4a14      	ldr	r2, [pc, #80]	@ (8001ff0 <_sbrk+0x5c>)
 8001f9e:	4b15      	ldr	r3, [pc, #84]	@ (8001ff4 <_sbrk+0x60>)
 8001fa0:	1ad3      	subs	r3, r2, r3
 8001fa2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001fa4:	697b      	ldr	r3, [r7, #20]
 8001fa6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001fa8:	4b13      	ldr	r3, [pc, #76]	@ (8001ff8 <_sbrk+0x64>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d102      	bne.n	8001fb6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001fb0:	4b11      	ldr	r3, [pc, #68]	@ (8001ff8 <_sbrk+0x64>)
 8001fb2:	4a12      	ldr	r2, [pc, #72]	@ (8001ffc <_sbrk+0x68>)
 8001fb4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001fb6:	4b10      	ldr	r3, [pc, #64]	@ (8001ff8 <_sbrk+0x64>)
 8001fb8:	681a      	ldr	r2, [r3, #0]
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	4413      	add	r3, r2
 8001fbe:	693a      	ldr	r2, [r7, #16]
 8001fc0:	429a      	cmp	r2, r3
 8001fc2:	d207      	bcs.n	8001fd4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001fc4:	f005 fd7e 	bl	8007ac4 <__errno>
 8001fc8:	4603      	mov	r3, r0
 8001fca:	220c      	movs	r2, #12
 8001fcc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001fce:	f04f 33ff 	mov.w	r3, #4294967295
 8001fd2:	e009      	b.n	8001fe8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001fd4:	4b08      	ldr	r3, [pc, #32]	@ (8001ff8 <_sbrk+0x64>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001fda:	4b07      	ldr	r3, [pc, #28]	@ (8001ff8 <_sbrk+0x64>)
 8001fdc:	681a      	ldr	r2, [r3, #0]
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	4413      	add	r3, r2
 8001fe2:	4a05      	ldr	r2, [pc, #20]	@ (8001ff8 <_sbrk+0x64>)
 8001fe4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001fe6:	68fb      	ldr	r3, [r7, #12]
}
 8001fe8:	4618      	mov	r0, r3
 8001fea:	3718      	adds	r7, #24
 8001fec:	46bd      	mov	sp, r7
 8001fee:	bd80      	pop	{r7, pc}
 8001ff0:	20005000 	.word	0x20005000
 8001ff4:	00000400 	.word	0x00000400
 8001ff8:	200003e8 	.word	0x200003e8
 8001ffc:	20001438 	.word	0x20001438

08002000 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002000:	b480      	push	{r7}
 8002002:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002004:	bf00      	nop
 8002006:	46bd      	mov	sp, r7
 8002008:	bc80      	pop	{r7}
 800200a:	4770      	bx	lr

0800200c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800200c:	f7ff fff8 	bl	8002000 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002010:	480b      	ldr	r0, [pc, #44]	@ (8002040 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002012:	490c      	ldr	r1, [pc, #48]	@ (8002044 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002014:	4a0c      	ldr	r2, [pc, #48]	@ (8002048 <LoopFillZerobss+0x16>)
  movs r3, #0
 8002016:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002018:	e002      	b.n	8002020 <LoopCopyDataInit>

0800201a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800201a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800201c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800201e:	3304      	adds	r3, #4

08002020 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002020:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002022:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002024:	d3f9      	bcc.n	800201a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002026:	4a09      	ldr	r2, [pc, #36]	@ (800204c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002028:	4c09      	ldr	r4, [pc, #36]	@ (8002050 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800202a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800202c:	e001      	b.n	8002032 <LoopFillZerobss>

0800202e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800202e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002030:	3204      	adds	r2, #4

08002032 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002032:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002034:	d3fb      	bcc.n	800202e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002036:	f005 fd4b 	bl	8007ad0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800203a:	f7ff f881 	bl	8001140 <main>
  bx lr
 800203e:	4770      	bx	lr
  ldr r0, =_sdata
 8002040:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002044:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8002048:	08008f10 	.word	0x08008f10
  ldr r2, =_sbss
 800204c:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8002050:	20001438 	.word	0x20001438

08002054 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002054:	e7fe      	b.n	8002054 <ADC1_2_IRQHandler>
	...

08002058 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800205c:	4b08      	ldr	r3, [pc, #32]	@ (8002080 <HAL_Init+0x28>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	4a07      	ldr	r2, [pc, #28]	@ (8002080 <HAL_Init+0x28>)
 8002062:	f043 0310 	orr.w	r3, r3, #16
 8002066:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002068:	2003      	movs	r0, #3
 800206a:	f000 f947 	bl	80022fc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800206e:	200f      	movs	r0, #15
 8002070:	f000 f808 	bl	8002084 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002074:	f7ff fc9a 	bl	80019ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002078:	2300      	movs	r3, #0
}
 800207a:	4618      	mov	r0, r3
 800207c:	bd80      	pop	{r7, pc}
 800207e:	bf00      	nop
 8002080:	40022000 	.word	0x40022000

08002084 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b082      	sub	sp, #8
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800208c:	4b12      	ldr	r3, [pc, #72]	@ (80020d8 <HAL_InitTick+0x54>)
 800208e:	681a      	ldr	r2, [r3, #0]
 8002090:	4b12      	ldr	r3, [pc, #72]	@ (80020dc <HAL_InitTick+0x58>)
 8002092:	781b      	ldrb	r3, [r3, #0]
 8002094:	4619      	mov	r1, r3
 8002096:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800209a:	fbb3 f3f1 	udiv	r3, r3, r1
 800209e:	fbb2 f3f3 	udiv	r3, r2, r3
 80020a2:	4618      	mov	r0, r3
 80020a4:	f000 f95f 	bl	8002366 <HAL_SYSTICK_Config>
 80020a8:	4603      	mov	r3, r0
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d001      	beq.n	80020b2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80020ae:	2301      	movs	r3, #1
 80020b0:	e00e      	b.n	80020d0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	2b0f      	cmp	r3, #15
 80020b6:	d80a      	bhi.n	80020ce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80020b8:	2200      	movs	r2, #0
 80020ba:	6879      	ldr	r1, [r7, #4]
 80020bc:	f04f 30ff 	mov.w	r0, #4294967295
 80020c0:	f000 f927 	bl	8002312 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80020c4:	4a06      	ldr	r2, [pc, #24]	@ (80020e0 <HAL_InitTick+0x5c>)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80020ca:	2300      	movs	r3, #0
 80020cc:	e000      	b.n	80020d0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80020ce:	2301      	movs	r3, #1
}
 80020d0:	4618      	mov	r0, r3
 80020d2:	3708      	adds	r7, #8
 80020d4:	46bd      	mov	sp, r7
 80020d6:	bd80      	pop	{r7, pc}
 80020d8:	20000008 	.word	0x20000008
 80020dc:	20000010 	.word	0x20000010
 80020e0:	2000000c 	.word	0x2000000c

080020e4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80020e4:	b480      	push	{r7}
 80020e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80020e8:	4b05      	ldr	r3, [pc, #20]	@ (8002100 <HAL_IncTick+0x1c>)
 80020ea:	781b      	ldrb	r3, [r3, #0]
 80020ec:	461a      	mov	r2, r3
 80020ee:	4b05      	ldr	r3, [pc, #20]	@ (8002104 <HAL_IncTick+0x20>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	4413      	add	r3, r2
 80020f4:	4a03      	ldr	r2, [pc, #12]	@ (8002104 <HAL_IncTick+0x20>)
 80020f6:	6013      	str	r3, [r2, #0]
}
 80020f8:	bf00      	nop
 80020fa:	46bd      	mov	sp, r7
 80020fc:	bc80      	pop	{r7}
 80020fe:	4770      	bx	lr
 8002100:	20000010 	.word	0x20000010
 8002104:	200003ec 	.word	0x200003ec

08002108 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002108:	b480      	push	{r7}
 800210a:	af00      	add	r7, sp, #0
  return uwTick;
 800210c:	4b02      	ldr	r3, [pc, #8]	@ (8002118 <HAL_GetTick+0x10>)
 800210e:	681b      	ldr	r3, [r3, #0]
}
 8002110:	4618      	mov	r0, r3
 8002112:	46bd      	mov	sp, r7
 8002114:	bc80      	pop	{r7}
 8002116:	4770      	bx	lr
 8002118:	200003ec 	.word	0x200003ec

0800211c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b084      	sub	sp, #16
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002124:	f7ff fff0 	bl	8002108 <HAL_GetTick>
 8002128:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002134:	d005      	beq.n	8002142 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002136:	4b0a      	ldr	r3, [pc, #40]	@ (8002160 <HAL_Delay+0x44>)
 8002138:	781b      	ldrb	r3, [r3, #0]
 800213a:	461a      	mov	r2, r3
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	4413      	add	r3, r2
 8002140:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002142:	bf00      	nop
 8002144:	f7ff ffe0 	bl	8002108 <HAL_GetTick>
 8002148:	4602      	mov	r2, r0
 800214a:	68bb      	ldr	r3, [r7, #8]
 800214c:	1ad3      	subs	r3, r2, r3
 800214e:	68fa      	ldr	r2, [r7, #12]
 8002150:	429a      	cmp	r2, r3
 8002152:	d8f7      	bhi.n	8002144 <HAL_Delay+0x28>
  {
  }
}
 8002154:	bf00      	nop
 8002156:	bf00      	nop
 8002158:	3710      	adds	r7, #16
 800215a:	46bd      	mov	sp, r7
 800215c:	bd80      	pop	{r7, pc}
 800215e:	bf00      	nop
 8002160:	20000010 	.word	0x20000010

08002164 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002164:	b480      	push	{r7}
 8002166:	b085      	sub	sp, #20
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	f003 0307 	and.w	r3, r3, #7
 8002172:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002174:	4b0c      	ldr	r3, [pc, #48]	@ (80021a8 <__NVIC_SetPriorityGrouping+0x44>)
 8002176:	68db      	ldr	r3, [r3, #12]
 8002178:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800217a:	68ba      	ldr	r2, [r7, #8]
 800217c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002180:	4013      	ands	r3, r2
 8002182:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002188:	68bb      	ldr	r3, [r7, #8]
 800218a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800218c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002190:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002194:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002196:	4a04      	ldr	r2, [pc, #16]	@ (80021a8 <__NVIC_SetPriorityGrouping+0x44>)
 8002198:	68bb      	ldr	r3, [r7, #8]
 800219a:	60d3      	str	r3, [r2, #12]
}
 800219c:	bf00      	nop
 800219e:	3714      	adds	r7, #20
 80021a0:	46bd      	mov	sp, r7
 80021a2:	bc80      	pop	{r7}
 80021a4:	4770      	bx	lr
 80021a6:	bf00      	nop
 80021a8:	e000ed00 	.word	0xe000ed00

080021ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80021ac:	b480      	push	{r7}
 80021ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80021b0:	4b04      	ldr	r3, [pc, #16]	@ (80021c4 <__NVIC_GetPriorityGrouping+0x18>)
 80021b2:	68db      	ldr	r3, [r3, #12]
 80021b4:	0a1b      	lsrs	r3, r3, #8
 80021b6:	f003 0307 	and.w	r3, r3, #7
}
 80021ba:	4618      	mov	r0, r3
 80021bc:	46bd      	mov	sp, r7
 80021be:	bc80      	pop	{r7}
 80021c0:	4770      	bx	lr
 80021c2:	bf00      	nop
 80021c4:	e000ed00 	.word	0xe000ed00

080021c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021c8:	b480      	push	{r7}
 80021ca:	b083      	sub	sp, #12
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	4603      	mov	r3, r0
 80021d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	db0b      	blt.n	80021f2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80021da:	79fb      	ldrb	r3, [r7, #7]
 80021dc:	f003 021f 	and.w	r2, r3, #31
 80021e0:	4906      	ldr	r1, [pc, #24]	@ (80021fc <__NVIC_EnableIRQ+0x34>)
 80021e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021e6:	095b      	lsrs	r3, r3, #5
 80021e8:	2001      	movs	r0, #1
 80021ea:	fa00 f202 	lsl.w	r2, r0, r2
 80021ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80021f2:	bf00      	nop
 80021f4:	370c      	adds	r7, #12
 80021f6:	46bd      	mov	sp, r7
 80021f8:	bc80      	pop	{r7}
 80021fa:	4770      	bx	lr
 80021fc:	e000e100 	.word	0xe000e100

08002200 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002200:	b480      	push	{r7}
 8002202:	b083      	sub	sp, #12
 8002204:	af00      	add	r7, sp, #0
 8002206:	4603      	mov	r3, r0
 8002208:	6039      	str	r1, [r7, #0]
 800220a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800220c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002210:	2b00      	cmp	r3, #0
 8002212:	db0a      	blt.n	800222a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	b2da      	uxtb	r2, r3
 8002218:	490c      	ldr	r1, [pc, #48]	@ (800224c <__NVIC_SetPriority+0x4c>)
 800221a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800221e:	0112      	lsls	r2, r2, #4
 8002220:	b2d2      	uxtb	r2, r2
 8002222:	440b      	add	r3, r1
 8002224:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002228:	e00a      	b.n	8002240 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	b2da      	uxtb	r2, r3
 800222e:	4908      	ldr	r1, [pc, #32]	@ (8002250 <__NVIC_SetPriority+0x50>)
 8002230:	79fb      	ldrb	r3, [r7, #7]
 8002232:	f003 030f 	and.w	r3, r3, #15
 8002236:	3b04      	subs	r3, #4
 8002238:	0112      	lsls	r2, r2, #4
 800223a:	b2d2      	uxtb	r2, r2
 800223c:	440b      	add	r3, r1
 800223e:	761a      	strb	r2, [r3, #24]
}
 8002240:	bf00      	nop
 8002242:	370c      	adds	r7, #12
 8002244:	46bd      	mov	sp, r7
 8002246:	bc80      	pop	{r7}
 8002248:	4770      	bx	lr
 800224a:	bf00      	nop
 800224c:	e000e100 	.word	0xe000e100
 8002250:	e000ed00 	.word	0xe000ed00

08002254 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002254:	b480      	push	{r7}
 8002256:	b089      	sub	sp, #36	@ 0x24
 8002258:	af00      	add	r7, sp, #0
 800225a:	60f8      	str	r0, [r7, #12]
 800225c:	60b9      	str	r1, [r7, #8]
 800225e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	f003 0307 	and.w	r3, r3, #7
 8002266:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002268:	69fb      	ldr	r3, [r7, #28]
 800226a:	f1c3 0307 	rsb	r3, r3, #7
 800226e:	2b04      	cmp	r3, #4
 8002270:	bf28      	it	cs
 8002272:	2304      	movcs	r3, #4
 8002274:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002276:	69fb      	ldr	r3, [r7, #28]
 8002278:	3304      	adds	r3, #4
 800227a:	2b06      	cmp	r3, #6
 800227c:	d902      	bls.n	8002284 <NVIC_EncodePriority+0x30>
 800227e:	69fb      	ldr	r3, [r7, #28]
 8002280:	3b03      	subs	r3, #3
 8002282:	e000      	b.n	8002286 <NVIC_EncodePriority+0x32>
 8002284:	2300      	movs	r3, #0
 8002286:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002288:	f04f 32ff 	mov.w	r2, #4294967295
 800228c:	69bb      	ldr	r3, [r7, #24]
 800228e:	fa02 f303 	lsl.w	r3, r2, r3
 8002292:	43da      	mvns	r2, r3
 8002294:	68bb      	ldr	r3, [r7, #8]
 8002296:	401a      	ands	r2, r3
 8002298:	697b      	ldr	r3, [r7, #20]
 800229a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800229c:	f04f 31ff 	mov.w	r1, #4294967295
 80022a0:	697b      	ldr	r3, [r7, #20]
 80022a2:	fa01 f303 	lsl.w	r3, r1, r3
 80022a6:	43d9      	mvns	r1, r3
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022ac:	4313      	orrs	r3, r2
         );
}
 80022ae:	4618      	mov	r0, r3
 80022b0:	3724      	adds	r7, #36	@ 0x24
 80022b2:	46bd      	mov	sp, r7
 80022b4:	bc80      	pop	{r7}
 80022b6:	4770      	bx	lr

080022b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b082      	sub	sp, #8
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	3b01      	subs	r3, #1
 80022c4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80022c8:	d301      	bcc.n	80022ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80022ca:	2301      	movs	r3, #1
 80022cc:	e00f      	b.n	80022ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80022ce:	4a0a      	ldr	r2, [pc, #40]	@ (80022f8 <SysTick_Config+0x40>)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	3b01      	subs	r3, #1
 80022d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80022d6:	210f      	movs	r1, #15
 80022d8:	f04f 30ff 	mov.w	r0, #4294967295
 80022dc:	f7ff ff90 	bl	8002200 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80022e0:	4b05      	ldr	r3, [pc, #20]	@ (80022f8 <SysTick_Config+0x40>)
 80022e2:	2200      	movs	r2, #0
 80022e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80022e6:	4b04      	ldr	r3, [pc, #16]	@ (80022f8 <SysTick_Config+0x40>)
 80022e8:	2207      	movs	r2, #7
 80022ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80022ec:	2300      	movs	r3, #0
}
 80022ee:	4618      	mov	r0, r3
 80022f0:	3708      	adds	r7, #8
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bd80      	pop	{r7, pc}
 80022f6:	bf00      	nop
 80022f8:	e000e010 	.word	0xe000e010

080022fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b082      	sub	sp, #8
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002304:	6878      	ldr	r0, [r7, #4]
 8002306:	f7ff ff2d 	bl	8002164 <__NVIC_SetPriorityGrouping>
}
 800230a:	bf00      	nop
 800230c:	3708      	adds	r7, #8
 800230e:	46bd      	mov	sp, r7
 8002310:	bd80      	pop	{r7, pc}

08002312 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002312:	b580      	push	{r7, lr}
 8002314:	b086      	sub	sp, #24
 8002316:	af00      	add	r7, sp, #0
 8002318:	4603      	mov	r3, r0
 800231a:	60b9      	str	r1, [r7, #8]
 800231c:	607a      	str	r2, [r7, #4]
 800231e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002320:	2300      	movs	r3, #0
 8002322:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002324:	f7ff ff42 	bl	80021ac <__NVIC_GetPriorityGrouping>
 8002328:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800232a:	687a      	ldr	r2, [r7, #4]
 800232c:	68b9      	ldr	r1, [r7, #8]
 800232e:	6978      	ldr	r0, [r7, #20]
 8002330:	f7ff ff90 	bl	8002254 <NVIC_EncodePriority>
 8002334:	4602      	mov	r2, r0
 8002336:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800233a:	4611      	mov	r1, r2
 800233c:	4618      	mov	r0, r3
 800233e:	f7ff ff5f 	bl	8002200 <__NVIC_SetPriority>
}
 8002342:	bf00      	nop
 8002344:	3718      	adds	r7, #24
 8002346:	46bd      	mov	sp, r7
 8002348:	bd80      	pop	{r7, pc}

0800234a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800234a:	b580      	push	{r7, lr}
 800234c:	b082      	sub	sp, #8
 800234e:	af00      	add	r7, sp, #0
 8002350:	4603      	mov	r3, r0
 8002352:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002354:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002358:	4618      	mov	r0, r3
 800235a:	f7ff ff35 	bl	80021c8 <__NVIC_EnableIRQ>
}
 800235e:	bf00      	nop
 8002360:	3708      	adds	r7, #8
 8002362:	46bd      	mov	sp, r7
 8002364:	bd80      	pop	{r7, pc}

08002366 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002366:	b580      	push	{r7, lr}
 8002368:	b082      	sub	sp, #8
 800236a:	af00      	add	r7, sp, #0
 800236c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800236e:	6878      	ldr	r0, [r7, #4]
 8002370:	f7ff ffa2 	bl	80022b8 <SysTick_Config>
 8002374:	4603      	mov	r3, r0
}
 8002376:	4618      	mov	r0, r3
 8002378:	3708      	adds	r7, #8
 800237a:	46bd      	mov	sp, r7
 800237c:	bd80      	pop	{r7, pc}
	...

08002380 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002380:	b480      	push	{r7}
 8002382:	b085      	sub	sp, #20
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002388:	2300      	movs	r3, #0
 800238a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2b00      	cmp	r3, #0
 8002390:	d101      	bne.n	8002396 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002392:	2301      	movs	r3, #1
 8002394:	e043      	b.n	800241e <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	461a      	mov	r2, r3
 800239c:	4b22      	ldr	r3, [pc, #136]	@ (8002428 <HAL_DMA_Init+0xa8>)
 800239e:	4413      	add	r3, r2
 80023a0:	4a22      	ldr	r2, [pc, #136]	@ (800242c <HAL_DMA_Init+0xac>)
 80023a2:	fba2 2303 	umull	r2, r3, r2, r3
 80023a6:	091b      	lsrs	r3, r3, #4
 80023a8:	009a      	lsls	r2, r3, #2
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	4a1f      	ldr	r2, [pc, #124]	@ (8002430 <HAL_DMA_Init+0xb0>)
 80023b2:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	2202      	movs	r2, #2
 80023b8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80023ca:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80023ce:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80023d8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	68db      	ldr	r3, [r3, #12]
 80023de:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023e4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	695b      	ldr	r3, [r3, #20]
 80023ea:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023f0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	69db      	ldr	r3, [r3, #28]
 80023f6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80023f8:	68fa      	ldr	r2, [r7, #12]
 80023fa:	4313      	orrs	r3, r2
 80023fc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	68fa      	ldr	r2, [r7, #12]
 8002404:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	2200      	movs	r2, #0
 800240a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	2201      	movs	r2, #1
 8002410:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2200      	movs	r2, #0
 8002418:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800241c:	2300      	movs	r3, #0
}
 800241e:	4618      	mov	r0, r3
 8002420:	3714      	adds	r7, #20
 8002422:	46bd      	mov	sp, r7
 8002424:	bc80      	pop	{r7}
 8002426:	4770      	bx	lr
 8002428:	bffdfff8 	.word	0xbffdfff8
 800242c:	cccccccd 	.word	0xcccccccd
 8002430:	40020000 	.word	0x40020000

08002434 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b086      	sub	sp, #24
 8002438:	af00      	add	r7, sp, #0
 800243a:	60f8      	str	r0, [r7, #12]
 800243c:	60b9      	str	r1, [r7, #8]
 800243e:	607a      	str	r2, [r7, #4]
 8002440:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002442:	2300      	movs	r3, #0
 8002444:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	f893 3020 	ldrb.w	r3, [r3, #32]
 800244c:	2b01      	cmp	r3, #1
 800244e:	d101      	bne.n	8002454 <HAL_DMA_Start_IT+0x20>
 8002450:	2302      	movs	r3, #2
 8002452:	e04b      	b.n	80024ec <HAL_DMA_Start_IT+0xb8>
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	2201      	movs	r2, #1
 8002458:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002462:	b2db      	uxtb	r3, r3
 8002464:	2b01      	cmp	r3, #1
 8002466:	d13a      	bne.n	80024de <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	2202      	movs	r2, #2
 800246c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	2200      	movs	r2, #0
 8002474:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	681a      	ldr	r2, [r3, #0]
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f022 0201 	bic.w	r2, r2, #1
 8002484:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	687a      	ldr	r2, [r7, #4]
 800248a:	68b9      	ldr	r1, [r7, #8]
 800248c:	68f8      	ldr	r0, [r7, #12]
 800248e:	f000 f9eb 	bl	8002868 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002496:	2b00      	cmp	r3, #0
 8002498:	d008      	beq.n	80024ac <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	681a      	ldr	r2, [r3, #0]
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f042 020e 	orr.w	r2, r2, #14
 80024a8:	601a      	str	r2, [r3, #0]
 80024aa:	e00f      	b.n	80024cc <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	681a      	ldr	r2, [r3, #0]
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f022 0204 	bic.w	r2, r2, #4
 80024ba:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	681a      	ldr	r2, [r3, #0]
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f042 020a 	orr.w	r2, r2, #10
 80024ca:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	681a      	ldr	r2, [r3, #0]
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f042 0201 	orr.w	r2, r2, #1
 80024da:	601a      	str	r2, [r3, #0]
 80024dc:	e005      	b.n	80024ea <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	2200      	movs	r2, #0
 80024e2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80024e6:	2302      	movs	r3, #2
 80024e8:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80024ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80024ec:	4618      	mov	r0, r3
 80024ee:	3718      	adds	r7, #24
 80024f0:	46bd      	mov	sp, r7
 80024f2:	bd80      	pop	{r7, pc}

080024f4 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80024f4:	b480      	push	{r7}
 80024f6:	b085      	sub	sp, #20
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80024fc:	2300      	movs	r3, #0
 80024fe:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002506:	b2db      	uxtb	r3, r3
 8002508:	2b02      	cmp	r3, #2
 800250a:	d008      	beq.n	800251e <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2204      	movs	r2, #4
 8002510:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	2200      	movs	r2, #0
 8002516:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800251a:	2301      	movs	r3, #1
 800251c:	e020      	b.n	8002560 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	681a      	ldr	r2, [r3, #0]
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f022 020e 	bic.w	r2, r2, #14
 800252c:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	681a      	ldr	r2, [r3, #0]
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f022 0201 	bic.w	r2, r2, #1
 800253c:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002546:	2101      	movs	r1, #1
 8002548:	fa01 f202 	lsl.w	r2, r1, r2
 800254c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	2201      	movs	r2, #1
 8002552:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	2200      	movs	r2, #0
 800255a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800255e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002560:	4618      	mov	r0, r3
 8002562:	3714      	adds	r7, #20
 8002564:	46bd      	mov	sp, r7
 8002566:	bc80      	pop	{r7}
 8002568:	4770      	bx	lr
	...

0800256c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800256c:	b580      	push	{r7, lr}
 800256e:	b084      	sub	sp, #16
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002574:	2300      	movs	r3, #0
 8002576:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800257e:	b2db      	uxtb	r3, r3
 8002580:	2b02      	cmp	r3, #2
 8002582:	d005      	beq.n	8002590 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2204      	movs	r2, #4
 8002588:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 800258a:	2301      	movs	r3, #1
 800258c:	73fb      	strb	r3, [r7, #15]
 800258e:	e051      	b.n	8002634 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	681a      	ldr	r2, [r3, #0]
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f022 020e 	bic.w	r2, r2, #14
 800259e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	681a      	ldr	r2, [r3, #0]
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f022 0201 	bic.w	r2, r2, #1
 80025ae:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	4a22      	ldr	r2, [pc, #136]	@ (8002640 <HAL_DMA_Abort_IT+0xd4>)
 80025b6:	4293      	cmp	r3, r2
 80025b8:	d029      	beq.n	800260e <HAL_DMA_Abort_IT+0xa2>
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	4a21      	ldr	r2, [pc, #132]	@ (8002644 <HAL_DMA_Abort_IT+0xd8>)
 80025c0:	4293      	cmp	r3, r2
 80025c2:	d022      	beq.n	800260a <HAL_DMA_Abort_IT+0x9e>
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	4a1f      	ldr	r2, [pc, #124]	@ (8002648 <HAL_DMA_Abort_IT+0xdc>)
 80025ca:	4293      	cmp	r3, r2
 80025cc:	d01a      	beq.n	8002604 <HAL_DMA_Abort_IT+0x98>
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	4a1e      	ldr	r2, [pc, #120]	@ (800264c <HAL_DMA_Abort_IT+0xe0>)
 80025d4:	4293      	cmp	r3, r2
 80025d6:	d012      	beq.n	80025fe <HAL_DMA_Abort_IT+0x92>
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	4a1c      	ldr	r2, [pc, #112]	@ (8002650 <HAL_DMA_Abort_IT+0xe4>)
 80025de:	4293      	cmp	r3, r2
 80025e0:	d00a      	beq.n	80025f8 <HAL_DMA_Abort_IT+0x8c>
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	4a1b      	ldr	r2, [pc, #108]	@ (8002654 <HAL_DMA_Abort_IT+0xe8>)
 80025e8:	4293      	cmp	r3, r2
 80025ea:	d102      	bne.n	80025f2 <HAL_DMA_Abort_IT+0x86>
 80025ec:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80025f0:	e00e      	b.n	8002610 <HAL_DMA_Abort_IT+0xa4>
 80025f2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80025f6:	e00b      	b.n	8002610 <HAL_DMA_Abort_IT+0xa4>
 80025f8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80025fc:	e008      	b.n	8002610 <HAL_DMA_Abort_IT+0xa4>
 80025fe:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002602:	e005      	b.n	8002610 <HAL_DMA_Abort_IT+0xa4>
 8002604:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002608:	e002      	b.n	8002610 <HAL_DMA_Abort_IT+0xa4>
 800260a:	2310      	movs	r3, #16
 800260c:	e000      	b.n	8002610 <HAL_DMA_Abort_IT+0xa4>
 800260e:	2301      	movs	r3, #1
 8002610:	4a11      	ldr	r2, [pc, #68]	@ (8002658 <HAL_DMA_Abort_IT+0xec>)
 8002612:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2201      	movs	r2, #1
 8002618:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2200      	movs	r2, #0
 8002620:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002628:	2b00      	cmp	r3, #0
 800262a:	d003      	beq.n	8002634 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002630:	6878      	ldr	r0, [r7, #4]
 8002632:	4798      	blx	r3
    } 
  }
  return status;
 8002634:	7bfb      	ldrb	r3, [r7, #15]
}
 8002636:	4618      	mov	r0, r3
 8002638:	3710      	adds	r7, #16
 800263a:	46bd      	mov	sp, r7
 800263c:	bd80      	pop	{r7, pc}
 800263e:	bf00      	nop
 8002640:	40020008 	.word	0x40020008
 8002644:	4002001c 	.word	0x4002001c
 8002648:	40020030 	.word	0x40020030
 800264c:	40020044 	.word	0x40020044
 8002650:	40020058 	.word	0x40020058
 8002654:	4002006c 	.word	0x4002006c
 8002658:	40020000 	.word	0x40020000

0800265c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b084      	sub	sp, #16
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002678:	2204      	movs	r2, #4
 800267a:	409a      	lsls	r2, r3
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	4013      	ands	r3, r2
 8002680:	2b00      	cmp	r3, #0
 8002682:	d04f      	beq.n	8002724 <HAL_DMA_IRQHandler+0xc8>
 8002684:	68bb      	ldr	r3, [r7, #8]
 8002686:	f003 0304 	and.w	r3, r3, #4
 800268a:	2b00      	cmp	r3, #0
 800268c:	d04a      	beq.n	8002724 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f003 0320 	and.w	r3, r3, #32
 8002698:	2b00      	cmp	r3, #0
 800269a:	d107      	bne.n	80026ac <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	681a      	ldr	r2, [r3, #0]
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f022 0204 	bic.w	r2, r2, #4
 80026aa:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	4a66      	ldr	r2, [pc, #408]	@ (800284c <HAL_DMA_IRQHandler+0x1f0>)
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d029      	beq.n	800270a <HAL_DMA_IRQHandler+0xae>
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	4a65      	ldr	r2, [pc, #404]	@ (8002850 <HAL_DMA_IRQHandler+0x1f4>)
 80026bc:	4293      	cmp	r3, r2
 80026be:	d022      	beq.n	8002706 <HAL_DMA_IRQHandler+0xaa>
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	4a63      	ldr	r2, [pc, #396]	@ (8002854 <HAL_DMA_IRQHandler+0x1f8>)
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d01a      	beq.n	8002700 <HAL_DMA_IRQHandler+0xa4>
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	4a62      	ldr	r2, [pc, #392]	@ (8002858 <HAL_DMA_IRQHandler+0x1fc>)
 80026d0:	4293      	cmp	r3, r2
 80026d2:	d012      	beq.n	80026fa <HAL_DMA_IRQHandler+0x9e>
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	4a60      	ldr	r2, [pc, #384]	@ (800285c <HAL_DMA_IRQHandler+0x200>)
 80026da:	4293      	cmp	r3, r2
 80026dc:	d00a      	beq.n	80026f4 <HAL_DMA_IRQHandler+0x98>
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	4a5f      	ldr	r2, [pc, #380]	@ (8002860 <HAL_DMA_IRQHandler+0x204>)
 80026e4:	4293      	cmp	r3, r2
 80026e6:	d102      	bne.n	80026ee <HAL_DMA_IRQHandler+0x92>
 80026e8:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80026ec:	e00e      	b.n	800270c <HAL_DMA_IRQHandler+0xb0>
 80026ee:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80026f2:	e00b      	b.n	800270c <HAL_DMA_IRQHandler+0xb0>
 80026f4:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80026f8:	e008      	b.n	800270c <HAL_DMA_IRQHandler+0xb0>
 80026fa:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80026fe:	e005      	b.n	800270c <HAL_DMA_IRQHandler+0xb0>
 8002700:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002704:	e002      	b.n	800270c <HAL_DMA_IRQHandler+0xb0>
 8002706:	2340      	movs	r3, #64	@ 0x40
 8002708:	e000      	b.n	800270c <HAL_DMA_IRQHandler+0xb0>
 800270a:	2304      	movs	r3, #4
 800270c:	4a55      	ldr	r2, [pc, #340]	@ (8002864 <HAL_DMA_IRQHandler+0x208>)
 800270e:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002714:	2b00      	cmp	r3, #0
 8002716:	f000 8094 	beq.w	8002842 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800271e:	6878      	ldr	r0, [r7, #4]
 8002720:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8002722:	e08e      	b.n	8002842 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002728:	2202      	movs	r2, #2
 800272a:	409a      	lsls	r2, r3
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	4013      	ands	r3, r2
 8002730:	2b00      	cmp	r3, #0
 8002732:	d056      	beq.n	80027e2 <HAL_DMA_IRQHandler+0x186>
 8002734:	68bb      	ldr	r3, [r7, #8]
 8002736:	f003 0302 	and.w	r3, r3, #2
 800273a:	2b00      	cmp	r3, #0
 800273c:	d051      	beq.n	80027e2 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f003 0320 	and.w	r3, r3, #32
 8002748:	2b00      	cmp	r3, #0
 800274a:	d10b      	bne.n	8002764 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	681a      	ldr	r2, [r3, #0]
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f022 020a 	bic.w	r2, r2, #10
 800275a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2201      	movs	r2, #1
 8002760:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	4a38      	ldr	r2, [pc, #224]	@ (800284c <HAL_DMA_IRQHandler+0x1f0>)
 800276a:	4293      	cmp	r3, r2
 800276c:	d029      	beq.n	80027c2 <HAL_DMA_IRQHandler+0x166>
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	4a37      	ldr	r2, [pc, #220]	@ (8002850 <HAL_DMA_IRQHandler+0x1f4>)
 8002774:	4293      	cmp	r3, r2
 8002776:	d022      	beq.n	80027be <HAL_DMA_IRQHandler+0x162>
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	4a35      	ldr	r2, [pc, #212]	@ (8002854 <HAL_DMA_IRQHandler+0x1f8>)
 800277e:	4293      	cmp	r3, r2
 8002780:	d01a      	beq.n	80027b8 <HAL_DMA_IRQHandler+0x15c>
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	4a34      	ldr	r2, [pc, #208]	@ (8002858 <HAL_DMA_IRQHandler+0x1fc>)
 8002788:	4293      	cmp	r3, r2
 800278a:	d012      	beq.n	80027b2 <HAL_DMA_IRQHandler+0x156>
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	4a32      	ldr	r2, [pc, #200]	@ (800285c <HAL_DMA_IRQHandler+0x200>)
 8002792:	4293      	cmp	r3, r2
 8002794:	d00a      	beq.n	80027ac <HAL_DMA_IRQHandler+0x150>
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	4a31      	ldr	r2, [pc, #196]	@ (8002860 <HAL_DMA_IRQHandler+0x204>)
 800279c:	4293      	cmp	r3, r2
 800279e:	d102      	bne.n	80027a6 <HAL_DMA_IRQHandler+0x14a>
 80027a0:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80027a4:	e00e      	b.n	80027c4 <HAL_DMA_IRQHandler+0x168>
 80027a6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80027aa:	e00b      	b.n	80027c4 <HAL_DMA_IRQHandler+0x168>
 80027ac:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80027b0:	e008      	b.n	80027c4 <HAL_DMA_IRQHandler+0x168>
 80027b2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80027b6:	e005      	b.n	80027c4 <HAL_DMA_IRQHandler+0x168>
 80027b8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80027bc:	e002      	b.n	80027c4 <HAL_DMA_IRQHandler+0x168>
 80027be:	2320      	movs	r3, #32
 80027c0:	e000      	b.n	80027c4 <HAL_DMA_IRQHandler+0x168>
 80027c2:	2302      	movs	r3, #2
 80027c4:	4a27      	ldr	r2, [pc, #156]	@ (8002864 <HAL_DMA_IRQHandler+0x208>)
 80027c6:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2200      	movs	r2, #0
 80027cc:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d034      	beq.n	8002842 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027dc:	6878      	ldr	r0, [r7, #4]
 80027de:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80027e0:	e02f      	b.n	8002842 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027e6:	2208      	movs	r2, #8
 80027e8:	409a      	lsls	r2, r3
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	4013      	ands	r3, r2
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d028      	beq.n	8002844 <HAL_DMA_IRQHandler+0x1e8>
 80027f2:	68bb      	ldr	r3, [r7, #8]
 80027f4:	f003 0308 	and.w	r3, r3, #8
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d023      	beq.n	8002844 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	681a      	ldr	r2, [r3, #0]
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f022 020e 	bic.w	r2, r2, #14
 800280a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002814:	2101      	movs	r1, #1
 8002816:	fa01 f202 	lsl.w	r2, r1, r2
 800281a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2201      	movs	r2, #1
 8002820:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	2201      	movs	r2, #1
 8002826:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	2200      	movs	r2, #0
 800282e:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002836:	2b00      	cmp	r3, #0
 8002838:	d004      	beq.n	8002844 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800283e:	6878      	ldr	r0, [r7, #4]
 8002840:	4798      	blx	r3
    }
  }
  return;
 8002842:	bf00      	nop
 8002844:	bf00      	nop
}
 8002846:	3710      	adds	r7, #16
 8002848:	46bd      	mov	sp, r7
 800284a:	bd80      	pop	{r7, pc}
 800284c:	40020008 	.word	0x40020008
 8002850:	4002001c 	.word	0x4002001c
 8002854:	40020030 	.word	0x40020030
 8002858:	40020044 	.word	0x40020044
 800285c:	40020058 	.word	0x40020058
 8002860:	4002006c 	.word	0x4002006c
 8002864:	40020000 	.word	0x40020000

08002868 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002868:	b480      	push	{r7}
 800286a:	b085      	sub	sp, #20
 800286c:	af00      	add	r7, sp, #0
 800286e:	60f8      	str	r0, [r7, #12]
 8002870:	60b9      	str	r1, [r7, #8]
 8002872:	607a      	str	r2, [r7, #4]
 8002874:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800287e:	2101      	movs	r1, #1
 8002880:	fa01 f202 	lsl.w	r2, r1, r2
 8002884:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	683a      	ldr	r2, [r7, #0]
 800288c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	685b      	ldr	r3, [r3, #4]
 8002892:	2b10      	cmp	r3, #16
 8002894:	d108      	bne.n	80028a8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	687a      	ldr	r2, [r7, #4]
 800289c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	68ba      	ldr	r2, [r7, #8]
 80028a4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80028a6:	e007      	b.n	80028b8 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	68ba      	ldr	r2, [r7, #8]
 80028ae:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	687a      	ldr	r2, [r7, #4]
 80028b6:	60da      	str	r2, [r3, #12]
}
 80028b8:	bf00      	nop
 80028ba:	3714      	adds	r7, #20
 80028bc:	46bd      	mov	sp, r7
 80028be:	bc80      	pop	{r7}
 80028c0:	4770      	bx	lr
	...

080028c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80028c4:	b480      	push	{r7}
 80028c6:	b08b      	sub	sp, #44	@ 0x2c
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
 80028cc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80028ce:	2300      	movs	r3, #0
 80028d0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80028d2:	2300      	movs	r3, #0
 80028d4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80028d6:	e169      	b.n	8002bac <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80028d8:	2201      	movs	r2, #1
 80028da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028dc:	fa02 f303 	lsl.w	r3, r2, r3
 80028e0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	69fa      	ldr	r2, [r7, #28]
 80028e8:	4013      	ands	r3, r2
 80028ea:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80028ec:	69ba      	ldr	r2, [r7, #24]
 80028ee:	69fb      	ldr	r3, [r7, #28]
 80028f0:	429a      	cmp	r2, r3
 80028f2:	f040 8158 	bne.w	8002ba6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	685b      	ldr	r3, [r3, #4]
 80028fa:	4a9a      	ldr	r2, [pc, #616]	@ (8002b64 <HAL_GPIO_Init+0x2a0>)
 80028fc:	4293      	cmp	r3, r2
 80028fe:	d05e      	beq.n	80029be <HAL_GPIO_Init+0xfa>
 8002900:	4a98      	ldr	r2, [pc, #608]	@ (8002b64 <HAL_GPIO_Init+0x2a0>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d875      	bhi.n	80029f2 <HAL_GPIO_Init+0x12e>
 8002906:	4a98      	ldr	r2, [pc, #608]	@ (8002b68 <HAL_GPIO_Init+0x2a4>)
 8002908:	4293      	cmp	r3, r2
 800290a:	d058      	beq.n	80029be <HAL_GPIO_Init+0xfa>
 800290c:	4a96      	ldr	r2, [pc, #600]	@ (8002b68 <HAL_GPIO_Init+0x2a4>)
 800290e:	4293      	cmp	r3, r2
 8002910:	d86f      	bhi.n	80029f2 <HAL_GPIO_Init+0x12e>
 8002912:	4a96      	ldr	r2, [pc, #600]	@ (8002b6c <HAL_GPIO_Init+0x2a8>)
 8002914:	4293      	cmp	r3, r2
 8002916:	d052      	beq.n	80029be <HAL_GPIO_Init+0xfa>
 8002918:	4a94      	ldr	r2, [pc, #592]	@ (8002b6c <HAL_GPIO_Init+0x2a8>)
 800291a:	4293      	cmp	r3, r2
 800291c:	d869      	bhi.n	80029f2 <HAL_GPIO_Init+0x12e>
 800291e:	4a94      	ldr	r2, [pc, #592]	@ (8002b70 <HAL_GPIO_Init+0x2ac>)
 8002920:	4293      	cmp	r3, r2
 8002922:	d04c      	beq.n	80029be <HAL_GPIO_Init+0xfa>
 8002924:	4a92      	ldr	r2, [pc, #584]	@ (8002b70 <HAL_GPIO_Init+0x2ac>)
 8002926:	4293      	cmp	r3, r2
 8002928:	d863      	bhi.n	80029f2 <HAL_GPIO_Init+0x12e>
 800292a:	4a92      	ldr	r2, [pc, #584]	@ (8002b74 <HAL_GPIO_Init+0x2b0>)
 800292c:	4293      	cmp	r3, r2
 800292e:	d046      	beq.n	80029be <HAL_GPIO_Init+0xfa>
 8002930:	4a90      	ldr	r2, [pc, #576]	@ (8002b74 <HAL_GPIO_Init+0x2b0>)
 8002932:	4293      	cmp	r3, r2
 8002934:	d85d      	bhi.n	80029f2 <HAL_GPIO_Init+0x12e>
 8002936:	2b12      	cmp	r3, #18
 8002938:	d82a      	bhi.n	8002990 <HAL_GPIO_Init+0xcc>
 800293a:	2b12      	cmp	r3, #18
 800293c:	d859      	bhi.n	80029f2 <HAL_GPIO_Init+0x12e>
 800293e:	a201      	add	r2, pc, #4	@ (adr r2, 8002944 <HAL_GPIO_Init+0x80>)
 8002940:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002944:	080029bf 	.word	0x080029bf
 8002948:	08002999 	.word	0x08002999
 800294c:	080029ab 	.word	0x080029ab
 8002950:	080029ed 	.word	0x080029ed
 8002954:	080029f3 	.word	0x080029f3
 8002958:	080029f3 	.word	0x080029f3
 800295c:	080029f3 	.word	0x080029f3
 8002960:	080029f3 	.word	0x080029f3
 8002964:	080029f3 	.word	0x080029f3
 8002968:	080029f3 	.word	0x080029f3
 800296c:	080029f3 	.word	0x080029f3
 8002970:	080029f3 	.word	0x080029f3
 8002974:	080029f3 	.word	0x080029f3
 8002978:	080029f3 	.word	0x080029f3
 800297c:	080029f3 	.word	0x080029f3
 8002980:	080029f3 	.word	0x080029f3
 8002984:	080029f3 	.word	0x080029f3
 8002988:	080029a1 	.word	0x080029a1
 800298c:	080029b5 	.word	0x080029b5
 8002990:	4a79      	ldr	r2, [pc, #484]	@ (8002b78 <HAL_GPIO_Init+0x2b4>)
 8002992:	4293      	cmp	r3, r2
 8002994:	d013      	beq.n	80029be <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002996:	e02c      	b.n	80029f2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	68db      	ldr	r3, [r3, #12]
 800299c:	623b      	str	r3, [r7, #32]
          break;
 800299e:	e029      	b.n	80029f4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	68db      	ldr	r3, [r3, #12]
 80029a4:	3304      	adds	r3, #4
 80029a6:	623b      	str	r3, [r7, #32]
          break;
 80029a8:	e024      	b.n	80029f4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	68db      	ldr	r3, [r3, #12]
 80029ae:	3308      	adds	r3, #8
 80029b0:	623b      	str	r3, [r7, #32]
          break;
 80029b2:	e01f      	b.n	80029f4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	68db      	ldr	r3, [r3, #12]
 80029b8:	330c      	adds	r3, #12
 80029ba:	623b      	str	r3, [r7, #32]
          break;
 80029bc:	e01a      	b.n	80029f4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	689b      	ldr	r3, [r3, #8]
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d102      	bne.n	80029cc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80029c6:	2304      	movs	r3, #4
 80029c8:	623b      	str	r3, [r7, #32]
          break;
 80029ca:	e013      	b.n	80029f4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	689b      	ldr	r3, [r3, #8]
 80029d0:	2b01      	cmp	r3, #1
 80029d2:	d105      	bne.n	80029e0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80029d4:	2308      	movs	r3, #8
 80029d6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	69fa      	ldr	r2, [r7, #28]
 80029dc:	611a      	str	r2, [r3, #16]
          break;
 80029de:	e009      	b.n	80029f4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80029e0:	2308      	movs	r3, #8
 80029e2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	69fa      	ldr	r2, [r7, #28]
 80029e8:	615a      	str	r2, [r3, #20]
          break;
 80029ea:	e003      	b.n	80029f4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80029ec:	2300      	movs	r3, #0
 80029ee:	623b      	str	r3, [r7, #32]
          break;
 80029f0:	e000      	b.n	80029f4 <HAL_GPIO_Init+0x130>
          break;
 80029f2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80029f4:	69bb      	ldr	r3, [r7, #24]
 80029f6:	2bff      	cmp	r3, #255	@ 0xff
 80029f8:	d801      	bhi.n	80029fe <HAL_GPIO_Init+0x13a>
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	e001      	b.n	8002a02 <HAL_GPIO_Init+0x13e>
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	3304      	adds	r3, #4
 8002a02:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002a04:	69bb      	ldr	r3, [r7, #24]
 8002a06:	2bff      	cmp	r3, #255	@ 0xff
 8002a08:	d802      	bhi.n	8002a10 <HAL_GPIO_Init+0x14c>
 8002a0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a0c:	009b      	lsls	r3, r3, #2
 8002a0e:	e002      	b.n	8002a16 <HAL_GPIO_Init+0x152>
 8002a10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a12:	3b08      	subs	r3, #8
 8002a14:	009b      	lsls	r3, r3, #2
 8002a16:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002a18:	697b      	ldr	r3, [r7, #20]
 8002a1a:	681a      	ldr	r2, [r3, #0]
 8002a1c:	210f      	movs	r1, #15
 8002a1e:	693b      	ldr	r3, [r7, #16]
 8002a20:	fa01 f303 	lsl.w	r3, r1, r3
 8002a24:	43db      	mvns	r3, r3
 8002a26:	401a      	ands	r2, r3
 8002a28:	6a39      	ldr	r1, [r7, #32]
 8002a2a:	693b      	ldr	r3, [r7, #16]
 8002a2c:	fa01 f303 	lsl.w	r3, r1, r3
 8002a30:	431a      	orrs	r2, r3
 8002a32:	697b      	ldr	r3, [r7, #20]
 8002a34:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002a36:	683b      	ldr	r3, [r7, #0]
 8002a38:	685b      	ldr	r3, [r3, #4]
 8002a3a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	f000 80b1 	beq.w	8002ba6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002a44:	4b4d      	ldr	r3, [pc, #308]	@ (8002b7c <HAL_GPIO_Init+0x2b8>)
 8002a46:	699b      	ldr	r3, [r3, #24]
 8002a48:	4a4c      	ldr	r2, [pc, #304]	@ (8002b7c <HAL_GPIO_Init+0x2b8>)
 8002a4a:	f043 0301 	orr.w	r3, r3, #1
 8002a4e:	6193      	str	r3, [r2, #24]
 8002a50:	4b4a      	ldr	r3, [pc, #296]	@ (8002b7c <HAL_GPIO_Init+0x2b8>)
 8002a52:	699b      	ldr	r3, [r3, #24]
 8002a54:	f003 0301 	and.w	r3, r3, #1
 8002a58:	60bb      	str	r3, [r7, #8]
 8002a5a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002a5c:	4a48      	ldr	r2, [pc, #288]	@ (8002b80 <HAL_GPIO_Init+0x2bc>)
 8002a5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a60:	089b      	lsrs	r3, r3, #2
 8002a62:	3302      	adds	r3, #2
 8002a64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a68:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002a6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a6c:	f003 0303 	and.w	r3, r3, #3
 8002a70:	009b      	lsls	r3, r3, #2
 8002a72:	220f      	movs	r2, #15
 8002a74:	fa02 f303 	lsl.w	r3, r2, r3
 8002a78:	43db      	mvns	r3, r3
 8002a7a:	68fa      	ldr	r2, [r7, #12]
 8002a7c:	4013      	ands	r3, r2
 8002a7e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	4a40      	ldr	r2, [pc, #256]	@ (8002b84 <HAL_GPIO_Init+0x2c0>)
 8002a84:	4293      	cmp	r3, r2
 8002a86:	d013      	beq.n	8002ab0 <HAL_GPIO_Init+0x1ec>
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	4a3f      	ldr	r2, [pc, #252]	@ (8002b88 <HAL_GPIO_Init+0x2c4>)
 8002a8c:	4293      	cmp	r3, r2
 8002a8e:	d00d      	beq.n	8002aac <HAL_GPIO_Init+0x1e8>
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	4a3e      	ldr	r2, [pc, #248]	@ (8002b8c <HAL_GPIO_Init+0x2c8>)
 8002a94:	4293      	cmp	r3, r2
 8002a96:	d007      	beq.n	8002aa8 <HAL_GPIO_Init+0x1e4>
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	4a3d      	ldr	r2, [pc, #244]	@ (8002b90 <HAL_GPIO_Init+0x2cc>)
 8002a9c:	4293      	cmp	r3, r2
 8002a9e:	d101      	bne.n	8002aa4 <HAL_GPIO_Init+0x1e0>
 8002aa0:	2303      	movs	r3, #3
 8002aa2:	e006      	b.n	8002ab2 <HAL_GPIO_Init+0x1ee>
 8002aa4:	2304      	movs	r3, #4
 8002aa6:	e004      	b.n	8002ab2 <HAL_GPIO_Init+0x1ee>
 8002aa8:	2302      	movs	r3, #2
 8002aaa:	e002      	b.n	8002ab2 <HAL_GPIO_Init+0x1ee>
 8002aac:	2301      	movs	r3, #1
 8002aae:	e000      	b.n	8002ab2 <HAL_GPIO_Init+0x1ee>
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ab4:	f002 0203 	and.w	r2, r2, #3
 8002ab8:	0092      	lsls	r2, r2, #2
 8002aba:	4093      	lsls	r3, r2
 8002abc:	68fa      	ldr	r2, [r7, #12]
 8002abe:	4313      	orrs	r3, r2
 8002ac0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002ac2:	492f      	ldr	r1, [pc, #188]	@ (8002b80 <HAL_GPIO_Init+0x2bc>)
 8002ac4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ac6:	089b      	lsrs	r3, r3, #2
 8002ac8:	3302      	adds	r3, #2
 8002aca:	68fa      	ldr	r2, [r7, #12]
 8002acc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	685b      	ldr	r3, [r3, #4]
 8002ad4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d006      	beq.n	8002aea <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002adc:	4b2d      	ldr	r3, [pc, #180]	@ (8002b94 <HAL_GPIO_Init+0x2d0>)
 8002ade:	689a      	ldr	r2, [r3, #8]
 8002ae0:	492c      	ldr	r1, [pc, #176]	@ (8002b94 <HAL_GPIO_Init+0x2d0>)
 8002ae2:	69bb      	ldr	r3, [r7, #24]
 8002ae4:	4313      	orrs	r3, r2
 8002ae6:	608b      	str	r3, [r1, #8]
 8002ae8:	e006      	b.n	8002af8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002aea:	4b2a      	ldr	r3, [pc, #168]	@ (8002b94 <HAL_GPIO_Init+0x2d0>)
 8002aec:	689a      	ldr	r2, [r3, #8]
 8002aee:	69bb      	ldr	r3, [r7, #24]
 8002af0:	43db      	mvns	r3, r3
 8002af2:	4928      	ldr	r1, [pc, #160]	@ (8002b94 <HAL_GPIO_Init+0x2d0>)
 8002af4:	4013      	ands	r3, r2
 8002af6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	685b      	ldr	r3, [r3, #4]
 8002afc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d006      	beq.n	8002b12 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002b04:	4b23      	ldr	r3, [pc, #140]	@ (8002b94 <HAL_GPIO_Init+0x2d0>)
 8002b06:	68da      	ldr	r2, [r3, #12]
 8002b08:	4922      	ldr	r1, [pc, #136]	@ (8002b94 <HAL_GPIO_Init+0x2d0>)
 8002b0a:	69bb      	ldr	r3, [r7, #24]
 8002b0c:	4313      	orrs	r3, r2
 8002b0e:	60cb      	str	r3, [r1, #12]
 8002b10:	e006      	b.n	8002b20 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002b12:	4b20      	ldr	r3, [pc, #128]	@ (8002b94 <HAL_GPIO_Init+0x2d0>)
 8002b14:	68da      	ldr	r2, [r3, #12]
 8002b16:	69bb      	ldr	r3, [r7, #24]
 8002b18:	43db      	mvns	r3, r3
 8002b1a:	491e      	ldr	r1, [pc, #120]	@ (8002b94 <HAL_GPIO_Init+0x2d0>)
 8002b1c:	4013      	ands	r3, r2
 8002b1e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	685b      	ldr	r3, [r3, #4]
 8002b24:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d006      	beq.n	8002b3a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002b2c:	4b19      	ldr	r3, [pc, #100]	@ (8002b94 <HAL_GPIO_Init+0x2d0>)
 8002b2e:	685a      	ldr	r2, [r3, #4]
 8002b30:	4918      	ldr	r1, [pc, #96]	@ (8002b94 <HAL_GPIO_Init+0x2d0>)
 8002b32:	69bb      	ldr	r3, [r7, #24]
 8002b34:	4313      	orrs	r3, r2
 8002b36:	604b      	str	r3, [r1, #4]
 8002b38:	e006      	b.n	8002b48 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002b3a:	4b16      	ldr	r3, [pc, #88]	@ (8002b94 <HAL_GPIO_Init+0x2d0>)
 8002b3c:	685a      	ldr	r2, [r3, #4]
 8002b3e:	69bb      	ldr	r3, [r7, #24]
 8002b40:	43db      	mvns	r3, r3
 8002b42:	4914      	ldr	r1, [pc, #80]	@ (8002b94 <HAL_GPIO_Init+0x2d0>)
 8002b44:	4013      	ands	r3, r2
 8002b46:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	685b      	ldr	r3, [r3, #4]
 8002b4c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d021      	beq.n	8002b98 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002b54:	4b0f      	ldr	r3, [pc, #60]	@ (8002b94 <HAL_GPIO_Init+0x2d0>)
 8002b56:	681a      	ldr	r2, [r3, #0]
 8002b58:	490e      	ldr	r1, [pc, #56]	@ (8002b94 <HAL_GPIO_Init+0x2d0>)
 8002b5a:	69bb      	ldr	r3, [r7, #24]
 8002b5c:	4313      	orrs	r3, r2
 8002b5e:	600b      	str	r3, [r1, #0]
 8002b60:	e021      	b.n	8002ba6 <HAL_GPIO_Init+0x2e2>
 8002b62:	bf00      	nop
 8002b64:	10320000 	.word	0x10320000
 8002b68:	10310000 	.word	0x10310000
 8002b6c:	10220000 	.word	0x10220000
 8002b70:	10210000 	.word	0x10210000
 8002b74:	10120000 	.word	0x10120000
 8002b78:	10110000 	.word	0x10110000
 8002b7c:	40021000 	.word	0x40021000
 8002b80:	40010000 	.word	0x40010000
 8002b84:	40010800 	.word	0x40010800
 8002b88:	40010c00 	.word	0x40010c00
 8002b8c:	40011000 	.word	0x40011000
 8002b90:	40011400 	.word	0x40011400
 8002b94:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002b98:	4b0b      	ldr	r3, [pc, #44]	@ (8002bc8 <HAL_GPIO_Init+0x304>)
 8002b9a:	681a      	ldr	r2, [r3, #0]
 8002b9c:	69bb      	ldr	r3, [r7, #24]
 8002b9e:	43db      	mvns	r3, r3
 8002ba0:	4909      	ldr	r1, [pc, #36]	@ (8002bc8 <HAL_GPIO_Init+0x304>)
 8002ba2:	4013      	ands	r3, r2
 8002ba4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002ba6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ba8:	3301      	adds	r3, #1
 8002baa:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	681a      	ldr	r2, [r3, #0]
 8002bb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bb2:	fa22 f303 	lsr.w	r3, r2, r3
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	f47f ae8e 	bne.w	80028d8 <HAL_GPIO_Init+0x14>
  }
}
 8002bbc:	bf00      	nop
 8002bbe:	bf00      	nop
 8002bc0:	372c      	adds	r7, #44	@ 0x2c
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	bc80      	pop	{r7}
 8002bc6:	4770      	bx	lr
 8002bc8:	40010400 	.word	0x40010400

08002bcc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002bcc:	b480      	push	{r7}
 8002bce:	b085      	sub	sp, #20
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
 8002bd4:	460b      	mov	r3, r1
 8002bd6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	689a      	ldr	r2, [r3, #8]
 8002bdc:	887b      	ldrh	r3, [r7, #2]
 8002bde:	4013      	ands	r3, r2
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d002      	beq.n	8002bea <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002be4:	2301      	movs	r3, #1
 8002be6:	73fb      	strb	r3, [r7, #15]
 8002be8:	e001      	b.n	8002bee <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002bea:	2300      	movs	r3, #0
 8002bec:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002bee:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	3714      	adds	r7, #20
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	bc80      	pop	{r7}
 8002bf8:	4770      	bx	lr

08002bfa <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002bfa:	b480      	push	{r7}
 8002bfc:	b083      	sub	sp, #12
 8002bfe:	af00      	add	r7, sp, #0
 8002c00:	6078      	str	r0, [r7, #4]
 8002c02:	460b      	mov	r3, r1
 8002c04:	807b      	strh	r3, [r7, #2]
 8002c06:	4613      	mov	r3, r2
 8002c08:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002c0a:	787b      	ldrb	r3, [r7, #1]
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d003      	beq.n	8002c18 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002c10:	887a      	ldrh	r2, [r7, #2]
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002c16:	e003      	b.n	8002c20 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002c18:	887b      	ldrh	r3, [r7, #2]
 8002c1a:	041a      	lsls	r2, r3, #16
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	611a      	str	r2, [r3, #16]
}
 8002c20:	bf00      	nop
 8002c22:	370c      	adds	r7, #12
 8002c24:	46bd      	mov	sp, r7
 8002c26:	bc80      	pop	{r7}
 8002c28:	4770      	bx	lr
	...

08002c2c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b086      	sub	sp, #24
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d101      	bne.n	8002c3e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	e272      	b.n	8003124 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f003 0301 	and.w	r3, r3, #1
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	f000 8087 	beq.w	8002d5a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002c4c:	4b92      	ldr	r3, [pc, #584]	@ (8002e98 <HAL_RCC_OscConfig+0x26c>)
 8002c4e:	685b      	ldr	r3, [r3, #4]
 8002c50:	f003 030c 	and.w	r3, r3, #12
 8002c54:	2b04      	cmp	r3, #4
 8002c56:	d00c      	beq.n	8002c72 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002c58:	4b8f      	ldr	r3, [pc, #572]	@ (8002e98 <HAL_RCC_OscConfig+0x26c>)
 8002c5a:	685b      	ldr	r3, [r3, #4]
 8002c5c:	f003 030c 	and.w	r3, r3, #12
 8002c60:	2b08      	cmp	r3, #8
 8002c62:	d112      	bne.n	8002c8a <HAL_RCC_OscConfig+0x5e>
 8002c64:	4b8c      	ldr	r3, [pc, #560]	@ (8002e98 <HAL_RCC_OscConfig+0x26c>)
 8002c66:	685b      	ldr	r3, [r3, #4]
 8002c68:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002c6c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002c70:	d10b      	bne.n	8002c8a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c72:	4b89      	ldr	r3, [pc, #548]	@ (8002e98 <HAL_RCC_OscConfig+0x26c>)
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d06c      	beq.n	8002d58 <HAL_RCC_OscConfig+0x12c>
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	685b      	ldr	r3, [r3, #4]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d168      	bne.n	8002d58 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002c86:	2301      	movs	r3, #1
 8002c88:	e24c      	b.n	8003124 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	685b      	ldr	r3, [r3, #4]
 8002c8e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002c92:	d106      	bne.n	8002ca2 <HAL_RCC_OscConfig+0x76>
 8002c94:	4b80      	ldr	r3, [pc, #512]	@ (8002e98 <HAL_RCC_OscConfig+0x26c>)
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	4a7f      	ldr	r2, [pc, #508]	@ (8002e98 <HAL_RCC_OscConfig+0x26c>)
 8002c9a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c9e:	6013      	str	r3, [r2, #0]
 8002ca0:	e02e      	b.n	8002d00 <HAL_RCC_OscConfig+0xd4>
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	685b      	ldr	r3, [r3, #4]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d10c      	bne.n	8002cc4 <HAL_RCC_OscConfig+0x98>
 8002caa:	4b7b      	ldr	r3, [pc, #492]	@ (8002e98 <HAL_RCC_OscConfig+0x26c>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	4a7a      	ldr	r2, [pc, #488]	@ (8002e98 <HAL_RCC_OscConfig+0x26c>)
 8002cb0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002cb4:	6013      	str	r3, [r2, #0]
 8002cb6:	4b78      	ldr	r3, [pc, #480]	@ (8002e98 <HAL_RCC_OscConfig+0x26c>)
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	4a77      	ldr	r2, [pc, #476]	@ (8002e98 <HAL_RCC_OscConfig+0x26c>)
 8002cbc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002cc0:	6013      	str	r3, [r2, #0]
 8002cc2:	e01d      	b.n	8002d00 <HAL_RCC_OscConfig+0xd4>
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	685b      	ldr	r3, [r3, #4]
 8002cc8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002ccc:	d10c      	bne.n	8002ce8 <HAL_RCC_OscConfig+0xbc>
 8002cce:	4b72      	ldr	r3, [pc, #456]	@ (8002e98 <HAL_RCC_OscConfig+0x26c>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	4a71      	ldr	r2, [pc, #452]	@ (8002e98 <HAL_RCC_OscConfig+0x26c>)
 8002cd4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002cd8:	6013      	str	r3, [r2, #0]
 8002cda:	4b6f      	ldr	r3, [pc, #444]	@ (8002e98 <HAL_RCC_OscConfig+0x26c>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	4a6e      	ldr	r2, [pc, #440]	@ (8002e98 <HAL_RCC_OscConfig+0x26c>)
 8002ce0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ce4:	6013      	str	r3, [r2, #0]
 8002ce6:	e00b      	b.n	8002d00 <HAL_RCC_OscConfig+0xd4>
 8002ce8:	4b6b      	ldr	r3, [pc, #428]	@ (8002e98 <HAL_RCC_OscConfig+0x26c>)
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	4a6a      	ldr	r2, [pc, #424]	@ (8002e98 <HAL_RCC_OscConfig+0x26c>)
 8002cee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002cf2:	6013      	str	r3, [r2, #0]
 8002cf4:	4b68      	ldr	r3, [pc, #416]	@ (8002e98 <HAL_RCC_OscConfig+0x26c>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4a67      	ldr	r2, [pc, #412]	@ (8002e98 <HAL_RCC_OscConfig+0x26c>)
 8002cfa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002cfe:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	685b      	ldr	r3, [r3, #4]
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d013      	beq.n	8002d30 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d08:	f7ff f9fe 	bl	8002108 <HAL_GetTick>
 8002d0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d0e:	e008      	b.n	8002d22 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d10:	f7ff f9fa 	bl	8002108 <HAL_GetTick>
 8002d14:	4602      	mov	r2, r0
 8002d16:	693b      	ldr	r3, [r7, #16]
 8002d18:	1ad3      	subs	r3, r2, r3
 8002d1a:	2b64      	cmp	r3, #100	@ 0x64
 8002d1c:	d901      	bls.n	8002d22 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002d1e:	2303      	movs	r3, #3
 8002d20:	e200      	b.n	8003124 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d22:	4b5d      	ldr	r3, [pc, #372]	@ (8002e98 <HAL_RCC_OscConfig+0x26c>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d0f0      	beq.n	8002d10 <HAL_RCC_OscConfig+0xe4>
 8002d2e:	e014      	b.n	8002d5a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d30:	f7ff f9ea 	bl	8002108 <HAL_GetTick>
 8002d34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d36:	e008      	b.n	8002d4a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d38:	f7ff f9e6 	bl	8002108 <HAL_GetTick>
 8002d3c:	4602      	mov	r2, r0
 8002d3e:	693b      	ldr	r3, [r7, #16]
 8002d40:	1ad3      	subs	r3, r2, r3
 8002d42:	2b64      	cmp	r3, #100	@ 0x64
 8002d44:	d901      	bls.n	8002d4a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002d46:	2303      	movs	r3, #3
 8002d48:	e1ec      	b.n	8003124 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d4a:	4b53      	ldr	r3, [pc, #332]	@ (8002e98 <HAL_RCC_OscConfig+0x26c>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d1f0      	bne.n	8002d38 <HAL_RCC_OscConfig+0x10c>
 8002d56:	e000      	b.n	8002d5a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d58:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f003 0302 	and.w	r3, r3, #2
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d063      	beq.n	8002e2e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002d66:	4b4c      	ldr	r3, [pc, #304]	@ (8002e98 <HAL_RCC_OscConfig+0x26c>)
 8002d68:	685b      	ldr	r3, [r3, #4]
 8002d6a:	f003 030c 	and.w	r3, r3, #12
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d00b      	beq.n	8002d8a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002d72:	4b49      	ldr	r3, [pc, #292]	@ (8002e98 <HAL_RCC_OscConfig+0x26c>)
 8002d74:	685b      	ldr	r3, [r3, #4]
 8002d76:	f003 030c 	and.w	r3, r3, #12
 8002d7a:	2b08      	cmp	r3, #8
 8002d7c:	d11c      	bne.n	8002db8 <HAL_RCC_OscConfig+0x18c>
 8002d7e:	4b46      	ldr	r3, [pc, #280]	@ (8002e98 <HAL_RCC_OscConfig+0x26c>)
 8002d80:	685b      	ldr	r3, [r3, #4]
 8002d82:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d116      	bne.n	8002db8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d8a:	4b43      	ldr	r3, [pc, #268]	@ (8002e98 <HAL_RCC_OscConfig+0x26c>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f003 0302 	and.w	r3, r3, #2
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d005      	beq.n	8002da2 <HAL_RCC_OscConfig+0x176>
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	691b      	ldr	r3, [r3, #16]
 8002d9a:	2b01      	cmp	r3, #1
 8002d9c:	d001      	beq.n	8002da2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002d9e:	2301      	movs	r3, #1
 8002da0:	e1c0      	b.n	8003124 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002da2:	4b3d      	ldr	r3, [pc, #244]	@ (8002e98 <HAL_RCC_OscConfig+0x26c>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	695b      	ldr	r3, [r3, #20]
 8002dae:	00db      	lsls	r3, r3, #3
 8002db0:	4939      	ldr	r1, [pc, #228]	@ (8002e98 <HAL_RCC_OscConfig+0x26c>)
 8002db2:	4313      	orrs	r3, r2
 8002db4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002db6:	e03a      	b.n	8002e2e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	691b      	ldr	r3, [r3, #16]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d020      	beq.n	8002e02 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002dc0:	4b36      	ldr	r3, [pc, #216]	@ (8002e9c <HAL_RCC_OscConfig+0x270>)
 8002dc2:	2201      	movs	r2, #1
 8002dc4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dc6:	f7ff f99f 	bl	8002108 <HAL_GetTick>
 8002dca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002dcc:	e008      	b.n	8002de0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002dce:	f7ff f99b 	bl	8002108 <HAL_GetTick>
 8002dd2:	4602      	mov	r2, r0
 8002dd4:	693b      	ldr	r3, [r7, #16]
 8002dd6:	1ad3      	subs	r3, r2, r3
 8002dd8:	2b02      	cmp	r3, #2
 8002dda:	d901      	bls.n	8002de0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002ddc:	2303      	movs	r3, #3
 8002dde:	e1a1      	b.n	8003124 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002de0:	4b2d      	ldr	r3, [pc, #180]	@ (8002e98 <HAL_RCC_OscConfig+0x26c>)
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f003 0302 	and.w	r3, r3, #2
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d0f0      	beq.n	8002dce <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002dec:	4b2a      	ldr	r3, [pc, #168]	@ (8002e98 <HAL_RCC_OscConfig+0x26c>)
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	695b      	ldr	r3, [r3, #20]
 8002df8:	00db      	lsls	r3, r3, #3
 8002dfa:	4927      	ldr	r1, [pc, #156]	@ (8002e98 <HAL_RCC_OscConfig+0x26c>)
 8002dfc:	4313      	orrs	r3, r2
 8002dfe:	600b      	str	r3, [r1, #0]
 8002e00:	e015      	b.n	8002e2e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e02:	4b26      	ldr	r3, [pc, #152]	@ (8002e9c <HAL_RCC_OscConfig+0x270>)
 8002e04:	2200      	movs	r2, #0
 8002e06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e08:	f7ff f97e 	bl	8002108 <HAL_GetTick>
 8002e0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e0e:	e008      	b.n	8002e22 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e10:	f7ff f97a 	bl	8002108 <HAL_GetTick>
 8002e14:	4602      	mov	r2, r0
 8002e16:	693b      	ldr	r3, [r7, #16]
 8002e18:	1ad3      	subs	r3, r2, r3
 8002e1a:	2b02      	cmp	r3, #2
 8002e1c:	d901      	bls.n	8002e22 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002e1e:	2303      	movs	r3, #3
 8002e20:	e180      	b.n	8003124 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e22:	4b1d      	ldr	r3, [pc, #116]	@ (8002e98 <HAL_RCC_OscConfig+0x26c>)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f003 0302 	and.w	r3, r3, #2
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d1f0      	bne.n	8002e10 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f003 0308 	and.w	r3, r3, #8
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d03a      	beq.n	8002eb0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	699b      	ldr	r3, [r3, #24]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d019      	beq.n	8002e76 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e42:	4b17      	ldr	r3, [pc, #92]	@ (8002ea0 <HAL_RCC_OscConfig+0x274>)
 8002e44:	2201      	movs	r2, #1
 8002e46:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e48:	f7ff f95e 	bl	8002108 <HAL_GetTick>
 8002e4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e4e:	e008      	b.n	8002e62 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e50:	f7ff f95a 	bl	8002108 <HAL_GetTick>
 8002e54:	4602      	mov	r2, r0
 8002e56:	693b      	ldr	r3, [r7, #16]
 8002e58:	1ad3      	subs	r3, r2, r3
 8002e5a:	2b02      	cmp	r3, #2
 8002e5c:	d901      	bls.n	8002e62 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002e5e:	2303      	movs	r3, #3
 8002e60:	e160      	b.n	8003124 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e62:	4b0d      	ldr	r3, [pc, #52]	@ (8002e98 <HAL_RCC_OscConfig+0x26c>)
 8002e64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e66:	f003 0302 	and.w	r3, r3, #2
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d0f0      	beq.n	8002e50 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002e6e:	2001      	movs	r0, #1
 8002e70:	f000 face 	bl	8003410 <RCC_Delay>
 8002e74:	e01c      	b.n	8002eb0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e76:	4b0a      	ldr	r3, [pc, #40]	@ (8002ea0 <HAL_RCC_OscConfig+0x274>)
 8002e78:	2200      	movs	r2, #0
 8002e7a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e7c:	f7ff f944 	bl	8002108 <HAL_GetTick>
 8002e80:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e82:	e00f      	b.n	8002ea4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e84:	f7ff f940 	bl	8002108 <HAL_GetTick>
 8002e88:	4602      	mov	r2, r0
 8002e8a:	693b      	ldr	r3, [r7, #16]
 8002e8c:	1ad3      	subs	r3, r2, r3
 8002e8e:	2b02      	cmp	r3, #2
 8002e90:	d908      	bls.n	8002ea4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002e92:	2303      	movs	r3, #3
 8002e94:	e146      	b.n	8003124 <HAL_RCC_OscConfig+0x4f8>
 8002e96:	bf00      	nop
 8002e98:	40021000 	.word	0x40021000
 8002e9c:	42420000 	.word	0x42420000
 8002ea0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ea4:	4b92      	ldr	r3, [pc, #584]	@ (80030f0 <HAL_RCC_OscConfig+0x4c4>)
 8002ea6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ea8:	f003 0302 	and.w	r3, r3, #2
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d1e9      	bne.n	8002e84 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f003 0304 	and.w	r3, r3, #4
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	f000 80a6 	beq.w	800300a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ec2:	4b8b      	ldr	r3, [pc, #556]	@ (80030f0 <HAL_RCC_OscConfig+0x4c4>)
 8002ec4:	69db      	ldr	r3, [r3, #28]
 8002ec6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d10d      	bne.n	8002eea <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ece:	4b88      	ldr	r3, [pc, #544]	@ (80030f0 <HAL_RCC_OscConfig+0x4c4>)
 8002ed0:	69db      	ldr	r3, [r3, #28]
 8002ed2:	4a87      	ldr	r2, [pc, #540]	@ (80030f0 <HAL_RCC_OscConfig+0x4c4>)
 8002ed4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002ed8:	61d3      	str	r3, [r2, #28]
 8002eda:	4b85      	ldr	r3, [pc, #532]	@ (80030f0 <HAL_RCC_OscConfig+0x4c4>)
 8002edc:	69db      	ldr	r3, [r3, #28]
 8002ede:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ee2:	60bb      	str	r3, [r7, #8]
 8002ee4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ee6:	2301      	movs	r3, #1
 8002ee8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002eea:	4b82      	ldr	r3, [pc, #520]	@ (80030f4 <HAL_RCC_OscConfig+0x4c8>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d118      	bne.n	8002f28 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ef6:	4b7f      	ldr	r3, [pc, #508]	@ (80030f4 <HAL_RCC_OscConfig+0x4c8>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	4a7e      	ldr	r2, [pc, #504]	@ (80030f4 <HAL_RCC_OscConfig+0x4c8>)
 8002efc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f00:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f02:	f7ff f901 	bl	8002108 <HAL_GetTick>
 8002f06:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f08:	e008      	b.n	8002f1c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f0a:	f7ff f8fd 	bl	8002108 <HAL_GetTick>
 8002f0e:	4602      	mov	r2, r0
 8002f10:	693b      	ldr	r3, [r7, #16]
 8002f12:	1ad3      	subs	r3, r2, r3
 8002f14:	2b64      	cmp	r3, #100	@ 0x64
 8002f16:	d901      	bls.n	8002f1c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002f18:	2303      	movs	r3, #3
 8002f1a:	e103      	b.n	8003124 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f1c:	4b75      	ldr	r3, [pc, #468]	@ (80030f4 <HAL_RCC_OscConfig+0x4c8>)
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d0f0      	beq.n	8002f0a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	68db      	ldr	r3, [r3, #12]
 8002f2c:	2b01      	cmp	r3, #1
 8002f2e:	d106      	bne.n	8002f3e <HAL_RCC_OscConfig+0x312>
 8002f30:	4b6f      	ldr	r3, [pc, #444]	@ (80030f0 <HAL_RCC_OscConfig+0x4c4>)
 8002f32:	6a1b      	ldr	r3, [r3, #32]
 8002f34:	4a6e      	ldr	r2, [pc, #440]	@ (80030f0 <HAL_RCC_OscConfig+0x4c4>)
 8002f36:	f043 0301 	orr.w	r3, r3, #1
 8002f3a:	6213      	str	r3, [r2, #32]
 8002f3c:	e02d      	b.n	8002f9a <HAL_RCC_OscConfig+0x36e>
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	68db      	ldr	r3, [r3, #12]
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d10c      	bne.n	8002f60 <HAL_RCC_OscConfig+0x334>
 8002f46:	4b6a      	ldr	r3, [pc, #424]	@ (80030f0 <HAL_RCC_OscConfig+0x4c4>)
 8002f48:	6a1b      	ldr	r3, [r3, #32]
 8002f4a:	4a69      	ldr	r2, [pc, #420]	@ (80030f0 <HAL_RCC_OscConfig+0x4c4>)
 8002f4c:	f023 0301 	bic.w	r3, r3, #1
 8002f50:	6213      	str	r3, [r2, #32]
 8002f52:	4b67      	ldr	r3, [pc, #412]	@ (80030f0 <HAL_RCC_OscConfig+0x4c4>)
 8002f54:	6a1b      	ldr	r3, [r3, #32]
 8002f56:	4a66      	ldr	r2, [pc, #408]	@ (80030f0 <HAL_RCC_OscConfig+0x4c4>)
 8002f58:	f023 0304 	bic.w	r3, r3, #4
 8002f5c:	6213      	str	r3, [r2, #32]
 8002f5e:	e01c      	b.n	8002f9a <HAL_RCC_OscConfig+0x36e>
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	68db      	ldr	r3, [r3, #12]
 8002f64:	2b05      	cmp	r3, #5
 8002f66:	d10c      	bne.n	8002f82 <HAL_RCC_OscConfig+0x356>
 8002f68:	4b61      	ldr	r3, [pc, #388]	@ (80030f0 <HAL_RCC_OscConfig+0x4c4>)
 8002f6a:	6a1b      	ldr	r3, [r3, #32]
 8002f6c:	4a60      	ldr	r2, [pc, #384]	@ (80030f0 <HAL_RCC_OscConfig+0x4c4>)
 8002f6e:	f043 0304 	orr.w	r3, r3, #4
 8002f72:	6213      	str	r3, [r2, #32]
 8002f74:	4b5e      	ldr	r3, [pc, #376]	@ (80030f0 <HAL_RCC_OscConfig+0x4c4>)
 8002f76:	6a1b      	ldr	r3, [r3, #32]
 8002f78:	4a5d      	ldr	r2, [pc, #372]	@ (80030f0 <HAL_RCC_OscConfig+0x4c4>)
 8002f7a:	f043 0301 	orr.w	r3, r3, #1
 8002f7e:	6213      	str	r3, [r2, #32]
 8002f80:	e00b      	b.n	8002f9a <HAL_RCC_OscConfig+0x36e>
 8002f82:	4b5b      	ldr	r3, [pc, #364]	@ (80030f0 <HAL_RCC_OscConfig+0x4c4>)
 8002f84:	6a1b      	ldr	r3, [r3, #32]
 8002f86:	4a5a      	ldr	r2, [pc, #360]	@ (80030f0 <HAL_RCC_OscConfig+0x4c4>)
 8002f88:	f023 0301 	bic.w	r3, r3, #1
 8002f8c:	6213      	str	r3, [r2, #32]
 8002f8e:	4b58      	ldr	r3, [pc, #352]	@ (80030f0 <HAL_RCC_OscConfig+0x4c4>)
 8002f90:	6a1b      	ldr	r3, [r3, #32]
 8002f92:	4a57      	ldr	r2, [pc, #348]	@ (80030f0 <HAL_RCC_OscConfig+0x4c4>)
 8002f94:	f023 0304 	bic.w	r3, r3, #4
 8002f98:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	68db      	ldr	r3, [r3, #12]
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d015      	beq.n	8002fce <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fa2:	f7ff f8b1 	bl	8002108 <HAL_GetTick>
 8002fa6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fa8:	e00a      	b.n	8002fc0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002faa:	f7ff f8ad 	bl	8002108 <HAL_GetTick>
 8002fae:	4602      	mov	r2, r0
 8002fb0:	693b      	ldr	r3, [r7, #16]
 8002fb2:	1ad3      	subs	r3, r2, r3
 8002fb4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002fb8:	4293      	cmp	r3, r2
 8002fba:	d901      	bls.n	8002fc0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002fbc:	2303      	movs	r3, #3
 8002fbe:	e0b1      	b.n	8003124 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fc0:	4b4b      	ldr	r3, [pc, #300]	@ (80030f0 <HAL_RCC_OscConfig+0x4c4>)
 8002fc2:	6a1b      	ldr	r3, [r3, #32]
 8002fc4:	f003 0302 	and.w	r3, r3, #2
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d0ee      	beq.n	8002faa <HAL_RCC_OscConfig+0x37e>
 8002fcc:	e014      	b.n	8002ff8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fce:	f7ff f89b 	bl	8002108 <HAL_GetTick>
 8002fd2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002fd4:	e00a      	b.n	8002fec <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fd6:	f7ff f897 	bl	8002108 <HAL_GetTick>
 8002fda:	4602      	mov	r2, r0
 8002fdc:	693b      	ldr	r3, [r7, #16]
 8002fde:	1ad3      	subs	r3, r2, r3
 8002fe0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002fe4:	4293      	cmp	r3, r2
 8002fe6:	d901      	bls.n	8002fec <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002fe8:	2303      	movs	r3, #3
 8002fea:	e09b      	b.n	8003124 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002fec:	4b40      	ldr	r3, [pc, #256]	@ (80030f0 <HAL_RCC_OscConfig+0x4c4>)
 8002fee:	6a1b      	ldr	r3, [r3, #32]
 8002ff0:	f003 0302 	and.w	r3, r3, #2
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d1ee      	bne.n	8002fd6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002ff8:	7dfb      	ldrb	r3, [r7, #23]
 8002ffa:	2b01      	cmp	r3, #1
 8002ffc:	d105      	bne.n	800300a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ffe:	4b3c      	ldr	r3, [pc, #240]	@ (80030f0 <HAL_RCC_OscConfig+0x4c4>)
 8003000:	69db      	ldr	r3, [r3, #28]
 8003002:	4a3b      	ldr	r2, [pc, #236]	@ (80030f0 <HAL_RCC_OscConfig+0x4c4>)
 8003004:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003008:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	69db      	ldr	r3, [r3, #28]
 800300e:	2b00      	cmp	r3, #0
 8003010:	f000 8087 	beq.w	8003122 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003014:	4b36      	ldr	r3, [pc, #216]	@ (80030f0 <HAL_RCC_OscConfig+0x4c4>)
 8003016:	685b      	ldr	r3, [r3, #4]
 8003018:	f003 030c 	and.w	r3, r3, #12
 800301c:	2b08      	cmp	r3, #8
 800301e:	d061      	beq.n	80030e4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	69db      	ldr	r3, [r3, #28]
 8003024:	2b02      	cmp	r3, #2
 8003026:	d146      	bne.n	80030b6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003028:	4b33      	ldr	r3, [pc, #204]	@ (80030f8 <HAL_RCC_OscConfig+0x4cc>)
 800302a:	2200      	movs	r2, #0
 800302c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800302e:	f7ff f86b 	bl	8002108 <HAL_GetTick>
 8003032:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003034:	e008      	b.n	8003048 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003036:	f7ff f867 	bl	8002108 <HAL_GetTick>
 800303a:	4602      	mov	r2, r0
 800303c:	693b      	ldr	r3, [r7, #16]
 800303e:	1ad3      	subs	r3, r2, r3
 8003040:	2b02      	cmp	r3, #2
 8003042:	d901      	bls.n	8003048 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003044:	2303      	movs	r3, #3
 8003046:	e06d      	b.n	8003124 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003048:	4b29      	ldr	r3, [pc, #164]	@ (80030f0 <HAL_RCC_OscConfig+0x4c4>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003050:	2b00      	cmp	r3, #0
 8003052:	d1f0      	bne.n	8003036 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6a1b      	ldr	r3, [r3, #32]
 8003058:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800305c:	d108      	bne.n	8003070 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800305e:	4b24      	ldr	r3, [pc, #144]	@ (80030f0 <HAL_RCC_OscConfig+0x4c4>)
 8003060:	685b      	ldr	r3, [r3, #4]
 8003062:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	689b      	ldr	r3, [r3, #8]
 800306a:	4921      	ldr	r1, [pc, #132]	@ (80030f0 <HAL_RCC_OscConfig+0x4c4>)
 800306c:	4313      	orrs	r3, r2
 800306e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003070:	4b1f      	ldr	r3, [pc, #124]	@ (80030f0 <HAL_RCC_OscConfig+0x4c4>)
 8003072:	685b      	ldr	r3, [r3, #4]
 8003074:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6a19      	ldr	r1, [r3, #32]
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003080:	430b      	orrs	r3, r1
 8003082:	491b      	ldr	r1, [pc, #108]	@ (80030f0 <HAL_RCC_OscConfig+0x4c4>)
 8003084:	4313      	orrs	r3, r2
 8003086:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003088:	4b1b      	ldr	r3, [pc, #108]	@ (80030f8 <HAL_RCC_OscConfig+0x4cc>)
 800308a:	2201      	movs	r2, #1
 800308c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800308e:	f7ff f83b 	bl	8002108 <HAL_GetTick>
 8003092:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003094:	e008      	b.n	80030a8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003096:	f7ff f837 	bl	8002108 <HAL_GetTick>
 800309a:	4602      	mov	r2, r0
 800309c:	693b      	ldr	r3, [r7, #16]
 800309e:	1ad3      	subs	r3, r2, r3
 80030a0:	2b02      	cmp	r3, #2
 80030a2:	d901      	bls.n	80030a8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80030a4:	2303      	movs	r3, #3
 80030a6:	e03d      	b.n	8003124 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80030a8:	4b11      	ldr	r3, [pc, #68]	@ (80030f0 <HAL_RCC_OscConfig+0x4c4>)
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d0f0      	beq.n	8003096 <HAL_RCC_OscConfig+0x46a>
 80030b4:	e035      	b.n	8003122 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030b6:	4b10      	ldr	r3, [pc, #64]	@ (80030f8 <HAL_RCC_OscConfig+0x4cc>)
 80030b8:	2200      	movs	r2, #0
 80030ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030bc:	f7ff f824 	bl	8002108 <HAL_GetTick>
 80030c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80030c2:	e008      	b.n	80030d6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030c4:	f7ff f820 	bl	8002108 <HAL_GetTick>
 80030c8:	4602      	mov	r2, r0
 80030ca:	693b      	ldr	r3, [r7, #16]
 80030cc:	1ad3      	subs	r3, r2, r3
 80030ce:	2b02      	cmp	r3, #2
 80030d0:	d901      	bls.n	80030d6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80030d2:	2303      	movs	r3, #3
 80030d4:	e026      	b.n	8003124 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80030d6:	4b06      	ldr	r3, [pc, #24]	@ (80030f0 <HAL_RCC_OscConfig+0x4c4>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d1f0      	bne.n	80030c4 <HAL_RCC_OscConfig+0x498>
 80030e2:	e01e      	b.n	8003122 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	69db      	ldr	r3, [r3, #28]
 80030e8:	2b01      	cmp	r3, #1
 80030ea:	d107      	bne.n	80030fc <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80030ec:	2301      	movs	r3, #1
 80030ee:	e019      	b.n	8003124 <HAL_RCC_OscConfig+0x4f8>
 80030f0:	40021000 	.word	0x40021000
 80030f4:	40007000 	.word	0x40007000
 80030f8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80030fc:	4b0b      	ldr	r3, [pc, #44]	@ (800312c <HAL_RCC_OscConfig+0x500>)
 80030fe:	685b      	ldr	r3, [r3, #4]
 8003100:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6a1b      	ldr	r3, [r3, #32]
 800310c:	429a      	cmp	r2, r3
 800310e:	d106      	bne.n	800311e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800311a:	429a      	cmp	r2, r3
 800311c:	d001      	beq.n	8003122 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800311e:	2301      	movs	r3, #1
 8003120:	e000      	b.n	8003124 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003122:	2300      	movs	r3, #0
}
 8003124:	4618      	mov	r0, r3
 8003126:	3718      	adds	r7, #24
 8003128:	46bd      	mov	sp, r7
 800312a:	bd80      	pop	{r7, pc}
 800312c:	40021000 	.word	0x40021000

08003130 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003130:	b580      	push	{r7, lr}
 8003132:	b084      	sub	sp, #16
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
 8003138:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	2b00      	cmp	r3, #0
 800313e:	d101      	bne.n	8003144 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003140:	2301      	movs	r3, #1
 8003142:	e0d0      	b.n	80032e6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003144:	4b6a      	ldr	r3, [pc, #424]	@ (80032f0 <HAL_RCC_ClockConfig+0x1c0>)
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f003 0307 	and.w	r3, r3, #7
 800314c:	683a      	ldr	r2, [r7, #0]
 800314e:	429a      	cmp	r2, r3
 8003150:	d910      	bls.n	8003174 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003152:	4b67      	ldr	r3, [pc, #412]	@ (80032f0 <HAL_RCC_ClockConfig+0x1c0>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f023 0207 	bic.w	r2, r3, #7
 800315a:	4965      	ldr	r1, [pc, #404]	@ (80032f0 <HAL_RCC_ClockConfig+0x1c0>)
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	4313      	orrs	r3, r2
 8003160:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003162:	4b63      	ldr	r3, [pc, #396]	@ (80032f0 <HAL_RCC_ClockConfig+0x1c0>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f003 0307 	and.w	r3, r3, #7
 800316a:	683a      	ldr	r2, [r7, #0]
 800316c:	429a      	cmp	r2, r3
 800316e:	d001      	beq.n	8003174 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003170:	2301      	movs	r3, #1
 8003172:	e0b8      	b.n	80032e6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f003 0302 	and.w	r3, r3, #2
 800317c:	2b00      	cmp	r3, #0
 800317e:	d020      	beq.n	80031c2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f003 0304 	and.w	r3, r3, #4
 8003188:	2b00      	cmp	r3, #0
 800318a:	d005      	beq.n	8003198 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800318c:	4b59      	ldr	r3, [pc, #356]	@ (80032f4 <HAL_RCC_ClockConfig+0x1c4>)
 800318e:	685b      	ldr	r3, [r3, #4]
 8003190:	4a58      	ldr	r2, [pc, #352]	@ (80032f4 <HAL_RCC_ClockConfig+0x1c4>)
 8003192:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003196:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f003 0308 	and.w	r3, r3, #8
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d005      	beq.n	80031b0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80031a4:	4b53      	ldr	r3, [pc, #332]	@ (80032f4 <HAL_RCC_ClockConfig+0x1c4>)
 80031a6:	685b      	ldr	r3, [r3, #4]
 80031a8:	4a52      	ldr	r2, [pc, #328]	@ (80032f4 <HAL_RCC_ClockConfig+0x1c4>)
 80031aa:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80031ae:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80031b0:	4b50      	ldr	r3, [pc, #320]	@ (80032f4 <HAL_RCC_ClockConfig+0x1c4>)
 80031b2:	685b      	ldr	r3, [r3, #4]
 80031b4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	689b      	ldr	r3, [r3, #8]
 80031bc:	494d      	ldr	r1, [pc, #308]	@ (80032f4 <HAL_RCC_ClockConfig+0x1c4>)
 80031be:	4313      	orrs	r3, r2
 80031c0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f003 0301 	and.w	r3, r3, #1
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d040      	beq.n	8003250 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	685b      	ldr	r3, [r3, #4]
 80031d2:	2b01      	cmp	r3, #1
 80031d4:	d107      	bne.n	80031e6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031d6:	4b47      	ldr	r3, [pc, #284]	@ (80032f4 <HAL_RCC_ClockConfig+0x1c4>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d115      	bne.n	800320e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031e2:	2301      	movs	r3, #1
 80031e4:	e07f      	b.n	80032e6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	685b      	ldr	r3, [r3, #4]
 80031ea:	2b02      	cmp	r3, #2
 80031ec:	d107      	bne.n	80031fe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031ee:	4b41      	ldr	r3, [pc, #260]	@ (80032f4 <HAL_RCC_ClockConfig+0x1c4>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d109      	bne.n	800320e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031fa:	2301      	movs	r3, #1
 80031fc:	e073      	b.n	80032e6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031fe:	4b3d      	ldr	r3, [pc, #244]	@ (80032f4 <HAL_RCC_ClockConfig+0x1c4>)
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f003 0302 	and.w	r3, r3, #2
 8003206:	2b00      	cmp	r3, #0
 8003208:	d101      	bne.n	800320e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800320a:	2301      	movs	r3, #1
 800320c:	e06b      	b.n	80032e6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800320e:	4b39      	ldr	r3, [pc, #228]	@ (80032f4 <HAL_RCC_ClockConfig+0x1c4>)
 8003210:	685b      	ldr	r3, [r3, #4]
 8003212:	f023 0203 	bic.w	r2, r3, #3
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	685b      	ldr	r3, [r3, #4]
 800321a:	4936      	ldr	r1, [pc, #216]	@ (80032f4 <HAL_RCC_ClockConfig+0x1c4>)
 800321c:	4313      	orrs	r3, r2
 800321e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003220:	f7fe ff72 	bl	8002108 <HAL_GetTick>
 8003224:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003226:	e00a      	b.n	800323e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003228:	f7fe ff6e 	bl	8002108 <HAL_GetTick>
 800322c:	4602      	mov	r2, r0
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	1ad3      	subs	r3, r2, r3
 8003232:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003236:	4293      	cmp	r3, r2
 8003238:	d901      	bls.n	800323e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800323a:	2303      	movs	r3, #3
 800323c:	e053      	b.n	80032e6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800323e:	4b2d      	ldr	r3, [pc, #180]	@ (80032f4 <HAL_RCC_ClockConfig+0x1c4>)
 8003240:	685b      	ldr	r3, [r3, #4]
 8003242:	f003 020c 	and.w	r2, r3, #12
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	685b      	ldr	r3, [r3, #4]
 800324a:	009b      	lsls	r3, r3, #2
 800324c:	429a      	cmp	r2, r3
 800324e:	d1eb      	bne.n	8003228 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003250:	4b27      	ldr	r3, [pc, #156]	@ (80032f0 <HAL_RCC_ClockConfig+0x1c0>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f003 0307 	and.w	r3, r3, #7
 8003258:	683a      	ldr	r2, [r7, #0]
 800325a:	429a      	cmp	r2, r3
 800325c:	d210      	bcs.n	8003280 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800325e:	4b24      	ldr	r3, [pc, #144]	@ (80032f0 <HAL_RCC_ClockConfig+0x1c0>)
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f023 0207 	bic.w	r2, r3, #7
 8003266:	4922      	ldr	r1, [pc, #136]	@ (80032f0 <HAL_RCC_ClockConfig+0x1c0>)
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	4313      	orrs	r3, r2
 800326c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800326e:	4b20      	ldr	r3, [pc, #128]	@ (80032f0 <HAL_RCC_ClockConfig+0x1c0>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f003 0307 	and.w	r3, r3, #7
 8003276:	683a      	ldr	r2, [r7, #0]
 8003278:	429a      	cmp	r2, r3
 800327a:	d001      	beq.n	8003280 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800327c:	2301      	movs	r3, #1
 800327e:	e032      	b.n	80032e6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f003 0304 	and.w	r3, r3, #4
 8003288:	2b00      	cmp	r3, #0
 800328a:	d008      	beq.n	800329e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800328c:	4b19      	ldr	r3, [pc, #100]	@ (80032f4 <HAL_RCC_ClockConfig+0x1c4>)
 800328e:	685b      	ldr	r3, [r3, #4]
 8003290:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	68db      	ldr	r3, [r3, #12]
 8003298:	4916      	ldr	r1, [pc, #88]	@ (80032f4 <HAL_RCC_ClockConfig+0x1c4>)
 800329a:	4313      	orrs	r3, r2
 800329c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f003 0308 	and.w	r3, r3, #8
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d009      	beq.n	80032be <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80032aa:	4b12      	ldr	r3, [pc, #72]	@ (80032f4 <HAL_RCC_ClockConfig+0x1c4>)
 80032ac:	685b      	ldr	r3, [r3, #4]
 80032ae:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	691b      	ldr	r3, [r3, #16]
 80032b6:	00db      	lsls	r3, r3, #3
 80032b8:	490e      	ldr	r1, [pc, #56]	@ (80032f4 <HAL_RCC_ClockConfig+0x1c4>)
 80032ba:	4313      	orrs	r3, r2
 80032bc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80032be:	f000 f821 	bl	8003304 <HAL_RCC_GetSysClockFreq>
 80032c2:	4602      	mov	r2, r0
 80032c4:	4b0b      	ldr	r3, [pc, #44]	@ (80032f4 <HAL_RCC_ClockConfig+0x1c4>)
 80032c6:	685b      	ldr	r3, [r3, #4]
 80032c8:	091b      	lsrs	r3, r3, #4
 80032ca:	f003 030f 	and.w	r3, r3, #15
 80032ce:	490a      	ldr	r1, [pc, #40]	@ (80032f8 <HAL_RCC_ClockConfig+0x1c8>)
 80032d0:	5ccb      	ldrb	r3, [r1, r3]
 80032d2:	fa22 f303 	lsr.w	r3, r2, r3
 80032d6:	4a09      	ldr	r2, [pc, #36]	@ (80032fc <HAL_RCC_ClockConfig+0x1cc>)
 80032d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80032da:	4b09      	ldr	r3, [pc, #36]	@ (8003300 <HAL_RCC_ClockConfig+0x1d0>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	4618      	mov	r0, r3
 80032e0:	f7fe fed0 	bl	8002084 <HAL_InitTick>

  return HAL_OK;
 80032e4:	2300      	movs	r3, #0
}
 80032e6:	4618      	mov	r0, r3
 80032e8:	3710      	adds	r7, #16
 80032ea:	46bd      	mov	sp, r7
 80032ec:	bd80      	pop	{r7, pc}
 80032ee:	bf00      	nop
 80032f0:	40022000 	.word	0x40022000
 80032f4:	40021000 	.word	0x40021000
 80032f8:	08008c00 	.word	0x08008c00
 80032fc:	20000008 	.word	0x20000008
 8003300:	2000000c 	.word	0x2000000c

08003304 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003304:	b480      	push	{r7}
 8003306:	b087      	sub	sp, #28
 8003308:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800330a:	2300      	movs	r3, #0
 800330c:	60fb      	str	r3, [r7, #12]
 800330e:	2300      	movs	r3, #0
 8003310:	60bb      	str	r3, [r7, #8]
 8003312:	2300      	movs	r3, #0
 8003314:	617b      	str	r3, [r7, #20]
 8003316:	2300      	movs	r3, #0
 8003318:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800331a:	2300      	movs	r3, #0
 800331c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800331e:	4b1e      	ldr	r3, [pc, #120]	@ (8003398 <HAL_RCC_GetSysClockFreq+0x94>)
 8003320:	685b      	ldr	r3, [r3, #4]
 8003322:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	f003 030c 	and.w	r3, r3, #12
 800332a:	2b04      	cmp	r3, #4
 800332c:	d002      	beq.n	8003334 <HAL_RCC_GetSysClockFreq+0x30>
 800332e:	2b08      	cmp	r3, #8
 8003330:	d003      	beq.n	800333a <HAL_RCC_GetSysClockFreq+0x36>
 8003332:	e027      	b.n	8003384 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003334:	4b19      	ldr	r3, [pc, #100]	@ (800339c <HAL_RCC_GetSysClockFreq+0x98>)
 8003336:	613b      	str	r3, [r7, #16]
      break;
 8003338:	e027      	b.n	800338a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	0c9b      	lsrs	r3, r3, #18
 800333e:	f003 030f 	and.w	r3, r3, #15
 8003342:	4a17      	ldr	r2, [pc, #92]	@ (80033a0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003344:	5cd3      	ldrb	r3, [r2, r3]
 8003346:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800334e:	2b00      	cmp	r3, #0
 8003350:	d010      	beq.n	8003374 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003352:	4b11      	ldr	r3, [pc, #68]	@ (8003398 <HAL_RCC_GetSysClockFreq+0x94>)
 8003354:	685b      	ldr	r3, [r3, #4]
 8003356:	0c5b      	lsrs	r3, r3, #17
 8003358:	f003 0301 	and.w	r3, r3, #1
 800335c:	4a11      	ldr	r2, [pc, #68]	@ (80033a4 <HAL_RCC_GetSysClockFreq+0xa0>)
 800335e:	5cd3      	ldrb	r3, [r2, r3]
 8003360:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	4a0d      	ldr	r2, [pc, #52]	@ (800339c <HAL_RCC_GetSysClockFreq+0x98>)
 8003366:	fb03 f202 	mul.w	r2, r3, r2
 800336a:	68bb      	ldr	r3, [r7, #8]
 800336c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003370:	617b      	str	r3, [r7, #20]
 8003372:	e004      	b.n	800337e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	4a0c      	ldr	r2, [pc, #48]	@ (80033a8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003378:	fb02 f303 	mul.w	r3, r2, r3
 800337c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800337e:	697b      	ldr	r3, [r7, #20]
 8003380:	613b      	str	r3, [r7, #16]
      break;
 8003382:	e002      	b.n	800338a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003384:	4b05      	ldr	r3, [pc, #20]	@ (800339c <HAL_RCC_GetSysClockFreq+0x98>)
 8003386:	613b      	str	r3, [r7, #16]
      break;
 8003388:	bf00      	nop
    }
  }
  return sysclockfreq;
 800338a:	693b      	ldr	r3, [r7, #16]
}
 800338c:	4618      	mov	r0, r3
 800338e:	371c      	adds	r7, #28
 8003390:	46bd      	mov	sp, r7
 8003392:	bc80      	pop	{r7}
 8003394:	4770      	bx	lr
 8003396:	bf00      	nop
 8003398:	40021000 	.word	0x40021000
 800339c:	007a1200 	.word	0x007a1200
 80033a0:	08008c18 	.word	0x08008c18
 80033a4:	08008c28 	.word	0x08008c28
 80033a8:	003d0900 	.word	0x003d0900

080033ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80033ac:	b480      	push	{r7}
 80033ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80033b0:	4b02      	ldr	r3, [pc, #8]	@ (80033bc <HAL_RCC_GetHCLKFreq+0x10>)
 80033b2:	681b      	ldr	r3, [r3, #0]
}
 80033b4:	4618      	mov	r0, r3
 80033b6:	46bd      	mov	sp, r7
 80033b8:	bc80      	pop	{r7}
 80033ba:	4770      	bx	lr
 80033bc:	20000008 	.word	0x20000008

080033c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80033c4:	f7ff fff2 	bl	80033ac <HAL_RCC_GetHCLKFreq>
 80033c8:	4602      	mov	r2, r0
 80033ca:	4b05      	ldr	r3, [pc, #20]	@ (80033e0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80033cc:	685b      	ldr	r3, [r3, #4]
 80033ce:	0a1b      	lsrs	r3, r3, #8
 80033d0:	f003 0307 	and.w	r3, r3, #7
 80033d4:	4903      	ldr	r1, [pc, #12]	@ (80033e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80033d6:	5ccb      	ldrb	r3, [r1, r3]
 80033d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80033dc:	4618      	mov	r0, r3
 80033de:	bd80      	pop	{r7, pc}
 80033e0:	40021000 	.word	0x40021000
 80033e4:	08008c10 	.word	0x08008c10

080033e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80033ec:	f7ff ffde 	bl	80033ac <HAL_RCC_GetHCLKFreq>
 80033f0:	4602      	mov	r2, r0
 80033f2:	4b05      	ldr	r3, [pc, #20]	@ (8003408 <HAL_RCC_GetPCLK2Freq+0x20>)
 80033f4:	685b      	ldr	r3, [r3, #4]
 80033f6:	0adb      	lsrs	r3, r3, #11
 80033f8:	f003 0307 	and.w	r3, r3, #7
 80033fc:	4903      	ldr	r1, [pc, #12]	@ (800340c <HAL_RCC_GetPCLK2Freq+0x24>)
 80033fe:	5ccb      	ldrb	r3, [r1, r3]
 8003400:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003404:	4618      	mov	r0, r3
 8003406:	bd80      	pop	{r7, pc}
 8003408:	40021000 	.word	0x40021000
 800340c:	08008c10 	.word	0x08008c10

08003410 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003410:	b480      	push	{r7}
 8003412:	b085      	sub	sp, #20
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003418:	4b0a      	ldr	r3, [pc, #40]	@ (8003444 <RCC_Delay+0x34>)
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	4a0a      	ldr	r2, [pc, #40]	@ (8003448 <RCC_Delay+0x38>)
 800341e:	fba2 2303 	umull	r2, r3, r2, r3
 8003422:	0a5b      	lsrs	r3, r3, #9
 8003424:	687a      	ldr	r2, [r7, #4]
 8003426:	fb02 f303 	mul.w	r3, r2, r3
 800342a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800342c:	bf00      	nop
  }
  while (Delay --);
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	1e5a      	subs	r2, r3, #1
 8003432:	60fa      	str	r2, [r7, #12]
 8003434:	2b00      	cmp	r3, #0
 8003436:	d1f9      	bne.n	800342c <RCC_Delay+0x1c>
}
 8003438:	bf00      	nop
 800343a:	bf00      	nop
 800343c:	3714      	adds	r7, #20
 800343e:	46bd      	mov	sp, r7
 8003440:	bc80      	pop	{r7}
 8003442:	4770      	bx	lr
 8003444:	20000008 	.word	0x20000008
 8003448:	10624dd3 	.word	0x10624dd3

0800344c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	b082      	sub	sp, #8
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2b00      	cmp	r3, #0
 8003458:	d101      	bne.n	800345e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800345a:	2301      	movs	r3, #1
 800345c:	e041      	b.n	80034e2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003464:	b2db      	uxtb	r3, r3
 8003466:	2b00      	cmp	r3, #0
 8003468:	d106      	bne.n	8003478 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	2200      	movs	r2, #0
 800346e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003472:	6878      	ldr	r0, [r7, #4]
 8003474:	f7fe fad2 	bl	8001a1c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2202      	movs	r2, #2
 800347c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681a      	ldr	r2, [r3, #0]
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	3304      	adds	r3, #4
 8003488:	4619      	mov	r1, r3
 800348a:	4610      	mov	r0, r2
 800348c:	f000 fb14 	bl	8003ab8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2201      	movs	r2, #1
 8003494:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2201      	movs	r2, #1
 800349c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2201      	movs	r2, #1
 80034a4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2201      	movs	r2, #1
 80034ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2201      	movs	r2, #1
 80034b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2201      	movs	r2, #1
 80034bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2201      	movs	r2, #1
 80034c4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2201      	movs	r2, #1
 80034cc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2201      	movs	r2, #1
 80034d4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2201      	movs	r2, #1
 80034dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80034e0:	2300      	movs	r3, #0
}
 80034e2:	4618      	mov	r0, r3
 80034e4:	3708      	adds	r7, #8
 80034e6:	46bd      	mov	sp, r7
 80034e8:	bd80      	pop	{r7, pc}
	...

080034ec <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b084      	sub	sp, #16
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
 80034f4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d109      	bne.n	8003510 <HAL_TIM_PWM_Start+0x24>
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003502:	b2db      	uxtb	r3, r3
 8003504:	2b01      	cmp	r3, #1
 8003506:	bf14      	ite	ne
 8003508:	2301      	movne	r3, #1
 800350a:	2300      	moveq	r3, #0
 800350c:	b2db      	uxtb	r3, r3
 800350e:	e022      	b.n	8003556 <HAL_TIM_PWM_Start+0x6a>
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	2b04      	cmp	r3, #4
 8003514:	d109      	bne.n	800352a <HAL_TIM_PWM_Start+0x3e>
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800351c:	b2db      	uxtb	r3, r3
 800351e:	2b01      	cmp	r3, #1
 8003520:	bf14      	ite	ne
 8003522:	2301      	movne	r3, #1
 8003524:	2300      	moveq	r3, #0
 8003526:	b2db      	uxtb	r3, r3
 8003528:	e015      	b.n	8003556 <HAL_TIM_PWM_Start+0x6a>
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	2b08      	cmp	r3, #8
 800352e:	d109      	bne.n	8003544 <HAL_TIM_PWM_Start+0x58>
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003536:	b2db      	uxtb	r3, r3
 8003538:	2b01      	cmp	r3, #1
 800353a:	bf14      	ite	ne
 800353c:	2301      	movne	r3, #1
 800353e:	2300      	moveq	r3, #0
 8003540:	b2db      	uxtb	r3, r3
 8003542:	e008      	b.n	8003556 <HAL_TIM_PWM_Start+0x6a>
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800354a:	b2db      	uxtb	r3, r3
 800354c:	2b01      	cmp	r3, #1
 800354e:	bf14      	ite	ne
 8003550:	2301      	movne	r3, #1
 8003552:	2300      	moveq	r3, #0
 8003554:	b2db      	uxtb	r3, r3
 8003556:	2b00      	cmp	r3, #0
 8003558:	d001      	beq.n	800355e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800355a:	2301      	movs	r3, #1
 800355c:	e05e      	b.n	800361c <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	2b00      	cmp	r3, #0
 8003562:	d104      	bne.n	800356e <HAL_TIM_PWM_Start+0x82>
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2202      	movs	r2, #2
 8003568:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800356c:	e013      	b.n	8003596 <HAL_TIM_PWM_Start+0xaa>
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	2b04      	cmp	r3, #4
 8003572:	d104      	bne.n	800357e <HAL_TIM_PWM_Start+0x92>
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2202      	movs	r2, #2
 8003578:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800357c:	e00b      	b.n	8003596 <HAL_TIM_PWM_Start+0xaa>
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	2b08      	cmp	r3, #8
 8003582:	d104      	bne.n	800358e <HAL_TIM_PWM_Start+0xa2>
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2202      	movs	r2, #2
 8003588:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800358c:	e003      	b.n	8003596 <HAL_TIM_PWM_Start+0xaa>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	2202      	movs	r2, #2
 8003592:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	2201      	movs	r2, #1
 800359c:	6839      	ldr	r1, [r7, #0]
 800359e:	4618      	mov	r0, r3
 80035a0:	f000 fc80 	bl	8003ea4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	4a1e      	ldr	r2, [pc, #120]	@ (8003624 <HAL_TIM_PWM_Start+0x138>)
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d107      	bne.n	80035be <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80035bc:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	4a18      	ldr	r2, [pc, #96]	@ (8003624 <HAL_TIM_PWM_Start+0x138>)
 80035c4:	4293      	cmp	r3, r2
 80035c6:	d00e      	beq.n	80035e6 <HAL_TIM_PWM_Start+0xfa>
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80035d0:	d009      	beq.n	80035e6 <HAL_TIM_PWM_Start+0xfa>
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	4a14      	ldr	r2, [pc, #80]	@ (8003628 <HAL_TIM_PWM_Start+0x13c>)
 80035d8:	4293      	cmp	r3, r2
 80035da:	d004      	beq.n	80035e6 <HAL_TIM_PWM_Start+0xfa>
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	4a12      	ldr	r2, [pc, #72]	@ (800362c <HAL_TIM_PWM_Start+0x140>)
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d111      	bne.n	800360a <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	689b      	ldr	r3, [r3, #8]
 80035ec:	f003 0307 	and.w	r3, r3, #7
 80035f0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	2b06      	cmp	r3, #6
 80035f6:	d010      	beq.n	800361a <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	681a      	ldr	r2, [r3, #0]
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f042 0201 	orr.w	r2, r2, #1
 8003606:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003608:	e007      	b.n	800361a <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	681a      	ldr	r2, [r3, #0]
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f042 0201 	orr.w	r2, r2, #1
 8003618:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800361a:	2300      	movs	r3, #0
}
 800361c:	4618      	mov	r0, r3
 800361e:	3710      	adds	r7, #16
 8003620:	46bd      	mov	sp, r7
 8003622:	bd80      	pop	{r7, pc}
 8003624:	40012c00 	.word	0x40012c00
 8003628:	40000400 	.word	0x40000400
 800362c:	40000800 	.word	0x40000800

08003630 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	b082      	sub	sp, #8
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
 8003638:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	2200      	movs	r2, #0
 8003640:	6839      	ldr	r1, [r7, #0]
 8003642:	4618      	mov	r0, r3
 8003644:	f000 fc2e 	bl	8003ea4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	4a29      	ldr	r2, [pc, #164]	@ (80036f4 <HAL_TIM_PWM_Stop+0xc4>)
 800364e:	4293      	cmp	r3, r2
 8003650:	d117      	bne.n	8003682 <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	6a1a      	ldr	r2, [r3, #32]
 8003658:	f241 1311 	movw	r3, #4369	@ 0x1111
 800365c:	4013      	ands	r3, r2
 800365e:	2b00      	cmp	r3, #0
 8003660:	d10f      	bne.n	8003682 <HAL_TIM_PWM_Stop+0x52>
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	6a1a      	ldr	r2, [r3, #32]
 8003668:	f240 4344 	movw	r3, #1092	@ 0x444
 800366c:	4013      	ands	r3, r2
 800366e:	2b00      	cmp	r3, #0
 8003670:	d107      	bne.n	8003682 <HAL_TIM_PWM_Stop+0x52>
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003680:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	6a1a      	ldr	r2, [r3, #32]
 8003688:	f241 1311 	movw	r3, #4369	@ 0x1111
 800368c:	4013      	ands	r3, r2
 800368e:	2b00      	cmp	r3, #0
 8003690:	d10f      	bne.n	80036b2 <HAL_TIM_PWM_Stop+0x82>
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	6a1a      	ldr	r2, [r3, #32]
 8003698:	f240 4344 	movw	r3, #1092	@ 0x444
 800369c:	4013      	ands	r3, r2
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d107      	bne.n	80036b2 <HAL_TIM_PWM_Stop+0x82>
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	681a      	ldr	r2, [r3, #0]
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f022 0201 	bic.w	r2, r2, #1
 80036b0:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d104      	bne.n	80036c2 <HAL_TIM_PWM_Stop+0x92>
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2201      	movs	r2, #1
 80036bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80036c0:	e013      	b.n	80036ea <HAL_TIM_PWM_Stop+0xba>
 80036c2:	683b      	ldr	r3, [r7, #0]
 80036c4:	2b04      	cmp	r3, #4
 80036c6:	d104      	bne.n	80036d2 <HAL_TIM_PWM_Stop+0xa2>
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2201      	movs	r2, #1
 80036cc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80036d0:	e00b      	b.n	80036ea <HAL_TIM_PWM_Stop+0xba>
 80036d2:	683b      	ldr	r3, [r7, #0]
 80036d4:	2b08      	cmp	r3, #8
 80036d6:	d104      	bne.n	80036e2 <HAL_TIM_PWM_Stop+0xb2>
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2201      	movs	r2, #1
 80036dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80036e0:	e003      	b.n	80036ea <HAL_TIM_PWM_Stop+0xba>
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	2201      	movs	r2, #1
 80036e6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Return function status */
  return HAL_OK;
 80036ea:	2300      	movs	r3, #0
}
 80036ec:	4618      	mov	r0, r3
 80036ee:	3708      	adds	r7, #8
 80036f0:	46bd      	mov	sp, r7
 80036f2:	bd80      	pop	{r7, pc}
 80036f4:	40012c00 	.word	0x40012c00

080036f8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b084      	sub	sp, #16
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	68db      	ldr	r3, [r3, #12]
 8003706:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	691b      	ldr	r3, [r3, #16]
 800370e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003710:	68bb      	ldr	r3, [r7, #8]
 8003712:	f003 0302 	and.w	r3, r3, #2
 8003716:	2b00      	cmp	r3, #0
 8003718:	d020      	beq.n	800375c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	f003 0302 	and.w	r3, r3, #2
 8003720:	2b00      	cmp	r3, #0
 8003722:	d01b      	beq.n	800375c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f06f 0202 	mvn.w	r2, #2
 800372c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	2201      	movs	r2, #1
 8003732:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	699b      	ldr	r3, [r3, #24]
 800373a:	f003 0303 	and.w	r3, r3, #3
 800373e:	2b00      	cmp	r3, #0
 8003740:	d003      	beq.n	800374a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003742:	6878      	ldr	r0, [r7, #4]
 8003744:	f000 f99c 	bl	8003a80 <HAL_TIM_IC_CaptureCallback>
 8003748:	e005      	b.n	8003756 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800374a:	6878      	ldr	r0, [r7, #4]
 800374c:	f000 f98f 	bl	8003a6e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003750:	6878      	ldr	r0, [r7, #4]
 8003752:	f000 f99e 	bl	8003a92 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2200      	movs	r2, #0
 800375a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800375c:	68bb      	ldr	r3, [r7, #8]
 800375e:	f003 0304 	and.w	r3, r3, #4
 8003762:	2b00      	cmp	r3, #0
 8003764:	d020      	beq.n	80037a8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	f003 0304 	and.w	r3, r3, #4
 800376c:	2b00      	cmp	r3, #0
 800376e:	d01b      	beq.n	80037a8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f06f 0204 	mvn.w	r2, #4
 8003778:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	2202      	movs	r2, #2
 800377e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	699b      	ldr	r3, [r3, #24]
 8003786:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800378a:	2b00      	cmp	r3, #0
 800378c:	d003      	beq.n	8003796 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800378e:	6878      	ldr	r0, [r7, #4]
 8003790:	f000 f976 	bl	8003a80 <HAL_TIM_IC_CaptureCallback>
 8003794:	e005      	b.n	80037a2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003796:	6878      	ldr	r0, [r7, #4]
 8003798:	f000 f969 	bl	8003a6e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800379c:	6878      	ldr	r0, [r7, #4]
 800379e:	f000 f978 	bl	8003a92 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	2200      	movs	r2, #0
 80037a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80037a8:	68bb      	ldr	r3, [r7, #8]
 80037aa:	f003 0308 	and.w	r3, r3, #8
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d020      	beq.n	80037f4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	f003 0308 	and.w	r3, r3, #8
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d01b      	beq.n	80037f4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f06f 0208 	mvn.w	r2, #8
 80037c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	2204      	movs	r2, #4
 80037ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	69db      	ldr	r3, [r3, #28]
 80037d2:	f003 0303 	and.w	r3, r3, #3
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d003      	beq.n	80037e2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80037da:	6878      	ldr	r0, [r7, #4]
 80037dc:	f000 f950 	bl	8003a80 <HAL_TIM_IC_CaptureCallback>
 80037e0:	e005      	b.n	80037ee <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80037e2:	6878      	ldr	r0, [r7, #4]
 80037e4:	f000 f943 	bl	8003a6e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037e8:	6878      	ldr	r0, [r7, #4]
 80037ea:	f000 f952 	bl	8003a92 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	2200      	movs	r2, #0
 80037f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80037f4:	68bb      	ldr	r3, [r7, #8]
 80037f6:	f003 0310 	and.w	r3, r3, #16
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d020      	beq.n	8003840 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	f003 0310 	and.w	r3, r3, #16
 8003804:	2b00      	cmp	r3, #0
 8003806:	d01b      	beq.n	8003840 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f06f 0210 	mvn.w	r2, #16
 8003810:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2208      	movs	r2, #8
 8003816:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	69db      	ldr	r3, [r3, #28]
 800381e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003822:	2b00      	cmp	r3, #0
 8003824:	d003      	beq.n	800382e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003826:	6878      	ldr	r0, [r7, #4]
 8003828:	f000 f92a 	bl	8003a80 <HAL_TIM_IC_CaptureCallback>
 800382c:	e005      	b.n	800383a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800382e:	6878      	ldr	r0, [r7, #4]
 8003830:	f000 f91d 	bl	8003a6e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003834:	6878      	ldr	r0, [r7, #4]
 8003836:	f000 f92c 	bl	8003a92 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	2200      	movs	r2, #0
 800383e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003840:	68bb      	ldr	r3, [r7, #8]
 8003842:	f003 0301 	and.w	r3, r3, #1
 8003846:	2b00      	cmp	r3, #0
 8003848:	d00c      	beq.n	8003864 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	f003 0301 	and.w	r3, r3, #1
 8003850:	2b00      	cmp	r3, #0
 8003852:	d007      	beq.n	8003864 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f06f 0201 	mvn.w	r2, #1
 800385c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800385e:	6878      	ldr	r0, [r7, #4]
 8003860:	f000 f8fc 	bl	8003a5c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003864:	68bb      	ldr	r3, [r7, #8]
 8003866:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800386a:	2b00      	cmp	r3, #0
 800386c:	d00c      	beq.n	8003888 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003874:	2b00      	cmp	r3, #0
 8003876:	d007      	beq.n	8003888 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003880:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003882:	6878      	ldr	r0, [r7, #4]
 8003884:	f000 fce6 	bl	8004254 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003888:	68bb      	ldr	r3, [r7, #8]
 800388a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800388e:	2b00      	cmp	r3, #0
 8003890:	d00c      	beq.n	80038ac <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003898:	2b00      	cmp	r3, #0
 800389a:	d007      	beq.n	80038ac <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80038a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80038a6:	6878      	ldr	r0, [r7, #4]
 80038a8:	f000 f8fc 	bl	8003aa4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80038ac:	68bb      	ldr	r3, [r7, #8]
 80038ae:	f003 0320 	and.w	r3, r3, #32
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d00c      	beq.n	80038d0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	f003 0320 	and.w	r3, r3, #32
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d007      	beq.n	80038d0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f06f 0220 	mvn.w	r2, #32
 80038c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80038ca:	6878      	ldr	r0, [r7, #4]
 80038cc:	f000 fcb9 	bl	8004242 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80038d0:	bf00      	nop
 80038d2:	3710      	adds	r7, #16
 80038d4:	46bd      	mov	sp, r7
 80038d6:	bd80      	pop	{r7, pc}

080038d8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	b086      	sub	sp, #24
 80038dc:	af00      	add	r7, sp, #0
 80038de:	60f8      	str	r0, [r7, #12]
 80038e0:	60b9      	str	r1, [r7, #8]
 80038e2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80038e4:	2300      	movs	r3, #0
 80038e6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80038ee:	2b01      	cmp	r3, #1
 80038f0:	d101      	bne.n	80038f6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80038f2:	2302      	movs	r3, #2
 80038f4:	e0ae      	b.n	8003a54 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	2201      	movs	r2, #1
 80038fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	2b0c      	cmp	r3, #12
 8003902:	f200 809f 	bhi.w	8003a44 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003906:	a201      	add	r2, pc, #4	@ (adr r2, 800390c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003908:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800390c:	08003941 	.word	0x08003941
 8003910:	08003a45 	.word	0x08003a45
 8003914:	08003a45 	.word	0x08003a45
 8003918:	08003a45 	.word	0x08003a45
 800391c:	08003981 	.word	0x08003981
 8003920:	08003a45 	.word	0x08003a45
 8003924:	08003a45 	.word	0x08003a45
 8003928:	08003a45 	.word	0x08003a45
 800392c:	080039c3 	.word	0x080039c3
 8003930:	08003a45 	.word	0x08003a45
 8003934:	08003a45 	.word	0x08003a45
 8003938:	08003a45 	.word	0x08003a45
 800393c:	08003a03 	.word	0x08003a03
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	68b9      	ldr	r1, [r7, #8]
 8003946:	4618      	mov	r0, r3
 8003948:	f000 f924 	bl	8003b94 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	699a      	ldr	r2, [r3, #24]
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f042 0208 	orr.w	r2, r2, #8
 800395a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	699a      	ldr	r2, [r3, #24]
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f022 0204 	bic.w	r2, r2, #4
 800396a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	6999      	ldr	r1, [r3, #24]
 8003972:	68bb      	ldr	r3, [r7, #8]
 8003974:	691a      	ldr	r2, [r3, #16]
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	430a      	orrs	r2, r1
 800397c:	619a      	str	r2, [r3, #24]
      break;
 800397e:	e064      	b.n	8003a4a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	68b9      	ldr	r1, [r7, #8]
 8003986:	4618      	mov	r0, r3
 8003988:	f000 f96a 	bl	8003c60 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	699a      	ldr	r2, [r3, #24]
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800399a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	699a      	ldr	r2, [r3, #24]
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80039aa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	6999      	ldr	r1, [r3, #24]
 80039b2:	68bb      	ldr	r3, [r7, #8]
 80039b4:	691b      	ldr	r3, [r3, #16]
 80039b6:	021a      	lsls	r2, r3, #8
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	430a      	orrs	r2, r1
 80039be:	619a      	str	r2, [r3, #24]
      break;
 80039c0:	e043      	b.n	8003a4a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	68b9      	ldr	r1, [r7, #8]
 80039c8:	4618      	mov	r0, r3
 80039ca:	f000 f9b3 	bl	8003d34 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	69da      	ldr	r2, [r3, #28]
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f042 0208 	orr.w	r2, r2, #8
 80039dc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	69da      	ldr	r2, [r3, #28]
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f022 0204 	bic.w	r2, r2, #4
 80039ec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	69d9      	ldr	r1, [r3, #28]
 80039f4:	68bb      	ldr	r3, [r7, #8]
 80039f6:	691a      	ldr	r2, [r3, #16]
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	430a      	orrs	r2, r1
 80039fe:	61da      	str	r2, [r3, #28]
      break;
 8003a00:	e023      	b.n	8003a4a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	68b9      	ldr	r1, [r7, #8]
 8003a08:	4618      	mov	r0, r3
 8003a0a:	f000 f9fd 	bl	8003e08 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	69da      	ldr	r2, [r3, #28]
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003a1c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	69da      	ldr	r2, [r3, #28]
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003a2c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	69d9      	ldr	r1, [r3, #28]
 8003a34:	68bb      	ldr	r3, [r7, #8]
 8003a36:	691b      	ldr	r3, [r3, #16]
 8003a38:	021a      	lsls	r2, r3, #8
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	430a      	orrs	r2, r1
 8003a40:	61da      	str	r2, [r3, #28]
      break;
 8003a42:	e002      	b.n	8003a4a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003a44:	2301      	movs	r3, #1
 8003a46:	75fb      	strb	r3, [r7, #23]
      break;
 8003a48:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003a52:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a54:	4618      	mov	r0, r3
 8003a56:	3718      	adds	r7, #24
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	bd80      	pop	{r7, pc}

08003a5c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003a5c:	b480      	push	{r7}
 8003a5e:	b083      	sub	sp, #12
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003a64:	bf00      	nop
 8003a66:	370c      	adds	r7, #12
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	bc80      	pop	{r7}
 8003a6c:	4770      	bx	lr

08003a6e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003a6e:	b480      	push	{r7}
 8003a70:	b083      	sub	sp, #12
 8003a72:	af00      	add	r7, sp, #0
 8003a74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003a76:	bf00      	nop
 8003a78:	370c      	adds	r7, #12
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	bc80      	pop	{r7}
 8003a7e:	4770      	bx	lr

08003a80 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003a80:	b480      	push	{r7}
 8003a82:	b083      	sub	sp, #12
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003a88:	bf00      	nop
 8003a8a:	370c      	adds	r7, #12
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	bc80      	pop	{r7}
 8003a90:	4770      	bx	lr

08003a92 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003a92:	b480      	push	{r7}
 8003a94:	b083      	sub	sp, #12
 8003a96:	af00      	add	r7, sp, #0
 8003a98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003a9a:	bf00      	nop
 8003a9c:	370c      	adds	r7, #12
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	bc80      	pop	{r7}
 8003aa2:	4770      	bx	lr

08003aa4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003aa4:	b480      	push	{r7}
 8003aa6:	b083      	sub	sp, #12
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003aac:	bf00      	nop
 8003aae:	370c      	adds	r7, #12
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	bc80      	pop	{r7}
 8003ab4:	4770      	bx	lr
	...

08003ab8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003ab8:	b480      	push	{r7}
 8003aba:	b085      	sub	sp, #20
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
 8003ac0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	4a2f      	ldr	r2, [pc, #188]	@ (8003b88 <TIM_Base_SetConfig+0xd0>)
 8003acc:	4293      	cmp	r3, r2
 8003ace:	d00b      	beq.n	8003ae8 <TIM_Base_SetConfig+0x30>
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003ad6:	d007      	beq.n	8003ae8 <TIM_Base_SetConfig+0x30>
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	4a2c      	ldr	r2, [pc, #176]	@ (8003b8c <TIM_Base_SetConfig+0xd4>)
 8003adc:	4293      	cmp	r3, r2
 8003ade:	d003      	beq.n	8003ae8 <TIM_Base_SetConfig+0x30>
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	4a2b      	ldr	r2, [pc, #172]	@ (8003b90 <TIM_Base_SetConfig+0xd8>)
 8003ae4:	4293      	cmp	r3, r2
 8003ae6:	d108      	bne.n	8003afa <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003aee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	685b      	ldr	r3, [r3, #4]
 8003af4:	68fa      	ldr	r2, [r7, #12]
 8003af6:	4313      	orrs	r3, r2
 8003af8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	4a22      	ldr	r2, [pc, #136]	@ (8003b88 <TIM_Base_SetConfig+0xd0>)
 8003afe:	4293      	cmp	r3, r2
 8003b00:	d00b      	beq.n	8003b1a <TIM_Base_SetConfig+0x62>
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003b08:	d007      	beq.n	8003b1a <TIM_Base_SetConfig+0x62>
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	4a1f      	ldr	r2, [pc, #124]	@ (8003b8c <TIM_Base_SetConfig+0xd4>)
 8003b0e:	4293      	cmp	r3, r2
 8003b10:	d003      	beq.n	8003b1a <TIM_Base_SetConfig+0x62>
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	4a1e      	ldr	r2, [pc, #120]	@ (8003b90 <TIM_Base_SetConfig+0xd8>)
 8003b16:	4293      	cmp	r3, r2
 8003b18:	d108      	bne.n	8003b2c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003b20:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003b22:	683b      	ldr	r3, [r7, #0]
 8003b24:	68db      	ldr	r3, [r3, #12]
 8003b26:	68fa      	ldr	r2, [r7, #12]
 8003b28:	4313      	orrs	r3, r2
 8003b2a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003b32:	683b      	ldr	r3, [r7, #0]
 8003b34:	695b      	ldr	r3, [r3, #20]
 8003b36:	4313      	orrs	r3, r2
 8003b38:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	68fa      	ldr	r2, [r7, #12]
 8003b3e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	689a      	ldr	r2, [r3, #8]
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	681a      	ldr	r2, [r3, #0]
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	4a0d      	ldr	r2, [pc, #52]	@ (8003b88 <TIM_Base_SetConfig+0xd0>)
 8003b54:	4293      	cmp	r3, r2
 8003b56:	d103      	bne.n	8003b60 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003b58:	683b      	ldr	r3, [r7, #0]
 8003b5a:	691a      	ldr	r2, [r3, #16]
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2201      	movs	r2, #1
 8003b64:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	691b      	ldr	r3, [r3, #16]
 8003b6a:	f003 0301 	and.w	r3, r3, #1
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d005      	beq.n	8003b7e <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	691b      	ldr	r3, [r3, #16]
 8003b76:	f023 0201 	bic.w	r2, r3, #1
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	611a      	str	r2, [r3, #16]
  }
}
 8003b7e:	bf00      	nop
 8003b80:	3714      	adds	r7, #20
 8003b82:	46bd      	mov	sp, r7
 8003b84:	bc80      	pop	{r7}
 8003b86:	4770      	bx	lr
 8003b88:	40012c00 	.word	0x40012c00
 8003b8c:	40000400 	.word	0x40000400
 8003b90:	40000800 	.word	0x40000800

08003b94 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003b94:	b480      	push	{r7}
 8003b96:	b087      	sub	sp, #28
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
 8003b9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6a1b      	ldr	r3, [r3, #32]
 8003ba2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6a1b      	ldr	r3, [r3, #32]
 8003ba8:	f023 0201 	bic.w	r2, r3, #1
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	685b      	ldr	r3, [r3, #4]
 8003bb4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	699b      	ldr	r3, [r3, #24]
 8003bba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003bc2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	f023 0303 	bic.w	r3, r3, #3
 8003bca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	68fa      	ldr	r2, [r7, #12]
 8003bd2:	4313      	orrs	r3, r2
 8003bd4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003bd6:	697b      	ldr	r3, [r7, #20]
 8003bd8:	f023 0302 	bic.w	r3, r3, #2
 8003bdc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003bde:	683b      	ldr	r3, [r7, #0]
 8003be0:	689b      	ldr	r3, [r3, #8]
 8003be2:	697a      	ldr	r2, [r7, #20]
 8003be4:	4313      	orrs	r3, r2
 8003be6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	4a1c      	ldr	r2, [pc, #112]	@ (8003c5c <TIM_OC1_SetConfig+0xc8>)
 8003bec:	4293      	cmp	r3, r2
 8003bee:	d10c      	bne.n	8003c0a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003bf0:	697b      	ldr	r3, [r7, #20]
 8003bf2:	f023 0308 	bic.w	r3, r3, #8
 8003bf6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003bf8:	683b      	ldr	r3, [r7, #0]
 8003bfa:	68db      	ldr	r3, [r3, #12]
 8003bfc:	697a      	ldr	r2, [r7, #20]
 8003bfe:	4313      	orrs	r3, r2
 8003c00:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003c02:	697b      	ldr	r3, [r7, #20]
 8003c04:	f023 0304 	bic.w	r3, r3, #4
 8003c08:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	4a13      	ldr	r2, [pc, #76]	@ (8003c5c <TIM_OC1_SetConfig+0xc8>)
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	d111      	bne.n	8003c36 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003c12:	693b      	ldr	r3, [r7, #16]
 8003c14:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003c18:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003c1a:	693b      	ldr	r3, [r7, #16]
 8003c1c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003c20:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003c22:	683b      	ldr	r3, [r7, #0]
 8003c24:	695b      	ldr	r3, [r3, #20]
 8003c26:	693a      	ldr	r2, [r7, #16]
 8003c28:	4313      	orrs	r3, r2
 8003c2a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003c2c:	683b      	ldr	r3, [r7, #0]
 8003c2e:	699b      	ldr	r3, [r3, #24]
 8003c30:	693a      	ldr	r2, [r7, #16]
 8003c32:	4313      	orrs	r3, r2
 8003c34:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	693a      	ldr	r2, [r7, #16]
 8003c3a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	68fa      	ldr	r2, [r7, #12]
 8003c40:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003c42:	683b      	ldr	r3, [r7, #0]
 8003c44:	685a      	ldr	r2, [r3, #4]
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	697a      	ldr	r2, [r7, #20]
 8003c4e:	621a      	str	r2, [r3, #32]
}
 8003c50:	bf00      	nop
 8003c52:	371c      	adds	r7, #28
 8003c54:	46bd      	mov	sp, r7
 8003c56:	bc80      	pop	{r7}
 8003c58:	4770      	bx	lr
 8003c5a:	bf00      	nop
 8003c5c:	40012c00 	.word	0x40012c00

08003c60 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003c60:	b480      	push	{r7}
 8003c62:	b087      	sub	sp, #28
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
 8003c68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6a1b      	ldr	r3, [r3, #32]
 8003c6e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	6a1b      	ldr	r3, [r3, #32]
 8003c74:	f023 0210 	bic.w	r2, r3, #16
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	685b      	ldr	r3, [r3, #4]
 8003c80:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	699b      	ldr	r3, [r3, #24]
 8003c86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003c8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003c96:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003c98:	683b      	ldr	r3, [r7, #0]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	021b      	lsls	r3, r3, #8
 8003c9e:	68fa      	ldr	r2, [r7, #12]
 8003ca0:	4313      	orrs	r3, r2
 8003ca2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003ca4:	697b      	ldr	r3, [r7, #20]
 8003ca6:	f023 0320 	bic.w	r3, r3, #32
 8003caa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	689b      	ldr	r3, [r3, #8]
 8003cb0:	011b      	lsls	r3, r3, #4
 8003cb2:	697a      	ldr	r2, [r7, #20]
 8003cb4:	4313      	orrs	r3, r2
 8003cb6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	4a1d      	ldr	r2, [pc, #116]	@ (8003d30 <TIM_OC2_SetConfig+0xd0>)
 8003cbc:	4293      	cmp	r3, r2
 8003cbe:	d10d      	bne.n	8003cdc <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003cc0:	697b      	ldr	r3, [r7, #20]
 8003cc2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003cc6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003cc8:	683b      	ldr	r3, [r7, #0]
 8003cca:	68db      	ldr	r3, [r3, #12]
 8003ccc:	011b      	lsls	r3, r3, #4
 8003cce:	697a      	ldr	r2, [r7, #20]
 8003cd0:	4313      	orrs	r3, r2
 8003cd2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003cd4:	697b      	ldr	r3, [r7, #20]
 8003cd6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003cda:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	4a14      	ldr	r2, [pc, #80]	@ (8003d30 <TIM_OC2_SetConfig+0xd0>)
 8003ce0:	4293      	cmp	r3, r2
 8003ce2:	d113      	bne.n	8003d0c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003ce4:	693b      	ldr	r3, [r7, #16]
 8003ce6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003cea:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003cec:	693b      	ldr	r3, [r7, #16]
 8003cee:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003cf2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	695b      	ldr	r3, [r3, #20]
 8003cf8:	009b      	lsls	r3, r3, #2
 8003cfa:	693a      	ldr	r2, [r7, #16]
 8003cfc:	4313      	orrs	r3, r2
 8003cfe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003d00:	683b      	ldr	r3, [r7, #0]
 8003d02:	699b      	ldr	r3, [r3, #24]
 8003d04:	009b      	lsls	r3, r3, #2
 8003d06:	693a      	ldr	r2, [r7, #16]
 8003d08:	4313      	orrs	r3, r2
 8003d0a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	693a      	ldr	r2, [r7, #16]
 8003d10:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	68fa      	ldr	r2, [r7, #12]
 8003d16:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003d18:	683b      	ldr	r3, [r7, #0]
 8003d1a:	685a      	ldr	r2, [r3, #4]
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	697a      	ldr	r2, [r7, #20]
 8003d24:	621a      	str	r2, [r3, #32]
}
 8003d26:	bf00      	nop
 8003d28:	371c      	adds	r7, #28
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	bc80      	pop	{r7}
 8003d2e:	4770      	bx	lr
 8003d30:	40012c00 	.word	0x40012c00

08003d34 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003d34:	b480      	push	{r7}
 8003d36:	b087      	sub	sp, #28
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
 8003d3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6a1b      	ldr	r3, [r3, #32]
 8003d42:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	6a1b      	ldr	r3, [r3, #32]
 8003d48:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	685b      	ldr	r3, [r3, #4]
 8003d54:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	69db      	ldr	r3, [r3, #28]
 8003d5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003d62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	f023 0303 	bic.w	r3, r3, #3
 8003d6a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	68fa      	ldr	r2, [r7, #12]
 8003d72:	4313      	orrs	r3, r2
 8003d74:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003d76:	697b      	ldr	r3, [r7, #20]
 8003d78:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003d7c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003d7e:	683b      	ldr	r3, [r7, #0]
 8003d80:	689b      	ldr	r3, [r3, #8]
 8003d82:	021b      	lsls	r3, r3, #8
 8003d84:	697a      	ldr	r2, [r7, #20]
 8003d86:	4313      	orrs	r3, r2
 8003d88:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	4a1d      	ldr	r2, [pc, #116]	@ (8003e04 <TIM_OC3_SetConfig+0xd0>)
 8003d8e:	4293      	cmp	r3, r2
 8003d90:	d10d      	bne.n	8003dae <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003d92:	697b      	ldr	r3, [r7, #20]
 8003d94:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003d98:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003d9a:	683b      	ldr	r3, [r7, #0]
 8003d9c:	68db      	ldr	r3, [r3, #12]
 8003d9e:	021b      	lsls	r3, r3, #8
 8003da0:	697a      	ldr	r2, [r7, #20]
 8003da2:	4313      	orrs	r3, r2
 8003da4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003da6:	697b      	ldr	r3, [r7, #20]
 8003da8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003dac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	4a14      	ldr	r2, [pc, #80]	@ (8003e04 <TIM_OC3_SetConfig+0xd0>)
 8003db2:	4293      	cmp	r3, r2
 8003db4:	d113      	bne.n	8003dde <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003db6:	693b      	ldr	r3, [r7, #16]
 8003db8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003dbc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003dbe:	693b      	ldr	r3, [r7, #16]
 8003dc0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003dc4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003dc6:	683b      	ldr	r3, [r7, #0]
 8003dc8:	695b      	ldr	r3, [r3, #20]
 8003dca:	011b      	lsls	r3, r3, #4
 8003dcc:	693a      	ldr	r2, [r7, #16]
 8003dce:	4313      	orrs	r3, r2
 8003dd0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	699b      	ldr	r3, [r3, #24]
 8003dd6:	011b      	lsls	r3, r3, #4
 8003dd8:	693a      	ldr	r2, [r7, #16]
 8003dda:	4313      	orrs	r3, r2
 8003ddc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	693a      	ldr	r2, [r7, #16]
 8003de2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	68fa      	ldr	r2, [r7, #12]
 8003de8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003dea:	683b      	ldr	r3, [r7, #0]
 8003dec:	685a      	ldr	r2, [r3, #4]
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	697a      	ldr	r2, [r7, #20]
 8003df6:	621a      	str	r2, [r3, #32]
}
 8003df8:	bf00      	nop
 8003dfa:	371c      	adds	r7, #28
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	bc80      	pop	{r7}
 8003e00:	4770      	bx	lr
 8003e02:	bf00      	nop
 8003e04:	40012c00 	.word	0x40012c00

08003e08 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003e08:	b480      	push	{r7}
 8003e0a:	b087      	sub	sp, #28
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
 8003e10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6a1b      	ldr	r3, [r3, #32]
 8003e16:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6a1b      	ldr	r3, [r3, #32]
 8003e1c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	685b      	ldr	r3, [r3, #4]
 8003e28:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	69db      	ldr	r3, [r3, #28]
 8003e2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003e36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003e3e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003e40:	683b      	ldr	r3, [r7, #0]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	021b      	lsls	r3, r3, #8
 8003e46:	68fa      	ldr	r2, [r7, #12]
 8003e48:	4313      	orrs	r3, r2
 8003e4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003e4c:	693b      	ldr	r3, [r7, #16]
 8003e4e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003e52:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	689b      	ldr	r3, [r3, #8]
 8003e58:	031b      	lsls	r3, r3, #12
 8003e5a:	693a      	ldr	r2, [r7, #16]
 8003e5c:	4313      	orrs	r3, r2
 8003e5e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	4a0f      	ldr	r2, [pc, #60]	@ (8003ea0 <TIM_OC4_SetConfig+0x98>)
 8003e64:	4293      	cmp	r3, r2
 8003e66:	d109      	bne.n	8003e7c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003e68:	697b      	ldr	r3, [r7, #20]
 8003e6a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003e6e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	695b      	ldr	r3, [r3, #20]
 8003e74:	019b      	lsls	r3, r3, #6
 8003e76:	697a      	ldr	r2, [r7, #20]
 8003e78:	4313      	orrs	r3, r2
 8003e7a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	697a      	ldr	r2, [r7, #20]
 8003e80:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	68fa      	ldr	r2, [r7, #12]
 8003e86:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	685a      	ldr	r2, [r3, #4]
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	693a      	ldr	r2, [r7, #16]
 8003e94:	621a      	str	r2, [r3, #32]
}
 8003e96:	bf00      	nop
 8003e98:	371c      	adds	r7, #28
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	bc80      	pop	{r7}
 8003e9e:	4770      	bx	lr
 8003ea0:	40012c00 	.word	0x40012c00

08003ea4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003ea4:	b480      	push	{r7}
 8003ea6:	b087      	sub	sp, #28
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	60f8      	str	r0, [r7, #12]
 8003eac:	60b9      	str	r1, [r7, #8]
 8003eae:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003eb0:	68bb      	ldr	r3, [r7, #8]
 8003eb2:	f003 031f 	and.w	r3, r3, #31
 8003eb6:	2201      	movs	r2, #1
 8003eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8003ebc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	6a1a      	ldr	r2, [r3, #32]
 8003ec2:	697b      	ldr	r3, [r7, #20]
 8003ec4:	43db      	mvns	r3, r3
 8003ec6:	401a      	ands	r2, r3
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	6a1a      	ldr	r2, [r3, #32]
 8003ed0:	68bb      	ldr	r3, [r7, #8]
 8003ed2:	f003 031f 	and.w	r3, r3, #31
 8003ed6:	6879      	ldr	r1, [r7, #4]
 8003ed8:	fa01 f303 	lsl.w	r3, r1, r3
 8003edc:	431a      	orrs	r2, r3
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	621a      	str	r2, [r3, #32]
}
 8003ee2:	bf00      	nop
 8003ee4:	371c      	adds	r7, #28
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	bc80      	pop	{r7}
 8003eea:	4770      	bx	lr

08003eec <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	b084      	sub	sp, #16
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
 8003ef4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003ef6:	683b      	ldr	r3, [r7, #0]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d109      	bne.n	8003f10 <HAL_TIMEx_PWMN_Start+0x24>
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003f02:	b2db      	uxtb	r3, r3
 8003f04:	2b01      	cmp	r3, #1
 8003f06:	bf14      	ite	ne
 8003f08:	2301      	movne	r3, #1
 8003f0a:	2300      	moveq	r3, #0
 8003f0c:	b2db      	uxtb	r3, r3
 8003f0e:	e022      	b.n	8003f56 <HAL_TIMEx_PWMN_Start+0x6a>
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	2b04      	cmp	r3, #4
 8003f14:	d109      	bne.n	8003f2a <HAL_TIMEx_PWMN_Start+0x3e>
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8003f1c:	b2db      	uxtb	r3, r3
 8003f1e:	2b01      	cmp	r3, #1
 8003f20:	bf14      	ite	ne
 8003f22:	2301      	movne	r3, #1
 8003f24:	2300      	moveq	r3, #0
 8003f26:	b2db      	uxtb	r3, r3
 8003f28:	e015      	b.n	8003f56 <HAL_TIMEx_PWMN_Start+0x6a>
 8003f2a:	683b      	ldr	r3, [r7, #0]
 8003f2c:	2b08      	cmp	r3, #8
 8003f2e:	d109      	bne.n	8003f44 <HAL_TIMEx_PWMN_Start+0x58>
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003f36:	b2db      	uxtb	r3, r3
 8003f38:	2b01      	cmp	r3, #1
 8003f3a:	bf14      	ite	ne
 8003f3c:	2301      	movne	r3, #1
 8003f3e:	2300      	moveq	r3, #0
 8003f40:	b2db      	uxtb	r3, r3
 8003f42:	e008      	b.n	8003f56 <HAL_TIMEx_PWMN_Start+0x6a>
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003f4a:	b2db      	uxtb	r3, r3
 8003f4c:	2b01      	cmp	r3, #1
 8003f4e:	bf14      	ite	ne
 8003f50:	2301      	movne	r3, #1
 8003f52:	2300      	moveq	r3, #0
 8003f54:	b2db      	uxtb	r3, r3
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d001      	beq.n	8003f5e <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 8003f5a:	2301      	movs	r3, #1
 8003f5c:	e059      	b.n	8004012 <HAL_TIMEx_PWMN_Start+0x126>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003f5e:	683b      	ldr	r3, [r7, #0]
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d104      	bne.n	8003f6e <HAL_TIMEx_PWMN_Start+0x82>
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2202      	movs	r2, #2
 8003f68:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003f6c:	e013      	b.n	8003f96 <HAL_TIMEx_PWMN_Start+0xaa>
 8003f6e:	683b      	ldr	r3, [r7, #0]
 8003f70:	2b04      	cmp	r3, #4
 8003f72:	d104      	bne.n	8003f7e <HAL_TIMEx_PWMN_Start+0x92>
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2202      	movs	r2, #2
 8003f78:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003f7c:	e00b      	b.n	8003f96 <HAL_TIMEx_PWMN_Start+0xaa>
 8003f7e:	683b      	ldr	r3, [r7, #0]
 8003f80:	2b08      	cmp	r3, #8
 8003f82:	d104      	bne.n	8003f8e <HAL_TIMEx_PWMN_Start+0xa2>
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2202      	movs	r2, #2
 8003f88:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003f8c:	e003      	b.n	8003f96 <HAL_TIMEx_PWMN_Start+0xaa>
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	2202      	movs	r2, #2
 8003f92:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	2204      	movs	r2, #4
 8003f9c:	6839      	ldr	r1, [r7, #0]
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	f000 f961 	bl	8004266 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003fb2:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	4a18      	ldr	r2, [pc, #96]	@ (800401c <HAL_TIMEx_PWMN_Start+0x130>)
 8003fba:	4293      	cmp	r3, r2
 8003fbc:	d00e      	beq.n	8003fdc <HAL_TIMEx_PWMN_Start+0xf0>
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003fc6:	d009      	beq.n	8003fdc <HAL_TIMEx_PWMN_Start+0xf0>
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	4a14      	ldr	r2, [pc, #80]	@ (8004020 <HAL_TIMEx_PWMN_Start+0x134>)
 8003fce:	4293      	cmp	r3, r2
 8003fd0:	d004      	beq.n	8003fdc <HAL_TIMEx_PWMN_Start+0xf0>
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	4a13      	ldr	r2, [pc, #76]	@ (8004024 <HAL_TIMEx_PWMN_Start+0x138>)
 8003fd8:	4293      	cmp	r3, r2
 8003fda:	d111      	bne.n	8004000 <HAL_TIMEx_PWMN_Start+0x114>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	689b      	ldr	r3, [r3, #8]
 8003fe2:	f003 0307 	and.w	r3, r3, #7
 8003fe6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	2b06      	cmp	r3, #6
 8003fec:	d010      	beq.n	8004010 <HAL_TIMEx_PWMN_Start+0x124>
    {
      __HAL_TIM_ENABLE(htim);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	681a      	ldr	r2, [r3, #0]
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f042 0201 	orr.w	r2, r2, #1
 8003ffc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ffe:	e007      	b.n	8004010 <HAL_TIMEx_PWMN_Start+0x124>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	681a      	ldr	r2, [r3, #0]
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f042 0201 	orr.w	r2, r2, #1
 800400e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004010:	2300      	movs	r3, #0
}
 8004012:	4618      	mov	r0, r3
 8004014:	3710      	adds	r7, #16
 8004016:	46bd      	mov	sp, r7
 8004018:	bd80      	pop	{r7, pc}
 800401a:	bf00      	nop
 800401c:	40012c00 	.word	0x40012c00
 8004020:	40000400 	.word	0x40000400
 8004024:	40000800 	.word	0x40000800

08004028 <HAL_TIMEx_PWMN_Stop>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004028:	b580      	push	{r7, lr}
 800402a:	b082      	sub	sp, #8
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
 8004030:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Disable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	2200      	movs	r2, #0
 8004038:	6839      	ldr	r1, [r7, #0]
 800403a:	4618      	mov	r0, r3
 800403c:	f000 f913 	bl	8004266 <TIM_CCxNChannelCmd>

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	6a1a      	ldr	r2, [r3, #32]
 8004046:	f241 1311 	movw	r3, #4369	@ 0x1111
 800404a:	4013      	ands	r3, r2
 800404c:	2b00      	cmp	r3, #0
 800404e:	d10f      	bne.n	8004070 <HAL_TIMEx_PWMN_Stop+0x48>
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	6a1a      	ldr	r2, [r3, #32]
 8004056:	f240 4344 	movw	r3, #1092	@ 0x444
 800405a:	4013      	ands	r3, r2
 800405c:	2b00      	cmp	r3, #0
 800405e:	d107      	bne.n	8004070 <HAL_TIMEx_PWMN_Stop+0x48>
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800406e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	6a1a      	ldr	r2, [r3, #32]
 8004076:	f241 1311 	movw	r3, #4369	@ 0x1111
 800407a:	4013      	ands	r3, r2
 800407c:	2b00      	cmp	r3, #0
 800407e:	d10f      	bne.n	80040a0 <HAL_TIMEx_PWMN_Stop+0x78>
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	6a1a      	ldr	r2, [r3, #32]
 8004086:	f240 4344 	movw	r3, #1092	@ 0x444
 800408a:	4013      	ands	r3, r2
 800408c:	2b00      	cmp	r3, #0
 800408e:	d107      	bne.n	80040a0 <HAL_TIMEx_PWMN_Stop+0x78>
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	681a      	ldr	r2, [r3, #0]
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f022 0201 	bic.w	r2, r2, #1
 800409e:	601a      	str	r2, [r3, #0]

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d104      	bne.n	80040b0 <HAL_TIMEx_PWMN_Stop+0x88>
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	2201      	movs	r2, #1
 80040aa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80040ae:	e013      	b.n	80040d8 <HAL_TIMEx_PWMN_Stop+0xb0>
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	2b04      	cmp	r3, #4
 80040b4:	d104      	bne.n	80040c0 <HAL_TIMEx_PWMN_Stop+0x98>
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	2201      	movs	r2, #1
 80040ba:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80040be:	e00b      	b.n	80040d8 <HAL_TIMEx_PWMN_Stop+0xb0>
 80040c0:	683b      	ldr	r3, [r7, #0]
 80040c2:	2b08      	cmp	r3, #8
 80040c4:	d104      	bne.n	80040d0 <HAL_TIMEx_PWMN_Stop+0xa8>
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	2201      	movs	r2, #1
 80040ca:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80040ce:	e003      	b.n	80040d8 <HAL_TIMEx_PWMN_Stop+0xb0>
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2201      	movs	r2, #1
 80040d4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Return function status */
  return HAL_OK;
 80040d8:	2300      	movs	r3, #0
}
 80040da:	4618      	mov	r0, r3
 80040dc:	3708      	adds	r7, #8
 80040de:	46bd      	mov	sp, r7
 80040e0:	bd80      	pop	{r7, pc}
	...

080040e4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80040e4:	b480      	push	{r7}
 80040e6:	b085      	sub	sp, #20
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
 80040ec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80040f4:	2b01      	cmp	r3, #1
 80040f6:	d101      	bne.n	80040fc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80040f8:	2302      	movs	r3, #2
 80040fa:	e046      	b.n	800418a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2201      	movs	r2, #1
 8004100:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2202      	movs	r2, #2
 8004108:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	685b      	ldr	r3, [r3, #4]
 8004112:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	689b      	ldr	r3, [r3, #8]
 800411a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004122:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	68fa      	ldr	r2, [r7, #12]
 800412a:	4313      	orrs	r3, r2
 800412c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	68fa      	ldr	r2, [r7, #12]
 8004134:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	4a16      	ldr	r2, [pc, #88]	@ (8004194 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800413c:	4293      	cmp	r3, r2
 800413e:	d00e      	beq.n	800415e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004148:	d009      	beq.n	800415e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	4a12      	ldr	r2, [pc, #72]	@ (8004198 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004150:	4293      	cmp	r3, r2
 8004152:	d004      	beq.n	800415e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	4a10      	ldr	r2, [pc, #64]	@ (800419c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800415a:	4293      	cmp	r3, r2
 800415c:	d10c      	bne.n	8004178 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800415e:	68bb      	ldr	r3, [r7, #8]
 8004160:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004164:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004166:	683b      	ldr	r3, [r7, #0]
 8004168:	685b      	ldr	r3, [r3, #4]
 800416a:	68ba      	ldr	r2, [r7, #8]
 800416c:	4313      	orrs	r3, r2
 800416e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	68ba      	ldr	r2, [r7, #8]
 8004176:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2201      	movs	r2, #1
 800417c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2200      	movs	r2, #0
 8004184:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004188:	2300      	movs	r3, #0
}
 800418a:	4618      	mov	r0, r3
 800418c:	3714      	adds	r7, #20
 800418e:	46bd      	mov	sp, r7
 8004190:	bc80      	pop	{r7}
 8004192:	4770      	bx	lr
 8004194:	40012c00 	.word	0x40012c00
 8004198:	40000400 	.word	0x40000400
 800419c:	40000800 	.word	0x40000800

080041a0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80041a0:	b480      	push	{r7}
 80041a2:	b085      	sub	sp, #20
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
 80041a8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80041aa:	2300      	movs	r3, #0
 80041ac:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80041b4:	2b01      	cmp	r3, #1
 80041b6:	d101      	bne.n	80041bc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80041b8:	2302      	movs	r3, #2
 80041ba:	e03d      	b.n	8004238 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2201      	movs	r2, #1
 80041c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80041ca:	683b      	ldr	r3, [r7, #0]
 80041cc:	68db      	ldr	r3, [r3, #12]
 80041ce:	4313      	orrs	r3, r2
 80041d0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80041d8:	683b      	ldr	r3, [r7, #0]
 80041da:	689b      	ldr	r3, [r3, #8]
 80041dc:	4313      	orrs	r3, r2
 80041de:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80041e6:	683b      	ldr	r3, [r7, #0]
 80041e8:	685b      	ldr	r3, [r3, #4]
 80041ea:	4313      	orrs	r3, r2
 80041ec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80041f4:	683b      	ldr	r3, [r7, #0]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	4313      	orrs	r3, r2
 80041fa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004202:	683b      	ldr	r3, [r7, #0]
 8004204:	691b      	ldr	r3, [r3, #16]
 8004206:	4313      	orrs	r3, r2
 8004208:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8004210:	683b      	ldr	r3, [r7, #0]
 8004212:	695b      	ldr	r3, [r3, #20]
 8004214:	4313      	orrs	r3, r2
 8004216:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800421e:	683b      	ldr	r3, [r7, #0]
 8004220:	69db      	ldr	r3, [r3, #28]
 8004222:	4313      	orrs	r3, r2
 8004224:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	68fa      	ldr	r2, [r7, #12]
 800422c:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	2200      	movs	r2, #0
 8004232:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004236:	2300      	movs	r3, #0
}
 8004238:	4618      	mov	r0, r3
 800423a:	3714      	adds	r7, #20
 800423c:	46bd      	mov	sp, r7
 800423e:	bc80      	pop	{r7}
 8004240:	4770      	bx	lr

08004242 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004242:	b480      	push	{r7}
 8004244:	b083      	sub	sp, #12
 8004246:	af00      	add	r7, sp, #0
 8004248:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800424a:	bf00      	nop
 800424c:	370c      	adds	r7, #12
 800424e:	46bd      	mov	sp, r7
 8004250:	bc80      	pop	{r7}
 8004252:	4770      	bx	lr

08004254 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004254:	b480      	push	{r7}
 8004256:	b083      	sub	sp, #12
 8004258:	af00      	add	r7, sp, #0
 800425a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800425c:	bf00      	nop
 800425e:	370c      	adds	r7, #12
 8004260:	46bd      	mov	sp, r7
 8004262:	bc80      	pop	{r7}
 8004264:	4770      	bx	lr

08004266 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8004266:	b480      	push	{r7}
 8004268:	b087      	sub	sp, #28
 800426a:	af00      	add	r7, sp, #0
 800426c:	60f8      	str	r0, [r7, #12]
 800426e:	60b9      	str	r1, [r7, #8]
 8004270:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0xFU); /* 0xFU = 15 bits max shift */
 8004272:	68bb      	ldr	r3, [r7, #8]
 8004274:	f003 030f 	and.w	r3, r3, #15
 8004278:	2204      	movs	r2, #4
 800427a:	fa02 f303 	lsl.w	r3, r2, r3
 800427e:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	6a1a      	ldr	r2, [r3, #32]
 8004284:	697b      	ldr	r3, [r7, #20]
 8004286:	43db      	mvns	r3, r3
 8004288:	401a      	ands	r2, r3
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0xFU)); /* 0xFU = 15 bits max shift */
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	6a1a      	ldr	r2, [r3, #32]
 8004292:	68bb      	ldr	r3, [r7, #8]
 8004294:	f003 030f 	and.w	r3, r3, #15
 8004298:	6879      	ldr	r1, [r7, #4]
 800429a:	fa01 f303 	lsl.w	r3, r1, r3
 800429e:	431a      	orrs	r2, r3
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	621a      	str	r2, [r3, #32]
}
 80042a4:	bf00      	nop
 80042a6:	371c      	adds	r7, #28
 80042a8:	46bd      	mov	sp, r7
 80042aa:	bc80      	pop	{r7}
 80042ac:	4770      	bx	lr

080042ae <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80042ae:	b580      	push	{r7, lr}
 80042b0:	b082      	sub	sp, #8
 80042b2:	af00      	add	r7, sp, #0
 80042b4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d101      	bne.n	80042c0 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80042bc:	2301      	movs	r3, #1
 80042be:	e042      	b.n	8004346 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80042c6:	b2db      	uxtb	r3, r3
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d106      	bne.n	80042da <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2200      	movs	r2, #0
 80042d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80042d4:	6878      	ldr	r0, [r7, #4]
 80042d6:	f7fd fc29 	bl	8001b2c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	2224      	movs	r2, #36	@ 0x24
 80042de:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	68da      	ldr	r2, [r3, #12]
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80042f0:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80042f2:	6878      	ldr	r0, [r7, #4]
 80042f4:	f000 fe98 	bl	8005028 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	691a      	ldr	r2, [r3, #16]
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004306:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	695a      	ldr	r2, [r3, #20]
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004316:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	68da      	ldr	r2, [r3, #12]
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004326:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2200      	movs	r2, #0
 800432c:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	2220      	movs	r2, #32
 8004332:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	2220      	movs	r2, #32
 800433a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	2200      	movs	r2, #0
 8004342:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004344:	2300      	movs	r3, #0
}
 8004346:	4618      	mov	r0, r3
 8004348:	3708      	adds	r7, #8
 800434a:	46bd      	mov	sp, r7
 800434c:	bd80      	pop	{r7, pc}

0800434e <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800434e:	b480      	push	{r7}
 8004350:	b085      	sub	sp, #20
 8004352:	af00      	add	r7, sp, #0
 8004354:	60f8      	str	r0, [r7, #12]
 8004356:	60b9      	str	r1, [r7, #8]
 8004358:	4613      	mov	r3, r2
 800435a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004362:	b2db      	uxtb	r3, r3
 8004364:	2b20      	cmp	r3, #32
 8004366:	d121      	bne.n	80043ac <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004368:	68bb      	ldr	r3, [r7, #8]
 800436a:	2b00      	cmp	r3, #0
 800436c:	d002      	beq.n	8004374 <HAL_UART_Transmit_IT+0x26>
 800436e:	88fb      	ldrh	r3, [r7, #6]
 8004370:	2b00      	cmp	r3, #0
 8004372:	d101      	bne.n	8004378 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8004374:	2301      	movs	r3, #1
 8004376:	e01a      	b.n	80043ae <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	68ba      	ldr	r2, [r7, #8]
 800437c:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	88fa      	ldrh	r2, [r7, #6]
 8004382:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	88fa      	ldrh	r2, [r7, #6]
 8004388:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	2200      	movs	r2, #0
 800438e:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	2221      	movs	r2, #33	@ 0x21
 8004394:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	68da      	ldr	r2, [r3, #12]
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80043a6:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80043a8:	2300      	movs	r3, #0
 80043aa:	e000      	b.n	80043ae <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 80043ac:	2302      	movs	r3, #2
  }
}
 80043ae:	4618      	mov	r0, r3
 80043b0:	3714      	adds	r7, #20
 80043b2:	46bd      	mov	sp, r7
 80043b4:	bc80      	pop	{r7}
 80043b6:	4770      	bx	lr

080043b8 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80043b8:	b580      	push	{r7, lr}
 80043ba:	b084      	sub	sp, #16
 80043bc:	af00      	add	r7, sp, #0
 80043be:	60f8      	str	r0, [r7, #12]
 80043c0:	60b9      	str	r1, [r7, #8]
 80043c2:	4613      	mov	r3, r2
 80043c4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80043cc:	b2db      	uxtb	r3, r3
 80043ce:	2b20      	cmp	r3, #32
 80043d0:	d112      	bne.n	80043f8 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80043d2:	68bb      	ldr	r3, [r7, #8]
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d002      	beq.n	80043de <HAL_UART_Receive_DMA+0x26>
 80043d8:	88fb      	ldrh	r3, [r7, #6]
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d101      	bne.n	80043e2 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80043de:	2301      	movs	r3, #1
 80043e0:	e00b      	b.n	80043fa <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	2200      	movs	r2, #0
 80043e6:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80043e8:	88fb      	ldrh	r3, [r7, #6]
 80043ea:	461a      	mov	r2, r3
 80043ec:	68b9      	ldr	r1, [r7, #8]
 80043ee:	68f8      	ldr	r0, [r7, #12]
 80043f0:	f000 fbbe 	bl	8004b70 <UART_Start_Receive_DMA>
 80043f4:	4603      	mov	r3, r0
 80043f6:	e000      	b.n	80043fa <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 80043f8:	2302      	movs	r3, #2
  }
}
 80043fa:	4618      	mov	r0, r3
 80043fc:	3710      	adds	r7, #16
 80043fe:	46bd      	mov	sp, r7
 8004400:	bd80      	pop	{r7, pc}
	...

08004404 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004404:	b580      	push	{r7, lr}
 8004406:	b0ba      	sub	sp, #232	@ 0xe8
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	68db      	ldr	r3, [r3, #12]
 800441c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	695b      	ldr	r3, [r3, #20]
 8004426:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800442a:	2300      	movs	r3, #0
 800442c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8004430:	2300      	movs	r3, #0
 8004432:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004436:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800443a:	f003 030f 	and.w	r3, r3, #15
 800443e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8004442:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004446:	2b00      	cmp	r3, #0
 8004448:	d10f      	bne.n	800446a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800444a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800444e:	f003 0320 	and.w	r3, r3, #32
 8004452:	2b00      	cmp	r3, #0
 8004454:	d009      	beq.n	800446a <HAL_UART_IRQHandler+0x66>
 8004456:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800445a:	f003 0320 	and.w	r3, r3, #32
 800445e:	2b00      	cmp	r3, #0
 8004460:	d003      	beq.n	800446a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004462:	6878      	ldr	r0, [r7, #4]
 8004464:	f000 fd22 	bl	8004eac <UART_Receive_IT>
      return;
 8004468:	e25b      	b.n	8004922 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800446a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800446e:	2b00      	cmp	r3, #0
 8004470:	f000 80de 	beq.w	8004630 <HAL_UART_IRQHandler+0x22c>
 8004474:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004478:	f003 0301 	and.w	r3, r3, #1
 800447c:	2b00      	cmp	r3, #0
 800447e:	d106      	bne.n	800448e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004480:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004484:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8004488:	2b00      	cmp	r3, #0
 800448a:	f000 80d1 	beq.w	8004630 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800448e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004492:	f003 0301 	and.w	r3, r3, #1
 8004496:	2b00      	cmp	r3, #0
 8004498:	d00b      	beq.n	80044b2 <HAL_UART_IRQHandler+0xae>
 800449a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800449e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d005      	beq.n	80044b2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044aa:	f043 0201 	orr.w	r2, r3, #1
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80044b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80044b6:	f003 0304 	and.w	r3, r3, #4
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d00b      	beq.n	80044d6 <HAL_UART_IRQHandler+0xd2>
 80044be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80044c2:	f003 0301 	and.w	r3, r3, #1
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d005      	beq.n	80044d6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044ce:	f043 0202 	orr.w	r2, r3, #2
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80044d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80044da:	f003 0302 	and.w	r3, r3, #2
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d00b      	beq.n	80044fa <HAL_UART_IRQHandler+0xf6>
 80044e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80044e6:	f003 0301 	and.w	r3, r3, #1
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d005      	beq.n	80044fa <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044f2:	f043 0204 	orr.w	r2, r3, #4
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80044fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80044fe:	f003 0308 	and.w	r3, r3, #8
 8004502:	2b00      	cmp	r3, #0
 8004504:	d011      	beq.n	800452a <HAL_UART_IRQHandler+0x126>
 8004506:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800450a:	f003 0320 	and.w	r3, r3, #32
 800450e:	2b00      	cmp	r3, #0
 8004510:	d105      	bne.n	800451e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004512:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004516:	f003 0301 	and.w	r3, r3, #1
 800451a:	2b00      	cmp	r3, #0
 800451c:	d005      	beq.n	800452a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004522:	f043 0208 	orr.w	r2, r3, #8
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800452e:	2b00      	cmp	r3, #0
 8004530:	f000 81f2 	beq.w	8004918 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004534:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004538:	f003 0320 	and.w	r3, r3, #32
 800453c:	2b00      	cmp	r3, #0
 800453e:	d008      	beq.n	8004552 <HAL_UART_IRQHandler+0x14e>
 8004540:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004544:	f003 0320 	and.w	r3, r3, #32
 8004548:	2b00      	cmp	r3, #0
 800454a:	d002      	beq.n	8004552 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800454c:	6878      	ldr	r0, [r7, #4]
 800454e:	f000 fcad 	bl	8004eac <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	695b      	ldr	r3, [r3, #20]
 8004558:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800455c:	2b00      	cmp	r3, #0
 800455e:	bf14      	ite	ne
 8004560:	2301      	movne	r3, #1
 8004562:	2300      	moveq	r3, #0
 8004564:	b2db      	uxtb	r3, r3
 8004566:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800456e:	f003 0308 	and.w	r3, r3, #8
 8004572:	2b00      	cmp	r3, #0
 8004574:	d103      	bne.n	800457e <HAL_UART_IRQHandler+0x17a>
 8004576:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800457a:	2b00      	cmp	r3, #0
 800457c:	d04f      	beq.n	800461e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800457e:	6878      	ldr	r0, [r7, #4]
 8004580:	f000 fbb7 	bl	8004cf2 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	695b      	ldr	r3, [r3, #20]
 800458a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800458e:	2b00      	cmp	r3, #0
 8004590:	d041      	beq.n	8004616 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	3314      	adds	r3, #20
 8004598:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800459c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80045a0:	e853 3f00 	ldrex	r3, [r3]
 80045a4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80045a8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80045ac:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80045b0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	3314      	adds	r3, #20
 80045ba:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80045be:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80045c2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045c6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80045ca:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80045ce:	e841 2300 	strex	r3, r2, [r1]
 80045d2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80045d6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d1d9      	bne.n	8004592 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d013      	beq.n	800460e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80045ea:	4a7e      	ldr	r2, [pc, #504]	@ (80047e4 <HAL_UART_IRQHandler+0x3e0>)
 80045ec:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80045f2:	4618      	mov	r0, r3
 80045f4:	f7fd ffba 	bl	800256c <HAL_DMA_Abort_IT>
 80045f8:	4603      	mov	r3, r0
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d016      	beq.n	800462c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004602:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004604:	687a      	ldr	r2, [r7, #4]
 8004606:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004608:	4610      	mov	r0, r2
 800460a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800460c:	e00e      	b.n	800462c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800460e:	6878      	ldr	r0, [r7, #4]
 8004610:	f000 f99c 	bl	800494c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004614:	e00a      	b.n	800462c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004616:	6878      	ldr	r0, [r7, #4]
 8004618:	f000 f998 	bl	800494c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800461c:	e006      	b.n	800462c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800461e:	6878      	ldr	r0, [r7, #4]
 8004620:	f000 f994 	bl	800494c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2200      	movs	r2, #0
 8004628:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800462a:	e175      	b.n	8004918 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800462c:	bf00      	nop
    return;
 800462e:	e173      	b.n	8004918 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004634:	2b01      	cmp	r3, #1
 8004636:	f040 814f 	bne.w	80048d8 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800463a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800463e:	f003 0310 	and.w	r3, r3, #16
 8004642:	2b00      	cmp	r3, #0
 8004644:	f000 8148 	beq.w	80048d8 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004648:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800464c:	f003 0310 	and.w	r3, r3, #16
 8004650:	2b00      	cmp	r3, #0
 8004652:	f000 8141 	beq.w	80048d8 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004656:	2300      	movs	r3, #0
 8004658:	60bb      	str	r3, [r7, #8]
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	60bb      	str	r3, [r7, #8]
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	685b      	ldr	r3, [r3, #4]
 8004668:	60bb      	str	r3, [r7, #8]
 800466a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	695b      	ldr	r3, [r3, #20]
 8004672:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004676:	2b00      	cmp	r3, #0
 8004678:	f000 80b6 	beq.w	80047e8 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	685b      	ldr	r3, [r3, #4]
 8004684:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004688:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800468c:	2b00      	cmp	r3, #0
 800468e:	f000 8145 	beq.w	800491c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004696:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800469a:	429a      	cmp	r2, r3
 800469c:	f080 813e 	bcs.w	800491c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80046a6:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046ac:	699b      	ldr	r3, [r3, #24]
 80046ae:	2b20      	cmp	r3, #32
 80046b0:	f000 8088 	beq.w	80047c4 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	330c      	adds	r3, #12
 80046ba:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046be:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80046c2:	e853 3f00 	ldrex	r3, [r3]
 80046c6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80046ca:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80046ce:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80046d2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	330c      	adds	r3, #12
 80046dc:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80046e0:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80046e4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046e8:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80046ec:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80046f0:	e841 2300 	strex	r3, r2, [r1]
 80046f4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80046f8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d1d9      	bne.n	80046b4 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	3314      	adds	r3, #20
 8004706:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004708:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800470a:	e853 3f00 	ldrex	r3, [r3]
 800470e:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004710:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004712:	f023 0301 	bic.w	r3, r3, #1
 8004716:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	3314      	adds	r3, #20
 8004720:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004724:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004728:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800472a:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800472c:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004730:	e841 2300 	strex	r3, r2, [r1]
 8004734:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004736:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004738:	2b00      	cmp	r3, #0
 800473a:	d1e1      	bne.n	8004700 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	3314      	adds	r3, #20
 8004742:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004744:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004746:	e853 3f00 	ldrex	r3, [r3]
 800474a:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800474c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800474e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004752:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	3314      	adds	r3, #20
 800475c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004760:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004762:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004764:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004766:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004768:	e841 2300 	strex	r3, r2, [r1]
 800476c:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800476e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004770:	2b00      	cmp	r3, #0
 8004772:	d1e3      	bne.n	800473c <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2220      	movs	r2, #32
 8004778:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2200      	movs	r2, #0
 8004780:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	330c      	adds	r3, #12
 8004788:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800478a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800478c:	e853 3f00 	ldrex	r3, [r3]
 8004790:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004792:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004794:	f023 0310 	bic.w	r3, r3, #16
 8004798:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	330c      	adds	r3, #12
 80047a2:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80047a6:	65ba      	str	r2, [r7, #88]	@ 0x58
 80047a8:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047aa:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80047ac:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80047ae:	e841 2300 	strex	r3, r2, [r1]
 80047b2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80047b4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d1e3      	bne.n	8004782 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80047be:	4618      	mov	r0, r3
 80047c0:	f7fd fe98 	bl	80024f4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2202      	movs	r2, #2
 80047c8:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80047d2:	b29b      	uxth	r3, r3
 80047d4:	1ad3      	subs	r3, r2, r3
 80047d6:	b29b      	uxth	r3, r3
 80047d8:	4619      	mov	r1, r3
 80047da:	6878      	ldr	r0, [r7, #4]
 80047dc:	f000 f8bf 	bl	800495e <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80047e0:	e09c      	b.n	800491c <HAL_UART_IRQHandler+0x518>
 80047e2:	bf00      	nop
 80047e4:	08004db7 	.word	0x08004db7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80047f0:	b29b      	uxth	r3, r3
 80047f2:	1ad3      	subs	r3, r2, r3
 80047f4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80047fc:	b29b      	uxth	r3, r3
 80047fe:	2b00      	cmp	r3, #0
 8004800:	f000 808e 	beq.w	8004920 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004804:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004808:	2b00      	cmp	r3, #0
 800480a:	f000 8089 	beq.w	8004920 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	330c      	adds	r3, #12
 8004814:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004816:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004818:	e853 3f00 	ldrex	r3, [r3]
 800481c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800481e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004820:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004824:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	330c      	adds	r3, #12
 800482e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8004832:	647a      	str	r2, [r7, #68]	@ 0x44
 8004834:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004836:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004838:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800483a:	e841 2300 	strex	r3, r2, [r1]
 800483e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004840:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004842:	2b00      	cmp	r3, #0
 8004844:	d1e3      	bne.n	800480e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	3314      	adds	r3, #20
 800484c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800484e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004850:	e853 3f00 	ldrex	r3, [r3]
 8004854:	623b      	str	r3, [r7, #32]
   return(result);
 8004856:	6a3b      	ldr	r3, [r7, #32]
 8004858:	f023 0301 	bic.w	r3, r3, #1
 800485c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	3314      	adds	r3, #20
 8004866:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800486a:	633a      	str	r2, [r7, #48]	@ 0x30
 800486c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800486e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004870:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004872:	e841 2300 	strex	r3, r2, [r1]
 8004876:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004878:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800487a:	2b00      	cmp	r3, #0
 800487c:	d1e3      	bne.n	8004846 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	2220      	movs	r2, #32
 8004882:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	2200      	movs	r2, #0
 800488a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	330c      	adds	r3, #12
 8004892:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004894:	693b      	ldr	r3, [r7, #16]
 8004896:	e853 3f00 	ldrex	r3, [r3]
 800489a:	60fb      	str	r3, [r7, #12]
   return(result);
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	f023 0310 	bic.w	r3, r3, #16
 80048a2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	330c      	adds	r3, #12
 80048ac:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80048b0:	61fa      	str	r2, [r7, #28]
 80048b2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048b4:	69b9      	ldr	r1, [r7, #24]
 80048b6:	69fa      	ldr	r2, [r7, #28]
 80048b8:	e841 2300 	strex	r3, r2, [r1]
 80048bc:	617b      	str	r3, [r7, #20]
   return(result);
 80048be:	697b      	ldr	r3, [r7, #20]
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d1e3      	bne.n	800488c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2202      	movs	r2, #2
 80048c8:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80048ca:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80048ce:	4619      	mov	r1, r3
 80048d0:	6878      	ldr	r0, [r7, #4]
 80048d2:	f000 f844 	bl	800495e <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80048d6:	e023      	b.n	8004920 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80048d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80048dc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d009      	beq.n	80048f8 <HAL_UART_IRQHandler+0x4f4>
 80048e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80048e8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d003      	beq.n	80048f8 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80048f0:	6878      	ldr	r0, [r7, #4]
 80048f2:	f000 fa74 	bl	8004dde <UART_Transmit_IT>
    return;
 80048f6:	e014      	b.n	8004922 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80048f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80048fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004900:	2b00      	cmp	r3, #0
 8004902:	d00e      	beq.n	8004922 <HAL_UART_IRQHandler+0x51e>
 8004904:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004908:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800490c:	2b00      	cmp	r3, #0
 800490e:	d008      	beq.n	8004922 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004910:	6878      	ldr	r0, [r7, #4]
 8004912:	f000 fab3 	bl	8004e7c <UART_EndTransmit_IT>
    return;
 8004916:	e004      	b.n	8004922 <HAL_UART_IRQHandler+0x51e>
    return;
 8004918:	bf00      	nop
 800491a:	e002      	b.n	8004922 <HAL_UART_IRQHandler+0x51e>
      return;
 800491c:	bf00      	nop
 800491e:	e000      	b.n	8004922 <HAL_UART_IRQHandler+0x51e>
      return;
 8004920:	bf00      	nop
  }
}
 8004922:	37e8      	adds	r7, #232	@ 0xe8
 8004924:	46bd      	mov	sp, r7
 8004926:	bd80      	pop	{r7, pc}

08004928 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004928:	b480      	push	{r7}
 800492a:	b083      	sub	sp, #12
 800492c:	af00      	add	r7, sp, #0
 800492e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004930:	bf00      	nop
 8004932:	370c      	adds	r7, #12
 8004934:	46bd      	mov	sp, r7
 8004936:	bc80      	pop	{r7}
 8004938:	4770      	bx	lr

0800493a <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800493a:	b480      	push	{r7}
 800493c:	b083      	sub	sp, #12
 800493e:	af00      	add	r7, sp, #0
 8004940:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8004942:	bf00      	nop
 8004944:	370c      	adds	r7, #12
 8004946:	46bd      	mov	sp, r7
 8004948:	bc80      	pop	{r7}
 800494a:	4770      	bx	lr

0800494c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800494c:	b480      	push	{r7}
 800494e:	b083      	sub	sp, #12
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004954:	bf00      	nop
 8004956:	370c      	adds	r7, #12
 8004958:	46bd      	mov	sp, r7
 800495a:	bc80      	pop	{r7}
 800495c:	4770      	bx	lr

0800495e <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800495e:	b480      	push	{r7}
 8004960:	b083      	sub	sp, #12
 8004962:	af00      	add	r7, sp, #0
 8004964:	6078      	str	r0, [r7, #4]
 8004966:	460b      	mov	r3, r1
 8004968:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800496a:	bf00      	nop
 800496c:	370c      	adds	r7, #12
 800496e:	46bd      	mov	sp, r7
 8004970:	bc80      	pop	{r7}
 8004972:	4770      	bx	lr

08004974 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004974:	b580      	push	{r7, lr}
 8004976:	b09c      	sub	sp, #112	@ 0x70
 8004978:	af00      	add	r7, sp, #0
 800497a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004980:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f003 0320 	and.w	r3, r3, #32
 800498c:	2b00      	cmp	r3, #0
 800498e:	d172      	bne.n	8004a76 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8004990:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004992:	2200      	movs	r2, #0
 8004994:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004996:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	330c      	adds	r3, #12
 800499c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800499e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80049a0:	e853 3f00 	ldrex	r3, [r3]
 80049a4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80049a6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80049a8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80049ac:	66bb      	str	r3, [r7, #104]	@ 0x68
 80049ae:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	330c      	adds	r3, #12
 80049b4:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80049b6:	65ba      	str	r2, [r7, #88]	@ 0x58
 80049b8:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049ba:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80049bc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80049be:	e841 2300 	strex	r3, r2, [r1]
 80049c2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80049c4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d1e5      	bne.n	8004996 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049ca:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	3314      	adds	r3, #20
 80049d0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049d4:	e853 3f00 	ldrex	r3, [r3]
 80049d8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80049da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80049dc:	f023 0301 	bic.w	r3, r3, #1
 80049e0:	667b      	str	r3, [r7, #100]	@ 0x64
 80049e2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	3314      	adds	r3, #20
 80049e8:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80049ea:	647a      	str	r2, [r7, #68]	@ 0x44
 80049ec:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049ee:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80049f0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80049f2:	e841 2300 	strex	r3, r2, [r1]
 80049f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80049f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d1e5      	bne.n	80049ca <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80049fe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	3314      	adds	r3, #20
 8004a04:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a08:	e853 3f00 	ldrex	r3, [r3]
 8004a0c:	623b      	str	r3, [r7, #32]
   return(result);
 8004a0e:	6a3b      	ldr	r3, [r7, #32]
 8004a10:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004a14:	663b      	str	r3, [r7, #96]	@ 0x60
 8004a16:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	3314      	adds	r3, #20
 8004a1c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8004a1e:	633a      	str	r2, [r7, #48]	@ 0x30
 8004a20:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a22:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004a24:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004a26:	e841 2300 	strex	r3, r2, [r1]
 8004a2a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004a2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d1e5      	bne.n	80049fe <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004a32:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004a34:	2220      	movs	r2, #32
 8004a36:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a3a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004a3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a3e:	2b01      	cmp	r3, #1
 8004a40:	d119      	bne.n	8004a76 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a42:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	330c      	adds	r3, #12
 8004a48:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a4a:	693b      	ldr	r3, [r7, #16]
 8004a4c:	e853 3f00 	ldrex	r3, [r3]
 8004a50:	60fb      	str	r3, [r7, #12]
   return(result);
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	f023 0310 	bic.w	r3, r3, #16
 8004a58:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004a5a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	330c      	adds	r3, #12
 8004a60:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8004a62:	61fa      	str	r2, [r7, #28]
 8004a64:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a66:	69b9      	ldr	r1, [r7, #24]
 8004a68:	69fa      	ldr	r2, [r7, #28]
 8004a6a:	e841 2300 	strex	r3, r2, [r1]
 8004a6e:	617b      	str	r3, [r7, #20]
   return(result);
 8004a70:	697b      	ldr	r3, [r7, #20]
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d1e5      	bne.n	8004a42 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004a76:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004a78:	2200      	movs	r2, #0
 8004a7a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a7c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004a7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a80:	2b01      	cmp	r3, #1
 8004a82:	d106      	bne.n	8004a92 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004a84:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004a86:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004a88:	4619      	mov	r1, r3
 8004a8a:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8004a8c:	f7ff ff67 	bl	800495e <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004a90:	e002      	b.n	8004a98 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8004a92:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8004a94:	f7fc fae0 	bl	8001058 <HAL_UART_RxCpltCallback>
}
 8004a98:	bf00      	nop
 8004a9a:	3770      	adds	r7, #112	@ 0x70
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	bd80      	pop	{r7, pc}

08004aa0 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004aa0:	b580      	push	{r7, lr}
 8004aa2:	b084      	sub	sp, #16
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004aac:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	2201      	movs	r2, #1
 8004ab2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ab8:	2b01      	cmp	r3, #1
 8004aba:	d108      	bne.n	8004ace <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004ac0:	085b      	lsrs	r3, r3, #1
 8004ac2:	b29b      	uxth	r3, r3
 8004ac4:	4619      	mov	r1, r3
 8004ac6:	68f8      	ldr	r0, [r7, #12]
 8004ac8:	f7ff ff49 	bl	800495e <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004acc:	e002      	b.n	8004ad4 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8004ace:	68f8      	ldr	r0, [r7, #12]
 8004ad0:	f7ff ff33 	bl	800493a <HAL_UART_RxHalfCpltCallback>
}
 8004ad4:	bf00      	nop
 8004ad6:	3710      	adds	r7, #16
 8004ad8:	46bd      	mov	sp, r7
 8004ada:	bd80      	pop	{r7, pc}

08004adc <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004adc:	b580      	push	{r7, lr}
 8004ade:	b084      	sub	sp, #16
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8004ae4:	2300      	movs	r3, #0
 8004ae6:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004aec:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8004aee:	68bb      	ldr	r3, [r7, #8]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	695b      	ldr	r3, [r3, #20]
 8004af4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	bf14      	ite	ne
 8004afc:	2301      	movne	r3, #1
 8004afe:	2300      	moveq	r3, #0
 8004b00:	b2db      	uxtb	r3, r3
 8004b02:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8004b04:	68bb      	ldr	r3, [r7, #8]
 8004b06:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004b0a:	b2db      	uxtb	r3, r3
 8004b0c:	2b21      	cmp	r3, #33	@ 0x21
 8004b0e:	d108      	bne.n	8004b22 <UART_DMAError+0x46>
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d005      	beq.n	8004b22 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8004b16:	68bb      	ldr	r3, [r7, #8]
 8004b18:	2200      	movs	r2, #0
 8004b1a:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8004b1c:	68b8      	ldr	r0, [r7, #8]
 8004b1e:	f000 f8c1 	bl	8004ca4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004b22:	68bb      	ldr	r3, [r7, #8]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	695b      	ldr	r3, [r3, #20]
 8004b28:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	bf14      	ite	ne
 8004b30:	2301      	movne	r3, #1
 8004b32:	2300      	moveq	r3, #0
 8004b34:	b2db      	uxtb	r3, r3
 8004b36:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8004b38:	68bb      	ldr	r3, [r7, #8]
 8004b3a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004b3e:	b2db      	uxtb	r3, r3
 8004b40:	2b22      	cmp	r3, #34	@ 0x22
 8004b42:	d108      	bne.n	8004b56 <UART_DMAError+0x7a>
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d005      	beq.n	8004b56 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8004b4a:	68bb      	ldr	r3, [r7, #8]
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8004b50:	68b8      	ldr	r0, [r7, #8]
 8004b52:	f000 f8ce 	bl	8004cf2 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004b56:	68bb      	ldr	r3, [r7, #8]
 8004b58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b5a:	f043 0210 	orr.w	r2, r3, #16
 8004b5e:	68bb      	ldr	r3, [r7, #8]
 8004b60:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004b62:	68b8      	ldr	r0, [r7, #8]
 8004b64:	f7ff fef2 	bl	800494c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004b68:	bf00      	nop
 8004b6a:	3710      	adds	r7, #16
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	bd80      	pop	{r7, pc}

08004b70 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004b70:	b580      	push	{r7, lr}
 8004b72:	b098      	sub	sp, #96	@ 0x60
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	60f8      	str	r0, [r7, #12]
 8004b78:	60b9      	str	r1, [r7, #8]
 8004b7a:	4613      	mov	r3, r2
 8004b7c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8004b7e:	68ba      	ldr	r2, [r7, #8]
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	88fa      	ldrh	r2, [r7, #6]
 8004b88:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	2200      	movs	r2, #0
 8004b8e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	2222      	movs	r2, #34	@ 0x22
 8004b94:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b9c:	4a3e      	ldr	r2, [pc, #248]	@ (8004c98 <UART_Start_Receive_DMA+0x128>)
 8004b9e:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ba4:	4a3d      	ldr	r2, [pc, #244]	@ (8004c9c <UART_Start_Receive_DMA+0x12c>)
 8004ba6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004bac:	4a3c      	ldr	r2, [pc, #240]	@ (8004ca0 <UART_Start_Receive_DMA+0x130>)
 8004bae:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004bb4:	2200      	movs	r2, #0
 8004bb6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8004bb8:	f107 0308 	add.w	r3, r7, #8
 8004bbc:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	3304      	adds	r3, #4
 8004bc8:	4619      	mov	r1, r3
 8004bca:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004bcc:	681a      	ldr	r2, [r3, #0]
 8004bce:	88fb      	ldrh	r3, [r7, #6]
 8004bd0:	f7fd fc30 	bl	8002434 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8004bd4:	2300      	movs	r3, #0
 8004bd6:	613b      	str	r3, [r7, #16]
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	613b      	str	r3, [r7, #16]
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	685b      	ldr	r3, [r3, #4]
 8004be6:	613b      	str	r3, [r7, #16]
 8004be8:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	691b      	ldr	r3, [r3, #16]
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d019      	beq.n	8004c26 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	330c      	adds	r3, #12
 8004bf8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bfa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004bfc:	e853 3f00 	ldrex	r3, [r3]
 8004c00:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004c02:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004c04:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004c08:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	330c      	adds	r3, #12
 8004c10:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004c12:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8004c14:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c16:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8004c18:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004c1a:	e841 2300 	strex	r3, r2, [r1]
 8004c1e:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8004c20:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d1e5      	bne.n	8004bf2 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	3314      	adds	r3, #20
 8004c2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c30:	e853 3f00 	ldrex	r3, [r3]
 8004c34:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004c36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c38:	f043 0301 	orr.w	r3, r3, #1
 8004c3c:	657b      	str	r3, [r7, #84]	@ 0x54
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	3314      	adds	r3, #20
 8004c44:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8004c46:	63ba      	str	r2, [r7, #56]	@ 0x38
 8004c48:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c4a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8004c4c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004c4e:	e841 2300 	strex	r3, r2, [r1]
 8004c52:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004c54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d1e5      	bne.n	8004c26 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	3314      	adds	r3, #20
 8004c60:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c62:	69bb      	ldr	r3, [r7, #24]
 8004c64:	e853 3f00 	ldrex	r3, [r3]
 8004c68:	617b      	str	r3, [r7, #20]
   return(result);
 8004c6a:	697b      	ldr	r3, [r7, #20]
 8004c6c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004c70:	653b      	str	r3, [r7, #80]	@ 0x50
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	3314      	adds	r3, #20
 8004c78:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8004c7a:	627a      	str	r2, [r7, #36]	@ 0x24
 8004c7c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c7e:	6a39      	ldr	r1, [r7, #32]
 8004c80:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004c82:	e841 2300 	strex	r3, r2, [r1]
 8004c86:	61fb      	str	r3, [r7, #28]
   return(result);
 8004c88:	69fb      	ldr	r3, [r7, #28]
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d1e5      	bne.n	8004c5a <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8004c8e:	2300      	movs	r3, #0
}
 8004c90:	4618      	mov	r0, r3
 8004c92:	3760      	adds	r7, #96	@ 0x60
 8004c94:	46bd      	mov	sp, r7
 8004c96:	bd80      	pop	{r7, pc}
 8004c98:	08004975 	.word	0x08004975
 8004c9c:	08004aa1 	.word	0x08004aa1
 8004ca0:	08004add 	.word	0x08004add

08004ca4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004ca4:	b480      	push	{r7}
 8004ca6:	b089      	sub	sp, #36	@ 0x24
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	330c      	adds	r3, #12
 8004cb2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	e853 3f00 	ldrex	r3, [r3]
 8004cba:	60bb      	str	r3, [r7, #8]
   return(result);
 8004cbc:	68bb      	ldr	r3, [r7, #8]
 8004cbe:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8004cc2:	61fb      	str	r3, [r7, #28]
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	330c      	adds	r3, #12
 8004cca:	69fa      	ldr	r2, [r7, #28]
 8004ccc:	61ba      	str	r2, [r7, #24]
 8004cce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cd0:	6979      	ldr	r1, [r7, #20]
 8004cd2:	69ba      	ldr	r2, [r7, #24]
 8004cd4:	e841 2300 	strex	r3, r2, [r1]
 8004cd8:	613b      	str	r3, [r7, #16]
   return(result);
 8004cda:	693b      	ldr	r3, [r7, #16]
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d1e5      	bne.n	8004cac <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2220      	movs	r2, #32
 8004ce4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8004ce8:	bf00      	nop
 8004cea:	3724      	adds	r7, #36	@ 0x24
 8004cec:	46bd      	mov	sp, r7
 8004cee:	bc80      	pop	{r7}
 8004cf0:	4770      	bx	lr

08004cf2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004cf2:	b480      	push	{r7}
 8004cf4:	b095      	sub	sp, #84	@ 0x54
 8004cf6:	af00      	add	r7, sp, #0
 8004cf8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	330c      	adds	r3, #12
 8004d00:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d04:	e853 3f00 	ldrex	r3, [r3]
 8004d08:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004d0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d0c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004d10:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	330c      	adds	r3, #12
 8004d18:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004d1a:	643a      	str	r2, [r7, #64]	@ 0x40
 8004d1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d1e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004d20:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004d22:	e841 2300 	strex	r3, r2, [r1]
 8004d26:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004d28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d1e5      	bne.n	8004cfa <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	3314      	adds	r3, #20
 8004d34:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d36:	6a3b      	ldr	r3, [r7, #32]
 8004d38:	e853 3f00 	ldrex	r3, [r3]
 8004d3c:	61fb      	str	r3, [r7, #28]
   return(result);
 8004d3e:	69fb      	ldr	r3, [r7, #28]
 8004d40:	f023 0301 	bic.w	r3, r3, #1
 8004d44:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	3314      	adds	r3, #20
 8004d4c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004d4e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004d50:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d52:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004d54:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004d56:	e841 2300 	strex	r3, r2, [r1]
 8004d5a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004d5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d1e5      	bne.n	8004d2e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d66:	2b01      	cmp	r3, #1
 8004d68:	d119      	bne.n	8004d9e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	330c      	adds	r3, #12
 8004d70:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	e853 3f00 	ldrex	r3, [r3]
 8004d78:	60bb      	str	r3, [r7, #8]
   return(result);
 8004d7a:	68bb      	ldr	r3, [r7, #8]
 8004d7c:	f023 0310 	bic.w	r3, r3, #16
 8004d80:	647b      	str	r3, [r7, #68]	@ 0x44
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	330c      	adds	r3, #12
 8004d88:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004d8a:	61ba      	str	r2, [r7, #24]
 8004d8c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d8e:	6979      	ldr	r1, [r7, #20]
 8004d90:	69ba      	ldr	r2, [r7, #24]
 8004d92:	e841 2300 	strex	r3, r2, [r1]
 8004d96:	613b      	str	r3, [r7, #16]
   return(result);
 8004d98:	693b      	ldr	r3, [r7, #16]
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d1e5      	bne.n	8004d6a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	2220      	movs	r2, #32
 8004da2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	2200      	movs	r2, #0
 8004daa:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004dac:	bf00      	nop
 8004dae:	3754      	adds	r7, #84	@ 0x54
 8004db0:	46bd      	mov	sp, r7
 8004db2:	bc80      	pop	{r7}
 8004db4:	4770      	bx	lr

08004db6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004db6:	b580      	push	{r7, lr}
 8004db8:	b084      	sub	sp, #16
 8004dba:	af00      	add	r7, sp, #0
 8004dbc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dc2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	2200      	movs	r2, #0
 8004dc8:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	2200      	movs	r2, #0
 8004dce:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004dd0:	68f8      	ldr	r0, [r7, #12]
 8004dd2:	f7ff fdbb 	bl	800494c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004dd6:	bf00      	nop
 8004dd8:	3710      	adds	r7, #16
 8004dda:	46bd      	mov	sp, r7
 8004ddc:	bd80      	pop	{r7, pc}

08004dde <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004dde:	b480      	push	{r7}
 8004de0:	b085      	sub	sp, #20
 8004de2:	af00      	add	r7, sp, #0
 8004de4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004dec:	b2db      	uxtb	r3, r3
 8004dee:	2b21      	cmp	r3, #33	@ 0x21
 8004df0:	d13e      	bne.n	8004e70 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	689b      	ldr	r3, [r3, #8]
 8004df6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004dfa:	d114      	bne.n	8004e26 <UART_Transmit_IT+0x48>
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	691b      	ldr	r3, [r3, #16]
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d110      	bne.n	8004e26 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	6a1b      	ldr	r3, [r3, #32]
 8004e08:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	881b      	ldrh	r3, [r3, #0]
 8004e0e:	461a      	mov	r2, r3
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004e18:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	6a1b      	ldr	r3, [r3, #32]
 8004e1e:	1c9a      	adds	r2, r3, #2
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	621a      	str	r2, [r3, #32]
 8004e24:	e008      	b.n	8004e38 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	6a1b      	ldr	r3, [r3, #32]
 8004e2a:	1c59      	adds	r1, r3, #1
 8004e2c:	687a      	ldr	r2, [r7, #4]
 8004e2e:	6211      	str	r1, [r2, #32]
 8004e30:	781a      	ldrb	r2, [r3, #0]
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004e3c:	b29b      	uxth	r3, r3
 8004e3e:	3b01      	subs	r3, #1
 8004e40:	b29b      	uxth	r3, r3
 8004e42:	687a      	ldr	r2, [r7, #4]
 8004e44:	4619      	mov	r1, r3
 8004e46:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d10f      	bne.n	8004e6c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	68da      	ldr	r2, [r3, #12]
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004e5a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	68da      	ldr	r2, [r3, #12]
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004e6a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004e6c:	2300      	movs	r3, #0
 8004e6e:	e000      	b.n	8004e72 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004e70:	2302      	movs	r3, #2
  }
}
 8004e72:	4618      	mov	r0, r3
 8004e74:	3714      	adds	r7, #20
 8004e76:	46bd      	mov	sp, r7
 8004e78:	bc80      	pop	{r7}
 8004e7a:	4770      	bx	lr

08004e7c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004e7c:	b580      	push	{r7, lr}
 8004e7e:	b082      	sub	sp, #8
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	68da      	ldr	r2, [r3, #12]
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004e92:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	2220      	movs	r2, #32
 8004e98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004e9c:	6878      	ldr	r0, [r7, #4]
 8004e9e:	f7ff fd43 	bl	8004928 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004ea2:	2300      	movs	r3, #0
}
 8004ea4:	4618      	mov	r0, r3
 8004ea6:	3708      	adds	r7, #8
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	bd80      	pop	{r7, pc}

08004eac <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004eac:	b580      	push	{r7, lr}
 8004eae:	b08c      	sub	sp, #48	@ 0x30
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004eba:	b2db      	uxtb	r3, r3
 8004ebc:	2b22      	cmp	r3, #34	@ 0x22
 8004ebe:	f040 80ae 	bne.w	800501e <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	689b      	ldr	r3, [r3, #8]
 8004ec6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004eca:	d117      	bne.n	8004efc <UART_Receive_IT+0x50>
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	691b      	ldr	r3, [r3, #16]
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d113      	bne.n	8004efc <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004ed4:	2300      	movs	r3, #0
 8004ed6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004edc:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	685b      	ldr	r3, [r3, #4]
 8004ee4:	b29b      	uxth	r3, r3
 8004ee6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004eea:	b29a      	uxth	r2, r3
 8004eec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004eee:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ef4:	1c9a      	adds	r2, r3, #2
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	629a      	str	r2, [r3, #40]	@ 0x28
 8004efa:	e026      	b.n	8004f4a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f00:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8004f02:	2300      	movs	r3, #0
 8004f04:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	689b      	ldr	r3, [r3, #8]
 8004f0a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004f0e:	d007      	beq.n	8004f20 <UART_Receive_IT+0x74>
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	689b      	ldr	r3, [r3, #8]
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d10a      	bne.n	8004f2e <UART_Receive_IT+0x82>
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	691b      	ldr	r3, [r3, #16]
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d106      	bne.n	8004f2e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	685b      	ldr	r3, [r3, #4]
 8004f26:	b2da      	uxtb	r2, r3
 8004f28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f2a:	701a      	strb	r2, [r3, #0]
 8004f2c:	e008      	b.n	8004f40 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	685b      	ldr	r3, [r3, #4]
 8004f34:	b2db      	uxtb	r3, r3
 8004f36:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004f3a:	b2da      	uxtb	r2, r3
 8004f3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f3e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f44:	1c5a      	adds	r2, r3, #1
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004f4e:	b29b      	uxth	r3, r3
 8004f50:	3b01      	subs	r3, #1
 8004f52:	b29b      	uxth	r3, r3
 8004f54:	687a      	ldr	r2, [r7, #4]
 8004f56:	4619      	mov	r1, r3
 8004f58:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d15d      	bne.n	800501a <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	68da      	ldr	r2, [r3, #12]
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f022 0220 	bic.w	r2, r2, #32
 8004f6c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	68da      	ldr	r2, [r3, #12]
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004f7c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	695a      	ldr	r2, [r3, #20]
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f022 0201 	bic.w	r2, r2, #1
 8004f8c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	2220      	movs	r2, #32
 8004f92:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	2200      	movs	r2, #0
 8004f9a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004fa0:	2b01      	cmp	r3, #1
 8004fa2:	d135      	bne.n	8005010 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2200      	movs	r2, #0
 8004fa8:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	330c      	adds	r3, #12
 8004fb0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fb2:	697b      	ldr	r3, [r7, #20]
 8004fb4:	e853 3f00 	ldrex	r3, [r3]
 8004fb8:	613b      	str	r3, [r7, #16]
   return(result);
 8004fba:	693b      	ldr	r3, [r7, #16]
 8004fbc:	f023 0310 	bic.w	r3, r3, #16
 8004fc0:	627b      	str	r3, [r7, #36]	@ 0x24
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	330c      	adds	r3, #12
 8004fc8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004fca:	623a      	str	r2, [r7, #32]
 8004fcc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fce:	69f9      	ldr	r1, [r7, #28]
 8004fd0:	6a3a      	ldr	r2, [r7, #32]
 8004fd2:	e841 2300 	strex	r3, r2, [r1]
 8004fd6:	61bb      	str	r3, [r7, #24]
   return(result);
 8004fd8:	69bb      	ldr	r3, [r7, #24]
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d1e5      	bne.n	8004faa <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f003 0310 	and.w	r3, r3, #16
 8004fe8:	2b10      	cmp	r3, #16
 8004fea:	d10a      	bne.n	8005002 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004fec:	2300      	movs	r3, #0
 8004fee:	60fb      	str	r3, [r7, #12]
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	60fb      	str	r3, [r7, #12]
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	685b      	ldr	r3, [r3, #4]
 8004ffe:	60fb      	str	r3, [r7, #12]
 8005000:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005006:	4619      	mov	r1, r3
 8005008:	6878      	ldr	r0, [r7, #4]
 800500a:	f7ff fca8 	bl	800495e <HAL_UARTEx_RxEventCallback>
 800500e:	e002      	b.n	8005016 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005010:	6878      	ldr	r0, [r7, #4]
 8005012:	f7fc f821 	bl	8001058 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005016:	2300      	movs	r3, #0
 8005018:	e002      	b.n	8005020 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800501a:	2300      	movs	r3, #0
 800501c:	e000      	b.n	8005020 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800501e:	2302      	movs	r3, #2
  }
}
 8005020:	4618      	mov	r0, r3
 8005022:	3730      	adds	r7, #48	@ 0x30
 8005024:	46bd      	mov	sp, r7
 8005026:	bd80      	pop	{r7, pc}

08005028 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005028:	b580      	push	{r7, lr}
 800502a:	b084      	sub	sp, #16
 800502c:	af00      	add	r7, sp, #0
 800502e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	691b      	ldr	r3, [r3, #16]
 8005036:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	68da      	ldr	r2, [r3, #12]
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	430a      	orrs	r2, r1
 8005044:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	689a      	ldr	r2, [r3, #8]
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	691b      	ldr	r3, [r3, #16]
 800504e:	431a      	orrs	r2, r3
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	695b      	ldr	r3, [r3, #20]
 8005054:	4313      	orrs	r3, r2
 8005056:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	68db      	ldr	r3, [r3, #12]
 800505e:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8005062:	f023 030c 	bic.w	r3, r3, #12
 8005066:	687a      	ldr	r2, [r7, #4]
 8005068:	6812      	ldr	r2, [r2, #0]
 800506a:	68b9      	ldr	r1, [r7, #8]
 800506c:	430b      	orrs	r3, r1
 800506e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	695b      	ldr	r3, [r3, #20]
 8005076:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	699a      	ldr	r2, [r3, #24]
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	430a      	orrs	r2, r1
 8005084:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	4a2c      	ldr	r2, [pc, #176]	@ (800513c <UART_SetConfig+0x114>)
 800508c:	4293      	cmp	r3, r2
 800508e:	d103      	bne.n	8005098 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005090:	f7fe f9aa 	bl	80033e8 <HAL_RCC_GetPCLK2Freq>
 8005094:	60f8      	str	r0, [r7, #12]
 8005096:	e002      	b.n	800509e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005098:	f7fe f992 	bl	80033c0 <HAL_RCC_GetPCLK1Freq>
 800509c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800509e:	68fa      	ldr	r2, [r7, #12]
 80050a0:	4613      	mov	r3, r2
 80050a2:	009b      	lsls	r3, r3, #2
 80050a4:	4413      	add	r3, r2
 80050a6:	009a      	lsls	r2, r3, #2
 80050a8:	441a      	add	r2, r3
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	685b      	ldr	r3, [r3, #4]
 80050ae:	009b      	lsls	r3, r3, #2
 80050b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80050b4:	4a22      	ldr	r2, [pc, #136]	@ (8005140 <UART_SetConfig+0x118>)
 80050b6:	fba2 2303 	umull	r2, r3, r2, r3
 80050ba:	095b      	lsrs	r3, r3, #5
 80050bc:	0119      	lsls	r1, r3, #4
 80050be:	68fa      	ldr	r2, [r7, #12]
 80050c0:	4613      	mov	r3, r2
 80050c2:	009b      	lsls	r3, r3, #2
 80050c4:	4413      	add	r3, r2
 80050c6:	009a      	lsls	r2, r3, #2
 80050c8:	441a      	add	r2, r3
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	685b      	ldr	r3, [r3, #4]
 80050ce:	009b      	lsls	r3, r3, #2
 80050d0:	fbb2 f2f3 	udiv	r2, r2, r3
 80050d4:	4b1a      	ldr	r3, [pc, #104]	@ (8005140 <UART_SetConfig+0x118>)
 80050d6:	fba3 0302 	umull	r0, r3, r3, r2
 80050da:	095b      	lsrs	r3, r3, #5
 80050dc:	2064      	movs	r0, #100	@ 0x64
 80050de:	fb00 f303 	mul.w	r3, r0, r3
 80050e2:	1ad3      	subs	r3, r2, r3
 80050e4:	011b      	lsls	r3, r3, #4
 80050e6:	3332      	adds	r3, #50	@ 0x32
 80050e8:	4a15      	ldr	r2, [pc, #84]	@ (8005140 <UART_SetConfig+0x118>)
 80050ea:	fba2 2303 	umull	r2, r3, r2, r3
 80050ee:	095b      	lsrs	r3, r3, #5
 80050f0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80050f4:	4419      	add	r1, r3
 80050f6:	68fa      	ldr	r2, [r7, #12]
 80050f8:	4613      	mov	r3, r2
 80050fa:	009b      	lsls	r3, r3, #2
 80050fc:	4413      	add	r3, r2
 80050fe:	009a      	lsls	r2, r3, #2
 8005100:	441a      	add	r2, r3
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	685b      	ldr	r3, [r3, #4]
 8005106:	009b      	lsls	r3, r3, #2
 8005108:	fbb2 f2f3 	udiv	r2, r2, r3
 800510c:	4b0c      	ldr	r3, [pc, #48]	@ (8005140 <UART_SetConfig+0x118>)
 800510e:	fba3 0302 	umull	r0, r3, r3, r2
 8005112:	095b      	lsrs	r3, r3, #5
 8005114:	2064      	movs	r0, #100	@ 0x64
 8005116:	fb00 f303 	mul.w	r3, r0, r3
 800511a:	1ad3      	subs	r3, r2, r3
 800511c:	011b      	lsls	r3, r3, #4
 800511e:	3332      	adds	r3, #50	@ 0x32
 8005120:	4a07      	ldr	r2, [pc, #28]	@ (8005140 <UART_SetConfig+0x118>)
 8005122:	fba2 2303 	umull	r2, r3, r2, r3
 8005126:	095b      	lsrs	r3, r3, #5
 8005128:	f003 020f 	and.w	r2, r3, #15
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	440a      	add	r2, r1
 8005132:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005134:	bf00      	nop
 8005136:	3710      	adds	r7, #16
 8005138:	46bd      	mov	sp, r7
 800513a:	bd80      	pop	{r7, pc}
 800513c:	40013800 	.word	0x40013800
 8005140:	51eb851f 	.word	0x51eb851f

08005144 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8005144:	b480      	push	{r7}
 8005146:	b085      	sub	sp, #20
 8005148:	af00      	add	r7, sp, #0
 800514a:	4603      	mov	r3, r0
 800514c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800514e:	2300      	movs	r3, #0
 8005150:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8005152:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005156:	2b84      	cmp	r3, #132	@ 0x84
 8005158:	d005      	beq.n	8005166 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800515a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	4413      	add	r3, r2
 8005162:	3303      	adds	r3, #3
 8005164:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8005166:	68fb      	ldr	r3, [r7, #12]
}
 8005168:	4618      	mov	r0, r3
 800516a:	3714      	adds	r7, #20
 800516c:	46bd      	mov	sp, r7
 800516e:	bc80      	pop	{r7}
 8005170:	4770      	bx	lr

08005172 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8005172:	b480      	push	{r7}
 8005174:	b083      	sub	sp, #12
 8005176:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005178:	f3ef 8305 	mrs	r3, IPSR
 800517c:	607b      	str	r3, [r7, #4]
  return(result);
 800517e:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8005180:	2b00      	cmp	r3, #0
 8005182:	bf14      	ite	ne
 8005184:	2301      	movne	r3, #1
 8005186:	2300      	moveq	r3, #0
 8005188:	b2db      	uxtb	r3, r3
}
 800518a:	4618      	mov	r0, r3
 800518c:	370c      	adds	r7, #12
 800518e:	46bd      	mov	sp, r7
 8005190:	bc80      	pop	{r7}
 8005192:	4770      	bx	lr

08005194 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8005194:	b580      	push	{r7, lr}
 8005196:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8005198:	f001 f924 	bl	80063e4 <vTaskStartScheduler>
  
  return osOK;
 800519c:	2300      	movs	r3, #0
}
 800519e:	4618      	mov	r0, r3
 80051a0:	bd80      	pop	{r7, pc}

080051a2 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80051a2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80051a4:	b089      	sub	sp, #36	@ 0x24
 80051a6:	af04      	add	r7, sp, #16
 80051a8:	6078      	str	r0, [r7, #4]
 80051aa:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	695b      	ldr	r3, [r3, #20]
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d020      	beq.n	80051f6 <osThreadCreate+0x54>
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	699b      	ldr	r3, [r3, #24]
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d01c      	beq.n	80051f6 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	685c      	ldr	r4, [r3, #4]
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	691e      	ldr	r6, [r3, #16]
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80051ce:	4618      	mov	r0, r3
 80051d0:	f7ff ffb8 	bl	8005144 <makeFreeRtosPriority>
 80051d4:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	695b      	ldr	r3, [r3, #20]
 80051da:	687a      	ldr	r2, [r7, #4]
 80051dc:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80051de:	9202      	str	r2, [sp, #8]
 80051e0:	9301      	str	r3, [sp, #4]
 80051e2:	9100      	str	r1, [sp, #0]
 80051e4:	683b      	ldr	r3, [r7, #0]
 80051e6:	4632      	mov	r2, r6
 80051e8:	4629      	mov	r1, r5
 80051ea:	4620      	mov	r0, r4
 80051ec:	f000 ff2d 	bl	800604a <xTaskCreateStatic>
 80051f0:	4603      	mov	r3, r0
 80051f2:	60fb      	str	r3, [r7, #12]
 80051f4:	e01c      	b.n	8005230 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	685c      	ldr	r4, [r3, #4]
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005202:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800520a:	4618      	mov	r0, r3
 800520c:	f7ff ff9a 	bl	8005144 <makeFreeRtosPriority>
 8005210:	4602      	mov	r2, r0
 8005212:	f107 030c 	add.w	r3, r7, #12
 8005216:	9301      	str	r3, [sp, #4]
 8005218:	9200      	str	r2, [sp, #0]
 800521a:	683b      	ldr	r3, [r7, #0]
 800521c:	4632      	mov	r2, r6
 800521e:	4629      	mov	r1, r5
 8005220:	4620      	mov	r0, r4
 8005222:	f000 ff72 	bl	800610a <xTaskCreate>
 8005226:	4603      	mov	r3, r0
 8005228:	2b01      	cmp	r3, #1
 800522a:	d001      	beq.n	8005230 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800522c:	2300      	movs	r3, #0
 800522e:	e000      	b.n	8005232 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8005230:	68fb      	ldr	r3, [r7, #12]
}
 8005232:	4618      	mov	r0, r3
 8005234:	3714      	adds	r7, #20
 8005236:	46bd      	mov	sp, r7
 8005238:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800523a <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800523a:	b580      	push	{r7, lr}
 800523c:	b084      	sub	sp, #16
 800523e:	af00      	add	r7, sp, #0
 8005240:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	2b00      	cmp	r3, #0
 800524a:	d001      	beq.n	8005250 <osDelay+0x16>
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	e000      	b.n	8005252 <osDelay+0x18>
 8005250:	2301      	movs	r3, #1
 8005252:	4618      	mov	r0, r3
 8005254:	f001 f890 	bl	8006378 <vTaskDelay>
  
  return osOK;
 8005258:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800525a:	4618      	mov	r0, r3
 800525c:	3710      	adds	r7, #16
 800525e:	46bd      	mov	sp, r7
 8005260:	bd80      	pop	{r7, pc}

08005262 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8005262:	b580      	push	{r7, lr}
 8005264:	b086      	sub	sp, #24
 8005266:	af02      	add	r7, sp, #8
 8005268:	6078      	str	r0, [r7, #4]
 800526a:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	685b      	ldr	r3, [r3, #4]
 8005270:	2b00      	cmp	r3, #0
 8005272:	d00f      	beq.n	8005294 <osSemaphoreCreate+0x32>
    if (count == 1) {
 8005274:	683b      	ldr	r3, [r7, #0]
 8005276:	2b01      	cmp	r3, #1
 8005278:	d10a      	bne.n	8005290 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	685b      	ldr	r3, [r3, #4]
 800527e:	2203      	movs	r2, #3
 8005280:	9200      	str	r2, [sp, #0]
 8005282:	2200      	movs	r2, #0
 8005284:	2100      	movs	r1, #0
 8005286:	2001      	movs	r0, #1
 8005288:	f000 f9bc 	bl	8005604 <xQueueGenericCreateStatic>
 800528c:	4603      	mov	r3, r0
 800528e:	e016      	b.n	80052be <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8005290:	2300      	movs	r3, #0
 8005292:	e014      	b.n	80052be <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 8005294:	683b      	ldr	r3, [r7, #0]
 8005296:	2b01      	cmp	r3, #1
 8005298:	d110      	bne.n	80052bc <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 800529a:	2203      	movs	r2, #3
 800529c:	2100      	movs	r1, #0
 800529e:	2001      	movs	r0, #1
 80052a0:	f000 fa2d 	bl	80056fe <xQueueGenericCreate>
 80052a4:	60f8      	str	r0, [r7, #12]
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d005      	beq.n	80052b8 <osSemaphoreCreate+0x56>
 80052ac:	2300      	movs	r3, #0
 80052ae:	2200      	movs	r2, #0
 80052b0:	2100      	movs	r1, #0
 80052b2:	68f8      	ldr	r0, [r7, #12]
 80052b4:	f000 fa7e 	bl	80057b4 <xQueueGenericSend>
      return sema;
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	e000      	b.n	80052be <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 80052bc:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 80052be:	4618      	mov	r0, r3
 80052c0:	3710      	adds	r7, #16
 80052c2:	46bd      	mov	sp, r7
 80052c4:	bd80      	pop	{r7, pc}
	...

080052c8 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 80052c8:	b580      	push	{r7, lr}
 80052ca:	b084      	sub	sp, #16
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	6078      	str	r0, [r7, #4]
 80052d0:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 80052d2:	2300      	movs	r3, #0
 80052d4:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d101      	bne.n	80052e0 <osSemaphoreWait+0x18>
    return osErrorParameter;
 80052dc:	2380      	movs	r3, #128	@ 0x80
 80052de:	e03a      	b.n	8005356 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 80052e0:	2300      	movs	r3, #0
 80052e2:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 80052e4:	683b      	ldr	r3, [r7, #0]
 80052e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052ea:	d103      	bne.n	80052f4 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 80052ec:	f04f 33ff 	mov.w	r3, #4294967295
 80052f0:	60fb      	str	r3, [r7, #12]
 80052f2:	e009      	b.n	8005308 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 80052f4:	683b      	ldr	r3, [r7, #0]
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d006      	beq.n	8005308 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 80052fa:	683b      	ldr	r3, [r7, #0]
 80052fc:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	2b00      	cmp	r3, #0
 8005302:	d101      	bne.n	8005308 <osSemaphoreWait+0x40>
      ticks = 1;
 8005304:	2301      	movs	r3, #1
 8005306:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8005308:	f7ff ff33 	bl	8005172 <inHandlerMode>
 800530c:	4603      	mov	r3, r0
 800530e:	2b00      	cmp	r3, #0
 8005310:	d017      	beq.n	8005342 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8005312:	f107 0308 	add.w	r3, r7, #8
 8005316:	461a      	mov	r2, r3
 8005318:	2100      	movs	r1, #0
 800531a:	6878      	ldr	r0, [r7, #4]
 800531c:	f000 fcec 	bl	8005cf8 <xQueueReceiveFromISR>
 8005320:	4603      	mov	r3, r0
 8005322:	2b01      	cmp	r3, #1
 8005324:	d001      	beq.n	800532a <osSemaphoreWait+0x62>
      return osErrorOS;
 8005326:	23ff      	movs	r3, #255	@ 0xff
 8005328:	e015      	b.n	8005356 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800532a:	68bb      	ldr	r3, [r7, #8]
 800532c:	2b00      	cmp	r3, #0
 800532e:	d011      	beq.n	8005354 <osSemaphoreWait+0x8c>
 8005330:	4b0b      	ldr	r3, [pc, #44]	@ (8005360 <osSemaphoreWait+0x98>)
 8005332:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005336:	601a      	str	r2, [r3, #0]
 8005338:	f3bf 8f4f 	dsb	sy
 800533c:	f3bf 8f6f 	isb	sy
 8005340:	e008      	b.n	8005354 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8005342:	68f9      	ldr	r1, [r7, #12]
 8005344:	6878      	ldr	r0, [r7, #4]
 8005346:	f000 fbc7 	bl	8005ad8 <xQueueSemaphoreTake>
 800534a:	4603      	mov	r3, r0
 800534c:	2b01      	cmp	r3, #1
 800534e:	d001      	beq.n	8005354 <osSemaphoreWait+0x8c>
    return osErrorOS;
 8005350:	23ff      	movs	r3, #255	@ 0xff
 8005352:	e000      	b.n	8005356 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8005354:	2300      	movs	r3, #0
}
 8005356:	4618      	mov	r0, r3
 8005358:	3710      	adds	r7, #16
 800535a:	46bd      	mov	sp, r7
 800535c:	bd80      	pop	{r7, pc}
 800535e:	bf00      	nop
 8005360:	e000ed04 	.word	0xe000ed04

08005364 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8005364:	b580      	push	{r7, lr}
 8005366:	b084      	sub	sp, #16
 8005368:	af00      	add	r7, sp, #0
 800536a:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800536c:	2300      	movs	r3, #0
 800536e:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8005370:	2300      	movs	r3, #0
 8005372:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8005374:	f7ff fefd 	bl	8005172 <inHandlerMode>
 8005378:	4603      	mov	r3, r0
 800537a:	2b00      	cmp	r3, #0
 800537c:	d016      	beq.n	80053ac <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800537e:	f107 0308 	add.w	r3, r7, #8
 8005382:	4619      	mov	r1, r3
 8005384:	6878      	ldr	r0, [r7, #4]
 8005386:	f000 fb17 	bl	80059b8 <xQueueGiveFromISR>
 800538a:	4603      	mov	r3, r0
 800538c:	2b01      	cmp	r3, #1
 800538e:	d001      	beq.n	8005394 <osSemaphoreRelease+0x30>
      return osErrorOS;
 8005390:	23ff      	movs	r3, #255	@ 0xff
 8005392:	e017      	b.n	80053c4 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8005394:	68bb      	ldr	r3, [r7, #8]
 8005396:	2b00      	cmp	r3, #0
 8005398:	d013      	beq.n	80053c2 <osSemaphoreRelease+0x5e>
 800539a:	4b0c      	ldr	r3, [pc, #48]	@ (80053cc <osSemaphoreRelease+0x68>)
 800539c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80053a0:	601a      	str	r2, [r3, #0]
 80053a2:	f3bf 8f4f 	dsb	sy
 80053a6:	f3bf 8f6f 	isb	sy
 80053aa:	e00a      	b.n	80053c2 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 80053ac:	2300      	movs	r3, #0
 80053ae:	2200      	movs	r2, #0
 80053b0:	2100      	movs	r1, #0
 80053b2:	6878      	ldr	r0, [r7, #4]
 80053b4:	f000 f9fe 	bl	80057b4 <xQueueGenericSend>
 80053b8:	4603      	mov	r3, r0
 80053ba:	2b01      	cmp	r3, #1
 80053bc:	d001      	beq.n	80053c2 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 80053be:	23ff      	movs	r3, #255	@ 0xff
 80053c0:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 80053c2:	68fb      	ldr	r3, [r7, #12]
}
 80053c4:	4618      	mov	r0, r3
 80053c6:	3710      	adds	r7, #16
 80053c8:	46bd      	mov	sp, r7
 80053ca:	bd80      	pop	{r7, pc}
 80053cc:	e000ed04 	.word	0xe000ed04

080053d0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80053d0:	b480      	push	{r7}
 80053d2:	b083      	sub	sp, #12
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	f103 0208 	add.w	r2, r3, #8
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	f04f 32ff 	mov.w	r2, #4294967295
 80053e8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	f103 0208 	add.w	r2, r3, #8
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	f103 0208 	add.w	r2, r3, #8
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	2200      	movs	r2, #0
 8005402:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005404:	bf00      	nop
 8005406:	370c      	adds	r7, #12
 8005408:	46bd      	mov	sp, r7
 800540a:	bc80      	pop	{r7}
 800540c:	4770      	bx	lr

0800540e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800540e:	b480      	push	{r7}
 8005410:	b083      	sub	sp, #12
 8005412:	af00      	add	r7, sp, #0
 8005414:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	2200      	movs	r2, #0
 800541a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800541c:	bf00      	nop
 800541e:	370c      	adds	r7, #12
 8005420:	46bd      	mov	sp, r7
 8005422:	bc80      	pop	{r7}
 8005424:	4770      	bx	lr

08005426 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005426:	b480      	push	{r7}
 8005428:	b085      	sub	sp, #20
 800542a:	af00      	add	r7, sp, #0
 800542c:	6078      	str	r0, [r7, #4]
 800542e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	685b      	ldr	r3, [r3, #4]
 8005434:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005436:	683b      	ldr	r3, [r7, #0]
 8005438:	68fa      	ldr	r2, [r7, #12]
 800543a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	689a      	ldr	r2, [r3, #8]
 8005440:	683b      	ldr	r3, [r7, #0]
 8005442:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	689b      	ldr	r3, [r3, #8]
 8005448:	683a      	ldr	r2, [r7, #0]
 800544a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	683a      	ldr	r2, [r7, #0]
 8005450:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005452:	683b      	ldr	r3, [r7, #0]
 8005454:	687a      	ldr	r2, [r7, #4]
 8005456:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	1c5a      	adds	r2, r3, #1
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	601a      	str	r2, [r3, #0]
}
 8005462:	bf00      	nop
 8005464:	3714      	adds	r7, #20
 8005466:	46bd      	mov	sp, r7
 8005468:	bc80      	pop	{r7}
 800546a:	4770      	bx	lr

0800546c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800546c:	b480      	push	{r7}
 800546e:	b085      	sub	sp, #20
 8005470:	af00      	add	r7, sp, #0
 8005472:	6078      	str	r0, [r7, #4]
 8005474:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005476:	683b      	ldr	r3, [r7, #0]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800547c:	68bb      	ldr	r3, [r7, #8]
 800547e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005482:	d103      	bne.n	800548c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	691b      	ldr	r3, [r3, #16]
 8005488:	60fb      	str	r3, [r7, #12]
 800548a:	e00c      	b.n	80054a6 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	3308      	adds	r3, #8
 8005490:	60fb      	str	r3, [r7, #12]
 8005492:	e002      	b.n	800549a <vListInsert+0x2e>
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	685b      	ldr	r3, [r3, #4]
 8005498:	60fb      	str	r3, [r7, #12]
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	685b      	ldr	r3, [r3, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	68ba      	ldr	r2, [r7, #8]
 80054a2:	429a      	cmp	r2, r3
 80054a4:	d2f6      	bcs.n	8005494 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	685a      	ldr	r2, [r3, #4]
 80054aa:	683b      	ldr	r3, [r7, #0]
 80054ac:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80054ae:	683b      	ldr	r3, [r7, #0]
 80054b0:	685b      	ldr	r3, [r3, #4]
 80054b2:	683a      	ldr	r2, [r7, #0]
 80054b4:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80054b6:	683b      	ldr	r3, [r7, #0]
 80054b8:	68fa      	ldr	r2, [r7, #12]
 80054ba:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	683a      	ldr	r2, [r7, #0]
 80054c0:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80054c2:	683b      	ldr	r3, [r7, #0]
 80054c4:	687a      	ldr	r2, [r7, #4]
 80054c6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	1c5a      	adds	r2, r3, #1
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	601a      	str	r2, [r3, #0]
}
 80054d2:	bf00      	nop
 80054d4:	3714      	adds	r7, #20
 80054d6:	46bd      	mov	sp, r7
 80054d8:	bc80      	pop	{r7}
 80054da:	4770      	bx	lr

080054dc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80054dc:	b480      	push	{r7}
 80054de:	b085      	sub	sp, #20
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	691b      	ldr	r3, [r3, #16]
 80054e8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	685b      	ldr	r3, [r3, #4]
 80054ee:	687a      	ldr	r2, [r7, #4]
 80054f0:	6892      	ldr	r2, [r2, #8]
 80054f2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	689b      	ldr	r3, [r3, #8]
 80054f8:	687a      	ldr	r2, [r7, #4]
 80054fa:	6852      	ldr	r2, [r2, #4]
 80054fc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	685b      	ldr	r3, [r3, #4]
 8005502:	687a      	ldr	r2, [r7, #4]
 8005504:	429a      	cmp	r2, r3
 8005506:	d103      	bne.n	8005510 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	689a      	ldr	r2, [r3, #8]
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2200      	movs	r2, #0
 8005514:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	1e5a      	subs	r2, r3, #1
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	681b      	ldr	r3, [r3, #0]
}
 8005524:	4618      	mov	r0, r3
 8005526:	3714      	adds	r7, #20
 8005528:	46bd      	mov	sp, r7
 800552a:	bc80      	pop	{r7}
 800552c:	4770      	bx	lr
	...

08005530 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005530:	b580      	push	{r7, lr}
 8005532:	b084      	sub	sp, #16
 8005534:	af00      	add	r7, sp, #0
 8005536:	6078      	str	r0, [r7, #4]
 8005538:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	2b00      	cmp	r3, #0
 8005542:	d10b      	bne.n	800555c <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005544:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005548:	f383 8811 	msr	BASEPRI, r3
 800554c:	f3bf 8f6f 	isb	sy
 8005550:	f3bf 8f4f 	dsb	sy
 8005554:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005556:	bf00      	nop
 8005558:	bf00      	nop
 800555a:	e7fd      	b.n	8005558 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800555c:	f001 fe66 	bl	800722c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	681a      	ldr	r2, [r3, #0]
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005568:	68f9      	ldr	r1, [r7, #12]
 800556a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800556c:	fb01 f303 	mul.w	r3, r1, r3
 8005570:	441a      	add	r2, r3
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	2200      	movs	r2, #0
 800557a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	681a      	ldr	r2, [r3, #0]
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	681a      	ldr	r2, [r3, #0]
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800558c:	3b01      	subs	r3, #1
 800558e:	68f9      	ldr	r1, [r7, #12]
 8005590:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005592:	fb01 f303 	mul.w	r3, r1, r3
 8005596:	441a      	add	r2, r3
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	22ff      	movs	r2, #255	@ 0xff
 80055a0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	22ff      	movs	r2, #255	@ 0xff
 80055a8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80055ac:	683b      	ldr	r3, [r7, #0]
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d114      	bne.n	80055dc <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	691b      	ldr	r3, [r3, #16]
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d01a      	beq.n	80055f0 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	3310      	adds	r3, #16
 80055be:	4618      	mov	r0, r3
 80055c0:	f001 f95a 	bl	8006878 <xTaskRemoveFromEventList>
 80055c4:	4603      	mov	r3, r0
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d012      	beq.n	80055f0 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80055ca:	4b0d      	ldr	r3, [pc, #52]	@ (8005600 <xQueueGenericReset+0xd0>)
 80055cc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80055d0:	601a      	str	r2, [r3, #0]
 80055d2:	f3bf 8f4f 	dsb	sy
 80055d6:	f3bf 8f6f 	isb	sy
 80055da:	e009      	b.n	80055f0 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	3310      	adds	r3, #16
 80055e0:	4618      	mov	r0, r3
 80055e2:	f7ff fef5 	bl	80053d0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	3324      	adds	r3, #36	@ 0x24
 80055ea:	4618      	mov	r0, r3
 80055ec:	f7ff fef0 	bl	80053d0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80055f0:	f001 fe4c 	bl	800728c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80055f4:	2301      	movs	r3, #1
}
 80055f6:	4618      	mov	r0, r3
 80055f8:	3710      	adds	r7, #16
 80055fa:	46bd      	mov	sp, r7
 80055fc:	bd80      	pop	{r7, pc}
 80055fe:	bf00      	nop
 8005600:	e000ed04 	.word	0xe000ed04

08005604 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005604:	b580      	push	{r7, lr}
 8005606:	b08e      	sub	sp, #56	@ 0x38
 8005608:	af02      	add	r7, sp, #8
 800560a:	60f8      	str	r0, [r7, #12]
 800560c:	60b9      	str	r1, [r7, #8]
 800560e:	607a      	str	r2, [r7, #4]
 8005610:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	2b00      	cmp	r3, #0
 8005616:	d10b      	bne.n	8005630 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8005618:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800561c:	f383 8811 	msr	BASEPRI, r3
 8005620:	f3bf 8f6f 	isb	sy
 8005624:	f3bf 8f4f 	dsb	sy
 8005628:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800562a:	bf00      	nop
 800562c:	bf00      	nop
 800562e:	e7fd      	b.n	800562c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005630:	683b      	ldr	r3, [r7, #0]
 8005632:	2b00      	cmp	r3, #0
 8005634:	d10b      	bne.n	800564e <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8005636:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800563a:	f383 8811 	msr	BASEPRI, r3
 800563e:	f3bf 8f6f 	isb	sy
 8005642:	f3bf 8f4f 	dsb	sy
 8005646:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005648:	bf00      	nop
 800564a:	bf00      	nop
 800564c:	e7fd      	b.n	800564a <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	2b00      	cmp	r3, #0
 8005652:	d002      	beq.n	800565a <xQueueGenericCreateStatic+0x56>
 8005654:	68bb      	ldr	r3, [r7, #8]
 8005656:	2b00      	cmp	r3, #0
 8005658:	d001      	beq.n	800565e <xQueueGenericCreateStatic+0x5a>
 800565a:	2301      	movs	r3, #1
 800565c:	e000      	b.n	8005660 <xQueueGenericCreateStatic+0x5c>
 800565e:	2300      	movs	r3, #0
 8005660:	2b00      	cmp	r3, #0
 8005662:	d10b      	bne.n	800567c <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8005664:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005668:	f383 8811 	msr	BASEPRI, r3
 800566c:	f3bf 8f6f 	isb	sy
 8005670:	f3bf 8f4f 	dsb	sy
 8005674:	623b      	str	r3, [r7, #32]
}
 8005676:	bf00      	nop
 8005678:	bf00      	nop
 800567a:	e7fd      	b.n	8005678 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	2b00      	cmp	r3, #0
 8005680:	d102      	bne.n	8005688 <xQueueGenericCreateStatic+0x84>
 8005682:	68bb      	ldr	r3, [r7, #8]
 8005684:	2b00      	cmp	r3, #0
 8005686:	d101      	bne.n	800568c <xQueueGenericCreateStatic+0x88>
 8005688:	2301      	movs	r3, #1
 800568a:	e000      	b.n	800568e <xQueueGenericCreateStatic+0x8a>
 800568c:	2300      	movs	r3, #0
 800568e:	2b00      	cmp	r3, #0
 8005690:	d10b      	bne.n	80056aa <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8005692:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005696:	f383 8811 	msr	BASEPRI, r3
 800569a:	f3bf 8f6f 	isb	sy
 800569e:	f3bf 8f4f 	dsb	sy
 80056a2:	61fb      	str	r3, [r7, #28]
}
 80056a4:	bf00      	nop
 80056a6:	bf00      	nop
 80056a8:	e7fd      	b.n	80056a6 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80056aa:	2348      	movs	r3, #72	@ 0x48
 80056ac:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80056ae:	697b      	ldr	r3, [r7, #20]
 80056b0:	2b48      	cmp	r3, #72	@ 0x48
 80056b2:	d00b      	beq.n	80056cc <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 80056b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056b8:	f383 8811 	msr	BASEPRI, r3
 80056bc:	f3bf 8f6f 	isb	sy
 80056c0:	f3bf 8f4f 	dsb	sy
 80056c4:	61bb      	str	r3, [r7, #24]
}
 80056c6:	bf00      	nop
 80056c8:	bf00      	nop
 80056ca:	e7fd      	b.n	80056c8 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80056cc:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80056ce:	683b      	ldr	r3, [r7, #0]
 80056d0:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80056d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d00d      	beq.n	80056f4 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80056d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80056da:	2201      	movs	r2, #1
 80056dc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80056e0:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80056e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80056e6:	9300      	str	r3, [sp, #0]
 80056e8:	4613      	mov	r3, r2
 80056ea:	687a      	ldr	r2, [r7, #4]
 80056ec:	68b9      	ldr	r1, [r7, #8]
 80056ee:	68f8      	ldr	r0, [r7, #12]
 80056f0:	f000 f840 	bl	8005774 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80056f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80056f6:	4618      	mov	r0, r3
 80056f8:	3730      	adds	r7, #48	@ 0x30
 80056fa:	46bd      	mov	sp, r7
 80056fc:	bd80      	pop	{r7, pc}

080056fe <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80056fe:	b580      	push	{r7, lr}
 8005700:	b08a      	sub	sp, #40	@ 0x28
 8005702:	af02      	add	r7, sp, #8
 8005704:	60f8      	str	r0, [r7, #12]
 8005706:	60b9      	str	r1, [r7, #8]
 8005708:	4613      	mov	r3, r2
 800570a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	2b00      	cmp	r3, #0
 8005710:	d10b      	bne.n	800572a <xQueueGenericCreate+0x2c>
	__asm volatile
 8005712:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005716:	f383 8811 	msr	BASEPRI, r3
 800571a:	f3bf 8f6f 	isb	sy
 800571e:	f3bf 8f4f 	dsb	sy
 8005722:	613b      	str	r3, [r7, #16]
}
 8005724:	bf00      	nop
 8005726:	bf00      	nop
 8005728:	e7fd      	b.n	8005726 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	68ba      	ldr	r2, [r7, #8]
 800572e:	fb02 f303 	mul.w	r3, r2, r3
 8005732:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8005734:	69fb      	ldr	r3, [r7, #28]
 8005736:	3348      	adds	r3, #72	@ 0x48
 8005738:	4618      	mov	r0, r3
 800573a:	f001 fe79 	bl	8007430 <pvPortMalloc>
 800573e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005740:	69bb      	ldr	r3, [r7, #24]
 8005742:	2b00      	cmp	r3, #0
 8005744:	d011      	beq.n	800576a <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8005746:	69bb      	ldr	r3, [r7, #24]
 8005748:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800574a:	697b      	ldr	r3, [r7, #20]
 800574c:	3348      	adds	r3, #72	@ 0x48
 800574e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005750:	69bb      	ldr	r3, [r7, #24]
 8005752:	2200      	movs	r2, #0
 8005754:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005758:	79fa      	ldrb	r2, [r7, #7]
 800575a:	69bb      	ldr	r3, [r7, #24]
 800575c:	9300      	str	r3, [sp, #0]
 800575e:	4613      	mov	r3, r2
 8005760:	697a      	ldr	r2, [r7, #20]
 8005762:	68b9      	ldr	r1, [r7, #8]
 8005764:	68f8      	ldr	r0, [r7, #12]
 8005766:	f000 f805 	bl	8005774 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800576a:	69bb      	ldr	r3, [r7, #24]
	}
 800576c:	4618      	mov	r0, r3
 800576e:	3720      	adds	r7, #32
 8005770:	46bd      	mov	sp, r7
 8005772:	bd80      	pop	{r7, pc}

08005774 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005774:	b580      	push	{r7, lr}
 8005776:	b084      	sub	sp, #16
 8005778:	af00      	add	r7, sp, #0
 800577a:	60f8      	str	r0, [r7, #12]
 800577c:	60b9      	str	r1, [r7, #8]
 800577e:	607a      	str	r2, [r7, #4]
 8005780:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005782:	68bb      	ldr	r3, [r7, #8]
 8005784:	2b00      	cmp	r3, #0
 8005786:	d103      	bne.n	8005790 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005788:	69bb      	ldr	r3, [r7, #24]
 800578a:	69ba      	ldr	r2, [r7, #24]
 800578c:	601a      	str	r2, [r3, #0]
 800578e:	e002      	b.n	8005796 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005790:	69bb      	ldr	r3, [r7, #24]
 8005792:	687a      	ldr	r2, [r7, #4]
 8005794:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005796:	69bb      	ldr	r3, [r7, #24]
 8005798:	68fa      	ldr	r2, [r7, #12]
 800579a:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800579c:	69bb      	ldr	r3, [r7, #24]
 800579e:	68ba      	ldr	r2, [r7, #8]
 80057a0:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80057a2:	2101      	movs	r1, #1
 80057a4:	69b8      	ldr	r0, [r7, #24]
 80057a6:	f7ff fec3 	bl	8005530 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80057aa:	bf00      	nop
 80057ac:	3710      	adds	r7, #16
 80057ae:	46bd      	mov	sp, r7
 80057b0:	bd80      	pop	{r7, pc}
	...

080057b4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80057b4:	b580      	push	{r7, lr}
 80057b6:	b08e      	sub	sp, #56	@ 0x38
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	60f8      	str	r0, [r7, #12]
 80057bc:	60b9      	str	r1, [r7, #8]
 80057be:	607a      	str	r2, [r7, #4]
 80057c0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80057c2:	2300      	movs	r3, #0
 80057c4:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80057ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d10b      	bne.n	80057e8 <xQueueGenericSend+0x34>
	__asm volatile
 80057d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057d4:	f383 8811 	msr	BASEPRI, r3
 80057d8:	f3bf 8f6f 	isb	sy
 80057dc:	f3bf 8f4f 	dsb	sy
 80057e0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80057e2:	bf00      	nop
 80057e4:	bf00      	nop
 80057e6:	e7fd      	b.n	80057e4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80057e8:	68bb      	ldr	r3, [r7, #8]
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d103      	bne.n	80057f6 <xQueueGenericSend+0x42>
 80057ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d101      	bne.n	80057fa <xQueueGenericSend+0x46>
 80057f6:	2301      	movs	r3, #1
 80057f8:	e000      	b.n	80057fc <xQueueGenericSend+0x48>
 80057fa:	2300      	movs	r3, #0
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d10b      	bne.n	8005818 <xQueueGenericSend+0x64>
	__asm volatile
 8005800:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005804:	f383 8811 	msr	BASEPRI, r3
 8005808:	f3bf 8f6f 	isb	sy
 800580c:	f3bf 8f4f 	dsb	sy
 8005810:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005812:	bf00      	nop
 8005814:	bf00      	nop
 8005816:	e7fd      	b.n	8005814 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005818:	683b      	ldr	r3, [r7, #0]
 800581a:	2b02      	cmp	r3, #2
 800581c:	d103      	bne.n	8005826 <xQueueGenericSend+0x72>
 800581e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005820:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005822:	2b01      	cmp	r3, #1
 8005824:	d101      	bne.n	800582a <xQueueGenericSend+0x76>
 8005826:	2301      	movs	r3, #1
 8005828:	e000      	b.n	800582c <xQueueGenericSend+0x78>
 800582a:	2300      	movs	r3, #0
 800582c:	2b00      	cmp	r3, #0
 800582e:	d10b      	bne.n	8005848 <xQueueGenericSend+0x94>
	__asm volatile
 8005830:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005834:	f383 8811 	msr	BASEPRI, r3
 8005838:	f3bf 8f6f 	isb	sy
 800583c:	f3bf 8f4f 	dsb	sy
 8005840:	623b      	str	r3, [r7, #32]
}
 8005842:	bf00      	nop
 8005844:	bf00      	nop
 8005846:	e7fd      	b.n	8005844 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005848:	f001 f9d6 	bl	8006bf8 <xTaskGetSchedulerState>
 800584c:	4603      	mov	r3, r0
 800584e:	2b00      	cmp	r3, #0
 8005850:	d102      	bne.n	8005858 <xQueueGenericSend+0xa4>
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	2b00      	cmp	r3, #0
 8005856:	d101      	bne.n	800585c <xQueueGenericSend+0xa8>
 8005858:	2301      	movs	r3, #1
 800585a:	e000      	b.n	800585e <xQueueGenericSend+0xaa>
 800585c:	2300      	movs	r3, #0
 800585e:	2b00      	cmp	r3, #0
 8005860:	d10b      	bne.n	800587a <xQueueGenericSend+0xc6>
	__asm volatile
 8005862:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005866:	f383 8811 	msr	BASEPRI, r3
 800586a:	f3bf 8f6f 	isb	sy
 800586e:	f3bf 8f4f 	dsb	sy
 8005872:	61fb      	str	r3, [r7, #28]
}
 8005874:	bf00      	nop
 8005876:	bf00      	nop
 8005878:	e7fd      	b.n	8005876 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800587a:	f001 fcd7 	bl	800722c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800587e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005880:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005882:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005884:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005886:	429a      	cmp	r2, r3
 8005888:	d302      	bcc.n	8005890 <xQueueGenericSend+0xdc>
 800588a:	683b      	ldr	r3, [r7, #0]
 800588c:	2b02      	cmp	r3, #2
 800588e:	d129      	bne.n	80058e4 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005890:	683a      	ldr	r2, [r7, #0]
 8005892:	68b9      	ldr	r1, [r7, #8]
 8005894:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005896:	f000 fac8 	bl	8005e2a <prvCopyDataToQueue>
 800589a:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800589c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800589e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d010      	beq.n	80058c6 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80058a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058a6:	3324      	adds	r3, #36	@ 0x24
 80058a8:	4618      	mov	r0, r3
 80058aa:	f000 ffe5 	bl	8006878 <xTaskRemoveFromEventList>
 80058ae:	4603      	mov	r3, r0
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d013      	beq.n	80058dc <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80058b4:	4b3f      	ldr	r3, [pc, #252]	@ (80059b4 <xQueueGenericSend+0x200>)
 80058b6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80058ba:	601a      	str	r2, [r3, #0]
 80058bc:	f3bf 8f4f 	dsb	sy
 80058c0:	f3bf 8f6f 	isb	sy
 80058c4:	e00a      	b.n	80058dc <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80058c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d007      	beq.n	80058dc <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80058cc:	4b39      	ldr	r3, [pc, #228]	@ (80059b4 <xQueueGenericSend+0x200>)
 80058ce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80058d2:	601a      	str	r2, [r3, #0]
 80058d4:	f3bf 8f4f 	dsb	sy
 80058d8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80058dc:	f001 fcd6 	bl	800728c <vPortExitCritical>
				return pdPASS;
 80058e0:	2301      	movs	r3, #1
 80058e2:	e063      	b.n	80059ac <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d103      	bne.n	80058f2 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80058ea:	f001 fccf 	bl	800728c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80058ee:	2300      	movs	r3, #0
 80058f0:	e05c      	b.n	80059ac <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80058f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d106      	bne.n	8005906 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80058f8:	f107 0314 	add.w	r3, r7, #20
 80058fc:	4618      	mov	r0, r3
 80058fe:	f001 f81f 	bl	8006940 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005902:	2301      	movs	r3, #1
 8005904:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005906:	f001 fcc1 	bl	800728c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800590a:	f000 fdcd 	bl	80064a8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800590e:	f001 fc8d 	bl	800722c <vPortEnterCritical>
 8005912:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005914:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005918:	b25b      	sxtb	r3, r3
 800591a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800591e:	d103      	bne.n	8005928 <xQueueGenericSend+0x174>
 8005920:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005922:	2200      	movs	r2, #0
 8005924:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005928:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800592a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800592e:	b25b      	sxtb	r3, r3
 8005930:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005934:	d103      	bne.n	800593e <xQueueGenericSend+0x18a>
 8005936:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005938:	2200      	movs	r2, #0
 800593a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800593e:	f001 fca5 	bl	800728c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005942:	1d3a      	adds	r2, r7, #4
 8005944:	f107 0314 	add.w	r3, r7, #20
 8005948:	4611      	mov	r1, r2
 800594a:	4618      	mov	r0, r3
 800594c:	f001 f80e 	bl	800696c <xTaskCheckForTimeOut>
 8005950:	4603      	mov	r3, r0
 8005952:	2b00      	cmp	r3, #0
 8005954:	d124      	bne.n	80059a0 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005956:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005958:	f000 fb5f 	bl	800601a <prvIsQueueFull>
 800595c:	4603      	mov	r3, r0
 800595e:	2b00      	cmp	r3, #0
 8005960:	d018      	beq.n	8005994 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005962:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005964:	3310      	adds	r3, #16
 8005966:	687a      	ldr	r2, [r7, #4]
 8005968:	4611      	mov	r1, r2
 800596a:	4618      	mov	r0, r3
 800596c:	f000 ff5e 	bl	800682c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005970:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005972:	f000 faea 	bl	8005f4a <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005976:	f000 fda5 	bl	80064c4 <xTaskResumeAll>
 800597a:	4603      	mov	r3, r0
 800597c:	2b00      	cmp	r3, #0
 800597e:	f47f af7c 	bne.w	800587a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8005982:	4b0c      	ldr	r3, [pc, #48]	@ (80059b4 <xQueueGenericSend+0x200>)
 8005984:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005988:	601a      	str	r2, [r3, #0]
 800598a:	f3bf 8f4f 	dsb	sy
 800598e:	f3bf 8f6f 	isb	sy
 8005992:	e772      	b.n	800587a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005994:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005996:	f000 fad8 	bl	8005f4a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800599a:	f000 fd93 	bl	80064c4 <xTaskResumeAll>
 800599e:	e76c      	b.n	800587a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80059a0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80059a2:	f000 fad2 	bl	8005f4a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80059a6:	f000 fd8d 	bl	80064c4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80059aa:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80059ac:	4618      	mov	r0, r3
 80059ae:	3738      	adds	r7, #56	@ 0x38
 80059b0:	46bd      	mov	sp, r7
 80059b2:	bd80      	pop	{r7, pc}
 80059b4:	e000ed04 	.word	0xe000ed04

080059b8 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80059b8:	b580      	push	{r7, lr}
 80059ba:	b08e      	sub	sp, #56	@ 0x38
 80059bc:	af00      	add	r7, sp, #0
 80059be:	6078      	str	r0, [r7, #4]
 80059c0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80059c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d10b      	bne.n	80059e4 <xQueueGiveFromISR+0x2c>
	__asm volatile
 80059cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059d0:	f383 8811 	msr	BASEPRI, r3
 80059d4:	f3bf 8f6f 	isb	sy
 80059d8:	f3bf 8f4f 	dsb	sy
 80059dc:	623b      	str	r3, [r7, #32]
}
 80059de:	bf00      	nop
 80059e0:	bf00      	nop
 80059e2:	e7fd      	b.n	80059e0 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80059e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d00b      	beq.n	8005a04 <xQueueGiveFromISR+0x4c>
	__asm volatile
 80059ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059f0:	f383 8811 	msr	BASEPRI, r3
 80059f4:	f3bf 8f6f 	isb	sy
 80059f8:	f3bf 8f4f 	dsb	sy
 80059fc:	61fb      	str	r3, [r7, #28]
}
 80059fe:	bf00      	nop
 8005a00:	bf00      	nop
 8005a02:	e7fd      	b.n	8005a00 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8005a04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d103      	bne.n	8005a14 <xQueueGiveFromISR+0x5c>
 8005a0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a0e:	689b      	ldr	r3, [r3, #8]
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d101      	bne.n	8005a18 <xQueueGiveFromISR+0x60>
 8005a14:	2301      	movs	r3, #1
 8005a16:	e000      	b.n	8005a1a <xQueueGiveFromISR+0x62>
 8005a18:	2300      	movs	r3, #0
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d10b      	bne.n	8005a36 <xQueueGiveFromISR+0x7e>
	__asm volatile
 8005a1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a22:	f383 8811 	msr	BASEPRI, r3
 8005a26:	f3bf 8f6f 	isb	sy
 8005a2a:	f3bf 8f4f 	dsb	sy
 8005a2e:	61bb      	str	r3, [r7, #24]
}
 8005a30:	bf00      	nop
 8005a32:	bf00      	nop
 8005a34:	e7fd      	b.n	8005a32 <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005a36:	f001 fcbb 	bl	80073b0 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005a3a:	f3ef 8211 	mrs	r2, BASEPRI
 8005a3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a42:	f383 8811 	msr	BASEPRI, r3
 8005a46:	f3bf 8f6f 	isb	sy
 8005a4a:	f3bf 8f4f 	dsb	sy
 8005a4e:	617a      	str	r2, [r7, #20]
 8005a50:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005a52:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005a54:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005a56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a5a:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8005a5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a5e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a60:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005a62:	429a      	cmp	r2, r3
 8005a64:	d22b      	bcs.n	8005abe <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005a66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a68:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005a6c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005a70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a72:	1c5a      	adds	r2, r3, #1
 8005a74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a76:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005a78:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8005a7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a80:	d112      	bne.n	8005aa8 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005a82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d016      	beq.n	8005ab8 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005a8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a8c:	3324      	adds	r3, #36	@ 0x24
 8005a8e:	4618      	mov	r0, r3
 8005a90:	f000 fef2 	bl	8006878 <xTaskRemoveFromEventList>
 8005a94:	4603      	mov	r3, r0
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d00e      	beq.n	8005ab8 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005a9a:	683b      	ldr	r3, [r7, #0]
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d00b      	beq.n	8005ab8 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005aa0:	683b      	ldr	r3, [r7, #0]
 8005aa2:	2201      	movs	r2, #1
 8005aa4:	601a      	str	r2, [r3, #0]
 8005aa6:	e007      	b.n	8005ab8 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005aa8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005aac:	3301      	adds	r3, #1
 8005aae:	b2db      	uxtb	r3, r3
 8005ab0:	b25a      	sxtb	r2, r3
 8005ab2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ab4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8005ab8:	2301      	movs	r3, #1
 8005aba:	637b      	str	r3, [r7, #52]	@ 0x34
 8005abc:	e001      	b.n	8005ac2 <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005abe:	2300      	movs	r3, #0
 8005ac0:	637b      	str	r3, [r7, #52]	@ 0x34
 8005ac2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ac4:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005acc:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005ace:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8005ad0:	4618      	mov	r0, r3
 8005ad2:	3738      	adds	r7, #56	@ 0x38
 8005ad4:	46bd      	mov	sp, r7
 8005ad6:	bd80      	pop	{r7, pc}

08005ad8 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8005ad8:	b580      	push	{r7, lr}
 8005ada:	b08e      	sub	sp, #56	@ 0x38
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	6078      	str	r0, [r7, #4]
 8005ae0:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8005ae2:	2300      	movs	r3, #0
 8005ae4:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8005aea:	2300      	movs	r3, #0
 8005aec:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005aee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d10b      	bne.n	8005b0c <xQueueSemaphoreTake+0x34>
	__asm volatile
 8005af4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005af8:	f383 8811 	msr	BASEPRI, r3
 8005afc:	f3bf 8f6f 	isb	sy
 8005b00:	f3bf 8f4f 	dsb	sy
 8005b04:	623b      	str	r3, [r7, #32]
}
 8005b06:	bf00      	nop
 8005b08:	bf00      	nop
 8005b0a:	e7fd      	b.n	8005b08 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005b0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d00b      	beq.n	8005b2c <xQueueSemaphoreTake+0x54>
	__asm volatile
 8005b14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b18:	f383 8811 	msr	BASEPRI, r3
 8005b1c:	f3bf 8f6f 	isb	sy
 8005b20:	f3bf 8f4f 	dsb	sy
 8005b24:	61fb      	str	r3, [r7, #28]
}
 8005b26:	bf00      	nop
 8005b28:	bf00      	nop
 8005b2a:	e7fd      	b.n	8005b28 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005b2c:	f001 f864 	bl	8006bf8 <xTaskGetSchedulerState>
 8005b30:	4603      	mov	r3, r0
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d102      	bne.n	8005b3c <xQueueSemaphoreTake+0x64>
 8005b36:	683b      	ldr	r3, [r7, #0]
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d101      	bne.n	8005b40 <xQueueSemaphoreTake+0x68>
 8005b3c:	2301      	movs	r3, #1
 8005b3e:	e000      	b.n	8005b42 <xQueueSemaphoreTake+0x6a>
 8005b40:	2300      	movs	r3, #0
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d10b      	bne.n	8005b5e <xQueueSemaphoreTake+0x86>
	__asm volatile
 8005b46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b4a:	f383 8811 	msr	BASEPRI, r3
 8005b4e:	f3bf 8f6f 	isb	sy
 8005b52:	f3bf 8f4f 	dsb	sy
 8005b56:	61bb      	str	r3, [r7, #24]
}
 8005b58:	bf00      	nop
 8005b5a:	bf00      	nop
 8005b5c:	e7fd      	b.n	8005b5a <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005b5e:	f001 fb65 	bl	800722c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8005b62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b66:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8005b68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d024      	beq.n	8005bb8 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8005b6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b70:	1e5a      	subs	r2, r3, #1
 8005b72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b74:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005b76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d104      	bne.n	8005b88 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8005b7e:	f001 f9e7 	bl	8006f50 <pvTaskIncrementMutexHeldCount>
 8005b82:	4602      	mov	r2, r0
 8005b84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b86:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005b88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b8a:	691b      	ldr	r3, [r3, #16]
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d00f      	beq.n	8005bb0 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005b90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b92:	3310      	adds	r3, #16
 8005b94:	4618      	mov	r0, r3
 8005b96:	f000 fe6f 	bl	8006878 <xTaskRemoveFromEventList>
 8005b9a:	4603      	mov	r3, r0
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d007      	beq.n	8005bb0 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005ba0:	4b54      	ldr	r3, [pc, #336]	@ (8005cf4 <xQueueSemaphoreTake+0x21c>)
 8005ba2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005ba6:	601a      	str	r2, [r3, #0]
 8005ba8:	f3bf 8f4f 	dsb	sy
 8005bac:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005bb0:	f001 fb6c 	bl	800728c <vPortExitCritical>
				return pdPASS;
 8005bb4:	2301      	movs	r3, #1
 8005bb6:	e098      	b.n	8005cea <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005bb8:	683b      	ldr	r3, [r7, #0]
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d112      	bne.n	8005be4 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8005bbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d00b      	beq.n	8005bdc <xQueueSemaphoreTake+0x104>
	__asm volatile
 8005bc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005bc8:	f383 8811 	msr	BASEPRI, r3
 8005bcc:	f3bf 8f6f 	isb	sy
 8005bd0:	f3bf 8f4f 	dsb	sy
 8005bd4:	617b      	str	r3, [r7, #20]
}
 8005bd6:	bf00      	nop
 8005bd8:	bf00      	nop
 8005bda:	e7fd      	b.n	8005bd8 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8005bdc:	f001 fb56 	bl	800728c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005be0:	2300      	movs	r3, #0
 8005be2:	e082      	b.n	8005cea <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005be4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d106      	bne.n	8005bf8 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005bea:	f107 030c 	add.w	r3, r7, #12
 8005bee:	4618      	mov	r0, r3
 8005bf0:	f000 fea6 	bl	8006940 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005bf4:	2301      	movs	r3, #1
 8005bf6:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005bf8:	f001 fb48 	bl	800728c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005bfc:	f000 fc54 	bl	80064a8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005c00:	f001 fb14 	bl	800722c <vPortEnterCritical>
 8005c04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c06:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005c0a:	b25b      	sxtb	r3, r3
 8005c0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c10:	d103      	bne.n	8005c1a <xQueueSemaphoreTake+0x142>
 8005c12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c14:	2200      	movs	r2, #0
 8005c16:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005c1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c1c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005c20:	b25b      	sxtb	r3, r3
 8005c22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c26:	d103      	bne.n	8005c30 <xQueueSemaphoreTake+0x158>
 8005c28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c2a:	2200      	movs	r2, #0
 8005c2c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005c30:	f001 fb2c 	bl	800728c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005c34:	463a      	mov	r2, r7
 8005c36:	f107 030c 	add.w	r3, r7, #12
 8005c3a:	4611      	mov	r1, r2
 8005c3c:	4618      	mov	r0, r3
 8005c3e:	f000 fe95 	bl	800696c <xTaskCheckForTimeOut>
 8005c42:	4603      	mov	r3, r0
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d132      	bne.n	8005cae <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005c48:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005c4a:	f000 f9d0 	bl	8005fee <prvIsQueueEmpty>
 8005c4e:	4603      	mov	r3, r0
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d026      	beq.n	8005ca2 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005c54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d109      	bne.n	8005c70 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8005c5c:	f001 fae6 	bl	800722c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005c60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c62:	689b      	ldr	r3, [r3, #8]
 8005c64:	4618      	mov	r0, r3
 8005c66:	f000 ffe5 	bl	8006c34 <xTaskPriorityInherit>
 8005c6a:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8005c6c:	f001 fb0e 	bl	800728c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005c70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c72:	3324      	adds	r3, #36	@ 0x24
 8005c74:	683a      	ldr	r2, [r7, #0]
 8005c76:	4611      	mov	r1, r2
 8005c78:	4618      	mov	r0, r3
 8005c7a:	f000 fdd7 	bl	800682c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005c7e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005c80:	f000 f963 	bl	8005f4a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005c84:	f000 fc1e 	bl	80064c4 <xTaskResumeAll>
 8005c88:	4603      	mov	r3, r0
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	f47f af67 	bne.w	8005b5e <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8005c90:	4b18      	ldr	r3, [pc, #96]	@ (8005cf4 <xQueueSemaphoreTake+0x21c>)
 8005c92:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005c96:	601a      	str	r2, [r3, #0]
 8005c98:	f3bf 8f4f 	dsb	sy
 8005c9c:	f3bf 8f6f 	isb	sy
 8005ca0:	e75d      	b.n	8005b5e <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8005ca2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005ca4:	f000 f951 	bl	8005f4a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005ca8:	f000 fc0c 	bl	80064c4 <xTaskResumeAll>
 8005cac:	e757      	b.n	8005b5e <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8005cae:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005cb0:	f000 f94b 	bl	8005f4a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005cb4:	f000 fc06 	bl	80064c4 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005cb8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005cba:	f000 f998 	bl	8005fee <prvIsQueueEmpty>
 8005cbe:	4603      	mov	r3, r0
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	f43f af4c 	beq.w	8005b5e <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8005cc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d00d      	beq.n	8005ce8 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8005ccc:	f001 faae 	bl	800722c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8005cd0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005cd2:	f000 f893 	bl	8005dfc <prvGetDisinheritPriorityAfterTimeout>
 8005cd6:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8005cd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005cda:	689b      	ldr	r3, [r3, #8]
 8005cdc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005cde:	4618      	mov	r0, r3
 8005ce0:	f001 f8a6 	bl	8006e30 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8005ce4:	f001 fad2 	bl	800728c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005ce8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005cea:	4618      	mov	r0, r3
 8005cec:	3738      	adds	r7, #56	@ 0x38
 8005cee:	46bd      	mov	sp, r7
 8005cf0:	bd80      	pop	{r7, pc}
 8005cf2:	bf00      	nop
 8005cf4:	e000ed04 	.word	0xe000ed04

08005cf8 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005cf8:	b580      	push	{r7, lr}
 8005cfa:	b08e      	sub	sp, #56	@ 0x38
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	60f8      	str	r0, [r7, #12]
 8005d00:	60b9      	str	r1, [r7, #8]
 8005d02:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8005d08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d10b      	bne.n	8005d26 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 8005d0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d12:	f383 8811 	msr	BASEPRI, r3
 8005d16:	f3bf 8f6f 	isb	sy
 8005d1a:	f3bf 8f4f 	dsb	sy
 8005d1e:	623b      	str	r3, [r7, #32]
}
 8005d20:	bf00      	nop
 8005d22:	bf00      	nop
 8005d24:	e7fd      	b.n	8005d22 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005d26:	68bb      	ldr	r3, [r7, #8]
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d103      	bne.n	8005d34 <xQueueReceiveFromISR+0x3c>
 8005d2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d101      	bne.n	8005d38 <xQueueReceiveFromISR+0x40>
 8005d34:	2301      	movs	r3, #1
 8005d36:	e000      	b.n	8005d3a <xQueueReceiveFromISR+0x42>
 8005d38:	2300      	movs	r3, #0
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d10b      	bne.n	8005d56 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 8005d3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d42:	f383 8811 	msr	BASEPRI, r3
 8005d46:	f3bf 8f6f 	isb	sy
 8005d4a:	f3bf 8f4f 	dsb	sy
 8005d4e:	61fb      	str	r3, [r7, #28]
}
 8005d50:	bf00      	nop
 8005d52:	bf00      	nop
 8005d54:	e7fd      	b.n	8005d52 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005d56:	f001 fb2b 	bl	80073b0 <vPortValidateInterruptPriority>
	__asm volatile
 8005d5a:	f3ef 8211 	mrs	r2, BASEPRI
 8005d5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d62:	f383 8811 	msr	BASEPRI, r3
 8005d66:	f3bf 8f6f 	isb	sy
 8005d6a:	f3bf 8f4f 	dsb	sy
 8005d6e:	61ba      	str	r2, [r7, #24]
 8005d70:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8005d72:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005d74:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005d76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d7a:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005d7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d02f      	beq.n	8005de2 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8005d82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d84:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005d88:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005d8c:	68b9      	ldr	r1, [r7, #8]
 8005d8e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005d90:	f000 f8b5 	bl	8005efe <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005d94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d96:	1e5a      	subs	r2, r3, #1
 8005d98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d9a:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8005d9c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8005da0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005da4:	d112      	bne.n	8005dcc <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005da6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005da8:	691b      	ldr	r3, [r3, #16]
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d016      	beq.n	8005ddc <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005dae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005db0:	3310      	adds	r3, #16
 8005db2:	4618      	mov	r0, r3
 8005db4:	f000 fd60 	bl	8006878 <xTaskRemoveFromEventList>
 8005db8:	4603      	mov	r3, r0
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d00e      	beq.n	8005ddc <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d00b      	beq.n	8005ddc <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	2201      	movs	r2, #1
 8005dc8:	601a      	str	r2, [r3, #0]
 8005dca:	e007      	b.n	8005ddc <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8005dcc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005dd0:	3301      	adds	r3, #1
 8005dd2:	b2db      	uxtb	r3, r3
 8005dd4:	b25a      	sxtb	r2, r3
 8005dd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005dd8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8005ddc:	2301      	movs	r3, #1
 8005dde:	637b      	str	r3, [r7, #52]	@ 0x34
 8005de0:	e001      	b.n	8005de6 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 8005de2:	2300      	movs	r3, #0
 8005de4:	637b      	str	r3, [r7, #52]	@ 0x34
 8005de6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005de8:	613b      	str	r3, [r7, #16]
	__asm volatile
 8005dea:	693b      	ldr	r3, [r7, #16]
 8005dec:	f383 8811 	msr	BASEPRI, r3
}
 8005df0:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005df2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8005df4:	4618      	mov	r0, r3
 8005df6:	3738      	adds	r7, #56	@ 0x38
 8005df8:	46bd      	mov	sp, r7
 8005dfa:	bd80      	pop	{r7, pc}

08005dfc <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8005dfc:	b480      	push	{r7}
 8005dfe:	b085      	sub	sp, #20
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d006      	beq.n	8005e1a <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	f1c3 0307 	rsb	r3, r3, #7
 8005e16:	60fb      	str	r3, [r7, #12]
 8005e18:	e001      	b.n	8005e1e <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8005e1a:	2300      	movs	r3, #0
 8005e1c:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8005e1e:	68fb      	ldr	r3, [r7, #12]
	}
 8005e20:	4618      	mov	r0, r3
 8005e22:	3714      	adds	r7, #20
 8005e24:	46bd      	mov	sp, r7
 8005e26:	bc80      	pop	{r7}
 8005e28:	4770      	bx	lr

08005e2a <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005e2a:	b580      	push	{r7, lr}
 8005e2c:	b086      	sub	sp, #24
 8005e2e:	af00      	add	r7, sp, #0
 8005e30:	60f8      	str	r0, [r7, #12]
 8005e32:	60b9      	str	r1, [r7, #8]
 8005e34:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005e36:	2300      	movs	r3, #0
 8005e38:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e3e:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d10d      	bne.n	8005e64 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d14d      	bne.n	8005eec <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	689b      	ldr	r3, [r3, #8]
 8005e54:	4618      	mov	r0, r3
 8005e56:	f000 ff63 	bl	8006d20 <xTaskPriorityDisinherit>
 8005e5a:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	2200      	movs	r2, #0
 8005e60:	609a      	str	r2, [r3, #8]
 8005e62:	e043      	b.n	8005eec <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d119      	bne.n	8005e9e <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	6858      	ldr	r0, [r3, #4]
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e72:	461a      	mov	r2, r3
 8005e74:	68b9      	ldr	r1, [r7, #8]
 8005e76:	f001 fe51 	bl	8007b1c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	685a      	ldr	r2, [r3, #4]
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e82:	441a      	add	r2, r3
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	685a      	ldr	r2, [r3, #4]
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	689b      	ldr	r3, [r3, #8]
 8005e90:	429a      	cmp	r2, r3
 8005e92:	d32b      	bcc.n	8005eec <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	681a      	ldr	r2, [r3, #0]
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	605a      	str	r2, [r3, #4]
 8005e9c:	e026      	b.n	8005eec <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	68d8      	ldr	r0, [r3, #12]
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ea6:	461a      	mov	r2, r3
 8005ea8:	68b9      	ldr	r1, [r7, #8]
 8005eaa:	f001 fe37 	bl	8007b1c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	68da      	ldr	r2, [r3, #12]
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005eb6:	425b      	negs	r3, r3
 8005eb8:	441a      	add	r2, r3
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	68da      	ldr	r2, [r3, #12]
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	429a      	cmp	r2, r3
 8005ec8:	d207      	bcs.n	8005eda <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	689a      	ldr	r2, [r3, #8]
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ed2:	425b      	negs	r3, r3
 8005ed4:	441a      	add	r2, r3
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	2b02      	cmp	r3, #2
 8005ede:	d105      	bne.n	8005eec <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005ee0:	693b      	ldr	r3, [r7, #16]
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d002      	beq.n	8005eec <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005ee6:	693b      	ldr	r3, [r7, #16]
 8005ee8:	3b01      	subs	r3, #1
 8005eea:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005eec:	693b      	ldr	r3, [r7, #16]
 8005eee:	1c5a      	adds	r2, r3, #1
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8005ef4:	697b      	ldr	r3, [r7, #20]
}
 8005ef6:	4618      	mov	r0, r3
 8005ef8:	3718      	adds	r7, #24
 8005efa:	46bd      	mov	sp, r7
 8005efc:	bd80      	pop	{r7, pc}

08005efe <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005efe:	b580      	push	{r7, lr}
 8005f00:	b082      	sub	sp, #8
 8005f02:	af00      	add	r7, sp, #0
 8005f04:	6078      	str	r0, [r7, #4]
 8005f06:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d018      	beq.n	8005f42 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	68da      	ldr	r2, [r3, #12]
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f18:	441a      	add	r2, r3
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	68da      	ldr	r2, [r3, #12]
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	689b      	ldr	r3, [r3, #8]
 8005f26:	429a      	cmp	r2, r3
 8005f28:	d303      	bcc.n	8005f32 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681a      	ldr	r2, [r3, #0]
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	68d9      	ldr	r1, [r3, #12]
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f3a:	461a      	mov	r2, r3
 8005f3c:	6838      	ldr	r0, [r7, #0]
 8005f3e:	f001 fded 	bl	8007b1c <memcpy>
	}
}
 8005f42:	bf00      	nop
 8005f44:	3708      	adds	r7, #8
 8005f46:	46bd      	mov	sp, r7
 8005f48:	bd80      	pop	{r7, pc}

08005f4a <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005f4a:	b580      	push	{r7, lr}
 8005f4c:	b084      	sub	sp, #16
 8005f4e:	af00      	add	r7, sp, #0
 8005f50:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005f52:	f001 f96b 	bl	800722c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005f5c:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005f5e:	e011      	b.n	8005f84 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d012      	beq.n	8005f8e <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	3324      	adds	r3, #36	@ 0x24
 8005f6c:	4618      	mov	r0, r3
 8005f6e:	f000 fc83 	bl	8006878 <xTaskRemoveFromEventList>
 8005f72:	4603      	mov	r3, r0
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d001      	beq.n	8005f7c <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005f78:	f000 fd5c 	bl	8006a34 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005f7c:	7bfb      	ldrb	r3, [r7, #15]
 8005f7e:	3b01      	subs	r3, #1
 8005f80:	b2db      	uxtb	r3, r3
 8005f82:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005f84:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	dce9      	bgt.n	8005f60 <prvUnlockQueue+0x16>
 8005f8c:	e000      	b.n	8005f90 <prvUnlockQueue+0x46>
					break;
 8005f8e:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	22ff      	movs	r2, #255	@ 0xff
 8005f94:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8005f98:	f001 f978 	bl	800728c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005f9c:	f001 f946 	bl	800722c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005fa6:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005fa8:	e011      	b.n	8005fce <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	691b      	ldr	r3, [r3, #16]
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d012      	beq.n	8005fd8 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	3310      	adds	r3, #16
 8005fb6:	4618      	mov	r0, r3
 8005fb8:	f000 fc5e 	bl	8006878 <xTaskRemoveFromEventList>
 8005fbc:	4603      	mov	r3, r0
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d001      	beq.n	8005fc6 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005fc2:	f000 fd37 	bl	8006a34 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005fc6:	7bbb      	ldrb	r3, [r7, #14]
 8005fc8:	3b01      	subs	r3, #1
 8005fca:	b2db      	uxtb	r3, r3
 8005fcc:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005fce:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	dce9      	bgt.n	8005faa <prvUnlockQueue+0x60>
 8005fd6:	e000      	b.n	8005fda <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005fd8:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	22ff      	movs	r2, #255	@ 0xff
 8005fde:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8005fe2:	f001 f953 	bl	800728c <vPortExitCritical>
}
 8005fe6:	bf00      	nop
 8005fe8:	3710      	adds	r7, #16
 8005fea:	46bd      	mov	sp, r7
 8005fec:	bd80      	pop	{r7, pc}

08005fee <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005fee:	b580      	push	{r7, lr}
 8005ff0:	b084      	sub	sp, #16
 8005ff2:	af00      	add	r7, sp, #0
 8005ff4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005ff6:	f001 f919 	bl	800722c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d102      	bne.n	8006008 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006002:	2301      	movs	r3, #1
 8006004:	60fb      	str	r3, [r7, #12]
 8006006:	e001      	b.n	800600c <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006008:	2300      	movs	r3, #0
 800600a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800600c:	f001 f93e 	bl	800728c <vPortExitCritical>

	return xReturn;
 8006010:	68fb      	ldr	r3, [r7, #12]
}
 8006012:	4618      	mov	r0, r3
 8006014:	3710      	adds	r7, #16
 8006016:	46bd      	mov	sp, r7
 8006018:	bd80      	pop	{r7, pc}

0800601a <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800601a:	b580      	push	{r7, lr}
 800601c:	b084      	sub	sp, #16
 800601e:	af00      	add	r7, sp, #0
 8006020:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006022:	f001 f903 	bl	800722c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800602e:	429a      	cmp	r2, r3
 8006030:	d102      	bne.n	8006038 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006032:	2301      	movs	r3, #1
 8006034:	60fb      	str	r3, [r7, #12]
 8006036:	e001      	b.n	800603c <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006038:	2300      	movs	r3, #0
 800603a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800603c:	f001 f926 	bl	800728c <vPortExitCritical>

	return xReturn;
 8006040:	68fb      	ldr	r3, [r7, #12]
}
 8006042:	4618      	mov	r0, r3
 8006044:	3710      	adds	r7, #16
 8006046:	46bd      	mov	sp, r7
 8006048:	bd80      	pop	{r7, pc}

0800604a <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800604a:	b580      	push	{r7, lr}
 800604c:	b08e      	sub	sp, #56	@ 0x38
 800604e:	af04      	add	r7, sp, #16
 8006050:	60f8      	str	r0, [r7, #12]
 8006052:	60b9      	str	r1, [r7, #8]
 8006054:	607a      	str	r2, [r7, #4]
 8006056:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006058:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800605a:	2b00      	cmp	r3, #0
 800605c:	d10b      	bne.n	8006076 <xTaskCreateStatic+0x2c>
	__asm volatile
 800605e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006062:	f383 8811 	msr	BASEPRI, r3
 8006066:	f3bf 8f6f 	isb	sy
 800606a:	f3bf 8f4f 	dsb	sy
 800606e:	623b      	str	r3, [r7, #32]
}
 8006070:	bf00      	nop
 8006072:	bf00      	nop
 8006074:	e7fd      	b.n	8006072 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006076:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006078:	2b00      	cmp	r3, #0
 800607a:	d10b      	bne.n	8006094 <xTaskCreateStatic+0x4a>
	__asm volatile
 800607c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006080:	f383 8811 	msr	BASEPRI, r3
 8006084:	f3bf 8f6f 	isb	sy
 8006088:	f3bf 8f4f 	dsb	sy
 800608c:	61fb      	str	r3, [r7, #28]
}
 800608e:	bf00      	nop
 8006090:	bf00      	nop
 8006092:	e7fd      	b.n	8006090 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006094:	2354      	movs	r3, #84	@ 0x54
 8006096:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006098:	693b      	ldr	r3, [r7, #16]
 800609a:	2b54      	cmp	r3, #84	@ 0x54
 800609c:	d00b      	beq.n	80060b6 <xTaskCreateStatic+0x6c>
	__asm volatile
 800609e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060a2:	f383 8811 	msr	BASEPRI, r3
 80060a6:	f3bf 8f6f 	isb	sy
 80060aa:	f3bf 8f4f 	dsb	sy
 80060ae:	61bb      	str	r3, [r7, #24]
}
 80060b0:	bf00      	nop
 80060b2:	bf00      	nop
 80060b4:	e7fd      	b.n	80060b2 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80060b6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80060b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d01e      	beq.n	80060fc <xTaskCreateStatic+0xb2>
 80060be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d01b      	beq.n	80060fc <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80060c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060c6:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80060c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060ca:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80060cc:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80060ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060d0:	2202      	movs	r2, #2
 80060d2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80060d6:	2300      	movs	r3, #0
 80060d8:	9303      	str	r3, [sp, #12]
 80060da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060dc:	9302      	str	r3, [sp, #8]
 80060de:	f107 0314 	add.w	r3, r7, #20
 80060e2:	9301      	str	r3, [sp, #4]
 80060e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060e6:	9300      	str	r3, [sp, #0]
 80060e8:	683b      	ldr	r3, [r7, #0]
 80060ea:	687a      	ldr	r2, [r7, #4]
 80060ec:	68b9      	ldr	r1, [r7, #8]
 80060ee:	68f8      	ldr	r0, [r7, #12]
 80060f0:	f000 f850 	bl	8006194 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80060f4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80060f6:	f000 f8d5 	bl	80062a4 <prvAddNewTaskToReadyList>
 80060fa:	e001      	b.n	8006100 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80060fc:	2300      	movs	r3, #0
 80060fe:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006100:	697b      	ldr	r3, [r7, #20]
	}
 8006102:	4618      	mov	r0, r3
 8006104:	3728      	adds	r7, #40	@ 0x28
 8006106:	46bd      	mov	sp, r7
 8006108:	bd80      	pop	{r7, pc}

0800610a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800610a:	b580      	push	{r7, lr}
 800610c:	b08c      	sub	sp, #48	@ 0x30
 800610e:	af04      	add	r7, sp, #16
 8006110:	60f8      	str	r0, [r7, #12]
 8006112:	60b9      	str	r1, [r7, #8]
 8006114:	603b      	str	r3, [r7, #0]
 8006116:	4613      	mov	r3, r2
 8006118:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800611a:	88fb      	ldrh	r3, [r7, #6]
 800611c:	009b      	lsls	r3, r3, #2
 800611e:	4618      	mov	r0, r3
 8006120:	f001 f986 	bl	8007430 <pvPortMalloc>
 8006124:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006126:	697b      	ldr	r3, [r7, #20]
 8006128:	2b00      	cmp	r3, #0
 800612a:	d00e      	beq.n	800614a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800612c:	2054      	movs	r0, #84	@ 0x54
 800612e:	f001 f97f 	bl	8007430 <pvPortMalloc>
 8006132:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006134:	69fb      	ldr	r3, [r7, #28]
 8006136:	2b00      	cmp	r3, #0
 8006138:	d003      	beq.n	8006142 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800613a:	69fb      	ldr	r3, [r7, #28]
 800613c:	697a      	ldr	r2, [r7, #20]
 800613e:	631a      	str	r2, [r3, #48]	@ 0x30
 8006140:	e005      	b.n	800614e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006142:	6978      	ldr	r0, [r7, #20]
 8006144:	f001 fa42 	bl	80075cc <vPortFree>
 8006148:	e001      	b.n	800614e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800614a:	2300      	movs	r3, #0
 800614c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800614e:	69fb      	ldr	r3, [r7, #28]
 8006150:	2b00      	cmp	r3, #0
 8006152:	d017      	beq.n	8006184 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006154:	69fb      	ldr	r3, [r7, #28]
 8006156:	2200      	movs	r2, #0
 8006158:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800615c:	88fa      	ldrh	r2, [r7, #6]
 800615e:	2300      	movs	r3, #0
 8006160:	9303      	str	r3, [sp, #12]
 8006162:	69fb      	ldr	r3, [r7, #28]
 8006164:	9302      	str	r3, [sp, #8]
 8006166:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006168:	9301      	str	r3, [sp, #4]
 800616a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800616c:	9300      	str	r3, [sp, #0]
 800616e:	683b      	ldr	r3, [r7, #0]
 8006170:	68b9      	ldr	r1, [r7, #8]
 8006172:	68f8      	ldr	r0, [r7, #12]
 8006174:	f000 f80e 	bl	8006194 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006178:	69f8      	ldr	r0, [r7, #28]
 800617a:	f000 f893 	bl	80062a4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800617e:	2301      	movs	r3, #1
 8006180:	61bb      	str	r3, [r7, #24]
 8006182:	e002      	b.n	800618a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006184:	f04f 33ff 	mov.w	r3, #4294967295
 8006188:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800618a:	69bb      	ldr	r3, [r7, #24]
	}
 800618c:	4618      	mov	r0, r3
 800618e:	3720      	adds	r7, #32
 8006190:	46bd      	mov	sp, r7
 8006192:	bd80      	pop	{r7, pc}

08006194 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006194:	b580      	push	{r7, lr}
 8006196:	b088      	sub	sp, #32
 8006198:	af00      	add	r7, sp, #0
 800619a:	60f8      	str	r0, [r7, #12]
 800619c:	60b9      	str	r1, [r7, #8]
 800619e:	607a      	str	r2, [r7, #4]
 80061a0:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80061a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061a4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80061ac:	3b01      	subs	r3, #1
 80061ae:	009b      	lsls	r3, r3, #2
 80061b0:	4413      	add	r3, r2
 80061b2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80061b4:	69bb      	ldr	r3, [r7, #24]
 80061b6:	f023 0307 	bic.w	r3, r3, #7
 80061ba:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80061bc:	69bb      	ldr	r3, [r7, #24]
 80061be:	f003 0307 	and.w	r3, r3, #7
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d00b      	beq.n	80061de <prvInitialiseNewTask+0x4a>
	__asm volatile
 80061c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061ca:	f383 8811 	msr	BASEPRI, r3
 80061ce:	f3bf 8f6f 	isb	sy
 80061d2:	f3bf 8f4f 	dsb	sy
 80061d6:	617b      	str	r3, [r7, #20]
}
 80061d8:	bf00      	nop
 80061da:	bf00      	nop
 80061dc:	e7fd      	b.n	80061da <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80061de:	68bb      	ldr	r3, [r7, #8]
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d01f      	beq.n	8006224 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80061e4:	2300      	movs	r3, #0
 80061e6:	61fb      	str	r3, [r7, #28]
 80061e8:	e012      	b.n	8006210 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80061ea:	68ba      	ldr	r2, [r7, #8]
 80061ec:	69fb      	ldr	r3, [r7, #28]
 80061ee:	4413      	add	r3, r2
 80061f0:	7819      	ldrb	r1, [r3, #0]
 80061f2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80061f4:	69fb      	ldr	r3, [r7, #28]
 80061f6:	4413      	add	r3, r2
 80061f8:	3334      	adds	r3, #52	@ 0x34
 80061fa:	460a      	mov	r2, r1
 80061fc:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80061fe:	68ba      	ldr	r2, [r7, #8]
 8006200:	69fb      	ldr	r3, [r7, #28]
 8006202:	4413      	add	r3, r2
 8006204:	781b      	ldrb	r3, [r3, #0]
 8006206:	2b00      	cmp	r3, #0
 8006208:	d006      	beq.n	8006218 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800620a:	69fb      	ldr	r3, [r7, #28]
 800620c:	3301      	adds	r3, #1
 800620e:	61fb      	str	r3, [r7, #28]
 8006210:	69fb      	ldr	r3, [r7, #28]
 8006212:	2b0f      	cmp	r3, #15
 8006214:	d9e9      	bls.n	80061ea <prvInitialiseNewTask+0x56>
 8006216:	e000      	b.n	800621a <prvInitialiseNewTask+0x86>
			{
				break;
 8006218:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800621a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800621c:	2200      	movs	r2, #0
 800621e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006222:	e003      	b.n	800622c <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006224:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006226:	2200      	movs	r2, #0
 8006228:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800622c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800622e:	2b06      	cmp	r3, #6
 8006230:	d901      	bls.n	8006236 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006232:	2306      	movs	r3, #6
 8006234:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006236:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006238:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800623a:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800623c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800623e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006240:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8006242:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006244:	2200      	movs	r2, #0
 8006246:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006248:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800624a:	3304      	adds	r3, #4
 800624c:	4618      	mov	r0, r3
 800624e:	f7ff f8de 	bl	800540e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006252:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006254:	3318      	adds	r3, #24
 8006256:	4618      	mov	r0, r3
 8006258:	f7ff f8d9 	bl	800540e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800625c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800625e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006260:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006262:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006264:	f1c3 0207 	rsb	r2, r3, #7
 8006268:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800626a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800626c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800626e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006270:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006272:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006274:	2200      	movs	r2, #0
 8006276:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006278:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800627a:	2200      	movs	r2, #0
 800627c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006280:	683a      	ldr	r2, [r7, #0]
 8006282:	68f9      	ldr	r1, [r7, #12]
 8006284:	69b8      	ldr	r0, [r7, #24]
 8006286:	f000 fedd 	bl	8007044 <pxPortInitialiseStack>
 800628a:	4602      	mov	r2, r0
 800628c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800628e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006290:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006292:	2b00      	cmp	r3, #0
 8006294:	d002      	beq.n	800629c <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006296:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006298:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800629a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800629c:	bf00      	nop
 800629e:	3720      	adds	r7, #32
 80062a0:	46bd      	mov	sp, r7
 80062a2:	bd80      	pop	{r7, pc}

080062a4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80062a4:	b580      	push	{r7, lr}
 80062a6:	b082      	sub	sp, #8
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80062ac:	f000 ffbe 	bl	800722c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80062b0:	4b2a      	ldr	r3, [pc, #168]	@ (800635c <prvAddNewTaskToReadyList+0xb8>)
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	3301      	adds	r3, #1
 80062b6:	4a29      	ldr	r2, [pc, #164]	@ (800635c <prvAddNewTaskToReadyList+0xb8>)
 80062b8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80062ba:	4b29      	ldr	r3, [pc, #164]	@ (8006360 <prvAddNewTaskToReadyList+0xbc>)
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d109      	bne.n	80062d6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80062c2:	4a27      	ldr	r2, [pc, #156]	@ (8006360 <prvAddNewTaskToReadyList+0xbc>)
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80062c8:	4b24      	ldr	r3, [pc, #144]	@ (800635c <prvAddNewTaskToReadyList+0xb8>)
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	2b01      	cmp	r3, #1
 80062ce:	d110      	bne.n	80062f2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80062d0:	f000 fbd4 	bl	8006a7c <prvInitialiseTaskLists>
 80062d4:	e00d      	b.n	80062f2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80062d6:	4b23      	ldr	r3, [pc, #140]	@ (8006364 <prvAddNewTaskToReadyList+0xc0>)
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d109      	bne.n	80062f2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80062de:	4b20      	ldr	r3, [pc, #128]	@ (8006360 <prvAddNewTaskToReadyList+0xbc>)
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062e8:	429a      	cmp	r2, r3
 80062ea:	d802      	bhi.n	80062f2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80062ec:	4a1c      	ldr	r2, [pc, #112]	@ (8006360 <prvAddNewTaskToReadyList+0xbc>)
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80062f2:	4b1d      	ldr	r3, [pc, #116]	@ (8006368 <prvAddNewTaskToReadyList+0xc4>)
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	3301      	adds	r3, #1
 80062f8:	4a1b      	ldr	r2, [pc, #108]	@ (8006368 <prvAddNewTaskToReadyList+0xc4>)
 80062fa:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006300:	2201      	movs	r2, #1
 8006302:	409a      	lsls	r2, r3
 8006304:	4b19      	ldr	r3, [pc, #100]	@ (800636c <prvAddNewTaskToReadyList+0xc8>)
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	4313      	orrs	r3, r2
 800630a:	4a18      	ldr	r2, [pc, #96]	@ (800636c <prvAddNewTaskToReadyList+0xc8>)
 800630c:	6013      	str	r3, [r2, #0]
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006312:	4613      	mov	r3, r2
 8006314:	009b      	lsls	r3, r3, #2
 8006316:	4413      	add	r3, r2
 8006318:	009b      	lsls	r3, r3, #2
 800631a:	4a15      	ldr	r2, [pc, #84]	@ (8006370 <prvAddNewTaskToReadyList+0xcc>)
 800631c:	441a      	add	r2, r3
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	3304      	adds	r3, #4
 8006322:	4619      	mov	r1, r3
 8006324:	4610      	mov	r0, r2
 8006326:	f7ff f87e 	bl	8005426 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800632a:	f000 ffaf 	bl	800728c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800632e:	4b0d      	ldr	r3, [pc, #52]	@ (8006364 <prvAddNewTaskToReadyList+0xc0>)
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	2b00      	cmp	r3, #0
 8006334:	d00e      	beq.n	8006354 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006336:	4b0a      	ldr	r3, [pc, #40]	@ (8006360 <prvAddNewTaskToReadyList+0xbc>)
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006340:	429a      	cmp	r2, r3
 8006342:	d207      	bcs.n	8006354 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006344:	4b0b      	ldr	r3, [pc, #44]	@ (8006374 <prvAddNewTaskToReadyList+0xd0>)
 8006346:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800634a:	601a      	str	r2, [r3, #0]
 800634c:	f3bf 8f4f 	dsb	sy
 8006350:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006354:	bf00      	nop
 8006356:	3708      	adds	r7, #8
 8006358:	46bd      	mov	sp, r7
 800635a:	bd80      	pop	{r7, pc}
 800635c:	200004f0 	.word	0x200004f0
 8006360:	200003f0 	.word	0x200003f0
 8006364:	200004fc 	.word	0x200004fc
 8006368:	2000050c 	.word	0x2000050c
 800636c:	200004f8 	.word	0x200004f8
 8006370:	200003f4 	.word	0x200003f4
 8006374:	e000ed04 	.word	0xe000ed04

08006378 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006378:	b580      	push	{r7, lr}
 800637a:	b084      	sub	sp, #16
 800637c:	af00      	add	r7, sp, #0
 800637e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006380:	2300      	movs	r3, #0
 8006382:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	2b00      	cmp	r3, #0
 8006388:	d018      	beq.n	80063bc <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800638a:	4b14      	ldr	r3, [pc, #80]	@ (80063dc <vTaskDelay+0x64>)
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	2b00      	cmp	r3, #0
 8006390:	d00b      	beq.n	80063aa <vTaskDelay+0x32>
	__asm volatile
 8006392:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006396:	f383 8811 	msr	BASEPRI, r3
 800639a:	f3bf 8f6f 	isb	sy
 800639e:	f3bf 8f4f 	dsb	sy
 80063a2:	60bb      	str	r3, [r7, #8]
}
 80063a4:	bf00      	nop
 80063a6:	bf00      	nop
 80063a8:	e7fd      	b.n	80063a6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80063aa:	f000 f87d 	bl	80064a8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80063ae:	2100      	movs	r1, #0
 80063b0:	6878      	ldr	r0, [r7, #4]
 80063b2:	f000 fde1 	bl	8006f78 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80063b6:	f000 f885 	bl	80064c4 <xTaskResumeAll>
 80063ba:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d107      	bne.n	80063d2 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80063c2:	4b07      	ldr	r3, [pc, #28]	@ (80063e0 <vTaskDelay+0x68>)
 80063c4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80063c8:	601a      	str	r2, [r3, #0]
 80063ca:	f3bf 8f4f 	dsb	sy
 80063ce:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80063d2:	bf00      	nop
 80063d4:	3710      	adds	r7, #16
 80063d6:	46bd      	mov	sp, r7
 80063d8:	bd80      	pop	{r7, pc}
 80063da:	bf00      	nop
 80063dc:	20000518 	.word	0x20000518
 80063e0:	e000ed04 	.word	0xe000ed04

080063e4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80063e4:	b580      	push	{r7, lr}
 80063e6:	b08a      	sub	sp, #40	@ 0x28
 80063e8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80063ea:	2300      	movs	r3, #0
 80063ec:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80063ee:	2300      	movs	r3, #0
 80063f0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80063f2:	463a      	mov	r2, r7
 80063f4:	1d39      	adds	r1, r7, #4
 80063f6:	f107 0308 	add.w	r3, r7, #8
 80063fa:	4618      	mov	r0, r3
 80063fc:	f7fa fe14 	bl	8001028 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006400:	6839      	ldr	r1, [r7, #0]
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	68ba      	ldr	r2, [r7, #8]
 8006406:	9202      	str	r2, [sp, #8]
 8006408:	9301      	str	r3, [sp, #4]
 800640a:	2300      	movs	r3, #0
 800640c:	9300      	str	r3, [sp, #0]
 800640e:	2300      	movs	r3, #0
 8006410:	460a      	mov	r2, r1
 8006412:	491f      	ldr	r1, [pc, #124]	@ (8006490 <vTaskStartScheduler+0xac>)
 8006414:	481f      	ldr	r0, [pc, #124]	@ (8006494 <vTaskStartScheduler+0xb0>)
 8006416:	f7ff fe18 	bl	800604a <xTaskCreateStatic>
 800641a:	4603      	mov	r3, r0
 800641c:	4a1e      	ldr	r2, [pc, #120]	@ (8006498 <vTaskStartScheduler+0xb4>)
 800641e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006420:	4b1d      	ldr	r3, [pc, #116]	@ (8006498 <vTaskStartScheduler+0xb4>)
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	2b00      	cmp	r3, #0
 8006426:	d002      	beq.n	800642e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006428:	2301      	movs	r3, #1
 800642a:	617b      	str	r3, [r7, #20]
 800642c:	e001      	b.n	8006432 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800642e:	2300      	movs	r3, #0
 8006430:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006432:	697b      	ldr	r3, [r7, #20]
 8006434:	2b01      	cmp	r3, #1
 8006436:	d116      	bne.n	8006466 <vTaskStartScheduler+0x82>
	__asm volatile
 8006438:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800643c:	f383 8811 	msr	BASEPRI, r3
 8006440:	f3bf 8f6f 	isb	sy
 8006444:	f3bf 8f4f 	dsb	sy
 8006448:	613b      	str	r3, [r7, #16]
}
 800644a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800644c:	4b13      	ldr	r3, [pc, #76]	@ (800649c <vTaskStartScheduler+0xb8>)
 800644e:	f04f 32ff 	mov.w	r2, #4294967295
 8006452:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006454:	4b12      	ldr	r3, [pc, #72]	@ (80064a0 <vTaskStartScheduler+0xbc>)
 8006456:	2201      	movs	r2, #1
 8006458:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800645a:	4b12      	ldr	r3, [pc, #72]	@ (80064a4 <vTaskStartScheduler+0xc0>)
 800645c:	2200      	movs	r2, #0
 800645e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006460:	f000 fe72 	bl	8007148 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006464:	e00f      	b.n	8006486 <vTaskStartScheduler+0xa2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006466:	697b      	ldr	r3, [r7, #20]
 8006468:	f1b3 3fff 	cmp.w	r3, #4294967295
 800646c:	d10b      	bne.n	8006486 <vTaskStartScheduler+0xa2>
	__asm volatile
 800646e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006472:	f383 8811 	msr	BASEPRI, r3
 8006476:	f3bf 8f6f 	isb	sy
 800647a:	f3bf 8f4f 	dsb	sy
 800647e:	60fb      	str	r3, [r7, #12]
}
 8006480:	bf00      	nop
 8006482:	bf00      	nop
 8006484:	e7fd      	b.n	8006482 <vTaskStartScheduler+0x9e>
}
 8006486:	bf00      	nop
 8006488:	3718      	adds	r7, #24
 800648a:	46bd      	mov	sp, r7
 800648c:	bd80      	pop	{r7, pc}
 800648e:	bf00      	nop
 8006490:	08008bf8 	.word	0x08008bf8
 8006494:	08006a4d 	.word	0x08006a4d
 8006498:	20000514 	.word	0x20000514
 800649c:	20000510 	.word	0x20000510
 80064a0:	200004fc 	.word	0x200004fc
 80064a4:	200004f4 	.word	0x200004f4

080064a8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80064a8:	b480      	push	{r7}
 80064aa:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80064ac:	4b04      	ldr	r3, [pc, #16]	@ (80064c0 <vTaskSuspendAll+0x18>)
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	3301      	adds	r3, #1
 80064b2:	4a03      	ldr	r2, [pc, #12]	@ (80064c0 <vTaskSuspendAll+0x18>)
 80064b4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80064b6:	bf00      	nop
 80064b8:	46bd      	mov	sp, r7
 80064ba:	bc80      	pop	{r7}
 80064bc:	4770      	bx	lr
 80064be:	bf00      	nop
 80064c0:	20000518 	.word	0x20000518

080064c4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80064c4:	b580      	push	{r7, lr}
 80064c6:	b084      	sub	sp, #16
 80064c8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80064ca:	2300      	movs	r3, #0
 80064cc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80064ce:	2300      	movs	r3, #0
 80064d0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80064d2:	4b42      	ldr	r3, [pc, #264]	@ (80065dc <xTaskResumeAll+0x118>)
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d10b      	bne.n	80064f2 <xTaskResumeAll+0x2e>
	__asm volatile
 80064da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064de:	f383 8811 	msr	BASEPRI, r3
 80064e2:	f3bf 8f6f 	isb	sy
 80064e6:	f3bf 8f4f 	dsb	sy
 80064ea:	603b      	str	r3, [r7, #0]
}
 80064ec:	bf00      	nop
 80064ee:	bf00      	nop
 80064f0:	e7fd      	b.n	80064ee <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80064f2:	f000 fe9b 	bl	800722c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80064f6:	4b39      	ldr	r3, [pc, #228]	@ (80065dc <xTaskResumeAll+0x118>)
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	3b01      	subs	r3, #1
 80064fc:	4a37      	ldr	r2, [pc, #220]	@ (80065dc <xTaskResumeAll+0x118>)
 80064fe:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006500:	4b36      	ldr	r3, [pc, #216]	@ (80065dc <xTaskResumeAll+0x118>)
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	2b00      	cmp	r3, #0
 8006506:	d161      	bne.n	80065cc <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006508:	4b35      	ldr	r3, [pc, #212]	@ (80065e0 <xTaskResumeAll+0x11c>)
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	2b00      	cmp	r3, #0
 800650e:	d05d      	beq.n	80065cc <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006510:	e02e      	b.n	8006570 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006512:	4b34      	ldr	r3, [pc, #208]	@ (80065e4 <xTaskResumeAll+0x120>)
 8006514:	68db      	ldr	r3, [r3, #12]
 8006516:	68db      	ldr	r3, [r3, #12]
 8006518:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	3318      	adds	r3, #24
 800651e:	4618      	mov	r0, r3
 8006520:	f7fe ffdc 	bl	80054dc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	3304      	adds	r3, #4
 8006528:	4618      	mov	r0, r3
 800652a:	f7fe ffd7 	bl	80054dc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006532:	2201      	movs	r2, #1
 8006534:	409a      	lsls	r2, r3
 8006536:	4b2c      	ldr	r3, [pc, #176]	@ (80065e8 <xTaskResumeAll+0x124>)
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	4313      	orrs	r3, r2
 800653c:	4a2a      	ldr	r2, [pc, #168]	@ (80065e8 <xTaskResumeAll+0x124>)
 800653e:	6013      	str	r3, [r2, #0]
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006544:	4613      	mov	r3, r2
 8006546:	009b      	lsls	r3, r3, #2
 8006548:	4413      	add	r3, r2
 800654a:	009b      	lsls	r3, r3, #2
 800654c:	4a27      	ldr	r2, [pc, #156]	@ (80065ec <xTaskResumeAll+0x128>)
 800654e:	441a      	add	r2, r3
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	3304      	adds	r3, #4
 8006554:	4619      	mov	r1, r3
 8006556:	4610      	mov	r0, r2
 8006558:	f7fe ff65 	bl	8005426 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006560:	4b23      	ldr	r3, [pc, #140]	@ (80065f0 <xTaskResumeAll+0x12c>)
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006566:	429a      	cmp	r2, r3
 8006568:	d302      	bcc.n	8006570 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800656a:	4b22      	ldr	r3, [pc, #136]	@ (80065f4 <xTaskResumeAll+0x130>)
 800656c:	2201      	movs	r2, #1
 800656e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006570:	4b1c      	ldr	r3, [pc, #112]	@ (80065e4 <xTaskResumeAll+0x120>)
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	2b00      	cmp	r3, #0
 8006576:	d1cc      	bne.n	8006512 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	2b00      	cmp	r3, #0
 800657c:	d001      	beq.n	8006582 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800657e:	f000 fb1b 	bl	8006bb8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006582:	4b1d      	ldr	r3, [pc, #116]	@ (80065f8 <xTaskResumeAll+0x134>)
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	2b00      	cmp	r3, #0
 800658c:	d010      	beq.n	80065b0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800658e:	f000 f837 	bl	8006600 <xTaskIncrementTick>
 8006592:	4603      	mov	r3, r0
 8006594:	2b00      	cmp	r3, #0
 8006596:	d002      	beq.n	800659e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8006598:	4b16      	ldr	r3, [pc, #88]	@ (80065f4 <xTaskResumeAll+0x130>)
 800659a:	2201      	movs	r2, #1
 800659c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	3b01      	subs	r3, #1
 80065a2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d1f1      	bne.n	800658e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80065aa:	4b13      	ldr	r3, [pc, #76]	@ (80065f8 <xTaskResumeAll+0x134>)
 80065ac:	2200      	movs	r2, #0
 80065ae:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80065b0:	4b10      	ldr	r3, [pc, #64]	@ (80065f4 <xTaskResumeAll+0x130>)
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d009      	beq.n	80065cc <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80065b8:	2301      	movs	r3, #1
 80065ba:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80065bc:	4b0f      	ldr	r3, [pc, #60]	@ (80065fc <xTaskResumeAll+0x138>)
 80065be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80065c2:	601a      	str	r2, [r3, #0]
 80065c4:	f3bf 8f4f 	dsb	sy
 80065c8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80065cc:	f000 fe5e 	bl	800728c <vPortExitCritical>

	return xAlreadyYielded;
 80065d0:	68bb      	ldr	r3, [r7, #8]
}
 80065d2:	4618      	mov	r0, r3
 80065d4:	3710      	adds	r7, #16
 80065d6:	46bd      	mov	sp, r7
 80065d8:	bd80      	pop	{r7, pc}
 80065da:	bf00      	nop
 80065dc:	20000518 	.word	0x20000518
 80065e0:	200004f0 	.word	0x200004f0
 80065e4:	200004b0 	.word	0x200004b0
 80065e8:	200004f8 	.word	0x200004f8
 80065ec:	200003f4 	.word	0x200003f4
 80065f0:	200003f0 	.word	0x200003f0
 80065f4:	20000504 	.word	0x20000504
 80065f8:	20000500 	.word	0x20000500
 80065fc:	e000ed04 	.word	0xe000ed04

08006600 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006600:	b580      	push	{r7, lr}
 8006602:	b086      	sub	sp, #24
 8006604:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006606:	2300      	movs	r3, #0
 8006608:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800660a:	4b4f      	ldr	r3, [pc, #316]	@ (8006748 <xTaskIncrementTick+0x148>)
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	2b00      	cmp	r3, #0
 8006610:	f040 808f 	bne.w	8006732 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006614:	4b4d      	ldr	r3, [pc, #308]	@ (800674c <xTaskIncrementTick+0x14c>)
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	3301      	adds	r3, #1
 800661a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800661c:	4a4b      	ldr	r2, [pc, #300]	@ (800674c <xTaskIncrementTick+0x14c>)
 800661e:	693b      	ldr	r3, [r7, #16]
 8006620:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006622:	693b      	ldr	r3, [r7, #16]
 8006624:	2b00      	cmp	r3, #0
 8006626:	d121      	bne.n	800666c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8006628:	4b49      	ldr	r3, [pc, #292]	@ (8006750 <xTaskIncrementTick+0x150>)
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	2b00      	cmp	r3, #0
 8006630:	d00b      	beq.n	800664a <xTaskIncrementTick+0x4a>
	__asm volatile
 8006632:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006636:	f383 8811 	msr	BASEPRI, r3
 800663a:	f3bf 8f6f 	isb	sy
 800663e:	f3bf 8f4f 	dsb	sy
 8006642:	603b      	str	r3, [r7, #0]
}
 8006644:	bf00      	nop
 8006646:	bf00      	nop
 8006648:	e7fd      	b.n	8006646 <xTaskIncrementTick+0x46>
 800664a:	4b41      	ldr	r3, [pc, #260]	@ (8006750 <xTaskIncrementTick+0x150>)
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	60fb      	str	r3, [r7, #12]
 8006650:	4b40      	ldr	r3, [pc, #256]	@ (8006754 <xTaskIncrementTick+0x154>)
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	4a3e      	ldr	r2, [pc, #248]	@ (8006750 <xTaskIncrementTick+0x150>)
 8006656:	6013      	str	r3, [r2, #0]
 8006658:	4a3e      	ldr	r2, [pc, #248]	@ (8006754 <xTaskIncrementTick+0x154>)
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	6013      	str	r3, [r2, #0]
 800665e:	4b3e      	ldr	r3, [pc, #248]	@ (8006758 <xTaskIncrementTick+0x158>)
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	3301      	adds	r3, #1
 8006664:	4a3c      	ldr	r2, [pc, #240]	@ (8006758 <xTaskIncrementTick+0x158>)
 8006666:	6013      	str	r3, [r2, #0]
 8006668:	f000 faa6 	bl	8006bb8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800666c:	4b3b      	ldr	r3, [pc, #236]	@ (800675c <xTaskIncrementTick+0x15c>)
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	693a      	ldr	r2, [r7, #16]
 8006672:	429a      	cmp	r2, r3
 8006674:	d348      	bcc.n	8006708 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006676:	4b36      	ldr	r3, [pc, #216]	@ (8006750 <xTaskIncrementTick+0x150>)
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	2b00      	cmp	r3, #0
 800667e:	d104      	bne.n	800668a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006680:	4b36      	ldr	r3, [pc, #216]	@ (800675c <xTaskIncrementTick+0x15c>)
 8006682:	f04f 32ff 	mov.w	r2, #4294967295
 8006686:	601a      	str	r2, [r3, #0]
					break;
 8006688:	e03e      	b.n	8006708 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800668a:	4b31      	ldr	r3, [pc, #196]	@ (8006750 <xTaskIncrementTick+0x150>)
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	68db      	ldr	r3, [r3, #12]
 8006690:	68db      	ldr	r3, [r3, #12]
 8006692:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006694:	68bb      	ldr	r3, [r7, #8]
 8006696:	685b      	ldr	r3, [r3, #4]
 8006698:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800669a:	693a      	ldr	r2, [r7, #16]
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	429a      	cmp	r2, r3
 80066a0:	d203      	bcs.n	80066aa <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80066a2:	4a2e      	ldr	r2, [pc, #184]	@ (800675c <xTaskIncrementTick+0x15c>)
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80066a8:	e02e      	b.n	8006708 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80066aa:	68bb      	ldr	r3, [r7, #8]
 80066ac:	3304      	adds	r3, #4
 80066ae:	4618      	mov	r0, r3
 80066b0:	f7fe ff14 	bl	80054dc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80066b4:	68bb      	ldr	r3, [r7, #8]
 80066b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d004      	beq.n	80066c6 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80066bc:	68bb      	ldr	r3, [r7, #8]
 80066be:	3318      	adds	r3, #24
 80066c0:	4618      	mov	r0, r3
 80066c2:	f7fe ff0b 	bl	80054dc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80066c6:	68bb      	ldr	r3, [r7, #8]
 80066c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066ca:	2201      	movs	r2, #1
 80066cc:	409a      	lsls	r2, r3
 80066ce:	4b24      	ldr	r3, [pc, #144]	@ (8006760 <xTaskIncrementTick+0x160>)
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	4313      	orrs	r3, r2
 80066d4:	4a22      	ldr	r2, [pc, #136]	@ (8006760 <xTaskIncrementTick+0x160>)
 80066d6:	6013      	str	r3, [r2, #0]
 80066d8:	68bb      	ldr	r3, [r7, #8]
 80066da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80066dc:	4613      	mov	r3, r2
 80066de:	009b      	lsls	r3, r3, #2
 80066e0:	4413      	add	r3, r2
 80066e2:	009b      	lsls	r3, r3, #2
 80066e4:	4a1f      	ldr	r2, [pc, #124]	@ (8006764 <xTaskIncrementTick+0x164>)
 80066e6:	441a      	add	r2, r3
 80066e8:	68bb      	ldr	r3, [r7, #8]
 80066ea:	3304      	adds	r3, #4
 80066ec:	4619      	mov	r1, r3
 80066ee:	4610      	mov	r0, r2
 80066f0:	f7fe fe99 	bl	8005426 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80066f4:	68bb      	ldr	r3, [r7, #8]
 80066f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80066f8:	4b1b      	ldr	r3, [pc, #108]	@ (8006768 <xTaskIncrementTick+0x168>)
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066fe:	429a      	cmp	r2, r3
 8006700:	d3b9      	bcc.n	8006676 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8006702:	2301      	movs	r3, #1
 8006704:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006706:	e7b6      	b.n	8006676 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006708:	4b17      	ldr	r3, [pc, #92]	@ (8006768 <xTaskIncrementTick+0x168>)
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800670e:	4915      	ldr	r1, [pc, #84]	@ (8006764 <xTaskIncrementTick+0x164>)
 8006710:	4613      	mov	r3, r2
 8006712:	009b      	lsls	r3, r3, #2
 8006714:	4413      	add	r3, r2
 8006716:	009b      	lsls	r3, r3, #2
 8006718:	440b      	add	r3, r1
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	2b01      	cmp	r3, #1
 800671e:	d901      	bls.n	8006724 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8006720:	2301      	movs	r3, #1
 8006722:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006724:	4b11      	ldr	r3, [pc, #68]	@ (800676c <xTaskIncrementTick+0x16c>)
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	2b00      	cmp	r3, #0
 800672a:	d007      	beq.n	800673c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800672c:	2301      	movs	r3, #1
 800672e:	617b      	str	r3, [r7, #20]
 8006730:	e004      	b.n	800673c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006732:	4b0f      	ldr	r3, [pc, #60]	@ (8006770 <xTaskIncrementTick+0x170>)
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	3301      	adds	r3, #1
 8006738:	4a0d      	ldr	r2, [pc, #52]	@ (8006770 <xTaskIncrementTick+0x170>)
 800673a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800673c:	697b      	ldr	r3, [r7, #20]
}
 800673e:	4618      	mov	r0, r3
 8006740:	3718      	adds	r7, #24
 8006742:	46bd      	mov	sp, r7
 8006744:	bd80      	pop	{r7, pc}
 8006746:	bf00      	nop
 8006748:	20000518 	.word	0x20000518
 800674c:	200004f4 	.word	0x200004f4
 8006750:	200004a8 	.word	0x200004a8
 8006754:	200004ac 	.word	0x200004ac
 8006758:	20000508 	.word	0x20000508
 800675c:	20000510 	.word	0x20000510
 8006760:	200004f8 	.word	0x200004f8
 8006764:	200003f4 	.word	0x200003f4
 8006768:	200003f0 	.word	0x200003f0
 800676c:	20000504 	.word	0x20000504
 8006770:	20000500 	.word	0x20000500

08006774 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006774:	b480      	push	{r7}
 8006776:	b087      	sub	sp, #28
 8006778:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800677a:	4b27      	ldr	r3, [pc, #156]	@ (8006818 <vTaskSwitchContext+0xa4>)
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	2b00      	cmp	r3, #0
 8006780:	d003      	beq.n	800678a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006782:	4b26      	ldr	r3, [pc, #152]	@ (800681c <vTaskSwitchContext+0xa8>)
 8006784:	2201      	movs	r2, #1
 8006786:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006788:	e040      	b.n	800680c <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 800678a:	4b24      	ldr	r3, [pc, #144]	@ (800681c <vTaskSwitchContext+0xa8>)
 800678c:	2200      	movs	r2, #0
 800678e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006790:	4b23      	ldr	r3, [pc, #140]	@ (8006820 <vTaskSwitchContext+0xac>)
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	fab3 f383 	clz	r3, r3
 800679c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800679e:	7afb      	ldrb	r3, [r7, #11]
 80067a0:	f1c3 031f 	rsb	r3, r3, #31
 80067a4:	617b      	str	r3, [r7, #20]
 80067a6:	491f      	ldr	r1, [pc, #124]	@ (8006824 <vTaskSwitchContext+0xb0>)
 80067a8:	697a      	ldr	r2, [r7, #20]
 80067aa:	4613      	mov	r3, r2
 80067ac:	009b      	lsls	r3, r3, #2
 80067ae:	4413      	add	r3, r2
 80067b0:	009b      	lsls	r3, r3, #2
 80067b2:	440b      	add	r3, r1
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d10b      	bne.n	80067d2 <vTaskSwitchContext+0x5e>
	__asm volatile
 80067ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067be:	f383 8811 	msr	BASEPRI, r3
 80067c2:	f3bf 8f6f 	isb	sy
 80067c6:	f3bf 8f4f 	dsb	sy
 80067ca:	607b      	str	r3, [r7, #4]
}
 80067cc:	bf00      	nop
 80067ce:	bf00      	nop
 80067d0:	e7fd      	b.n	80067ce <vTaskSwitchContext+0x5a>
 80067d2:	697a      	ldr	r2, [r7, #20]
 80067d4:	4613      	mov	r3, r2
 80067d6:	009b      	lsls	r3, r3, #2
 80067d8:	4413      	add	r3, r2
 80067da:	009b      	lsls	r3, r3, #2
 80067dc:	4a11      	ldr	r2, [pc, #68]	@ (8006824 <vTaskSwitchContext+0xb0>)
 80067de:	4413      	add	r3, r2
 80067e0:	613b      	str	r3, [r7, #16]
 80067e2:	693b      	ldr	r3, [r7, #16]
 80067e4:	685b      	ldr	r3, [r3, #4]
 80067e6:	685a      	ldr	r2, [r3, #4]
 80067e8:	693b      	ldr	r3, [r7, #16]
 80067ea:	605a      	str	r2, [r3, #4]
 80067ec:	693b      	ldr	r3, [r7, #16]
 80067ee:	685a      	ldr	r2, [r3, #4]
 80067f0:	693b      	ldr	r3, [r7, #16]
 80067f2:	3308      	adds	r3, #8
 80067f4:	429a      	cmp	r2, r3
 80067f6:	d104      	bne.n	8006802 <vTaskSwitchContext+0x8e>
 80067f8:	693b      	ldr	r3, [r7, #16]
 80067fa:	685b      	ldr	r3, [r3, #4]
 80067fc:	685a      	ldr	r2, [r3, #4]
 80067fe:	693b      	ldr	r3, [r7, #16]
 8006800:	605a      	str	r2, [r3, #4]
 8006802:	693b      	ldr	r3, [r7, #16]
 8006804:	685b      	ldr	r3, [r3, #4]
 8006806:	68db      	ldr	r3, [r3, #12]
 8006808:	4a07      	ldr	r2, [pc, #28]	@ (8006828 <vTaskSwitchContext+0xb4>)
 800680a:	6013      	str	r3, [r2, #0]
}
 800680c:	bf00      	nop
 800680e:	371c      	adds	r7, #28
 8006810:	46bd      	mov	sp, r7
 8006812:	bc80      	pop	{r7}
 8006814:	4770      	bx	lr
 8006816:	bf00      	nop
 8006818:	20000518 	.word	0x20000518
 800681c:	20000504 	.word	0x20000504
 8006820:	200004f8 	.word	0x200004f8
 8006824:	200003f4 	.word	0x200003f4
 8006828:	200003f0 	.word	0x200003f0

0800682c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800682c:	b580      	push	{r7, lr}
 800682e:	b084      	sub	sp, #16
 8006830:	af00      	add	r7, sp, #0
 8006832:	6078      	str	r0, [r7, #4]
 8006834:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	2b00      	cmp	r3, #0
 800683a:	d10b      	bne.n	8006854 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800683c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006840:	f383 8811 	msr	BASEPRI, r3
 8006844:	f3bf 8f6f 	isb	sy
 8006848:	f3bf 8f4f 	dsb	sy
 800684c:	60fb      	str	r3, [r7, #12]
}
 800684e:	bf00      	nop
 8006850:	bf00      	nop
 8006852:	e7fd      	b.n	8006850 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006854:	4b07      	ldr	r3, [pc, #28]	@ (8006874 <vTaskPlaceOnEventList+0x48>)
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	3318      	adds	r3, #24
 800685a:	4619      	mov	r1, r3
 800685c:	6878      	ldr	r0, [r7, #4]
 800685e:	f7fe fe05 	bl	800546c <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006862:	2101      	movs	r1, #1
 8006864:	6838      	ldr	r0, [r7, #0]
 8006866:	f000 fb87 	bl	8006f78 <prvAddCurrentTaskToDelayedList>
}
 800686a:	bf00      	nop
 800686c:	3710      	adds	r7, #16
 800686e:	46bd      	mov	sp, r7
 8006870:	bd80      	pop	{r7, pc}
 8006872:	bf00      	nop
 8006874:	200003f0 	.word	0x200003f0

08006878 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006878:	b580      	push	{r7, lr}
 800687a:	b086      	sub	sp, #24
 800687c:	af00      	add	r7, sp, #0
 800687e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	68db      	ldr	r3, [r3, #12]
 8006884:	68db      	ldr	r3, [r3, #12]
 8006886:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006888:	693b      	ldr	r3, [r7, #16]
 800688a:	2b00      	cmp	r3, #0
 800688c:	d10b      	bne.n	80068a6 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800688e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006892:	f383 8811 	msr	BASEPRI, r3
 8006896:	f3bf 8f6f 	isb	sy
 800689a:	f3bf 8f4f 	dsb	sy
 800689e:	60fb      	str	r3, [r7, #12]
}
 80068a0:	bf00      	nop
 80068a2:	bf00      	nop
 80068a4:	e7fd      	b.n	80068a2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80068a6:	693b      	ldr	r3, [r7, #16]
 80068a8:	3318      	adds	r3, #24
 80068aa:	4618      	mov	r0, r3
 80068ac:	f7fe fe16 	bl	80054dc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80068b0:	4b1d      	ldr	r3, [pc, #116]	@ (8006928 <xTaskRemoveFromEventList+0xb0>)
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d11c      	bne.n	80068f2 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80068b8:	693b      	ldr	r3, [r7, #16]
 80068ba:	3304      	adds	r3, #4
 80068bc:	4618      	mov	r0, r3
 80068be:	f7fe fe0d 	bl	80054dc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80068c2:	693b      	ldr	r3, [r7, #16]
 80068c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068c6:	2201      	movs	r2, #1
 80068c8:	409a      	lsls	r2, r3
 80068ca:	4b18      	ldr	r3, [pc, #96]	@ (800692c <xTaskRemoveFromEventList+0xb4>)
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	4313      	orrs	r3, r2
 80068d0:	4a16      	ldr	r2, [pc, #88]	@ (800692c <xTaskRemoveFromEventList+0xb4>)
 80068d2:	6013      	str	r3, [r2, #0]
 80068d4:	693b      	ldr	r3, [r7, #16]
 80068d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80068d8:	4613      	mov	r3, r2
 80068da:	009b      	lsls	r3, r3, #2
 80068dc:	4413      	add	r3, r2
 80068de:	009b      	lsls	r3, r3, #2
 80068e0:	4a13      	ldr	r2, [pc, #76]	@ (8006930 <xTaskRemoveFromEventList+0xb8>)
 80068e2:	441a      	add	r2, r3
 80068e4:	693b      	ldr	r3, [r7, #16]
 80068e6:	3304      	adds	r3, #4
 80068e8:	4619      	mov	r1, r3
 80068ea:	4610      	mov	r0, r2
 80068ec:	f7fe fd9b 	bl	8005426 <vListInsertEnd>
 80068f0:	e005      	b.n	80068fe <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80068f2:	693b      	ldr	r3, [r7, #16]
 80068f4:	3318      	adds	r3, #24
 80068f6:	4619      	mov	r1, r3
 80068f8:	480e      	ldr	r0, [pc, #56]	@ (8006934 <xTaskRemoveFromEventList+0xbc>)
 80068fa:	f7fe fd94 	bl	8005426 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80068fe:	693b      	ldr	r3, [r7, #16]
 8006900:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006902:	4b0d      	ldr	r3, [pc, #52]	@ (8006938 <xTaskRemoveFromEventList+0xc0>)
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006908:	429a      	cmp	r2, r3
 800690a:	d905      	bls.n	8006918 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800690c:	2301      	movs	r3, #1
 800690e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006910:	4b0a      	ldr	r3, [pc, #40]	@ (800693c <xTaskRemoveFromEventList+0xc4>)
 8006912:	2201      	movs	r2, #1
 8006914:	601a      	str	r2, [r3, #0]
 8006916:	e001      	b.n	800691c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8006918:	2300      	movs	r3, #0
 800691a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800691c:	697b      	ldr	r3, [r7, #20]
}
 800691e:	4618      	mov	r0, r3
 8006920:	3718      	adds	r7, #24
 8006922:	46bd      	mov	sp, r7
 8006924:	bd80      	pop	{r7, pc}
 8006926:	bf00      	nop
 8006928:	20000518 	.word	0x20000518
 800692c:	200004f8 	.word	0x200004f8
 8006930:	200003f4 	.word	0x200003f4
 8006934:	200004b0 	.word	0x200004b0
 8006938:	200003f0 	.word	0x200003f0
 800693c:	20000504 	.word	0x20000504

08006940 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006940:	b480      	push	{r7}
 8006942:	b083      	sub	sp, #12
 8006944:	af00      	add	r7, sp, #0
 8006946:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006948:	4b06      	ldr	r3, [pc, #24]	@ (8006964 <vTaskInternalSetTimeOutState+0x24>)
 800694a:	681a      	ldr	r2, [r3, #0]
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006950:	4b05      	ldr	r3, [pc, #20]	@ (8006968 <vTaskInternalSetTimeOutState+0x28>)
 8006952:	681a      	ldr	r2, [r3, #0]
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	605a      	str	r2, [r3, #4]
}
 8006958:	bf00      	nop
 800695a:	370c      	adds	r7, #12
 800695c:	46bd      	mov	sp, r7
 800695e:	bc80      	pop	{r7}
 8006960:	4770      	bx	lr
 8006962:	bf00      	nop
 8006964:	20000508 	.word	0x20000508
 8006968:	200004f4 	.word	0x200004f4

0800696c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800696c:	b580      	push	{r7, lr}
 800696e:	b088      	sub	sp, #32
 8006970:	af00      	add	r7, sp, #0
 8006972:	6078      	str	r0, [r7, #4]
 8006974:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	2b00      	cmp	r3, #0
 800697a:	d10b      	bne.n	8006994 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800697c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006980:	f383 8811 	msr	BASEPRI, r3
 8006984:	f3bf 8f6f 	isb	sy
 8006988:	f3bf 8f4f 	dsb	sy
 800698c:	613b      	str	r3, [r7, #16]
}
 800698e:	bf00      	nop
 8006990:	bf00      	nop
 8006992:	e7fd      	b.n	8006990 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006994:	683b      	ldr	r3, [r7, #0]
 8006996:	2b00      	cmp	r3, #0
 8006998:	d10b      	bne.n	80069b2 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800699a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800699e:	f383 8811 	msr	BASEPRI, r3
 80069a2:	f3bf 8f6f 	isb	sy
 80069a6:	f3bf 8f4f 	dsb	sy
 80069aa:	60fb      	str	r3, [r7, #12]
}
 80069ac:	bf00      	nop
 80069ae:	bf00      	nop
 80069b0:	e7fd      	b.n	80069ae <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80069b2:	f000 fc3b 	bl	800722c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80069b6:	4b1d      	ldr	r3, [pc, #116]	@ (8006a2c <xTaskCheckForTimeOut+0xc0>)
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	685b      	ldr	r3, [r3, #4]
 80069c0:	69ba      	ldr	r2, [r7, #24]
 80069c2:	1ad3      	subs	r3, r2, r3
 80069c4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80069c6:	683b      	ldr	r3, [r7, #0]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069ce:	d102      	bne.n	80069d6 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80069d0:	2300      	movs	r3, #0
 80069d2:	61fb      	str	r3, [r7, #28]
 80069d4:	e023      	b.n	8006a1e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681a      	ldr	r2, [r3, #0]
 80069da:	4b15      	ldr	r3, [pc, #84]	@ (8006a30 <xTaskCheckForTimeOut+0xc4>)
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	429a      	cmp	r2, r3
 80069e0:	d007      	beq.n	80069f2 <xTaskCheckForTimeOut+0x86>
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	685b      	ldr	r3, [r3, #4]
 80069e6:	69ba      	ldr	r2, [r7, #24]
 80069e8:	429a      	cmp	r2, r3
 80069ea:	d302      	bcc.n	80069f2 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80069ec:	2301      	movs	r3, #1
 80069ee:	61fb      	str	r3, [r7, #28]
 80069f0:	e015      	b.n	8006a1e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80069f2:	683b      	ldr	r3, [r7, #0]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	697a      	ldr	r2, [r7, #20]
 80069f8:	429a      	cmp	r2, r3
 80069fa:	d20b      	bcs.n	8006a14 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80069fc:	683b      	ldr	r3, [r7, #0]
 80069fe:	681a      	ldr	r2, [r3, #0]
 8006a00:	697b      	ldr	r3, [r7, #20]
 8006a02:	1ad2      	subs	r2, r2, r3
 8006a04:	683b      	ldr	r3, [r7, #0]
 8006a06:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006a08:	6878      	ldr	r0, [r7, #4]
 8006a0a:	f7ff ff99 	bl	8006940 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006a0e:	2300      	movs	r3, #0
 8006a10:	61fb      	str	r3, [r7, #28]
 8006a12:	e004      	b.n	8006a1e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8006a14:	683b      	ldr	r3, [r7, #0]
 8006a16:	2200      	movs	r2, #0
 8006a18:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006a1a:	2301      	movs	r3, #1
 8006a1c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006a1e:	f000 fc35 	bl	800728c <vPortExitCritical>

	return xReturn;
 8006a22:	69fb      	ldr	r3, [r7, #28]
}
 8006a24:	4618      	mov	r0, r3
 8006a26:	3720      	adds	r7, #32
 8006a28:	46bd      	mov	sp, r7
 8006a2a:	bd80      	pop	{r7, pc}
 8006a2c:	200004f4 	.word	0x200004f4
 8006a30:	20000508 	.word	0x20000508

08006a34 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006a34:	b480      	push	{r7}
 8006a36:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006a38:	4b03      	ldr	r3, [pc, #12]	@ (8006a48 <vTaskMissedYield+0x14>)
 8006a3a:	2201      	movs	r2, #1
 8006a3c:	601a      	str	r2, [r3, #0]
}
 8006a3e:	bf00      	nop
 8006a40:	46bd      	mov	sp, r7
 8006a42:	bc80      	pop	{r7}
 8006a44:	4770      	bx	lr
 8006a46:	bf00      	nop
 8006a48:	20000504 	.word	0x20000504

08006a4c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006a4c:	b580      	push	{r7, lr}
 8006a4e:	b082      	sub	sp, #8
 8006a50:	af00      	add	r7, sp, #0
 8006a52:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006a54:	f000 f852 	bl	8006afc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006a58:	4b06      	ldr	r3, [pc, #24]	@ (8006a74 <prvIdleTask+0x28>)
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	2b01      	cmp	r3, #1
 8006a5e:	d9f9      	bls.n	8006a54 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006a60:	4b05      	ldr	r3, [pc, #20]	@ (8006a78 <prvIdleTask+0x2c>)
 8006a62:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006a66:	601a      	str	r2, [r3, #0]
 8006a68:	f3bf 8f4f 	dsb	sy
 8006a6c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006a70:	e7f0      	b.n	8006a54 <prvIdleTask+0x8>
 8006a72:	bf00      	nop
 8006a74:	200003f4 	.word	0x200003f4
 8006a78:	e000ed04 	.word	0xe000ed04

08006a7c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006a7c:	b580      	push	{r7, lr}
 8006a7e:	b082      	sub	sp, #8
 8006a80:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006a82:	2300      	movs	r3, #0
 8006a84:	607b      	str	r3, [r7, #4]
 8006a86:	e00c      	b.n	8006aa2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006a88:	687a      	ldr	r2, [r7, #4]
 8006a8a:	4613      	mov	r3, r2
 8006a8c:	009b      	lsls	r3, r3, #2
 8006a8e:	4413      	add	r3, r2
 8006a90:	009b      	lsls	r3, r3, #2
 8006a92:	4a12      	ldr	r2, [pc, #72]	@ (8006adc <prvInitialiseTaskLists+0x60>)
 8006a94:	4413      	add	r3, r2
 8006a96:	4618      	mov	r0, r3
 8006a98:	f7fe fc9a 	bl	80053d0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	3301      	adds	r3, #1
 8006aa0:	607b      	str	r3, [r7, #4]
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	2b06      	cmp	r3, #6
 8006aa6:	d9ef      	bls.n	8006a88 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006aa8:	480d      	ldr	r0, [pc, #52]	@ (8006ae0 <prvInitialiseTaskLists+0x64>)
 8006aaa:	f7fe fc91 	bl	80053d0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006aae:	480d      	ldr	r0, [pc, #52]	@ (8006ae4 <prvInitialiseTaskLists+0x68>)
 8006ab0:	f7fe fc8e 	bl	80053d0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006ab4:	480c      	ldr	r0, [pc, #48]	@ (8006ae8 <prvInitialiseTaskLists+0x6c>)
 8006ab6:	f7fe fc8b 	bl	80053d0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006aba:	480c      	ldr	r0, [pc, #48]	@ (8006aec <prvInitialiseTaskLists+0x70>)
 8006abc:	f7fe fc88 	bl	80053d0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006ac0:	480b      	ldr	r0, [pc, #44]	@ (8006af0 <prvInitialiseTaskLists+0x74>)
 8006ac2:	f7fe fc85 	bl	80053d0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006ac6:	4b0b      	ldr	r3, [pc, #44]	@ (8006af4 <prvInitialiseTaskLists+0x78>)
 8006ac8:	4a05      	ldr	r2, [pc, #20]	@ (8006ae0 <prvInitialiseTaskLists+0x64>)
 8006aca:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006acc:	4b0a      	ldr	r3, [pc, #40]	@ (8006af8 <prvInitialiseTaskLists+0x7c>)
 8006ace:	4a05      	ldr	r2, [pc, #20]	@ (8006ae4 <prvInitialiseTaskLists+0x68>)
 8006ad0:	601a      	str	r2, [r3, #0]
}
 8006ad2:	bf00      	nop
 8006ad4:	3708      	adds	r7, #8
 8006ad6:	46bd      	mov	sp, r7
 8006ad8:	bd80      	pop	{r7, pc}
 8006ada:	bf00      	nop
 8006adc:	200003f4 	.word	0x200003f4
 8006ae0:	20000480 	.word	0x20000480
 8006ae4:	20000494 	.word	0x20000494
 8006ae8:	200004b0 	.word	0x200004b0
 8006aec:	200004c4 	.word	0x200004c4
 8006af0:	200004dc 	.word	0x200004dc
 8006af4:	200004a8 	.word	0x200004a8
 8006af8:	200004ac 	.word	0x200004ac

08006afc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006afc:	b580      	push	{r7, lr}
 8006afe:	b082      	sub	sp, #8
 8006b00:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006b02:	e019      	b.n	8006b38 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006b04:	f000 fb92 	bl	800722c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006b08:	4b10      	ldr	r3, [pc, #64]	@ (8006b4c <prvCheckTasksWaitingTermination+0x50>)
 8006b0a:	68db      	ldr	r3, [r3, #12]
 8006b0c:	68db      	ldr	r3, [r3, #12]
 8006b0e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	3304      	adds	r3, #4
 8006b14:	4618      	mov	r0, r3
 8006b16:	f7fe fce1 	bl	80054dc <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006b1a:	4b0d      	ldr	r3, [pc, #52]	@ (8006b50 <prvCheckTasksWaitingTermination+0x54>)
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	3b01      	subs	r3, #1
 8006b20:	4a0b      	ldr	r2, [pc, #44]	@ (8006b50 <prvCheckTasksWaitingTermination+0x54>)
 8006b22:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006b24:	4b0b      	ldr	r3, [pc, #44]	@ (8006b54 <prvCheckTasksWaitingTermination+0x58>)
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	3b01      	subs	r3, #1
 8006b2a:	4a0a      	ldr	r2, [pc, #40]	@ (8006b54 <prvCheckTasksWaitingTermination+0x58>)
 8006b2c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006b2e:	f000 fbad 	bl	800728c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006b32:	6878      	ldr	r0, [r7, #4]
 8006b34:	f000 f810 	bl	8006b58 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006b38:	4b06      	ldr	r3, [pc, #24]	@ (8006b54 <prvCheckTasksWaitingTermination+0x58>)
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d1e1      	bne.n	8006b04 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006b40:	bf00      	nop
 8006b42:	bf00      	nop
 8006b44:	3708      	adds	r7, #8
 8006b46:	46bd      	mov	sp, r7
 8006b48:	bd80      	pop	{r7, pc}
 8006b4a:	bf00      	nop
 8006b4c:	200004c4 	.word	0x200004c4
 8006b50:	200004f0 	.word	0x200004f0
 8006b54:	200004d8 	.word	0x200004d8

08006b58 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006b58:	b580      	push	{r7, lr}
 8006b5a:	b084      	sub	sp, #16
 8006b5c:	af00      	add	r7, sp, #0
 8006b5e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d108      	bne.n	8006b7c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b6e:	4618      	mov	r0, r3
 8006b70:	f000 fd2c 	bl	80075cc <vPortFree>
				vPortFree( pxTCB );
 8006b74:	6878      	ldr	r0, [r7, #4]
 8006b76:	f000 fd29 	bl	80075cc <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006b7a:	e019      	b.n	8006bb0 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006b82:	2b01      	cmp	r3, #1
 8006b84:	d103      	bne.n	8006b8e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8006b86:	6878      	ldr	r0, [r7, #4]
 8006b88:	f000 fd20 	bl	80075cc <vPortFree>
	}
 8006b8c:	e010      	b.n	8006bb0 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006b94:	2b02      	cmp	r3, #2
 8006b96:	d00b      	beq.n	8006bb0 <prvDeleteTCB+0x58>
	__asm volatile
 8006b98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b9c:	f383 8811 	msr	BASEPRI, r3
 8006ba0:	f3bf 8f6f 	isb	sy
 8006ba4:	f3bf 8f4f 	dsb	sy
 8006ba8:	60fb      	str	r3, [r7, #12]
}
 8006baa:	bf00      	nop
 8006bac:	bf00      	nop
 8006bae:	e7fd      	b.n	8006bac <prvDeleteTCB+0x54>
	}
 8006bb0:	bf00      	nop
 8006bb2:	3710      	adds	r7, #16
 8006bb4:	46bd      	mov	sp, r7
 8006bb6:	bd80      	pop	{r7, pc}

08006bb8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006bb8:	b480      	push	{r7}
 8006bba:	b083      	sub	sp, #12
 8006bbc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006bbe:	4b0c      	ldr	r3, [pc, #48]	@ (8006bf0 <prvResetNextTaskUnblockTime+0x38>)
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d104      	bne.n	8006bd2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006bc8:	4b0a      	ldr	r3, [pc, #40]	@ (8006bf4 <prvResetNextTaskUnblockTime+0x3c>)
 8006bca:	f04f 32ff 	mov.w	r2, #4294967295
 8006bce:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006bd0:	e008      	b.n	8006be4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006bd2:	4b07      	ldr	r3, [pc, #28]	@ (8006bf0 <prvResetNextTaskUnblockTime+0x38>)
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	68db      	ldr	r3, [r3, #12]
 8006bd8:	68db      	ldr	r3, [r3, #12]
 8006bda:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	685b      	ldr	r3, [r3, #4]
 8006be0:	4a04      	ldr	r2, [pc, #16]	@ (8006bf4 <prvResetNextTaskUnblockTime+0x3c>)
 8006be2:	6013      	str	r3, [r2, #0]
}
 8006be4:	bf00      	nop
 8006be6:	370c      	adds	r7, #12
 8006be8:	46bd      	mov	sp, r7
 8006bea:	bc80      	pop	{r7}
 8006bec:	4770      	bx	lr
 8006bee:	bf00      	nop
 8006bf0:	200004a8 	.word	0x200004a8
 8006bf4:	20000510 	.word	0x20000510

08006bf8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006bf8:	b480      	push	{r7}
 8006bfa:	b083      	sub	sp, #12
 8006bfc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006bfe:	4b0b      	ldr	r3, [pc, #44]	@ (8006c2c <xTaskGetSchedulerState+0x34>)
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d102      	bne.n	8006c0c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006c06:	2301      	movs	r3, #1
 8006c08:	607b      	str	r3, [r7, #4]
 8006c0a:	e008      	b.n	8006c1e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006c0c:	4b08      	ldr	r3, [pc, #32]	@ (8006c30 <xTaskGetSchedulerState+0x38>)
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d102      	bne.n	8006c1a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006c14:	2302      	movs	r3, #2
 8006c16:	607b      	str	r3, [r7, #4]
 8006c18:	e001      	b.n	8006c1e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006c1a:	2300      	movs	r3, #0
 8006c1c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006c1e:	687b      	ldr	r3, [r7, #4]
	}
 8006c20:	4618      	mov	r0, r3
 8006c22:	370c      	adds	r7, #12
 8006c24:	46bd      	mov	sp, r7
 8006c26:	bc80      	pop	{r7}
 8006c28:	4770      	bx	lr
 8006c2a:	bf00      	nop
 8006c2c:	200004fc 	.word	0x200004fc
 8006c30:	20000518 	.word	0x20000518

08006c34 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8006c34:	b580      	push	{r7, lr}
 8006c36:	b084      	sub	sp, #16
 8006c38:	af00      	add	r7, sp, #0
 8006c3a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8006c40:	2300      	movs	r3, #0
 8006c42:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d05e      	beq.n	8006d08 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8006c4a:	68bb      	ldr	r3, [r7, #8]
 8006c4c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006c4e:	4b31      	ldr	r3, [pc, #196]	@ (8006d14 <xTaskPriorityInherit+0xe0>)
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c54:	429a      	cmp	r2, r3
 8006c56:	d24e      	bcs.n	8006cf6 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006c58:	68bb      	ldr	r3, [r7, #8]
 8006c5a:	699b      	ldr	r3, [r3, #24]
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	db06      	blt.n	8006c6e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006c60:	4b2c      	ldr	r3, [pc, #176]	@ (8006d14 <xTaskPriorityInherit+0xe0>)
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c66:	f1c3 0207 	rsb	r2, r3, #7
 8006c6a:	68bb      	ldr	r3, [r7, #8]
 8006c6c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8006c6e:	68bb      	ldr	r3, [r7, #8]
 8006c70:	6959      	ldr	r1, [r3, #20]
 8006c72:	68bb      	ldr	r3, [r7, #8]
 8006c74:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006c76:	4613      	mov	r3, r2
 8006c78:	009b      	lsls	r3, r3, #2
 8006c7a:	4413      	add	r3, r2
 8006c7c:	009b      	lsls	r3, r3, #2
 8006c7e:	4a26      	ldr	r2, [pc, #152]	@ (8006d18 <xTaskPriorityInherit+0xe4>)
 8006c80:	4413      	add	r3, r2
 8006c82:	4299      	cmp	r1, r3
 8006c84:	d12f      	bne.n	8006ce6 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006c86:	68bb      	ldr	r3, [r7, #8]
 8006c88:	3304      	adds	r3, #4
 8006c8a:	4618      	mov	r0, r3
 8006c8c:	f7fe fc26 	bl	80054dc <uxListRemove>
 8006c90:	4603      	mov	r3, r0
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d10a      	bne.n	8006cac <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8006c96:	68bb      	ldr	r3, [r7, #8]
 8006c98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c9a:	2201      	movs	r2, #1
 8006c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8006ca0:	43da      	mvns	r2, r3
 8006ca2:	4b1e      	ldr	r3, [pc, #120]	@ (8006d1c <xTaskPriorityInherit+0xe8>)
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	4013      	ands	r3, r2
 8006ca8:	4a1c      	ldr	r2, [pc, #112]	@ (8006d1c <xTaskPriorityInherit+0xe8>)
 8006caa:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006cac:	4b19      	ldr	r3, [pc, #100]	@ (8006d14 <xTaskPriorityInherit+0xe0>)
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006cb2:	68bb      	ldr	r3, [r7, #8]
 8006cb4:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8006cb6:	68bb      	ldr	r3, [r7, #8]
 8006cb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cba:	2201      	movs	r2, #1
 8006cbc:	409a      	lsls	r2, r3
 8006cbe:	4b17      	ldr	r3, [pc, #92]	@ (8006d1c <xTaskPriorityInherit+0xe8>)
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	4313      	orrs	r3, r2
 8006cc4:	4a15      	ldr	r2, [pc, #84]	@ (8006d1c <xTaskPriorityInherit+0xe8>)
 8006cc6:	6013      	str	r3, [r2, #0]
 8006cc8:	68bb      	ldr	r3, [r7, #8]
 8006cca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006ccc:	4613      	mov	r3, r2
 8006cce:	009b      	lsls	r3, r3, #2
 8006cd0:	4413      	add	r3, r2
 8006cd2:	009b      	lsls	r3, r3, #2
 8006cd4:	4a10      	ldr	r2, [pc, #64]	@ (8006d18 <xTaskPriorityInherit+0xe4>)
 8006cd6:	441a      	add	r2, r3
 8006cd8:	68bb      	ldr	r3, [r7, #8]
 8006cda:	3304      	adds	r3, #4
 8006cdc:	4619      	mov	r1, r3
 8006cde:	4610      	mov	r0, r2
 8006ce0:	f7fe fba1 	bl	8005426 <vListInsertEnd>
 8006ce4:	e004      	b.n	8006cf0 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006ce6:	4b0b      	ldr	r3, [pc, #44]	@ (8006d14 <xTaskPriorityInherit+0xe0>)
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006cec:	68bb      	ldr	r3, [r7, #8]
 8006cee:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8006cf0:	2301      	movs	r3, #1
 8006cf2:	60fb      	str	r3, [r7, #12]
 8006cf4:	e008      	b.n	8006d08 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8006cf6:	68bb      	ldr	r3, [r7, #8]
 8006cf8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006cfa:	4b06      	ldr	r3, [pc, #24]	@ (8006d14 <xTaskPriorityInherit+0xe0>)
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d00:	429a      	cmp	r2, r3
 8006d02:	d201      	bcs.n	8006d08 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8006d04:	2301      	movs	r3, #1
 8006d06:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006d08:	68fb      	ldr	r3, [r7, #12]
	}
 8006d0a:	4618      	mov	r0, r3
 8006d0c:	3710      	adds	r7, #16
 8006d0e:	46bd      	mov	sp, r7
 8006d10:	bd80      	pop	{r7, pc}
 8006d12:	bf00      	nop
 8006d14:	200003f0 	.word	0x200003f0
 8006d18:	200003f4 	.word	0x200003f4
 8006d1c:	200004f8 	.word	0x200004f8

08006d20 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006d20:	b580      	push	{r7, lr}
 8006d22:	b086      	sub	sp, #24
 8006d24:	af00      	add	r7, sp, #0
 8006d26:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006d2c:	2300      	movs	r3, #0
 8006d2e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d070      	beq.n	8006e18 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006d36:	4b3b      	ldr	r3, [pc, #236]	@ (8006e24 <xTaskPriorityDisinherit+0x104>)
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	693a      	ldr	r2, [r7, #16]
 8006d3c:	429a      	cmp	r2, r3
 8006d3e:	d00b      	beq.n	8006d58 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8006d40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d44:	f383 8811 	msr	BASEPRI, r3
 8006d48:	f3bf 8f6f 	isb	sy
 8006d4c:	f3bf 8f4f 	dsb	sy
 8006d50:	60fb      	str	r3, [r7, #12]
}
 8006d52:	bf00      	nop
 8006d54:	bf00      	nop
 8006d56:	e7fd      	b.n	8006d54 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006d58:	693b      	ldr	r3, [r7, #16]
 8006d5a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d10b      	bne.n	8006d78 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8006d60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d64:	f383 8811 	msr	BASEPRI, r3
 8006d68:	f3bf 8f6f 	isb	sy
 8006d6c:	f3bf 8f4f 	dsb	sy
 8006d70:	60bb      	str	r3, [r7, #8]
}
 8006d72:	bf00      	nop
 8006d74:	bf00      	nop
 8006d76:	e7fd      	b.n	8006d74 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8006d78:	693b      	ldr	r3, [r7, #16]
 8006d7a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006d7c:	1e5a      	subs	r2, r3, #1
 8006d7e:	693b      	ldr	r3, [r7, #16]
 8006d80:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006d82:	693b      	ldr	r3, [r7, #16]
 8006d84:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006d86:	693b      	ldr	r3, [r7, #16]
 8006d88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006d8a:	429a      	cmp	r2, r3
 8006d8c:	d044      	beq.n	8006e18 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006d8e:	693b      	ldr	r3, [r7, #16]
 8006d90:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d140      	bne.n	8006e18 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006d96:	693b      	ldr	r3, [r7, #16]
 8006d98:	3304      	adds	r3, #4
 8006d9a:	4618      	mov	r0, r3
 8006d9c:	f7fe fb9e 	bl	80054dc <uxListRemove>
 8006da0:	4603      	mov	r3, r0
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d115      	bne.n	8006dd2 <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8006da6:	693b      	ldr	r3, [r7, #16]
 8006da8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006daa:	491f      	ldr	r1, [pc, #124]	@ (8006e28 <xTaskPriorityDisinherit+0x108>)
 8006dac:	4613      	mov	r3, r2
 8006dae:	009b      	lsls	r3, r3, #2
 8006db0:	4413      	add	r3, r2
 8006db2:	009b      	lsls	r3, r3, #2
 8006db4:	440b      	add	r3, r1
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d10a      	bne.n	8006dd2 <xTaskPriorityDisinherit+0xb2>
 8006dbc:	693b      	ldr	r3, [r7, #16]
 8006dbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006dc0:	2201      	movs	r2, #1
 8006dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8006dc6:	43da      	mvns	r2, r3
 8006dc8:	4b18      	ldr	r3, [pc, #96]	@ (8006e2c <xTaskPriorityDisinherit+0x10c>)
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	4013      	ands	r3, r2
 8006dce:	4a17      	ldr	r2, [pc, #92]	@ (8006e2c <xTaskPriorityDisinherit+0x10c>)
 8006dd0:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006dd2:	693b      	ldr	r3, [r7, #16]
 8006dd4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006dd6:	693b      	ldr	r3, [r7, #16]
 8006dd8:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006dda:	693b      	ldr	r3, [r7, #16]
 8006ddc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006dde:	f1c3 0207 	rsb	r2, r3, #7
 8006de2:	693b      	ldr	r3, [r7, #16]
 8006de4:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006de6:	693b      	ldr	r3, [r7, #16]
 8006de8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006dea:	2201      	movs	r2, #1
 8006dec:	409a      	lsls	r2, r3
 8006dee:	4b0f      	ldr	r3, [pc, #60]	@ (8006e2c <xTaskPriorityDisinherit+0x10c>)
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	4313      	orrs	r3, r2
 8006df4:	4a0d      	ldr	r2, [pc, #52]	@ (8006e2c <xTaskPriorityDisinherit+0x10c>)
 8006df6:	6013      	str	r3, [r2, #0]
 8006df8:	693b      	ldr	r3, [r7, #16]
 8006dfa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006dfc:	4613      	mov	r3, r2
 8006dfe:	009b      	lsls	r3, r3, #2
 8006e00:	4413      	add	r3, r2
 8006e02:	009b      	lsls	r3, r3, #2
 8006e04:	4a08      	ldr	r2, [pc, #32]	@ (8006e28 <xTaskPriorityDisinherit+0x108>)
 8006e06:	441a      	add	r2, r3
 8006e08:	693b      	ldr	r3, [r7, #16]
 8006e0a:	3304      	adds	r3, #4
 8006e0c:	4619      	mov	r1, r3
 8006e0e:	4610      	mov	r0, r2
 8006e10:	f7fe fb09 	bl	8005426 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006e14:	2301      	movs	r3, #1
 8006e16:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006e18:	697b      	ldr	r3, [r7, #20]
	}
 8006e1a:	4618      	mov	r0, r3
 8006e1c:	3718      	adds	r7, #24
 8006e1e:	46bd      	mov	sp, r7
 8006e20:	bd80      	pop	{r7, pc}
 8006e22:	bf00      	nop
 8006e24:	200003f0 	.word	0x200003f0
 8006e28:	200003f4 	.word	0x200003f4
 8006e2c:	200004f8 	.word	0x200004f8

08006e30 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8006e30:	b580      	push	{r7, lr}
 8006e32:	b088      	sub	sp, #32
 8006e34:	af00      	add	r7, sp, #0
 8006e36:	6078      	str	r0, [r7, #4]
 8006e38:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8006e3e:	2301      	movs	r3, #1
 8006e40:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d079      	beq.n	8006f3c <vTaskPriorityDisinheritAfterTimeout+0x10c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8006e48:	69bb      	ldr	r3, [r7, #24]
 8006e4a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d10b      	bne.n	8006e68 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8006e50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e54:	f383 8811 	msr	BASEPRI, r3
 8006e58:	f3bf 8f6f 	isb	sy
 8006e5c:	f3bf 8f4f 	dsb	sy
 8006e60:	60fb      	str	r3, [r7, #12]
}
 8006e62:	bf00      	nop
 8006e64:	bf00      	nop
 8006e66:	e7fd      	b.n	8006e64 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8006e68:	69bb      	ldr	r3, [r7, #24]
 8006e6a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006e6c:	683a      	ldr	r2, [r7, #0]
 8006e6e:	429a      	cmp	r2, r3
 8006e70:	d902      	bls.n	8006e78 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8006e72:	683b      	ldr	r3, [r7, #0]
 8006e74:	61fb      	str	r3, [r7, #28]
 8006e76:	e002      	b.n	8006e7e <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8006e78:	69bb      	ldr	r3, [r7, #24]
 8006e7a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006e7c:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8006e7e:	69bb      	ldr	r3, [r7, #24]
 8006e80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e82:	69fa      	ldr	r2, [r7, #28]
 8006e84:	429a      	cmp	r2, r3
 8006e86:	d059      	beq.n	8006f3c <vTaskPriorityDisinheritAfterTimeout+0x10c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8006e88:	69bb      	ldr	r3, [r7, #24]
 8006e8a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006e8c:	697a      	ldr	r2, [r7, #20]
 8006e8e:	429a      	cmp	r2, r3
 8006e90:	d154      	bne.n	8006f3c <vTaskPriorityDisinheritAfterTimeout+0x10c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8006e92:	4b2c      	ldr	r3, [pc, #176]	@ (8006f44 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	69ba      	ldr	r2, [r7, #24]
 8006e98:	429a      	cmp	r2, r3
 8006e9a:	d10b      	bne.n	8006eb4 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8006e9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ea0:	f383 8811 	msr	BASEPRI, r3
 8006ea4:	f3bf 8f6f 	isb	sy
 8006ea8:	f3bf 8f4f 	dsb	sy
 8006eac:	60bb      	str	r3, [r7, #8]
}
 8006eae:	bf00      	nop
 8006eb0:	bf00      	nop
 8006eb2:	e7fd      	b.n	8006eb0 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8006eb4:	69bb      	ldr	r3, [r7, #24]
 8006eb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006eb8:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8006eba:	69bb      	ldr	r3, [r7, #24]
 8006ebc:	69fa      	ldr	r2, [r7, #28]
 8006ebe:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006ec0:	69bb      	ldr	r3, [r7, #24]
 8006ec2:	699b      	ldr	r3, [r3, #24]
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	db04      	blt.n	8006ed2 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006ec8:	69fb      	ldr	r3, [r7, #28]
 8006eca:	f1c3 0207 	rsb	r2, r3, #7
 8006ece:	69bb      	ldr	r3, [r7, #24]
 8006ed0:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8006ed2:	69bb      	ldr	r3, [r7, #24]
 8006ed4:	6959      	ldr	r1, [r3, #20]
 8006ed6:	693a      	ldr	r2, [r7, #16]
 8006ed8:	4613      	mov	r3, r2
 8006eda:	009b      	lsls	r3, r3, #2
 8006edc:	4413      	add	r3, r2
 8006ede:	009b      	lsls	r3, r3, #2
 8006ee0:	4a19      	ldr	r2, [pc, #100]	@ (8006f48 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8006ee2:	4413      	add	r3, r2
 8006ee4:	4299      	cmp	r1, r3
 8006ee6:	d129      	bne.n	8006f3c <vTaskPriorityDisinheritAfterTimeout+0x10c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006ee8:	69bb      	ldr	r3, [r7, #24]
 8006eea:	3304      	adds	r3, #4
 8006eec:	4618      	mov	r0, r3
 8006eee:	f7fe faf5 	bl	80054dc <uxListRemove>
 8006ef2:	4603      	mov	r3, r0
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d10a      	bne.n	8006f0e <vTaskPriorityDisinheritAfterTimeout+0xde>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8006ef8:	69bb      	ldr	r3, [r7, #24]
 8006efa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006efc:	2201      	movs	r2, #1
 8006efe:	fa02 f303 	lsl.w	r3, r2, r3
 8006f02:	43da      	mvns	r2, r3
 8006f04:	4b11      	ldr	r3, [pc, #68]	@ (8006f4c <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	4013      	ands	r3, r2
 8006f0a:	4a10      	ldr	r2, [pc, #64]	@ (8006f4c <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8006f0c:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8006f0e:	69bb      	ldr	r3, [r7, #24]
 8006f10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f12:	2201      	movs	r2, #1
 8006f14:	409a      	lsls	r2, r3
 8006f16:	4b0d      	ldr	r3, [pc, #52]	@ (8006f4c <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	4313      	orrs	r3, r2
 8006f1c:	4a0b      	ldr	r2, [pc, #44]	@ (8006f4c <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8006f1e:	6013      	str	r3, [r2, #0]
 8006f20:	69bb      	ldr	r3, [r7, #24]
 8006f22:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006f24:	4613      	mov	r3, r2
 8006f26:	009b      	lsls	r3, r3, #2
 8006f28:	4413      	add	r3, r2
 8006f2a:	009b      	lsls	r3, r3, #2
 8006f2c:	4a06      	ldr	r2, [pc, #24]	@ (8006f48 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8006f2e:	441a      	add	r2, r3
 8006f30:	69bb      	ldr	r3, [r7, #24]
 8006f32:	3304      	adds	r3, #4
 8006f34:	4619      	mov	r1, r3
 8006f36:	4610      	mov	r0, r2
 8006f38:	f7fe fa75 	bl	8005426 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006f3c:	bf00      	nop
 8006f3e:	3720      	adds	r7, #32
 8006f40:	46bd      	mov	sp, r7
 8006f42:	bd80      	pop	{r7, pc}
 8006f44:	200003f0 	.word	0x200003f0
 8006f48:	200003f4 	.word	0x200003f4
 8006f4c:	200004f8 	.word	0x200004f8

08006f50 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8006f50:	b480      	push	{r7}
 8006f52:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8006f54:	4b07      	ldr	r3, [pc, #28]	@ (8006f74 <pvTaskIncrementMutexHeldCount+0x24>)
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d004      	beq.n	8006f66 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8006f5c:	4b05      	ldr	r3, [pc, #20]	@ (8006f74 <pvTaskIncrementMutexHeldCount+0x24>)
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006f62:	3201      	adds	r2, #1
 8006f64:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 8006f66:	4b03      	ldr	r3, [pc, #12]	@ (8006f74 <pvTaskIncrementMutexHeldCount+0x24>)
 8006f68:	681b      	ldr	r3, [r3, #0]
	}
 8006f6a:	4618      	mov	r0, r3
 8006f6c:	46bd      	mov	sp, r7
 8006f6e:	bc80      	pop	{r7}
 8006f70:	4770      	bx	lr
 8006f72:	bf00      	nop
 8006f74:	200003f0 	.word	0x200003f0

08006f78 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006f78:	b580      	push	{r7, lr}
 8006f7a:	b084      	sub	sp, #16
 8006f7c:	af00      	add	r7, sp, #0
 8006f7e:	6078      	str	r0, [r7, #4]
 8006f80:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006f82:	4b29      	ldr	r3, [pc, #164]	@ (8007028 <prvAddCurrentTaskToDelayedList+0xb0>)
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006f88:	4b28      	ldr	r3, [pc, #160]	@ (800702c <prvAddCurrentTaskToDelayedList+0xb4>)
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	3304      	adds	r3, #4
 8006f8e:	4618      	mov	r0, r3
 8006f90:	f7fe faa4 	bl	80054dc <uxListRemove>
 8006f94:	4603      	mov	r3, r0
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d10b      	bne.n	8006fb2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8006f9a:	4b24      	ldr	r3, [pc, #144]	@ (800702c <prvAddCurrentTaskToDelayedList+0xb4>)
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fa0:	2201      	movs	r2, #1
 8006fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8006fa6:	43da      	mvns	r2, r3
 8006fa8:	4b21      	ldr	r3, [pc, #132]	@ (8007030 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	4013      	ands	r3, r2
 8006fae:	4a20      	ldr	r2, [pc, #128]	@ (8007030 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006fb0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fb8:	d10a      	bne.n	8006fd0 <prvAddCurrentTaskToDelayedList+0x58>
 8006fba:	683b      	ldr	r3, [r7, #0]
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d007      	beq.n	8006fd0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006fc0:	4b1a      	ldr	r3, [pc, #104]	@ (800702c <prvAddCurrentTaskToDelayedList+0xb4>)
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	3304      	adds	r3, #4
 8006fc6:	4619      	mov	r1, r3
 8006fc8:	481a      	ldr	r0, [pc, #104]	@ (8007034 <prvAddCurrentTaskToDelayedList+0xbc>)
 8006fca:	f7fe fa2c 	bl	8005426 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006fce:	e026      	b.n	800701e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006fd0:	68fa      	ldr	r2, [r7, #12]
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	4413      	add	r3, r2
 8006fd6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006fd8:	4b14      	ldr	r3, [pc, #80]	@ (800702c <prvAddCurrentTaskToDelayedList+0xb4>)
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	68ba      	ldr	r2, [r7, #8]
 8006fde:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006fe0:	68ba      	ldr	r2, [r7, #8]
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	429a      	cmp	r2, r3
 8006fe6:	d209      	bcs.n	8006ffc <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006fe8:	4b13      	ldr	r3, [pc, #76]	@ (8007038 <prvAddCurrentTaskToDelayedList+0xc0>)
 8006fea:	681a      	ldr	r2, [r3, #0]
 8006fec:	4b0f      	ldr	r3, [pc, #60]	@ (800702c <prvAddCurrentTaskToDelayedList+0xb4>)
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	3304      	adds	r3, #4
 8006ff2:	4619      	mov	r1, r3
 8006ff4:	4610      	mov	r0, r2
 8006ff6:	f7fe fa39 	bl	800546c <vListInsert>
}
 8006ffa:	e010      	b.n	800701e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006ffc:	4b0f      	ldr	r3, [pc, #60]	@ (800703c <prvAddCurrentTaskToDelayedList+0xc4>)
 8006ffe:	681a      	ldr	r2, [r3, #0]
 8007000:	4b0a      	ldr	r3, [pc, #40]	@ (800702c <prvAddCurrentTaskToDelayedList+0xb4>)
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	3304      	adds	r3, #4
 8007006:	4619      	mov	r1, r3
 8007008:	4610      	mov	r0, r2
 800700a:	f7fe fa2f 	bl	800546c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800700e:	4b0c      	ldr	r3, [pc, #48]	@ (8007040 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	68ba      	ldr	r2, [r7, #8]
 8007014:	429a      	cmp	r2, r3
 8007016:	d202      	bcs.n	800701e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8007018:	4a09      	ldr	r2, [pc, #36]	@ (8007040 <prvAddCurrentTaskToDelayedList+0xc8>)
 800701a:	68bb      	ldr	r3, [r7, #8]
 800701c:	6013      	str	r3, [r2, #0]
}
 800701e:	bf00      	nop
 8007020:	3710      	adds	r7, #16
 8007022:	46bd      	mov	sp, r7
 8007024:	bd80      	pop	{r7, pc}
 8007026:	bf00      	nop
 8007028:	200004f4 	.word	0x200004f4
 800702c:	200003f0 	.word	0x200003f0
 8007030:	200004f8 	.word	0x200004f8
 8007034:	200004dc 	.word	0x200004dc
 8007038:	200004ac 	.word	0x200004ac
 800703c:	200004a8 	.word	0x200004a8
 8007040:	20000510 	.word	0x20000510

08007044 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007044:	b480      	push	{r7}
 8007046:	b085      	sub	sp, #20
 8007048:	af00      	add	r7, sp, #0
 800704a:	60f8      	str	r0, [r7, #12]
 800704c:	60b9      	str	r1, [r7, #8]
 800704e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	3b04      	subs	r3, #4
 8007054:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800705c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	3b04      	subs	r3, #4
 8007062:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007064:	68bb      	ldr	r3, [r7, #8]
 8007066:	f023 0201 	bic.w	r2, r3, #1
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	3b04      	subs	r3, #4
 8007072:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007074:	4a08      	ldr	r2, [pc, #32]	@ (8007098 <pxPortInitialiseStack+0x54>)
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	3b14      	subs	r3, #20
 800707e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007080:	687a      	ldr	r2, [r7, #4]
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	3b20      	subs	r3, #32
 800708a:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800708c:	68fb      	ldr	r3, [r7, #12]
}
 800708e:	4618      	mov	r0, r3
 8007090:	3714      	adds	r7, #20
 8007092:	46bd      	mov	sp, r7
 8007094:	bc80      	pop	{r7}
 8007096:	4770      	bx	lr
 8007098:	0800709d 	.word	0x0800709d

0800709c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800709c:	b480      	push	{r7}
 800709e:	b085      	sub	sp, #20
 80070a0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 80070a2:	2300      	movs	r3, #0
 80070a4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80070a6:	4b12      	ldr	r3, [pc, #72]	@ (80070f0 <prvTaskExitError+0x54>)
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070ae:	d00b      	beq.n	80070c8 <prvTaskExitError+0x2c>
	__asm volatile
 80070b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070b4:	f383 8811 	msr	BASEPRI, r3
 80070b8:	f3bf 8f6f 	isb	sy
 80070bc:	f3bf 8f4f 	dsb	sy
 80070c0:	60fb      	str	r3, [r7, #12]
}
 80070c2:	bf00      	nop
 80070c4:	bf00      	nop
 80070c6:	e7fd      	b.n	80070c4 <prvTaskExitError+0x28>
	__asm volatile
 80070c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070cc:	f383 8811 	msr	BASEPRI, r3
 80070d0:	f3bf 8f6f 	isb	sy
 80070d4:	f3bf 8f4f 	dsb	sy
 80070d8:	60bb      	str	r3, [r7, #8]
}
 80070da:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80070dc:	bf00      	nop
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d0fc      	beq.n	80070de <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80070e4:	bf00      	nop
 80070e6:	bf00      	nop
 80070e8:	3714      	adds	r7, #20
 80070ea:	46bd      	mov	sp, r7
 80070ec:	bc80      	pop	{r7}
 80070ee:	4770      	bx	lr
 80070f0:	20000014 	.word	0x20000014
	...

08007100 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007100:	4b07      	ldr	r3, [pc, #28]	@ (8007120 <pxCurrentTCBConst2>)
 8007102:	6819      	ldr	r1, [r3, #0]
 8007104:	6808      	ldr	r0, [r1, #0]
 8007106:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800710a:	f380 8809 	msr	PSP, r0
 800710e:	f3bf 8f6f 	isb	sy
 8007112:	f04f 0000 	mov.w	r0, #0
 8007116:	f380 8811 	msr	BASEPRI, r0
 800711a:	f04e 0e0d 	orr.w	lr, lr, #13
 800711e:	4770      	bx	lr

08007120 <pxCurrentTCBConst2>:
 8007120:	200003f0 	.word	0x200003f0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007124:	bf00      	nop
 8007126:	bf00      	nop

08007128 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8007128:	4806      	ldr	r0, [pc, #24]	@ (8007144 <prvPortStartFirstTask+0x1c>)
 800712a:	6800      	ldr	r0, [r0, #0]
 800712c:	6800      	ldr	r0, [r0, #0]
 800712e:	f380 8808 	msr	MSP, r0
 8007132:	b662      	cpsie	i
 8007134:	b661      	cpsie	f
 8007136:	f3bf 8f4f 	dsb	sy
 800713a:	f3bf 8f6f 	isb	sy
 800713e:	df00      	svc	0
 8007140:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007142:	bf00      	nop
 8007144:	e000ed08 	.word	0xe000ed08

08007148 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007148:	b580      	push	{r7, lr}
 800714a:	b084      	sub	sp, #16
 800714c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800714e:	4b32      	ldr	r3, [pc, #200]	@ (8007218 <xPortStartScheduler+0xd0>)
 8007150:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	781b      	ldrb	r3, [r3, #0]
 8007156:	b2db      	uxtb	r3, r3
 8007158:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	22ff      	movs	r2, #255	@ 0xff
 800715e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	781b      	ldrb	r3, [r3, #0]
 8007164:	b2db      	uxtb	r3, r3
 8007166:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007168:	78fb      	ldrb	r3, [r7, #3]
 800716a:	b2db      	uxtb	r3, r3
 800716c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8007170:	b2da      	uxtb	r2, r3
 8007172:	4b2a      	ldr	r3, [pc, #168]	@ (800721c <xPortStartScheduler+0xd4>)
 8007174:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007176:	4b2a      	ldr	r3, [pc, #168]	@ (8007220 <xPortStartScheduler+0xd8>)
 8007178:	2207      	movs	r2, #7
 800717a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800717c:	e009      	b.n	8007192 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800717e:	4b28      	ldr	r3, [pc, #160]	@ (8007220 <xPortStartScheduler+0xd8>)
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	3b01      	subs	r3, #1
 8007184:	4a26      	ldr	r2, [pc, #152]	@ (8007220 <xPortStartScheduler+0xd8>)
 8007186:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007188:	78fb      	ldrb	r3, [r7, #3]
 800718a:	b2db      	uxtb	r3, r3
 800718c:	005b      	lsls	r3, r3, #1
 800718e:	b2db      	uxtb	r3, r3
 8007190:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007192:	78fb      	ldrb	r3, [r7, #3]
 8007194:	b2db      	uxtb	r3, r3
 8007196:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800719a:	2b80      	cmp	r3, #128	@ 0x80
 800719c:	d0ef      	beq.n	800717e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800719e:	4b20      	ldr	r3, [pc, #128]	@ (8007220 <xPortStartScheduler+0xd8>)
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	f1c3 0307 	rsb	r3, r3, #7
 80071a6:	2b04      	cmp	r3, #4
 80071a8:	d00b      	beq.n	80071c2 <xPortStartScheduler+0x7a>
	__asm volatile
 80071aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071ae:	f383 8811 	msr	BASEPRI, r3
 80071b2:	f3bf 8f6f 	isb	sy
 80071b6:	f3bf 8f4f 	dsb	sy
 80071ba:	60bb      	str	r3, [r7, #8]
}
 80071bc:	bf00      	nop
 80071be:	bf00      	nop
 80071c0:	e7fd      	b.n	80071be <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80071c2:	4b17      	ldr	r3, [pc, #92]	@ (8007220 <xPortStartScheduler+0xd8>)
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	021b      	lsls	r3, r3, #8
 80071c8:	4a15      	ldr	r2, [pc, #84]	@ (8007220 <xPortStartScheduler+0xd8>)
 80071ca:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80071cc:	4b14      	ldr	r3, [pc, #80]	@ (8007220 <xPortStartScheduler+0xd8>)
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80071d4:	4a12      	ldr	r2, [pc, #72]	@ (8007220 <xPortStartScheduler+0xd8>)
 80071d6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	b2da      	uxtb	r2, r3
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80071e0:	4b10      	ldr	r3, [pc, #64]	@ (8007224 <xPortStartScheduler+0xdc>)
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	4a0f      	ldr	r2, [pc, #60]	@ (8007224 <xPortStartScheduler+0xdc>)
 80071e6:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80071ea:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80071ec:	4b0d      	ldr	r3, [pc, #52]	@ (8007224 <xPortStartScheduler+0xdc>)
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	4a0c      	ldr	r2, [pc, #48]	@ (8007224 <xPortStartScheduler+0xdc>)
 80071f2:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80071f6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80071f8:	f000 f8b8 	bl	800736c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80071fc:	4b0a      	ldr	r3, [pc, #40]	@ (8007228 <xPortStartScheduler+0xe0>)
 80071fe:	2200      	movs	r2, #0
 8007200:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007202:	f7ff ff91 	bl	8007128 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007206:	f7ff fab5 	bl	8006774 <vTaskSwitchContext>
	prvTaskExitError();
 800720a:	f7ff ff47 	bl	800709c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800720e:	2300      	movs	r3, #0
}
 8007210:	4618      	mov	r0, r3
 8007212:	3710      	adds	r7, #16
 8007214:	46bd      	mov	sp, r7
 8007216:	bd80      	pop	{r7, pc}
 8007218:	e000e400 	.word	0xe000e400
 800721c:	2000051c 	.word	0x2000051c
 8007220:	20000520 	.word	0x20000520
 8007224:	e000ed20 	.word	0xe000ed20
 8007228:	20000014 	.word	0x20000014

0800722c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800722c:	b480      	push	{r7}
 800722e:	b083      	sub	sp, #12
 8007230:	af00      	add	r7, sp, #0
	__asm volatile
 8007232:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007236:	f383 8811 	msr	BASEPRI, r3
 800723a:	f3bf 8f6f 	isb	sy
 800723e:	f3bf 8f4f 	dsb	sy
 8007242:	607b      	str	r3, [r7, #4]
}
 8007244:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007246:	4b0f      	ldr	r3, [pc, #60]	@ (8007284 <vPortEnterCritical+0x58>)
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	3301      	adds	r3, #1
 800724c:	4a0d      	ldr	r2, [pc, #52]	@ (8007284 <vPortEnterCritical+0x58>)
 800724e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007250:	4b0c      	ldr	r3, [pc, #48]	@ (8007284 <vPortEnterCritical+0x58>)
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	2b01      	cmp	r3, #1
 8007256:	d110      	bne.n	800727a <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007258:	4b0b      	ldr	r3, [pc, #44]	@ (8007288 <vPortEnterCritical+0x5c>)
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	b2db      	uxtb	r3, r3
 800725e:	2b00      	cmp	r3, #0
 8007260:	d00b      	beq.n	800727a <vPortEnterCritical+0x4e>
	__asm volatile
 8007262:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007266:	f383 8811 	msr	BASEPRI, r3
 800726a:	f3bf 8f6f 	isb	sy
 800726e:	f3bf 8f4f 	dsb	sy
 8007272:	603b      	str	r3, [r7, #0]
}
 8007274:	bf00      	nop
 8007276:	bf00      	nop
 8007278:	e7fd      	b.n	8007276 <vPortEnterCritical+0x4a>
	}
}
 800727a:	bf00      	nop
 800727c:	370c      	adds	r7, #12
 800727e:	46bd      	mov	sp, r7
 8007280:	bc80      	pop	{r7}
 8007282:	4770      	bx	lr
 8007284:	20000014 	.word	0x20000014
 8007288:	e000ed04 	.word	0xe000ed04

0800728c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800728c:	b480      	push	{r7}
 800728e:	b083      	sub	sp, #12
 8007290:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007292:	4b12      	ldr	r3, [pc, #72]	@ (80072dc <vPortExitCritical+0x50>)
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	2b00      	cmp	r3, #0
 8007298:	d10b      	bne.n	80072b2 <vPortExitCritical+0x26>
	__asm volatile
 800729a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800729e:	f383 8811 	msr	BASEPRI, r3
 80072a2:	f3bf 8f6f 	isb	sy
 80072a6:	f3bf 8f4f 	dsb	sy
 80072aa:	607b      	str	r3, [r7, #4]
}
 80072ac:	bf00      	nop
 80072ae:	bf00      	nop
 80072b0:	e7fd      	b.n	80072ae <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80072b2:	4b0a      	ldr	r3, [pc, #40]	@ (80072dc <vPortExitCritical+0x50>)
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	3b01      	subs	r3, #1
 80072b8:	4a08      	ldr	r2, [pc, #32]	@ (80072dc <vPortExitCritical+0x50>)
 80072ba:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80072bc:	4b07      	ldr	r3, [pc, #28]	@ (80072dc <vPortExitCritical+0x50>)
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d105      	bne.n	80072d0 <vPortExitCritical+0x44>
 80072c4:	2300      	movs	r3, #0
 80072c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80072c8:	683b      	ldr	r3, [r7, #0]
 80072ca:	f383 8811 	msr	BASEPRI, r3
}
 80072ce:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80072d0:	bf00      	nop
 80072d2:	370c      	adds	r7, #12
 80072d4:	46bd      	mov	sp, r7
 80072d6:	bc80      	pop	{r7}
 80072d8:	4770      	bx	lr
 80072da:	bf00      	nop
 80072dc:	20000014 	.word	0x20000014

080072e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80072e0:	f3ef 8009 	mrs	r0, PSP
 80072e4:	f3bf 8f6f 	isb	sy
 80072e8:	4b0d      	ldr	r3, [pc, #52]	@ (8007320 <pxCurrentTCBConst>)
 80072ea:	681a      	ldr	r2, [r3, #0]
 80072ec:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80072f0:	6010      	str	r0, [r2, #0]
 80072f2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80072f6:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80072fa:	f380 8811 	msr	BASEPRI, r0
 80072fe:	f7ff fa39 	bl	8006774 <vTaskSwitchContext>
 8007302:	f04f 0000 	mov.w	r0, #0
 8007306:	f380 8811 	msr	BASEPRI, r0
 800730a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800730e:	6819      	ldr	r1, [r3, #0]
 8007310:	6808      	ldr	r0, [r1, #0]
 8007312:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007316:	f380 8809 	msr	PSP, r0
 800731a:	f3bf 8f6f 	isb	sy
 800731e:	4770      	bx	lr

08007320 <pxCurrentTCBConst>:
 8007320:	200003f0 	.word	0x200003f0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007324:	bf00      	nop
 8007326:	bf00      	nop

08007328 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007328:	b580      	push	{r7, lr}
 800732a:	b082      	sub	sp, #8
 800732c:	af00      	add	r7, sp, #0
	__asm volatile
 800732e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007332:	f383 8811 	msr	BASEPRI, r3
 8007336:	f3bf 8f6f 	isb	sy
 800733a:	f3bf 8f4f 	dsb	sy
 800733e:	607b      	str	r3, [r7, #4]
}
 8007340:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007342:	f7ff f95d 	bl	8006600 <xTaskIncrementTick>
 8007346:	4603      	mov	r3, r0
 8007348:	2b00      	cmp	r3, #0
 800734a:	d003      	beq.n	8007354 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800734c:	4b06      	ldr	r3, [pc, #24]	@ (8007368 <xPortSysTickHandler+0x40>)
 800734e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007352:	601a      	str	r2, [r3, #0]
 8007354:	2300      	movs	r3, #0
 8007356:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007358:	683b      	ldr	r3, [r7, #0]
 800735a:	f383 8811 	msr	BASEPRI, r3
}
 800735e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007360:	bf00      	nop
 8007362:	3708      	adds	r7, #8
 8007364:	46bd      	mov	sp, r7
 8007366:	bd80      	pop	{r7, pc}
 8007368:	e000ed04 	.word	0xe000ed04

0800736c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800736c:	b480      	push	{r7}
 800736e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007370:	4b0a      	ldr	r3, [pc, #40]	@ (800739c <vPortSetupTimerInterrupt+0x30>)
 8007372:	2200      	movs	r2, #0
 8007374:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007376:	4b0a      	ldr	r3, [pc, #40]	@ (80073a0 <vPortSetupTimerInterrupt+0x34>)
 8007378:	2200      	movs	r2, #0
 800737a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800737c:	4b09      	ldr	r3, [pc, #36]	@ (80073a4 <vPortSetupTimerInterrupt+0x38>)
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	4a09      	ldr	r2, [pc, #36]	@ (80073a8 <vPortSetupTimerInterrupt+0x3c>)
 8007382:	fba2 2303 	umull	r2, r3, r2, r3
 8007386:	099b      	lsrs	r3, r3, #6
 8007388:	4a08      	ldr	r2, [pc, #32]	@ (80073ac <vPortSetupTimerInterrupt+0x40>)
 800738a:	3b01      	subs	r3, #1
 800738c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800738e:	4b03      	ldr	r3, [pc, #12]	@ (800739c <vPortSetupTimerInterrupt+0x30>)
 8007390:	2207      	movs	r2, #7
 8007392:	601a      	str	r2, [r3, #0]
}
 8007394:	bf00      	nop
 8007396:	46bd      	mov	sp, r7
 8007398:	bc80      	pop	{r7}
 800739a:	4770      	bx	lr
 800739c:	e000e010 	.word	0xe000e010
 80073a0:	e000e018 	.word	0xe000e018
 80073a4:	20000008 	.word	0x20000008
 80073a8:	10624dd3 	.word	0x10624dd3
 80073ac:	e000e014 	.word	0xe000e014

080073b0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80073b0:	b480      	push	{r7}
 80073b2:	b085      	sub	sp, #20
 80073b4:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80073b6:	f3ef 8305 	mrs	r3, IPSR
 80073ba:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	2b0f      	cmp	r3, #15
 80073c0:	d915      	bls.n	80073ee <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80073c2:	4a17      	ldr	r2, [pc, #92]	@ (8007420 <vPortValidateInterruptPriority+0x70>)
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	4413      	add	r3, r2
 80073c8:	781b      	ldrb	r3, [r3, #0]
 80073ca:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80073cc:	4b15      	ldr	r3, [pc, #84]	@ (8007424 <vPortValidateInterruptPriority+0x74>)
 80073ce:	781b      	ldrb	r3, [r3, #0]
 80073d0:	7afa      	ldrb	r2, [r7, #11]
 80073d2:	429a      	cmp	r2, r3
 80073d4:	d20b      	bcs.n	80073ee <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80073d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073da:	f383 8811 	msr	BASEPRI, r3
 80073de:	f3bf 8f6f 	isb	sy
 80073e2:	f3bf 8f4f 	dsb	sy
 80073e6:	607b      	str	r3, [r7, #4]
}
 80073e8:	bf00      	nop
 80073ea:	bf00      	nop
 80073ec:	e7fd      	b.n	80073ea <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80073ee:	4b0e      	ldr	r3, [pc, #56]	@ (8007428 <vPortValidateInterruptPriority+0x78>)
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80073f6:	4b0d      	ldr	r3, [pc, #52]	@ (800742c <vPortValidateInterruptPriority+0x7c>)
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	429a      	cmp	r2, r3
 80073fc:	d90b      	bls.n	8007416 <vPortValidateInterruptPriority+0x66>
	__asm volatile
 80073fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007402:	f383 8811 	msr	BASEPRI, r3
 8007406:	f3bf 8f6f 	isb	sy
 800740a:	f3bf 8f4f 	dsb	sy
 800740e:	603b      	str	r3, [r7, #0]
}
 8007410:	bf00      	nop
 8007412:	bf00      	nop
 8007414:	e7fd      	b.n	8007412 <vPortValidateInterruptPriority+0x62>
	}
 8007416:	bf00      	nop
 8007418:	3714      	adds	r7, #20
 800741a:	46bd      	mov	sp, r7
 800741c:	bc80      	pop	{r7}
 800741e:	4770      	bx	lr
 8007420:	e000e3f0 	.word	0xe000e3f0
 8007424:	2000051c 	.word	0x2000051c
 8007428:	e000ed0c 	.word	0xe000ed0c
 800742c:	20000520 	.word	0x20000520

08007430 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007430:	b580      	push	{r7, lr}
 8007432:	b08a      	sub	sp, #40	@ 0x28
 8007434:	af00      	add	r7, sp, #0
 8007436:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007438:	2300      	movs	r3, #0
 800743a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800743c:	f7ff f834 	bl	80064a8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007440:	4b5c      	ldr	r3, [pc, #368]	@ (80075b4 <pvPortMalloc+0x184>)
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	2b00      	cmp	r3, #0
 8007446:	d101      	bne.n	800744c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007448:	f000 f924 	bl	8007694 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800744c:	4b5a      	ldr	r3, [pc, #360]	@ (80075b8 <pvPortMalloc+0x188>)
 800744e:	681a      	ldr	r2, [r3, #0]
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	4013      	ands	r3, r2
 8007454:	2b00      	cmp	r3, #0
 8007456:	f040 8095 	bne.w	8007584 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	2b00      	cmp	r3, #0
 800745e:	d01e      	beq.n	800749e <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8007460:	2208      	movs	r2, #8
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	4413      	add	r3, r2
 8007466:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	f003 0307 	and.w	r3, r3, #7
 800746e:	2b00      	cmp	r3, #0
 8007470:	d015      	beq.n	800749e <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	f023 0307 	bic.w	r3, r3, #7
 8007478:	3308      	adds	r3, #8
 800747a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	f003 0307 	and.w	r3, r3, #7
 8007482:	2b00      	cmp	r3, #0
 8007484:	d00b      	beq.n	800749e <pvPortMalloc+0x6e>
	__asm volatile
 8007486:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800748a:	f383 8811 	msr	BASEPRI, r3
 800748e:	f3bf 8f6f 	isb	sy
 8007492:	f3bf 8f4f 	dsb	sy
 8007496:	617b      	str	r3, [r7, #20]
}
 8007498:	bf00      	nop
 800749a:	bf00      	nop
 800749c:	e7fd      	b.n	800749a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d06f      	beq.n	8007584 <pvPortMalloc+0x154>
 80074a4:	4b45      	ldr	r3, [pc, #276]	@ (80075bc <pvPortMalloc+0x18c>)
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	687a      	ldr	r2, [r7, #4]
 80074aa:	429a      	cmp	r2, r3
 80074ac:	d86a      	bhi.n	8007584 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80074ae:	4b44      	ldr	r3, [pc, #272]	@ (80075c0 <pvPortMalloc+0x190>)
 80074b0:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80074b2:	4b43      	ldr	r3, [pc, #268]	@ (80075c0 <pvPortMalloc+0x190>)
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80074b8:	e004      	b.n	80074c4 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80074ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074bc:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80074be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80074c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074c6:	685b      	ldr	r3, [r3, #4]
 80074c8:	687a      	ldr	r2, [r7, #4]
 80074ca:	429a      	cmp	r2, r3
 80074cc:	d903      	bls.n	80074d6 <pvPortMalloc+0xa6>
 80074ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d1f1      	bne.n	80074ba <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80074d6:	4b37      	ldr	r3, [pc, #220]	@ (80075b4 <pvPortMalloc+0x184>)
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80074dc:	429a      	cmp	r2, r3
 80074de:	d051      	beq.n	8007584 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80074e0:	6a3b      	ldr	r3, [r7, #32]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	2208      	movs	r2, #8
 80074e6:	4413      	add	r3, r2
 80074e8:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80074ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074ec:	681a      	ldr	r2, [r3, #0]
 80074ee:	6a3b      	ldr	r3, [r7, #32]
 80074f0:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80074f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074f4:	685a      	ldr	r2, [r3, #4]
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	1ad2      	subs	r2, r2, r3
 80074fa:	2308      	movs	r3, #8
 80074fc:	005b      	lsls	r3, r3, #1
 80074fe:	429a      	cmp	r2, r3
 8007500:	d920      	bls.n	8007544 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007502:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	4413      	add	r3, r2
 8007508:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800750a:	69bb      	ldr	r3, [r7, #24]
 800750c:	f003 0307 	and.w	r3, r3, #7
 8007510:	2b00      	cmp	r3, #0
 8007512:	d00b      	beq.n	800752c <pvPortMalloc+0xfc>
	__asm volatile
 8007514:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007518:	f383 8811 	msr	BASEPRI, r3
 800751c:	f3bf 8f6f 	isb	sy
 8007520:	f3bf 8f4f 	dsb	sy
 8007524:	613b      	str	r3, [r7, #16]
}
 8007526:	bf00      	nop
 8007528:	bf00      	nop
 800752a:	e7fd      	b.n	8007528 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800752c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800752e:	685a      	ldr	r2, [r3, #4]
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	1ad2      	subs	r2, r2, r3
 8007534:	69bb      	ldr	r3, [r7, #24]
 8007536:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007538:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800753a:	687a      	ldr	r2, [r7, #4]
 800753c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800753e:	69b8      	ldr	r0, [r7, #24]
 8007540:	f000 f90a 	bl	8007758 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007544:	4b1d      	ldr	r3, [pc, #116]	@ (80075bc <pvPortMalloc+0x18c>)
 8007546:	681a      	ldr	r2, [r3, #0]
 8007548:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800754a:	685b      	ldr	r3, [r3, #4]
 800754c:	1ad3      	subs	r3, r2, r3
 800754e:	4a1b      	ldr	r2, [pc, #108]	@ (80075bc <pvPortMalloc+0x18c>)
 8007550:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007552:	4b1a      	ldr	r3, [pc, #104]	@ (80075bc <pvPortMalloc+0x18c>)
 8007554:	681a      	ldr	r2, [r3, #0]
 8007556:	4b1b      	ldr	r3, [pc, #108]	@ (80075c4 <pvPortMalloc+0x194>)
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	429a      	cmp	r2, r3
 800755c:	d203      	bcs.n	8007566 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800755e:	4b17      	ldr	r3, [pc, #92]	@ (80075bc <pvPortMalloc+0x18c>)
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	4a18      	ldr	r2, [pc, #96]	@ (80075c4 <pvPortMalloc+0x194>)
 8007564:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007566:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007568:	685a      	ldr	r2, [r3, #4]
 800756a:	4b13      	ldr	r3, [pc, #76]	@ (80075b8 <pvPortMalloc+0x188>)
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	431a      	orrs	r2, r3
 8007570:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007572:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007574:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007576:	2200      	movs	r2, #0
 8007578:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800757a:	4b13      	ldr	r3, [pc, #76]	@ (80075c8 <pvPortMalloc+0x198>)
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	3301      	adds	r3, #1
 8007580:	4a11      	ldr	r2, [pc, #68]	@ (80075c8 <pvPortMalloc+0x198>)
 8007582:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007584:	f7fe ff9e 	bl	80064c4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007588:	69fb      	ldr	r3, [r7, #28]
 800758a:	f003 0307 	and.w	r3, r3, #7
 800758e:	2b00      	cmp	r3, #0
 8007590:	d00b      	beq.n	80075aa <pvPortMalloc+0x17a>
	__asm volatile
 8007592:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007596:	f383 8811 	msr	BASEPRI, r3
 800759a:	f3bf 8f6f 	isb	sy
 800759e:	f3bf 8f4f 	dsb	sy
 80075a2:	60fb      	str	r3, [r7, #12]
}
 80075a4:	bf00      	nop
 80075a6:	bf00      	nop
 80075a8:	e7fd      	b.n	80075a6 <pvPortMalloc+0x176>
	return pvReturn;
 80075aa:	69fb      	ldr	r3, [r7, #28]
}
 80075ac:	4618      	mov	r0, r3
 80075ae:	3728      	adds	r7, #40	@ 0x28
 80075b0:	46bd      	mov	sp, r7
 80075b2:	bd80      	pop	{r7, pc}
 80075b4:	200012d8 	.word	0x200012d8
 80075b8:	200012ec 	.word	0x200012ec
 80075bc:	200012dc 	.word	0x200012dc
 80075c0:	200012d0 	.word	0x200012d0
 80075c4:	200012e0 	.word	0x200012e0
 80075c8:	200012e4 	.word	0x200012e4

080075cc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80075cc:	b580      	push	{r7, lr}
 80075ce:	b086      	sub	sp, #24
 80075d0:	af00      	add	r7, sp, #0
 80075d2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d04f      	beq.n	800767e <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80075de:	2308      	movs	r3, #8
 80075e0:	425b      	negs	r3, r3
 80075e2:	697a      	ldr	r2, [r7, #20]
 80075e4:	4413      	add	r3, r2
 80075e6:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80075e8:	697b      	ldr	r3, [r7, #20]
 80075ea:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80075ec:	693b      	ldr	r3, [r7, #16]
 80075ee:	685a      	ldr	r2, [r3, #4]
 80075f0:	4b25      	ldr	r3, [pc, #148]	@ (8007688 <vPortFree+0xbc>)
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	4013      	ands	r3, r2
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d10b      	bne.n	8007612 <vPortFree+0x46>
	__asm volatile
 80075fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075fe:	f383 8811 	msr	BASEPRI, r3
 8007602:	f3bf 8f6f 	isb	sy
 8007606:	f3bf 8f4f 	dsb	sy
 800760a:	60fb      	str	r3, [r7, #12]
}
 800760c:	bf00      	nop
 800760e:	bf00      	nop
 8007610:	e7fd      	b.n	800760e <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007612:	693b      	ldr	r3, [r7, #16]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	2b00      	cmp	r3, #0
 8007618:	d00b      	beq.n	8007632 <vPortFree+0x66>
	__asm volatile
 800761a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800761e:	f383 8811 	msr	BASEPRI, r3
 8007622:	f3bf 8f6f 	isb	sy
 8007626:	f3bf 8f4f 	dsb	sy
 800762a:	60bb      	str	r3, [r7, #8]
}
 800762c:	bf00      	nop
 800762e:	bf00      	nop
 8007630:	e7fd      	b.n	800762e <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007632:	693b      	ldr	r3, [r7, #16]
 8007634:	685a      	ldr	r2, [r3, #4]
 8007636:	4b14      	ldr	r3, [pc, #80]	@ (8007688 <vPortFree+0xbc>)
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	4013      	ands	r3, r2
 800763c:	2b00      	cmp	r3, #0
 800763e:	d01e      	beq.n	800767e <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007640:	693b      	ldr	r3, [r7, #16]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	2b00      	cmp	r3, #0
 8007646:	d11a      	bne.n	800767e <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007648:	693b      	ldr	r3, [r7, #16]
 800764a:	685a      	ldr	r2, [r3, #4]
 800764c:	4b0e      	ldr	r3, [pc, #56]	@ (8007688 <vPortFree+0xbc>)
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	43db      	mvns	r3, r3
 8007652:	401a      	ands	r2, r3
 8007654:	693b      	ldr	r3, [r7, #16]
 8007656:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007658:	f7fe ff26 	bl	80064a8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800765c:	693b      	ldr	r3, [r7, #16]
 800765e:	685a      	ldr	r2, [r3, #4]
 8007660:	4b0a      	ldr	r3, [pc, #40]	@ (800768c <vPortFree+0xc0>)
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	4413      	add	r3, r2
 8007666:	4a09      	ldr	r2, [pc, #36]	@ (800768c <vPortFree+0xc0>)
 8007668:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800766a:	6938      	ldr	r0, [r7, #16]
 800766c:	f000 f874 	bl	8007758 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007670:	4b07      	ldr	r3, [pc, #28]	@ (8007690 <vPortFree+0xc4>)
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	3301      	adds	r3, #1
 8007676:	4a06      	ldr	r2, [pc, #24]	@ (8007690 <vPortFree+0xc4>)
 8007678:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800767a:	f7fe ff23 	bl	80064c4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800767e:	bf00      	nop
 8007680:	3718      	adds	r7, #24
 8007682:	46bd      	mov	sp, r7
 8007684:	bd80      	pop	{r7, pc}
 8007686:	bf00      	nop
 8007688:	200012ec 	.word	0x200012ec
 800768c:	200012dc 	.word	0x200012dc
 8007690:	200012e8 	.word	0x200012e8

08007694 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007694:	b480      	push	{r7}
 8007696:	b085      	sub	sp, #20
 8007698:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800769a:	f640 53ac 	movw	r3, #3500	@ 0xdac
 800769e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80076a0:	4b27      	ldr	r3, [pc, #156]	@ (8007740 <prvHeapInit+0xac>)
 80076a2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	f003 0307 	and.w	r3, r3, #7
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d00c      	beq.n	80076c8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	3307      	adds	r3, #7
 80076b2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	f023 0307 	bic.w	r3, r3, #7
 80076ba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80076bc:	68ba      	ldr	r2, [r7, #8]
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	1ad3      	subs	r3, r2, r3
 80076c2:	4a1f      	ldr	r2, [pc, #124]	@ (8007740 <prvHeapInit+0xac>)
 80076c4:	4413      	add	r3, r2
 80076c6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80076cc:	4a1d      	ldr	r2, [pc, #116]	@ (8007744 <prvHeapInit+0xb0>)
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80076d2:	4b1c      	ldr	r3, [pc, #112]	@ (8007744 <prvHeapInit+0xb0>)
 80076d4:	2200      	movs	r2, #0
 80076d6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	68ba      	ldr	r2, [r7, #8]
 80076dc:	4413      	add	r3, r2
 80076de:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80076e0:	2208      	movs	r2, #8
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	1a9b      	subs	r3, r3, r2
 80076e6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	f023 0307 	bic.w	r3, r3, #7
 80076ee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	4a15      	ldr	r2, [pc, #84]	@ (8007748 <prvHeapInit+0xb4>)
 80076f4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80076f6:	4b14      	ldr	r3, [pc, #80]	@ (8007748 <prvHeapInit+0xb4>)
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	2200      	movs	r2, #0
 80076fc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80076fe:	4b12      	ldr	r3, [pc, #72]	@ (8007748 <prvHeapInit+0xb4>)
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	2200      	movs	r2, #0
 8007704:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800770a:	683b      	ldr	r3, [r7, #0]
 800770c:	68fa      	ldr	r2, [r7, #12]
 800770e:	1ad2      	subs	r2, r2, r3
 8007710:	683b      	ldr	r3, [r7, #0]
 8007712:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007714:	4b0c      	ldr	r3, [pc, #48]	@ (8007748 <prvHeapInit+0xb4>)
 8007716:	681a      	ldr	r2, [r3, #0]
 8007718:	683b      	ldr	r3, [r7, #0]
 800771a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800771c:	683b      	ldr	r3, [r7, #0]
 800771e:	685b      	ldr	r3, [r3, #4]
 8007720:	4a0a      	ldr	r2, [pc, #40]	@ (800774c <prvHeapInit+0xb8>)
 8007722:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007724:	683b      	ldr	r3, [r7, #0]
 8007726:	685b      	ldr	r3, [r3, #4]
 8007728:	4a09      	ldr	r2, [pc, #36]	@ (8007750 <prvHeapInit+0xbc>)
 800772a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800772c:	4b09      	ldr	r3, [pc, #36]	@ (8007754 <prvHeapInit+0xc0>)
 800772e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8007732:	601a      	str	r2, [r3, #0]
}
 8007734:	bf00      	nop
 8007736:	3714      	adds	r7, #20
 8007738:	46bd      	mov	sp, r7
 800773a:	bc80      	pop	{r7}
 800773c:	4770      	bx	lr
 800773e:	bf00      	nop
 8007740:	20000524 	.word	0x20000524
 8007744:	200012d0 	.word	0x200012d0
 8007748:	200012d8 	.word	0x200012d8
 800774c:	200012e0 	.word	0x200012e0
 8007750:	200012dc 	.word	0x200012dc
 8007754:	200012ec 	.word	0x200012ec

08007758 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007758:	b480      	push	{r7}
 800775a:	b085      	sub	sp, #20
 800775c:	af00      	add	r7, sp, #0
 800775e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007760:	4b27      	ldr	r3, [pc, #156]	@ (8007800 <prvInsertBlockIntoFreeList+0xa8>)
 8007762:	60fb      	str	r3, [r7, #12]
 8007764:	e002      	b.n	800776c <prvInsertBlockIntoFreeList+0x14>
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	60fb      	str	r3, [r7, #12]
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	687a      	ldr	r2, [r7, #4]
 8007772:	429a      	cmp	r2, r3
 8007774:	d8f7      	bhi.n	8007766 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	685b      	ldr	r3, [r3, #4]
 800777e:	68ba      	ldr	r2, [r7, #8]
 8007780:	4413      	add	r3, r2
 8007782:	687a      	ldr	r2, [r7, #4]
 8007784:	429a      	cmp	r2, r3
 8007786:	d108      	bne.n	800779a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	685a      	ldr	r2, [r3, #4]
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	685b      	ldr	r3, [r3, #4]
 8007790:	441a      	add	r2, r3
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	685b      	ldr	r3, [r3, #4]
 80077a2:	68ba      	ldr	r2, [r7, #8]
 80077a4:	441a      	add	r2, r3
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	429a      	cmp	r2, r3
 80077ac:	d118      	bne.n	80077e0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	681a      	ldr	r2, [r3, #0]
 80077b2:	4b14      	ldr	r3, [pc, #80]	@ (8007804 <prvInsertBlockIntoFreeList+0xac>)
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	429a      	cmp	r2, r3
 80077b8:	d00d      	beq.n	80077d6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	685a      	ldr	r2, [r3, #4]
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	685b      	ldr	r3, [r3, #4]
 80077c4:	441a      	add	r2, r3
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	681a      	ldr	r2, [r3, #0]
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	601a      	str	r2, [r3, #0]
 80077d4:	e008      	b.n	80077e8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80077d6:	4b0b      	ldr	r3, [pc, #44]	@ (8007804 <prvInsertBlockIntoFreeList+0xac>)
 80077d8:	681a      	ldr	r2, [r3, #0]
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	601a      	str	r2, [r3, #0]
 80077de:	e003      	b.n	80077e8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	681a      	ldr	r2, [r3, #0]
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80077e8:	68fa      	ldr	r2, [r7, #12]
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	429a      	cmp	r2, r3
 80077ee:	d002      	beq.n	80077f6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	687a      	ldr	r2, [r7, #4]
 80077f4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80077f6:	bf00      	nop
 80077f8:	3714      	adds	r7, #20
 80077fa:	46bd      	mov	sp, r7
 80077fc:	bc80      	pop	{r7}
 80077fe:	4770      	bx	lr
 8007800:	200012d0 	.word	0x200012d0
 8007804:	200012d8 	.word	0x200012d8

08007808 <atoi>:
 8007808:	220a      	movs	r2, #10
 800780a:	2100      	movs	r1, #0
 800780c:	f000 b938 	b.w	8007a80 <strtol>

08007810 <malloc>:
 8007810:	4b02      	ldr	r3, [pc, #8]	@ (800781c <malloc+0xc>)
 8007812:	4601      	mov	r1, r0
 8007814:	6818      	ldr	r0, [r3, #0]
 8007816:	f000 b82d 	b.w	8007874 <_malloc_r>
 800781a:	bf00      	nop
 800781c:	20000018 	.word	0x20000018

08007820 <free>:
 8007820:	4b02      	ldr	r3, [pc, #8]	@ (800782c <free+0xc>)
 8007822:	4601      	mov	r1, r0
 8007824:	6818      	ldr	r0, [r3, #0]
 8007826:	f000 b987 	b.w	8007b38 <_free_r>
 800782a:	bf00      	nop
 800782c:	20000018 	.word	0x20000018

08007830 <sbrk_aligned>:
 8007830:	b570      	push	{r4, r5, r6, lr}
 8007832:	4e0f      	ldr	r6, [pc, #60]	@ (8007870 <sbrk_aligned+0x40>)
 8007834:	460c      	mov	r4, r1
 8007836:	6831      	ldr	r1, [r6, #0]
 8007838:	4605      	mov	r5, r0
 800783a:	b911      	cbnz	r1, 8007842 <sbrk_aligned+0x12>
 800783c:	f000 f932 	bl	8007aa4 <_sbrk_r>
 8007840:	6030      	str	r0, [r6, #0]
 8007842:	4621      	mov	r1, r4
 8007844:	4628      	mov	r0, r5
 8007846:	f000 f92d 	bl	8007aa4 <_sbrk_r>
 800784a:	1c43      	adds	r3, r0, #1
 800784c:	d103      	bne.n	8007856 <sbrk_aligned+0x26>
 800784e:	f04f 34ff 	mov.w	r4, #4294967295
 8007852:	4620      	mov	r0, r4
 8007854:	bd70      	pop	{r4, r5, r6, pc}
 8007856:	1cc4      	adds	r4, r0, #3
 8007858:	f024 0403 	bic.w	r4, r4, #3
 800785c:	42a0      	cmp	r0, r4
 800785e:	d0f8      	beq.n	8007852 <sbrk_aligned+0x22>
 8007860:	1a21      	subs	r1, r4, r0
 8007862:	4628      	mov	r0, r5
 8007864:	f000 f91e 	bl	8007aa4 <_sbrk_r>
 8007868:	3001      	adds	r0, #1
 800786a:	d1f2      	bne.n	8007852 <sbrk_aligned+0x22>
 800786c:	e7ef      	b.n	800784e <sbrk_aligned+0x1e>
 800786e:	bf00      	nop
 8007870:	200012f0 	.word	0x200012f0

08007874 <_malloc_r>:
 8007874:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007878:	1ccd      	adds	r5, r1, #3
 800787a:	f025 0503 	bic.w	r5, r5, #3
 800787e:	3508      	adds	r5, #8
 8007880:	2d0c      	cmp	r5, #12
 8007882:	bf38      	it	cc
 8007884:	250c      	movcc	r5, #12
 8007886:	2d00      	cmp	r5, #0
 8007888:	4606      	mov	r6, r0
 800788a:	db01      	blt.n	8007890 <_malloc_r+0x1c>
 800788c:	42a9      	cmp	r1, r5
 800788e:	d904      	bls.n	800789a <_malloc_r+0x26>
 8007890:	230c      	movs	r3, #12
 8007892:	6033      	str	r3, [r6, #0]
 8007894:	2000      	movs	r0, #0
 8007896:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800789a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007970 <_malloc_r+0xfc>
 800789e:	f000 f869 	bl	8007974 <__malloc_lock>
 80078a2:	f8d8 3000 	ldr.w	r3, [r8]
 80078a6:	461c      	mov	r4, r3
 80078a8:	bb44      	cbnz	r4, 80078fc <_malloc_r+0x88>
 80078aa:	4629      	mov	r1, r5
 80078ac:	4630      	mov	r0, r6
 80078ae:	f7ff ffbf 	bl	8007830 <sbrk_aligned>
 80078b2:	1c43      	adds	r3, r0, #1
 80078b4:	4604      	mov	r4, r0
 80078b6:	d158      	bne.n	800796a <_malloc_r+0xf6>
 80078b8:	f8d8 4000 	ldr.w	r4, [r8]
 80078bc:	4627      	mov	r7, r4
 80078be:	2f00      	cmp	r7, #0
 80078c0:	d143      	bne.n	800794a <_malloc_r+0xd6>
 80078c2:	2c00      	cmp	r4, #0
 80078c4:	d04b      	beq.n	800795e <_malloc_r+0xea>
 80078c6:	6823      	ldr	r3, [r4, #0]
 80078c8:	4639      	mov	r1, r7
 80078ca:	4630      	mov	r0, r6
 80078cc:	eb04 0903 	add.w	r9, r4, r3
 80078d0:	f000 f8e8 	bl	8007aa4 <_sbrk_r>
 80078d4:	4581      	cmp	r9, r0
 80078d6:	d142      	bne.n	800795e <_malloc_r+0xea>
 80078d8:	6821      	ldr	r1, [r4, #0]
 80078da:	4630      	mov	r0, r6
 80078dc:	1a6d      	subs	r5, r5, r1
 80078de:	4629      	mov	r1, r5
 80078e0:	f7ff ffa6 	bl	8007830 <sbrk_aligned>
 80078e4:	3001      	adds	r0, #1
 80078e6:	d03a      	beq.n	800795e <_malloc_r+0xea>
 80078e8:	6823      	ldr	r3, [r4, #0]
 80078ea:	442b      	add	r3, r5
 80078ec:	6023      	str	r3, [r4, #0]
 80078ee:	f8d8 3000 	ldr.w	r3, [r8]
 80078f2:	685a      	ldr	r2, [r3, #4]
 80078f4:	bb62      	cbnz	r2, 8007950 <_malloc_r+0xdc>
 80078f6:	f8c8 7000 	str.w	r7, [r8]
 80078fa:	e00f      	b.n	800791c <_malloc_r+0xa8>
 80078fc:	6822      	ldr	r2, [r4, #0]
 80078fe:	1b52      	subs	r2, r2, r5
 8007900:	d420      	bmi.n	8007944 <_malloc_r+0xd0>
 8007902:	2a0b      	cmp	r2, #11
 8007904:	d917      	bls.n	8007936 <_malloc_r+0xc2>
 8007906:	1961      	adds	r1, r4, r5
 8007908:	42a3      	cmp	r3, r4
 800790a:	6025      	str	r5, [r4, #0]
 800790c:	bf18      	it	ne
 800790e:	6059      	strne	r1, [r3, #4]
 8007910:	6863      	ldr	r3, [r4, #4]
 8007912:	bf08      	it	eq
 8007914:	f8c8 1000 	streq.w	r1, [r8]
 8007918:	5162      	str	r2, [r4, r5]
 800791a:	604b      	str	r3, [r1, #4]
 800791c:	4630      	mov	r0, r6
 800791e:	f000 f82f 	bl	8007980 <__malloc_unlock>
 8007922:	f104 000b 	add.w	r0, r4, #11
 8007926:	1d23      	adds	r3, r4, #4
 8007928:	f020 0007 	bic.w	r0, r0, #7
 800792c:	1ac2      	subs	r2, r0, r3
 800792e:	bf1c      	itt	ne
 8007930:	1a1b      	subne	r3, r3, r0
 8007932:	50a3      	strne	r3, [r4, r2]
 8007934:	e7af      	b.n	8007896 <_malloc_r+0x22>
 8007936:	6862      	ldr	r2, [r4, #4]
 8007938:	42a3      	cmp	r3, r4
 800793a:	bf0c      	ite	eq
 800793c:	f8c8 2000 	streq.w	r2, [r8]
 8007940:	605a      	strne	r2, [r3, #4]
 8007942:	e7eb      	b.n	800791c <_malloc_r+0xa8>
 8007944:	4623      	mov	r3, r4
 8007946:	6864      	ldr	r4, [r4, #4]
 8007948:	e7ae      	b.n	80078a8 <_malloc_r+0x34>
 800794a:	463c      	mov	r4, r7
 800794c:	687f      	ldr	r7, [r7, #4]
 800794e:	e7b6      	b.n	80078be <_malloc_r+0x4a>
 8007950:	461a      	mov	r2, r3
 8007952:	685b      	ldr	r3, [r3, #4]
 8007954:	42a3      	cmp	r3, r4
 8007956:	d1fb      	bne.n	8007950 <_malloc_r+0xdc>
 8007958:	2300      	movs	r3, #0
 800795a:	6053      	str	r3, [r2, #4]
 800795c:	e7de      	b.n	800791c <_malloc_r+0xa8>
 800795e:	230c      	movs	r3, #12
 8007960:	4630      	mov	r0, r6
 8007962:	6033      	str	r3, [r6, #0]
 8007964:	f000 f80c 	bl	8007980 <__malloc_unlock>
 8007968:	e794      	b.n	8007894 <_malloc_r+0x20>
 800796a:	6005      	str	r5, [r0, #0]
 800796c:	e7d6      	b.n	800791c <_malloc_r+0xa8>
 800796e:	bf00      	nop
 8007970:	200012f4 	.word	0x200012f4

08007974 <__malloc_lock>:
 8007974:	4801      	ldr	r0, [pc, #4]	@ (800797c <__malloc_lock+0x8>)
 8007976:	f000 b8cf 	b.w	8007b18 <__retarget_lock_acquire_recursive>
 800797a:	bf00      	nop
 800797c:	20001434 	.word	0x20001434

08007980 <__malloc_unlock>:
 8007980:	4801      	ldr	r0, [pc, #4]	@ (8007988 <__malloc_unlock+0x8>)
 8007982:	f000 b8ca 	b.w	8007b1a <__retarget_lock_release_recursive>
 8007986:	bf00      	nop
 8007988:	20001434 	.word	0x20001434

0800798c <_strtol_l.isra.0>:
 800798c:	2b24      	cmp	r3, #36	@ 0x24
 800798e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007992:	4686      	mov	lr, r0
 8007994:	4690      	mov	r8, r2
 8007996:	d801      	bhi.n	800799c <_strtol_l.isra.0+0x10>
 8007998:	2b01      	cmp	r3, #1
 800799a:	d106      	bne.n	80079aa <_strtol_l.isra.0+0x1e>
 800799c:	f000 f892 	bl	8007ac4 <__errno>
 80079a0:	2316      	movs	r3, #22
 80079a2:	6003      	str	r3, [r0, #0]
 80079a4:	2000      	movs	r0, #0
 80079a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80079aa:	460d      	mov	r5, r1
 80079ac:	4833      	ldr	r0, [pc, #204]	@ (8007a7c <_strtol_l.isra.0+0xf0>)
 80079ae:	462a      	mov	r2, r5
 80079b0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80079b4:	5d06      	ldrb	r6, [r0, r4]
 80079b6:	f016 0608 	ands.w	r6, r6, #8
 80079ba:	d1f8      	bne.n	80079ae <_strtol_l.isra.0+0x22>
 80079bc:	2c2d      	cmp	r4, #45	@ 0x2d
 80079be:	d110      	bne.n	80079e2 <_strtol_l.isra.0+0x56>
 80079c0:	2601      	movs	r6, #1
 80079c2:	782c      	ldrb	r4, [r5, #0]
 80079c4:	1c95      	adds	r5, r2, #2
 80079c6:	f033 0210 	bics.w	r2, r3, #16
 80079ca:	d115      	bne.n	80079f8 <_strtol_l.isra.0+0x6c>
 80079cc:	2c30      	cmp	r4, #48	@ 0x30
 80079ce:	d10d      	bne.n	80079ec <_strtol_l.isra.0+0x60>
 80079d0:	782a      	ldrb	r2, [r5, #0]
 80079d2:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80079d6:	2a58      	cmp	r2, #88	@ 0x58
 80079d8:	d108      	bne.n	80079ec <_strtol_l.isra.0+0x60>
 80079da:	786c      	ldrb	r4, [r5, #1]
 80079dc:	3502      	adds	r5, #2
 80079de:	2310      	movs	r3, #16
 80079e0:	e00a      	b.n	80079f8 <_strtol_l.isra.0+0x6c>
 80079e2:	2c2b      	cmp	r4, #43	@ 0x2b
 80079e4:	bf04      	itt	eq
 80079e6:	782c      	ldrbeq	r4, [r5, #0]
 80079e8:	1c95      	addeq	r5, r2, #2
 80079ea:	e7ec      	b.n	80079c6 <_strtol_l.isra.0+0x3a>
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d1f6      	bne.n	80079de <_strtol_l.isra.0+0x52>
 80079f0:	2c30      	cmp	r4, #48	@ 0x30
 80079f2:	bf14      	ite	ne
 80079f4:	230a      	movne	r3, #10
 80079f6:	2308      	moveq	r3, #8
 80079f8:	2200      	movs	r2, #0
 80079fa:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80079fe:	f10c 3cff 	add.w	ip, ip, #4294967295
 8007a02:	fbbc f9f3 	udiv	r9, ip, r3
 8007a06:	4610      	mov	r0, r2
 8007a08:	fb03 ca19 	mls	sl, r3, r9, ip
 8007a0c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8007a10:	2f09      	cmp	r7, #9
 8007a12:	d80f      	bhi.n	8007a34 <_strtol_l.isra.0+0xa8>
 8007a14:	463c      	mov	r4, r7
 8007a16:	42a3      	cmp	r3, r4
 8007a18:	dd1b      	ble.n	8007a52 <_strtol_l.isra.0+0xc6>
 8007a1a:	1c57      	adds	r7, r2, #1
 8007a1c:	d007      	beq.n	8007a2e <_strtol_l.isra.0+0xa2>
 8007a1e:	4581      	cmp	r9, r0
 8007a20:	d314      	bcc.n	8007a4c <_strtol_l.isra.0+0xc0>
 8007a22:	d101      	bne.n	8007a28 <_strtol_l.isra.0+0x9c>
 8007a24:	45a2      	cmp	sl, r4
 8007a26:	db11      	blt.n	8007a4c <_strtol_l.isra.0+0xc0>
 8007a28:	2201      	movs	r2, #1
 8007a2a:	fb00 4003 	mla	r0, r0, r3, r4
 8007a2e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007a32:	e7eb      	b.n	8007a0c <_strtol_l.isra.0+0x80>
 8007a34:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8007a38:	2f19      	cmp	r7, #25
 8007a3a:	d801      	bhi.n	8007a40 <_strtol_l.isra.0+0xb4>
 8007a3c:	3c37      	subs	r4, #55	@ 0x37
 8007a3e:	e7ea      	b.n	8007a16 <_strtol_l.isra.0+0x8a>
 8007a40:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8007a44:	2f19      	cmp	r7, #25
 8007a46:	d804      	bhi.n	8007a52 <_strtol_l.isra.0+0xc6>
 8007a48:	3c57      	subs	r4, #87	@ 0x57
 8007a4a:	e7e4      	b.n	8007a16 <_strtol_l.isra.0+0x8a>
 8007a4c:	f04f 32ff 	mov.w	r2, #4294967295
 8007a50:	e7ed      	b.n	8007a2e <_strtol_l.isra.0+0xa2>
 8007a52:	1c53      	adds	r3, r2, #1
 8007a54:	d108      	bne.n	8007a68 <_strtol_l.isra.0+0xdc>
 8007a56:	2322      	movs	r3, #34	@ 0x22
 8007a58:	4660      	mov	r0, ip
 8007a5a:	f8ce 3000 	str.w	r3, [lr]
 8007a5e:	f1b8 0f00 	cmp.w	r8, #0
 8007a62:	d0a0      	beq.n	80079a6 <_strtol_l.isra.0+0x1a>
 8007a64:	1e69      	subs	r1, r5, #1
 8007a66:	e006      	b.n	8007a76 <_strtol_l.isra.0+0xea>
 8007a68:	b106      	cbz	r6, 8007a6c <_strtol_l.isra.0+0xe0>
 8007a6a:	4240      	negs	r0, r0
 8007a6c:	f1b8 0f00 	cmp.w	r8, #0
 8007a70:	d099      	beq.n	80079a6 <_strtol_l.isra.0+0x1a>
 8007a72:	2a00      	cmp	r2, #0
 8007a74:	d1f6      	bne.n	8007a64 <_strtol_l.isra.0+0xd8>
 8007a76:	f8c8 1000 	str.w	r1, [r8]
 8007a7a:	e794      	b.n	80079a6 <_strtol_l.isra.0+0x1a>
 8007a7c:	08008c2b 	.word	0x08008c2b

08007a80 <strtol>:
 8007a80:	4613      	mov	r3, r2
 8007a82:	460a      	mov	r2, r1
 8007a84:	4601      	mov	r1, r0
 8007a86:	4802      	ldr	r0, [pc, #8]	@ (8007a90 <strtol+0x10>)
 8007a88:	6800      	ldr	r0, [r0, #0]
 8007a8a:	f7ff bf7f 	b.w	800798c <_strtol_l.isra.0>
 8007a8e:	bf00      	nop
 8007a90:	20000018 	.word	0x20000018

08007a94 <memset>:
 8007a94:	4603      	mov	r3, r0
 8007a96:	4402      	add	r2, r0
 8007a98:	4293      	cmp	r3, r2
 8007a9a:	d100      	bne.n	8007a9e <memset+0xa>
 8007a9c:	4770      	bx	lr
 8007a9e:	f803 1b01 	strb.w	r1, [r3], #1
 8007aa2:	e7f9      	b.n	8007a98 <memset+0x4>

08007aa4 <_sbrk_r>:
 8007aa4:	b538      	push	{r3, r4, r5, lr}
 8007aa6:	2300      	movs	r3, #0
 8007aa8:	4d05      	ldr	r5, [pc, #20]	@ (8007ac0 <_sbrk_r+0x1c>)
 8007aaa:	4604      	mov	r4, r0
 8007aac:	4608      	mov	r0, r1
 8007aae:	602b      	str	r3, [r5, #0]
 8007ab0:	f7fa fa70 	bl	8001f94 <_sbrk>
 8007ab4:	1c43      	adds	r3, r0, #1
 8007ab6:	d102      	bne.n	8007abe <_sbrk_r+0x1a>
 8007ab8:	682b      	ldr	r3, [r5, #0]
 8007aba:	b103      	cbz	r3, 8007abe <_sbrk_r+0x1a>
 8007abc:	6023      	str	r3, [r4, #0]
 8007abe:	bd38      	pop	{r3, r4, r5, pc}
 8007ac0:	20001430 	.word	0x20001430

08007ac4 <__errno>:
 8007ac4:	4b01      	ldr	r3, [pc, #4]	@ (8007acc <__errno+0x8>)
 8007ac6:	6818      	ldr	r0, [r3, #0]
 8007ac8:	4770      	bx	lr
 8007aca:	bf00      	nop
 8007acc:	20000018 	.word	0x20000018

08007ad0 <__libc_init_array>:
 8007ad0:	b570      	push	{r4, r5, r6, lr}
 8007ad2:	2600      	movs	r6, #0
 8007ad4:	4d0c      	ldr	r5, [pc, #48]	@ (8007b08 <__libc_init_array+0x38>)
 8007ad6:	4c0d      	ldr	r4, [pc, #52]	@ (8007b0c <__libc_init_array+0x3c>)
 8007ad8:	1b64      	subs	r4, r4, r5
 8007ada:	10a4      	asrs	r4, r4, #2
 8007adc:	42a6      	cmp	r6, r4
 8007ade:	d109      	bne.n	8007af4 <__libc_init_array+0x24>
 8007ae0:	f001 f842 	bl	8008b68 <_init>
 8007ae4:	2600      	movs	r6, #0
 8007ae6:	4d0a      	ldr	r5, [pc, #40]	@ (8007b10 <__libc_init_array+0x40>)
 8007ae8:	4c0a      	ldr	r4, [pc, #40]	@ (8007b14 <__libc_init_array+0x44>)
 8007aea:	1b64      	subs	r4, r4, r5
 8007aec:	10a4      	asrs	r4, r4, #2
 8007aee:	42a6      	cmp	r6, r4
 8007af0:	d105      	bne.n	8007afe <__libc_init_array+0x2e>
 8007af2:	bd70      	pop	{r4, r5, r6, pc}
 8007af4:	f855 3b04 	ldr.w	r3, [r5], #4
 8007af8:	4798      	blx	r3
 8007afa:	3601      	adds	r6, #1
 8007afc:	e7ee      	b.n	8007adc <__libc_init_array+0xc>
 8007afe:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b02:	4798      	blx	r3
 8007b04:	3601      	adds	r6, #1
 8007b06:	e7f2      	b.n	8007aee <__libc_init_array+0x1e>
 8007b08:	08008f08 	.word	0x08008f08
 8007b0c:	08008f08 	.word	0x08008f08
 8007b10:	08008f08 	.word	0x08008f08
 8007b14:	08008f0c 	.word	0x08008f0c

08007b18 <__retarget_lock_acquire_recursive>:
 8007b18:	4770      	bx	lr

08007b1a <__retarget_lock_release_recursive>:
 8007b1a:	4770      	bx	lr

08007b1c <memcpy>:
 8007b1c:	440a      	add	r2, r1
 8007b1e:	4291      	cmp	r1, r2
 8007b20:	f100 33ff 	add.w	r3, r0, #4294967295
 8007b24:	d100      	bne.n	8007b28 <memcpy+0xc>
 8007b26:	4770      	bx	lr
 8007b28:	b510      	push	{r4, lr}
 8007b2a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007b2e:	4291      	cmp	r1, r2
 8007b30:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007b34:	d1f9      	bne.n	8007b2a <memcpy+0xe>
 8007b36:	bd10      	pop	{r4, pc}

08007b38 <_free_r>:
 8007b38:	b538      	push	{r3, r4, r5, lr}
 8007b3a:	4605      	mov	r5, r0
 8007b3c:	2900      	cmp	r1, #0
 8007b3e:	d040      	beq.n	8007bc2 <_free_r+0x8a>
 8007b40:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007b44:	1f0c      	subs	r4, r1, #4
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	bfb8      	it	lt
 8007b4a:	18e4      	addlt	r4, r4, r3
 8007b4c:	f7ff ff12 	bl	8007974 <__malloc_lock>
 8007b50:	4a1c      	ldr	r2, [pc, #112]	@ (8007bc4 <_free_r+0x8c>)
 8007b52:	6813      	ldr	r3, [r2, #0]
 8007b54:	b933      	cbnz	r3, 8007b64 <_free_r+0x2c>
 8007b56:	6063      	str	r3, [r4, #4]
 8007b58:	6014      	str	r4, [r2, #0]
 8007b5a:	4628      	mov	r0, r5
 8007b5c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007b60:	f7ff bf0e 	b.w	8007980 <__malloc_unlock>
 8007b64:	42a3      	cmp	r3, r4
 8007b66:	d908      	bls.n	8007b7a <_free_r+0x42>
 8007b68:	6820      	ldr	r0, [r4, #0]
 8007b6a:	1821      	adds	r1, r4, r0
 8007b6c:	428b      	cmp	r3, r1
 8007b6e:	bf01      	itttt	eq
 8007b70:	6819      	ldreq	r1, [r3, #0]
 8007b72:	685b      	ldreq	r3, [r3, #4]
 8007b74:	1809      	addeq	r1, r1, r0
 8007b76:	6021      	streq	r1, [r4, #0]
 8007b78:	e7ed      	b.n	8007b56 <_free_r+0x1e>
 8007b7a:	461a      	mov	r2, r3
 8007b7c:	685b      	ldr	r3, [r3, #4]
 8007b7e:	b10b      	cbz	r3, 8007b84 <_free_r+0x4c>
 8007b80:	42a3      	cmp	r3, r4
 8007b82:	d9fa      	bls.n	8007b7a <_free_r+0x42>
 8007b84:	6811      	ldr	r1, [r2, #0]
 8007b86:	1850      	adds	r0, r2, r1
 8007b88:	42a0      	cmp	r0, r4
 8007b8a:	d10b      	bne.n	8007ba4 <_free_r+0x6c>
 8007b8c:	6820      	ldr	r0, [r4, #0]
 8007b8e:	4401      	add	r1, r0
 8007b90:	1850      	adds	r0, r2, r1
 8007b92:	4283      	cmp	r3, r0
 8007b94:	6011      	str	r1, [r2, #0]
 8007b96:	d1e0      	bne.n	8007b5a <_free_r+0x22>
 8007b98:	6818      	ldr	r0, [r3, #0]
 8007b9a:	685b      	ldr	r3, [r3, #4]
 8007b9c:	4408      	add	r0, r1
 8007b9e:	6010      	str	r0, [r2, #0]
 8007ba0:	6053      	str	r3, [r2, #4]
 8007ba2:	e7da      	b.n	8007b5a <_free_r+0x22>
 8007ba4:	d902      	bls.n	8007bac <_free_r+0x74>
 8007ba6:	230c      	movs	r3, #12
 8007ba8:	602b      	str	r3, [r5, #0]
 8007baa:	e7d6      	b.n	8007b5a <_free_r+0x22>
 8007bac:	6820      	ldr	r0, [r4, #0]
 8007bae:	1821      	adds	r1, r4, r0
 8007bb0:	428b      	cmp	r3, r1
 8007bb2:	bf01      	itttt	eq
 8007bb4:	6819      	ldreq	r1, [r3, #0]
 8007bb6:	685b      	ldreq	r3, [r3, #4]
 8007bb8:	1809      	addeq	r1, r1, r0
 8007bba:	6021      	streq	r1, [r4, #0]
 8007bbc:	6063      	str	r3, [r4, #4]
 8007bbe:	6054      	str	r4, [r2, #4]
 8007bc0:	e7cb      	b.n	8007b5a <_free_r+0x22>
 8007bc2:	bd38      	pop	{r3, r4, r5, pc}
 8007bc4:	200012f4 	.word	0x200012f4

08007bc8 <sin>:
 8007bc8:	b530      	push	{r4, r5, lr}
 8007bca:	4d20      	ldr	r5, [pc, #128]	@ (8007c4c <sin+0x84>)
 8007bcc:	f021 4400 	bic.w	r4, r1, #2147483648	@ 0x80000000
 8007bd0:	42ac      	cmp	r4, r5
 8007bd2:	4602      	mov	r2, r0
 8007bd4:	460b      	mov	r3, r1
 8007bd6:	b087      	sub	sp, #28
 8007bd8:	d806      	bhi.n	8007be8 <sin+0x20>
 8007bda:	2300      	movs	r3, #0
 8007bdc:	2200      	movs	r2, #0
 8007bde:	9300      	str	r3, [sp, #0]
 8007be0:	2300      	movs	r3, #0
 8007be2:	f000 f8f9 	bl	8007dd8 <__kernel_sin>
 8007be6:	e004      	b.n	8007bf2 <sin+0x2a>
 8007be8:	4d19      	ldr	r5, [pc, #100]	@ (8007c50 <sin+0x88>)
 8007bea:	42ac      	cmp	r4, r5
 8007bec:	d903      	bls.n	8007bf6 <sin+0x2e>
 8007bee:	f7f8 fab3 	bl	8000158 <__aeabi_dsub>
 8007bf2:	b007      	add	sp, #28
 8007bf4:	bd30      	pop	{r4, r5, pc}
 8007bf6:	aa02      	add	r2, sp, #8
 8007bf8:	f000 f9a6 	bl	8007f48 <__ieee754_rem_pio2>
 8007bfc:	f000 0003 	and.w	r0, r0, #3
 8007c00:	2801      	cmp	r0, #1
 8007c02:	d009      	beq.n	8007c18 <sin+0x50>
 8007c04:	2802      	cmp	r0, #2
 8007c06:	d00e      	beq.n	8007c26 <sin+0x5e>
 8007c08:	b9c0      	cbnz	r0, 8007c3c <sin+0x74>
 8007c0a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007c0e:	2301      	movs	r3, #1
 8007c10:	9300      	str	r3, [sp, #0]
 8007c12:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007c16:	e7e4      	b.n	8007be2 <sin+0x1a>
 8007c18:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007c1c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007c20:	f000 f81a 	bl	8007c58 <__kernel_cos>
 8007c24:	e7e5      	b.n	8007bf2 <sin+0x2a>
 8007c26:	2301      	movs	r3, #1
 8007c28:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007c2c:	9300      	str	r3, [sp, #0]
 8007c2e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007c32:	f000 f8d1 	bl	8007dd8 <__kernel_sin>
 8007c36:	f101 4100 	add.w	r1, r1, #2147483648	@ 0x80000000
 8007c3a:	e7da      	b.n	8007bf2 <sin+0x2a>
 8007c3c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007c40:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007c44:	f000 f808 	bl	8007c58 <__kernel_cos>
 8007c48:	e7f5      	b.n	8007c36 <sin+0x6e>
 8007c4a:	bf00      	nop
 8007c4c:	3fe921fb 	.word	0x3fe921fb
 8007c50:	7fefffff 	.word	0x7fefffff
 8007c54:	00000000 	.word	0x00000000

08007c58 <__kernel_cos>:
 8007c58:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c5c:	f021 4600 	bic.w	r6, r1, #2147483648	@ 0x80000000
 8007c60:	f1b6 5f79 	cmp.w	r6, #1044381696	@ 0x3e400000
 8007c64:	4680      	mov	r8, r0
 8007c66:	4689      	mov	r9, r1
 8007c68:	e9cd 2300 	strd	r2, r3, [sp]
 8007c6c:	d204      	bcs.n	8007c78 <__kernel_cos+0x20>
 8007c6e:	f7f8 fec5 	bl	80009fc <__aeabi_d2iz>
 8007c72:	2800      	cmp	r0, #0
 8007c74:	f000 8086 	beq.w	8007d84 <__kernel_cos+0x12c>
 8007c78:	4642      	mov	r2, r8
 8007c7a:	464b      	mov	r3, r9
 8007c7c:	4640      	mov	r0, r8
 8007c7e:	4649      	mov	r1, r9
 8007c80:	f7f8 fc22 	bl	80004c8 <__aeabi_dmul>
 8007c84:	2200      	movs	r2, #0
 8007c86:	4b4e      	ldr	r3, [pc, #312]	@ (8007dc0 <__kernel_cos+0x168>)
 8007c88:	4604      	mov	r4, r0
 8007c8a:	460d      	mov	r5, r1
 8007c8c:	f7f8 fc1c 	bl	80004c8 <__aeabi_dmul>
 8007c90:	a33f      	add	r3, pc, #252	@ (adr r3, 8007d90 <__kernel_cos+0x138>)
 8007c92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c96:	4682      	mov	sl, r0
 8007c98:	468b      	mov	fp, r1
 8007c9a:	4620      	mov	r0, r4
 8007c9c:	4629      	mov	r1, r5
 8007c9e:	f7f8 fc13 	bl	80004c8 <__aeabi_dmul>
 8007ca2:	a33d      	add	r3, pc, #244	@ (adr r3, 8007d98 <__kernel_cos+0x140>)
 8007ca4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ca8:	f7f8 fa58 	bl	800015c <__adddf3>
 8007cac:	4622      	mov	r2, r4
 8007cae:	462b      	mov	r3, r5
 8007cb0:	f7f8 fc0a 	bl	80004c8 <__aeabi_dmul>
 8007cb4:	a33a      	add	r3, pc, #232	@ (adr r3, 8007da0 <__kernel_cos+0x148>)
 8007cb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cba:	f7f8 fa4d 	bl	8000158 <__aeabi_dsub>
 8007cbe:	4622      	mov	r2, r4
 8007cc0:	462b      	mov	r3, r5
 8007cc2:	f7f8 fc01 	bl	80004c8 <__aeabi_dmul>
 8007cc6:	a338      	add	r3, pc, #224	@ (adr r3, 8007da8 <__kernel_cos+0x150>)
 8007cc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ccc:	f7f8 fa46 	bl	800015c <__adddf3>
 8007cd0:	4622      	mov	r2, r4
 8007cd2:	462b      	mov	r3, r5
 8007cd4:	f7f8 fbf8 	bl	80004c8 <__aeabi_dmul>
 8007cd8:	a335      	add	r3, pc, #212	@ (adr r3, 8007db0 <__kernel_cos+0x158>)
 8007cda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cde:	f7f8 fa3b 	bl	8000158 <__aeabi_dsub>
 8007ce2:	4622      	mov	r2, r4
 8007ce4:	462b      	mov	r3, r5
 8007ce6:	f7f8 fbef 	bl	80004c8 <__aeabi_dmul>
 8007cea:	a333      	add	r3, pc, #204	@ (adr r3, 8007db8 <__kernel_cos+0x160>)
 8007cec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cf0:	f7f8 fa34 	bl	800015c <__adddf3>
 8007cf4:	4622      	mov	r2, r4
 8007cf6:	462b      	mov	r3, r5
 8007cf8:	f7f8 fbe6 	bl	80004c8 <__aeabi_dmul>
 8007cfc:	4622      	mov	r2, r4
 8007cfe:	462b      	mov	r3, r5
 8007d00:	f7f8 fbe2 	bl	80004c8 <__aeabi_dmul>
 8007d04:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007d08:	4604      	mov	r4, r0
 8007d0a:	460d      	mov	r5, r1
 8007d0c:	4640      	mov	r0, r8
 8007d0e:	4649      	mov	r1, r9
 8007d10:	f7f8 fbda 	bl	80004c8 <__aeabi_dmul>
 8007d14:	460b      	mov	r3, r1
 8007d16:	4602      	mov	r2, r0
 8007d18:	4629      	mov	r1, r5
 8007d1a:	4620      	mov	r0, r4
 8007d1c:	f7f8 fa1c 	bl	8000158 <__aeabi_dsub>
 8007d20:	4b28      	ldr	r3, [pc, #160]	@ (8007dc4 <__kernel_cos+0x16c>)
 8007d22:	4680      	mov	r8, r0
 8007d24:	429e      	cmp	r6, r3
 8007d26:	4689      	mov	r9, r1
 8007d28:	d80e      	bhi.n	8007d48 <__kernel_cos+0xf0>
 8007d2a:	4602      	mov	r2, r0
 8007d2c:	460b      	mov	r3, r1
 8007d2e:	4650      	mov	r0, sl
 8007d30:	4659      	mov	r1, fp
 8007d32:	f7f8 fa11 	bl	8000158 <__aeabi_dsub>
 8007d36:	4602      	mov	r2, r0
 8007d38:	2000      	movs	r0, #0
 8007d3a:	460b      	mov	r3, r1
 8007d3c:	4922      	ldr	r1, [pc, #136]	@ (8007dc8 <__kernel_cos+0x170>)
 8007d3e:	f7f8 fa0b 	bl	8000158 <__aeabi_dsub>
 8007d42:	b003      	add	sp, #12
 8007d44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d48:	2400      	movs	r4, #0
 8007d4a:	4b20      	ldr	r3, [pc, #128]	@ (8007dcc <__kernel_cos+0x174>)
 8007d4c:	4622      	mov	r2, r4
 8007d4e:	429e      	cmp	r6, r3
 8007d50:	bf8c      	ite	hi
 8007d52:	4d1f      	ldrhi	r5, [pc, #124]	@ (8007dd0 <__kernel_cos+0x178>)
 8007d54:	f5a6 1500 	subls.w	r5, r6, #2097152	@ 0x200000
 8007d58:	462b      	mov	r3, r5
 8007d5a:	2000      	movs	r0, #0
 8007d5c:	491a      	ldr	r1, [pc, #104]	@ (8007dc8 <__kernel_cos+0x170>)
 8007d5e:	f7f8 f9fb 	bl	8000158 <__aeabi_dsub>
 8007d62:	4622      	mov	r2, r4
 8007d64:	4606      	mov	r6, r0
 8007d66:	460f      	mov	r7, r1
 8007d68:	462b      	mov	r3, r5
 8007d6a:	4650      	mov	r0, sl
 8007d6c:	4659      	mov	r1, fp
 8007d6e:	f7f8 f9f3 	bl	8000158 <__aeabi_dsub>
 8007d72:	4642      	mov	r2, r8
 8007d74:	464b      	mov	r3, r9
 8007d76:	f7f8 f9ef 	bl	8000158 <__aeabi_dsub>
 8007d7a:	4602      	mov	r2, r0
 8007d7c:	460b      	mov	r3, r1
 8007d7e:	4630      	mov	r0, r6
 8007d80:	4639      	mov	r1, r7
 8007d82:	e7dc      	b.n	8007d3e <__kernel_cos+0xe6>
 8007d84:	2000      	movs	r0, #0
 8007d86:	4910      	ldr	r1, [pc, #64]	@ (8007dc8 <__kernel_cos+0x170>)
 8007d88:	e7db      	b.n	8007d42 <__kernel_cos+0xea>
 8007d8a:	bf00      	nop
 8007d8c:	f3af 8000 	nop.w
 8007d90:	be8838d4 	.word	0xbe8838d4
 8007d94:	bda8fae9 	.word	0xbda8fae9
 8007d98:	bdb4b1c4 	.word	0xbdb4b1c4
 8007d9c:	3e21ee9e 	.word	0x3e21ee9e
 8007da0:	809c52ad 	.word	0x809c52ad
 8007da4:	3e927e4f 	.word	0x3e927e4f
 8007da8:	19cb1590 	.word	0x19cb1590
 8007dac:	3efa01a0 	.word	0x3efa01a0
 8007db0:	16c15177 	.word	0x16c15177
 8007db4:	3f56c16c 	.word	0x3f56c16c
 8007db8:	5555554c 	.word	0x5555554c
 8007dbc:	3fa55555 	.word	0x3fa55555
 8007dc0:	3fe00000 	.word	0x3fe00000
 8007dc4:	3fd33332 	.word	0x3fd33332
 8007dc8:	3ff00000 	.word	0x3ff00000
 8007dcc:	3fe90000 	.word	0x3fe90000
 8007dd0:	3fd20000 	.word	0x3fd20000
 8007dd4:	00000000 	.word	0x00000000

08007dd8 <__kernel_sin>:
 8007dd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ddc:	461f      	mov	r7, r3
 8007dde:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8007de2:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 8007de6:	4604      	mov	r4, r0
 8007de8:	460d      	mov	r5, r1
 8007dea:	4616      	mov	r6, r2
 8007dec:	b085      	sub	sp, #20
 8007dee:	d203      	bcs.n	8007df8 <__kernel_sin+0x20>
 8007df0:	f7f8 fe04 	bl	80009fc <__aeabi_d2iz>
 8007df4:	2800      	cmp	r0, #0
 8007df6:	d051      	beq.n	8007e9c <__kernel_sin+0xc4>
 8007df8:	4622      	mov	r2, r4
 8007dfa:	462b      	mov	r3, r5
 8007dfc:	4620      	mov	r0, r4
 8007dfe:	4629      	mov	r1, r5
 8007e00:	f7f8 fb62 	bl	80004c8 <__aeabi_dmul>
 8007e04:	4682      	mov	sl, r0
 8007e06:	468b      	mov	fp, r1
 8007e08:	4602      	mov	r2, r0
 8007e0a:	460b      	mov	r3, r1
 8007e0c:	4620      	mov	r0, r4
 8007e0e:	4629      	mov	r1, r5
 8007e10:	f7f8 fb5a 	bl	80004c8 <__aeabi_dmul>
 8007e14:	a33e      	add	r3, pc, #248	@ (adr r3, 8007f10 <__kernel_sin+0x138>)
 8007e16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e1a:	4680      	mov	r8, r0
 8007e1c:	4689      	mov	r9, r1
 8007e1e:	4650      	mov	r0, sl
 8007e20:	4659      	mov	r1, fp
 8007e22:	f7f8 fb51 	bl	80004c8 <__aeabi_dmul>
 8007e26:	a33c      	add	r3, pc, #240	@ (adr r3, 8007f18 <__kernel_sin+0x140>)
 8007e28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e2c:	f7f8 f994 	bl	8000158 <__aeabi_dsub>
 8007e30:	4652      	mov	r2, sl
 8007e32:	465b      	mov	r3, fp
 8007e34:	f7f8 fb48 	bl	80004c8 <__aeabi_dmul>
 8007e38:	a339      	add	r3, pc, #228	@ (adr r3, 8007f20 <__kernel_sin+0x148>)
 8007e3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e3e:	f7f8 f98d 	bl	800015c <__adddf3>
 8007e42:	4652      	mov	r2, sl
 8007e44:	465b      	mov	r3, fp
 8007e46:	f7f8 fb3f 	bl	80004c8 <__aeabi_dmul>
 8007e4a:	a337      	add	r3, pc, #220	@ (adr r3, 8007f28 <__kernel_sin+0x150>)
 8007e4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e50:	f7f8 f982 	bl	8000158 <__aeabi_dsub>
 8007e54:	4652      	mov	r2, sl
 8007e56:	465b      	mov	r3, fp
 8007e58:	f7f8 fb36 	bl	80004c8 <__aeabi_dmul>
 8007e5c:	a334      	add	r3, pc, #208	@ (adr r3, 8007f30 <__kernel_sin+0x158>)
 8007e5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e62:	f7f8 f97b 	bl	800015c <__adddf3>
 8007e66:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007e68:	e9cd 0100 	strd	r0, r1, [sp]
 8007e6c:	b9db      	cbnz	r3, 8007ea6 <__kernel_sin+0xce>
 8007e6e:	4602      	mov	r2, r0
 8007e70:	460b      	mov	r3, r1
 8007e72:	4650      	mov	r0, sl
 8007e74:	4659      	mov	r1, fp
 8007e76:	f7f8 fb27 	bl	80004c8 <__aeabi_dmul>
 8007e7a:	a32f      	add	r3, pc, #188	@ (adr r3, 8007f38 <__kernel_sin+0x160>)
 8007e7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e80:	f7f8 f96a 	bl	8000158 <__aeabi_dsub>
 8007e84:	4642      	mov	r2, r8
 8007e86:	464b      	mov	r3, r9
 8007e88:	f7f8 fb1e 	bl	80004c8 <__aeabi_dmul>
 8007e8c:	4602      	mov	r2, r0
 8007e8e:	460b      	mov	r3, r1
 8007e90:	4620      	mov	r0, r4
 8007e92:	4629      	mov	r1, r5
 8007e94:	f7f8 f962 	bl	800015c <__adddf3>
 8007e98:	4604      	mov	r4, r0
 8007e9a:	460d      	mov	r5, r1
 8007e9c:	4620      	mov	r0, r4
 8007e9e:	4629      	mov	r1, r5
 8007ea0:	b005      	add	sp, #20
 8007ea2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ea6:	2200      	movs	r2, #0
 8007ea8:	4630      	mov	r0, r6
 8007eaa:	4639      	mov	r1, r7
 8007eac:	4b24      	ldr	r3, [pc, #144]	@ (8007f40 <__kernel_sin+0x168>)
 8007eae:	f7f8 fb0b 	bl	80004c8 <__aeabi_dmul>
 8007eb2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007eb6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007eba:	4640      	mov	r0, r8
 8007ebc:	4649      	mov	r1, r9
 8007ebe:	f7f8 fb03 	bl	80004c8 <__aeabi_dmul>
 8007ec2:	4602      	mov	r2, r0
 8007ec4:	460b      	mov	r3, r1
 8007ec6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007eca:	f7f8 f945 	bl	8000158 <__aeabi_dsub>
 8007ece:	4652      	mov	r2, sl
 8007ed0:	465b      	mov	r3, fp
 8007ed2:	f7f8 faf9 	bl	80004c8 <__aeabi_dmul>
 8007ed6:	4632      	mov	r2, r6
 8007ed8:	463b      	mov	r3, r7
 8007eda:	f7f8 f93d 	bl	8000158 <__aeabi_dsub>
 8007ede:	a316      	add	r3, pc, #88	@ (adr r3, 8007f38 <__kernel_sin+0x160>)
 8007ee0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ee4:	4606      	mov	r6, r0
 8007ee6:	460f      	mov	r7, r1
 8007ee8:	4640      	mov	r0, r8
 8007eea:	4649      	mov	r1, r9
 8007eec:	f7f8 faec 	bl	80004c8 <__aeabi_dmul>
 8007ef0:	4602      	mov	r2, r0
 8007ef2:	460b      	mov	r3, r1
 8007ef4:	4630      	mov	r0, r6
 8007ef6:	4639      	mov	r1, r7
 8007ef8:	f7f8 f930 	bl	800015c <__adddf3>
 8007efc:	4602      	mov	r2, r0
 8007efe:	460b      	mov	r3, r1
 8007f00:	4620      	mov	r0, r4
 8007f02:	4629      	mov	r1, r5
 8007f04:	f7f8 f928 	bl	8000158 <__aeabi_dsub>
 8007f08:	e7c6      	b.n	8007e98 <__kernel_sin+0xc0>
 8007f0a:	bf00      	nop
 8007f0c:	f3af 8000 	nop.w
 8007f10:	5acfd57c 	.word	0x5acfd57c
 8007f14:	3de5d93a 	.word	0x3de5d93a
 8007f18:	8a2b9ceb 	.word	0x8a2b9ceb
 8007f1c:	3e5ae5e6 	.word	0x3e5ae5e6
 8007f20:	57b1fe7d 	.word	0x57b1fe7d
 8007f24:	3ec71de3 	.word	0x3ec71de3
 8007f28:	19c161d5 	.word	0x19c161d5
 8007f2c:	3f2a01a0 	.word	0x3f2a01a0
 8007f30:	1110f8a6 	.word	0x1110f8a6
 8007f34:	3f811111 	.word	0x3f811111
 8007f38:	55555549 	.word	0x55555549
 8007f3c:	3fc55555 	.word	0x3fc55555
 8007f40:	3fe00000 	.word	0x3fe00000
 8007f44:	00000000 	.word	0x00000000

08007f48 <__ieee754_rem_pio2>:
 8007f48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f4c:	4bc4      	ldr	r3, [pc, #784]	@ (8008260 <__ieee754_rem_pio2+0x318>)
 8007f4e:	f021 4800 	bic.w	r8, r1, #2147483648	@ 0x80000000
 8007f52:	b08d      	sub	sp, #52	@ 0x34
 8007f54:	4598      	cmp	r8, r3
 8007f56:	4606      	mov	r6, r0
 8007f58:	460f      	mov	r7, r1
 8007f5a:	4614      	mov	r4, r2
 8007f5c:	9104      	str	r1, [sp, #16]
 8007f5e:	d807      	bhi.n	8007f70 <__ieee754_rem_pio2+0x28>
 8007f60:	e9c2 6700 	strd	r6, r7, [r2]
 8007f64:	2300      	movs	r3, #0
 8007f66:	2200      	movs	r2, #0
 8007f68:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8007f6c:	2500      	movs	r5, #0
 8007f6e:	e026      	b.n	8007fbe <__ieee754_rem_pio2+0x76>
 8007f70:	4bbc      	ldr	r3, [pc, #752]	@ (8008264 <__ieee754_rem_pio2+0x31c>)
 8007f72:	4598      	cmp	r8, r3
 8007f74:	d876      	bhi.n	8008064 <__ieee754_rem_pio2+0x11c>
 8007f76:	9b04      	ldr	r3, [sp, #16]
 8007f78:	4dbb      	ldr	r5, [pc, #748]	@ (8008268 <__ieee754_rem_pio2+0x320>)
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	a3aa      	add	r3, pc, #680	@ (adr r3, 8008228 <__ieee754_rem_pio2+0x2e0>)
 8007f7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f82:	dd38      	ble.n	8007ff6 <__ieee754_rem_pio2+0xae>
 8007f84:	f7f8 f8e8 	bl	8000158 <__aeabi_dsub>
 8007f88:	45a8      	cmp	r8, r5
 8007f8a:	4606      	mov	r6, r0
 8007f8c:	460f      	mov	r7, r1
 8007f8e:	d01a      	beq.n	8007fc6 <__ieee754_rem_pio2+0x7e>
 8007f90:	a3a7      	add	r3, pc, #668	@ (adr r3, 8008230 <__ieee754_rem_pio2+0x2e8>)
 8007f92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f96:	f7f8 f8df 	bl	8000158 <__aeabi_dsub>
 8007f9a:	4602      	mov	r2, r0
 8007f9c:	460b      	mov	r3, r1
 8007f9e:	4680      	mov	r8, r0
 8007fa0:	4689      	mov	r9, r1
 8007fa2:	4630      	mov	r0, r6
 8007fa4:	4639      	mov	r1, r7
 8007fa6:	f7f8 f8d7 	bl	8000158 <__aeabi_dsub>
 8007faa:	a3a1      	add	r3, pc, #644	@ (adr r3, 8008230 <__ieee754_rem_pio2+0x2e8>)
 8007fac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fb0:	f7f8 f8d2 	bl	8000158 <__aeabi_dsub>
 8007fb4:	2501      	movs	r5, #1
 8007fb6:	e9c4 8900 	strd	r8, r9, [r4]
 8007fba:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8007fbe:	4628      	mov	r0, r5
 8007fc0:	b00d      	add	sp, #52	@ 0x34
 8007fc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007fc6:	a39c      	add	r3, pc, #624	@ (adr r3, 8008238 <__ieee754_rem_pio2+0x2f0>)
 8007fc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fcc:	f7f8 f8c4 	bl	8000158 <__aeabi_dsub>
 8007fd0:	a39b      	add	r3, pc, #620	@ (adr r3, 8008240 <__ieee754_rem_pio2+0x2f8>)
 8007fd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fd6:	4606      	mov	r6, r0
 8007fd8:	460f      	mov	r7, r1
 8007fda:	f7f8 f8bd 	bl	8000158 <__aeabi_dsub>
 8007fde:	4602      	mov	r2, r0
 8007fe0:	460b      	mov	r3, r1
 8007fe2:	4680      	mov	r8, r0
 8007fe4:	4689      	mov	r9, r1
 8007fe6:	4630      	mov	r0, r6
 8007fe8:	4639      	mov	r1, r7
 8007fea:	f7f8 f8b5 	bl	8000158 <__aeabi_dsub>
 8007fee:	a394      	add	r3, pc, #592	@ (adr r3, 8008240 <__ieee754_rem_pio2+0x2f8>)
 8007ff0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ff4:	e7dc      	b.n	8007fb0 <__ieee754_rem_pio2+0x68>
 8007ff6:	f7f8 f8b1 	bl	800015c <__adddf3>
 8007ffa:	45a8      	cmp	r8, r5
 8007ffc:	4606      	mov	r6, r0
 8007ffe:	460f      	mov	r7, r1
 8008000:	d018      	beq.n	8008034 <__ieee754_rem_pio2+0xec>
 8008002:	a38b      	add	r3, pc, #556	@ (adr r3, 8008230 <__ieee754_rem_pio2+0x2e8>)
 8008004:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008008:	f7f8 f8a8 	bl	800015c <__adddf3>
 800800c:	4602      	mov	r2, r0
 800800e:	460b      	mov	r3, r1
 8008010:	4680      	mov	r8, r0
 8008012:	4689      	mov	r9, r1
 8008014:	4630      	mov	r0, r6
 8008016:	4639      	mov	r1, r7
 8008018:	f7f8 f89e 	bl	8000158 <__aeabi_dsub>
 800801c:	a384      	add	r3, pc, #528	@ (adr r3, 8008230 <__ieee754_rem_pio2+0x2e8>)
 800801e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008022:	f7f8 f89b 	bl	800015c <__adddf3>
 8008026:	f04f 35ff 	mov.w	r5, #4294967295
 800802a:	e9c4 8900 	strd	r8, r9, [r4]
 800802e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8008032:	e7c4      	b.n	8007fbe <__ieee754_rem_pio2+0x76>
 8008034:	a380      	add	r3, pc, #512	@ (adr r3, 8008238 <__ieee754_rem_pio2+0x2f0>)
 8008036:	e9d3 2300 	ldrd	r2, r3, [r3]
 800803a:	f7f8 f88f 	bl	800015c <__adddf3>
 800803e:	a380      	add	r3, pc, #512	@ (adr r3, 8008240 <__ieee754_rem_pio2+0x2f8>)
 8008040:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008044:	4606      	mov	r6, r0
 8008046:	460f      	mov	r7, r1
 8008048:	f7f8 f888 	bl	800015c <__adddf3>
 800804c:	4602      	mov	r2, r0
 800804e:	460b      	mov	r3, r1
 8008050:	4680      	mov	r8, r0
 8008052:	4689      	mov	r9, r1
 8008054:	4630      	mov	r0, r6
 8008056:	4639      	mov	r1, r7
 8008058:	f7f8 f87e 	bl	8000158 <__aeabi_dsub>
 800805c:	a378      	add	r3, pc, #480	@ (adr r3, 8008240 <__ieee754_rem_pio2+0x2f8>)
 800805e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008062:	e7de      	b.n	8008022 <__ieee754_rem_pio2+0xda>
 8008064:	4b81      	ldr	r3, [pc, #516]	@ (800826c <__ieee754_rem_pio2+0x324>)
 8008066:	4598      	cmp	r8, r3
 8008068:	f200 80cf 	bhi.w	800820a <__ieee754_rem_pio2+0x2c2>
 800806c:	f000 f962 	bl	8008334 <fabs>
 8008070:	a375      	add	r3, pc, #468	@ (adr r3, 8008248 <__ieee754_rem_pio2+0x300>)
 8008072:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008076:	4606      	mov	r6, r0
 8008078:	460f      	mov	r7, r1
 800807a:	f7f8 fa25 	bl	80004c8 <__aeabi_dmul>
 800807e:	2200      	movs	r2, #0
 8008080:	4b7b      	ldr	r3, [pc, #492]	@ (8008270 <__ieee754_rem_pio2+0x328>)
 8008082:	f7f8 f86b 	bl	800015c <__adddf3>
 8008086:	f7f8 fcb9 	bl	80009fc <__aeabi_d2iz>
 800808a:	4605      	mov	r5, r0
 800808c:	f7f8 f9b2 	bl	80003f4 <__aeabi_i2d>
 8008090:	4602      	mov	r2, r0
 8008092:	460b      	mov	r3, r1
 8008094:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008098:	a363      	add	r3, pc, #396	@ (adr r3, 8008228 <__ieee754_rem_pio2+0x2e0>)
 800809a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800809e:	f7f8 fa13 	bl	80004c8 <__aeabi_dmul>
 80080a2:	4602      	mov	r2, r0
 80080a4:	460b      	mov	r3, r1
 80080a6:	4630      	mov	r0, r6
 80080a8:	4639      	mov	r1, r7
 80080aa:	f7f8 f855 	bl	8000158 <__aeabi_dsub>
 80080ae:	a360      	add	r3, pc, #384	@ (adr r3, 8008230 <__ieee754_rem_pio2+0x2e8>)
 80080b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080b4:	4682      	mov	sl, r0
 80080b6:	468b      	mov	fp, r1
 80080b8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80080bc:	f7f8 fa04 	bl	80004c8 <__aeabi_dmul>
 80080c0:	2d1f      	cmp	r5, #31
 80080c2:	4606      	mov	r6, r0
 80080c4:	460f      	mov	r7, r1
 80080c6:	dc0c      	bgt.n	80080e2 <__ieee754_rem_pio2+0x19a>
 80080c8:	4b6a      	ldr	r3, [pc, #424]	@ (8008274 <__ieee754_rem_pio2+0x32c>)
 80080ca:	1e6a      	subs	r2, r5, #1
 80080cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80080d0:	4543      	cmp	r3, r8
 80080d2:	d006      	beq.n	80080e2 <__ieee754_rem_pio2+0x19a>
 80080d4:	4632      	mov	r2, r6
 80080d6:	463b      	mov	r3, r7
 80080d8:	4650      	mov	r0, sl
 80080da:	4659      	mov	r1, fp
 80080dc:	f7f8 f83c 	bl	8000158 <__aeabi_dsub>
 80080e0:	e00e      	b.n	8008100 <__ieee754_rem_pio2+0x1b8>
 80080e2:	463b      	mov	r3, r7
 80080e4:	4632      	mov	r2, r6
 80080e6:	4650      	mov	r0, sl
 80080e8:	4659      	mov	r1, fp
 80080ea:	f7f8 f835 	bl	8000158 <__aeabi_dsub>
 80080ee:	ea4f 5328 	mov.w	r3, r8, asr #20
 80080f2:	9305      	str	r3, [sp, #20]
 80080f4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80080f8:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 80080fc:	2b10      	cmp	r3, #16
 80080fe:	dc02      	bgt.n	8008106 <__ieee754_rem_pio2+0x1be>
 8008100:	e9c4 0100 	strd	r0, r1, [r4]
 8008104:	e039      	b.n	800817a <__ieee754_rem_pio2+0x232>
 8008106:	a34c      	add	r3, pc, #304	@ (adr r3, 8008238 <__ieee754_rem_pio2+0x2f0>)
 8008108:	e9d3 2300 	ldrd	r2, r3, [r3]
 800810c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008110:	f7f8 f9da 	bl	80004c8 <__aeabi_dmul>
 8008114:	4606      	mov	r6, r0
 8008116:	460f      	mov	r7, r1
 8008118:	4602      	mov	r2, r0
 800811a:	460b      	mov	r3, r1
 800811c:	4650      	mov	r0, sl
 800811e:	4659      	mov	r1, fp
 8008120:	f7f8 f81a 	bl	8000158 <__aeabi_dsub>
 8008124:	4602      	mov	r2, r0
 8008126:	460b      	mov	r3, r1
 8008128:	4680      	mov	r8, r0
 800812a:	4689      	mov	r9, r1
 800812c:	4650      	mov	r0, sl
 800812e:	4659      	mov	r1, fp
 8008130:	f7f8 f812 	bl	8000158 <__aeabi_dsub>
 8008134:	4632      	mov	r2, r6
 8008136:	463b      	mov	r3, r7
 8008138:	f7f8 f80e 	bl	8000158 <__aeabi_dsub>
 800813c:	a340      	add	r3, pc, #256	@ (adr r3, 8008240 <__ieee754_rem_pio2+0x2f8>)
 800813e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008142:	4606      	mov	r6, r0
 8008144:	460f      	mov	r7, r1
 8008146:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800814a:	f7f8 f9bd 	bl	80004c8 <__aeabi_dmul>
 800814e:	4632      	mov	r2, r6
 8008150:	463b      	mov	r3, r7
 8008152:	f7f8 f801 	bl	8000158 <__aeabi_dsub>
 8008156:	4602      	mov	r2, r0
 8008158:	460b      	mov	r3, r1
 800815a:	4606      	mov	r6, r0
 800815c:	460f      	mov	r7, r1
 800815e:	4640      	mov	r0, r8
 8008160:	4649      	mov	r1, r9
 8008162:	f7f7 fff9 	bl	8000158 <__aeabi_dsub>
 8008166:	9a05      	ldr	r2, [sp, #20]
 8008168:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800816c:	1ad3      	subs	r3, r2, r3
 800816e:	2b31      	cmp	r3, #49	@ 0x31
 8008170:	dc20      	bgt.n	80081b4 <__ieee754_rem_pio2+0x26c>
 8008172:	46c2      	mov	sl, r8
 8008174:	46cb      	mov	fp, r9
 8008176:	e9c4 0100 	strd	r0, r1, [r4]
 800817a:	e9d4 8900 	ldrd	r8, r9, [r4]
 800817e:	4650      	mov	r0, sl
 8008180:	4642      	mov	r2, r8
 8008182:	464b      	mov	r3, r9
 8008184:	4659      	mov	r1, fp
 8008186:	f7f7 ffe7 	bl	8000158 <__aeabi_dsub>
 800818a:	463b      	mov	r3, r7
 800818c:	4632      	mov	r2, r6
 800818e:	f7f7 ffe3 	bl	8000158 <__aeabi_dsub>
 8008192:	9b04      	ldr	r3, [sp, #16]
 8008194:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8008198:	2b00      	cmp	r3, #0
 800819a:	f6bf af10 	bge.w	8007fbe <__ieee754_rem_pio2+0x76>
 800819e:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 80081a2:	6063      	str	r3, [r4, #4]
 80081a4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80081a8:	f8c4 8000 	str.w	r8, [r4]
 80081ac:	60a0      	str	r0, [r4, #8]
 80081ae:	60e3      	str	r3, [r4, #12]
 80081b0:	426d      	negs	r5, r5
 80081b2:	e704      	b.n	8007fbe <__ieee754_rem_pio2+0x76>
 80081b4:	a326      	add	r3, pc, #152	@ (adr r3, 8008250 <__ieee754_rem_pio2+0x308>)
 80081b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081ba:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80081be:	f7f8 f983 	bl	80004c8 <__aeabi_dmul>
 80081c2:	4606      	mov	r6, r0
 80081c4:	460f      	mov	r7, r1
 80081c6:	4602      	mov	r2, r0
 80081c8:	460b      	mov	r3, r1
 80081ca:	4640      	mov	r0, r8
 80081cc:	4649      	mov	r1, r9
 80081ce:	f7f7 ffc3 	bl	8000158 <__aeabi_dsub>
 80081d2:	4602      	mov	r2, r0
 80081d4:	460b      	mov	r3, r1
 80081d6:	4682      	mov	sl, r0
 80081d8:	468b      	mov	fp, r1
 80081da:	4640      	mov	r0, r8
 80081dc:	4649      	mov	r1, r9
 80081de:	f7f7 ffbb 	bl	8000158 <__aeabi_dsub>
 80081e2:	4632      	mov	r2, r6
 80081e4:	463b      	mov	r3, r7
 80081e6:	f7f7 ffb7 	bl	8000158 <__aeabi_dsub>
 80081ea:	a31b      	add	r3, pc, #108	@ (adr r3, 8008258 <__ieee754_rem_pio2+0x310>)
 80081ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081f0:	4606      	mov	r6, r0
 80081f2:	460f      	mov	r7, r1
 80081f4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80081f8:	f7f8 f966 	bl	80004c8 <__aeabi_dmul>
 80081fc:	4632      	mov	r2, r6
 80081fe:	463b      	mov	r3, r7
 8008200:	f7f7 ffaa 	bl	8000158 <__aeabi_dsub>
 8008204:	4606      	mov	r6, r0
 8008206:	460f      	mov	r7, r1
 8008208:	e764      	b.n	80080d4 <__ieee754_rem_pio2+0x18c>
 800820a:	4b1b      	ldr	r3, [pc, #108]	@ (8008278 <__ieee754_rem_pio2+0x330>)
 800820c:	4598      	cmp	r8, r3
 800820e:	d935      	bls.n	800827c <__ieee754_rem_pio2+0x334>
 8008210:	4602      	mov	r2, r0
 8008212:	460b      	mov	r3, r1
 8008214:	f7f7 ffa0 	bl	8000158 <__aeabi_dsub>
 8008218:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800821c:	e9c4 0100 	strd	r0, r1, [r4]
 8008220:	e6a4      	b.n	8007f6c <__ieee754_rem_pio2+0x24>
 8008222:	bf00      	nop
 8008224:	f3af 8000 	nop.w
 8008228:	54400000 	.word	0x54400000
 800822c:	3ff921fb 	.word	0x3ff921fb
 8008230:	1a626331 	.word	0x1a626331
 8008234:	3dd0b461 	.word	0x3dd0b461
 8008238:	1a600000 	.word	0x1a600000
 800823c:	3dd0b461 	.word	0x3dd0b461
 8008240:	2e037073 	.word	0x2e037073
 8008244:	3ba3198a 	.word	0x3ba3198a
 8008248:	6dc9c883 	.word	0x6dc9c883
 800824c:	3fe45f30 	.word	0x3fe45f30
 8008250:	2e000000 	.word	0x2e000000
 8008254:	3ba3198a 	.word	0x3ba3198a
 8008258:	252049c1 	.word	0x252049c1
 800825c:	397b839a 	.word	0x397b839a
 8008260:	3fe921fb 	.word	0x3fe921fb
 8008264:	4002d97b 	.word	0x4002d97b
 8008268:	3ff921fb 	.word	0x3ff921fb
 800826c:	413921fb 	.word	0x413921fb
 8008270:	3fe00000 	.word	0x3fe00000
 8008274:	08008d2c 	.word	0x08008d2c
 8008278:	7fefffff 	.word	0x7fefffff
 800827c:	ea4f 5528 	mov.w	r5, r8, asr #20
 8008280:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 8008284:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8008288:	460f      	mov	r7, r1
 800828a:	f7f8 fbb7 	bl	80009fc <__aeabi_d2iz>
 800828e:	f7f8 f8b1 	bl	80003f4 <__aeabi_i2d>
 8008292:	4602      	mov	r2, r0
 8008294:	460b      	mov	r3, r1
 8008296:	4630      	mov	r0, r6
 8008298:	4639      	mov	r1, r7
 800829a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800829e:	f7f7 ff5b 	bl	8000158 <__aeabi_dsub>
 80082a2:	2200      	movs	r2, #0
 80082a4:	4b21      	ldr	r3, [pc, #132]	@ (800832c <__ieee754_rem_pio2+0x3e4>)
 80082a6:	f7f8 f90f 	bl	80004c8 <__aeabi_dmul>
 80082aa:	460f      	mov	r7, r1
 80082ac:	4606      	mov	r6, r0
 80082ae:	f7f8 fba5 	bl	80009fc <__aeabi_d2iz>
 80082b2:	f7f8 f89f 	bl	80003f4 <__aeabi_i2d>
 80082b6:	4602      	mov	r2, r0
 80082b8:	460b      	mov	r3, r1
 80082ba:	4630      	mov	r0, r6
 80082bc:	4639      	mov	r1, r7
 80082be:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80082c2:	f7f7 ff49 	bl	8000158 <__aeabi_dsub>
 80082c6:	2200      	movs	r2, #0
 80082c8:	4b18      	ldr	r3, [pc, #96]	@ (800832c <__ieee754_rem_pio2+0x3e4>)
 80082ca:	f7f8 f8fd 	bl	80004c8 <__aeabi_dmul>
 80082ce:	f04f 0803 	mov.w	r8, #3
 80082d2:	2600      	movs	r6, #0
 80082d4:	2700      	movs	r7, #0
 80082d6:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 80082da:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 80082de:	4632      	mov	r2, r6
 80082e0:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 80082e4:	463b      	mov	r3, r7
 80082e6:	46c2      	mov	sl, r8
 80082e8:	f108 38ff 	add.w	r8, r8, #4294967295
 80082ec:	f7f8 fb54 	bl	8000998 <__aeabi_dcmpeq>
 80082f0:	2800      	cmp	r0, #0
 80082f2:	d1f4      	bne.n	80082de <__ieee754_rem_pio2+0x396>
 80082f4:	4b0e      	ldr	r3, [pc, #56]	@ (8008330 <__ieee754_rem_pio2+0x3e8>)
 80082f6:	462a      	mov	r2, r5
 80082f8:	9301      	str	r3, [sp, #4]
 80082fa:	2302      	movs	r3, #2
 80082fc:	4621      	mov	r1, r4
 80082fe:	9300      	str	r3, [sp, #0]
 8008300:	a806      	add	r0, sp, #24
 8008302:	4653      	mov	r3, sl
 8008304:	f000 f81a 	bl	800833c <__kernel_rem_pio2>
 8008308:	9b04      	ldr	r3, [sp, #16]
 800830a:	4605      	mov	r5, r0
 800830c:	2b00      	cmp	r3, #0
 800830e:	f6bf ae56 	bge.w	8007fbe <__ieee754_rem_pio2+0x76>
 8008312:	e9d4 2100 	ldrd	r2, r1, [r4]
 8008316:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800831a:	e9c4 2300 	strd	r2, r3, [r4]
 800831e:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 8008322:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8008326:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800832a:	e741      	b.n	80081b0 <__ieee754_rem_pio2+0x268>
 800832c:	41700000 	.word	0x41700000
 8008330:	08008dac 	.word	0x08008dac

08008334 <fabs>:
 8008334:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8008338:	4619      	mov	r1, r3
 800833a:	4770      	bx	lr

0800833c <__kernel_rem_pio2>:
 800833c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008340:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 8008344:	9308      	str	r3, [sp, #32]
 8008346:	9104      	str	r1, [sp, #16]
 8008348:	4bba      	ldr	r3, [pc, #744]	@ (8008634 <__kernel_rem_pio2+0x2f8>)
 800834a:	99a2      	ldr	r1, [sp, #648]	@ 0x288
 800834c:	f112 0f14 	cmn.w	r2, #20
 8008350:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008354:	bfa8      	it	ge
 8008356:	1ed4      	subge	r4, r2, #3
 8008358:	9302      	str	r3, [sp, #8]
 800835a:	9b08      	ldr	r3, [sp, #32]
 800835c:	bfb8      	it	lt
 800835e:	2400      	movlt	r4, #0
 8008360:	f103 33ff 	add.w	r3, r3, #4294967295
 8008364:	9306      	str	r3, [sp, #24]
 8008366:	bfa4      	itt	ge
 8008368:	2318      	movge	r3, #24
 800836a:	fb94 f4f3 	sdivge	r4, r4, r3
 800836e:	f06f 0317 	mvn.w	r3, #23
 8008372:	fb04 3303 	mla	r3, r4, r3, r3
 8008376:	eb03 0a02 	add.w	sl, r3, r2
 800837a:	9a06      	ldr	r2, [sp, #24]
 800837c:	9b02      	ldr	r3, [sp, #8]
 800837e:	1aa7      	subs	r7, r4, r2
 8008380:	eb03 0802 	add.w	r8, r3, r2
 8008384:	9ba3      	ldr	r3, [sp, #652]	@ 0x28c
 8008386:	2500      	movs	r5, #0
 8008388:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800838c:	2200      	movs	r2, #0
 800838e:	2300      	movs	r3, #0
 8008390:	9009      	str	r0, [sp, #36]	@ 0x24
 8008392:	ae20      	add	r6, sp, #128	@ 0x80
 8008394:	4545      	cmp	r5, r8
 8008396:	dd13      	ble.n	80083c0 <__kernel_rem_pio2+0x84>
 8008398:	2700      	movs	r7, #0
 800839a:	9a08      	ldr	r2, [sp, #32]
 800839c:	ab20      	add	r3, sp, #128	@ 0x80
 800839e:	eb03 05c2 	add.w	r5, r3, r2, lsl #3
 80083a2:	f50d 7be0 	add.w	fp, sp, #448	@ 0x1c0
 80083a6:	9b02      	ldr	r3, [sp, #8]
 80083a8:	429f      	cmp	r7, r3
 80083aa:	dc33      	bgt.n	8008414 <__kernel_rem_pio2+0xd8>
 80083ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80083ae:	2200      	movs	r2, #0
 80083b0:	f1a3 0908 	sub.w	r9, r3, #8
 80083b4:	2300      	movs	r3, #0
 80083b6:	46a8      	mov	r8, r5
 80083b8:	2600      	movs	r6, #0
 80083ba:	e9cd 2300 	strd	r2, r3, [sp]
 80083be:	e01f      	b.n	8008400 <__kernel_rem_pio2+0xc4>
 80083c0:	42ef      	cmn	r7, r5
 80083c2:	d40b      	bmi.n	80083dc <__kernel_rem_pio2+0xa0>
 80083c4:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 80083c8:	e9cd 2300 	strd	r2, r3, [sp]
 80083cc:	f7f8 f812 	bl	80003f4 <__aeabi_i2d>
 80083d0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80083d4:	e8e6 0102 	strd	r0, r1, [r6], #8
 80083d8:	3501      	adds	r5, #1
 80083da:	e7db      	b.n	8008394 <__kernel_rem_pio2+0x58>
 80083dc:	4610      	mov	r0, r2
 80083de:	4619      	mov	r1, r3
 80083e0:	e7f8      	b.n	80083d4 <__kernel_rem_pio2+0x98>
 80083e2:	e978 2302 	ldrd	r2, r3, [r8, #-8]!
 80083e6:	e9f9 0102 	ldrd	r0, r1, [r9, #8]!
 80083ea:	f7f8 f86d 	bl	80004c8 <__aeabi_dmul>
 80083ee:	4602      	mov	r2, r0
 80083f0:	460b      	mov	r3, r1
 80083f2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80083f6:	f7f7 feb1 	bl	800015c <__adddf3>
 80083fa:	e9cd 0100 	strd	r0, r1, [sp]
 80083fe:	3601      	adds	r6, #1
 8008400:	9b06      	ldr	r3, [sp, #24]
 8008402:	429e      	cmp	r6, r3
 8008404:	dded      	ble.n	80083e2 <__kernel_rem_pio2+0xa6>
 8008406:	e9dd 2300 	ldrd	r2, r3, [sp]
 800840a:	3701      	adds	r7, #1
 800840c:	e8eb 2302 	strd	r2, r3, [fp], #8
 8008410:	3508      	adds	r5, #8
 8008412:	e7c8      	b.n	80083a6 <__kernel_rem_pio2+0x6a>
 8008414:	9b02      	ldr	r3, [sp, #8]
 8008416:	aa0c      	add	r2, sp, #48	@ 0x30
 8008418:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800841c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800841e:	9ba3      	ldr	r3, [sp, #652]	@ 0x28c
 8008420:	f8dd b008 	ldr.w	fp, [sp, #8]
 8008424:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8008428:	930a      	str	r3, [sp, #40]	@ 0x28
 800842a:	ab98      	add	r3, sp, #608	@ 0x260
 800842c:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8008430:	e953 4528 	ldrd	r4, r5, [r3, #-160]	@ 0xa0
 8008434:	ab70      	add	r3, sp, #448	@ 0x1c0
 8008436:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800843a:	ae0c      	add	r6, sp, #48	@ 0x30
 800843c:	4699      	mov	r9, r3
 800843e:	46b0      	mov	r8, r6
 8008440:	465f      	mov	r7, fp
 8008442:	9307      	str	r3, [sp, #28]
 8008444:	2f00      	cmp	r7, #0
 8008446:	dc71      	bgt.n	800852c <__kernel_rem_pio2+0x1f0>
 8008448:	4652      	mov	r2, sl
 800844a:	4620      	mov	r0, r4
 800844c:	4629      	mov	r1, r5
 800844e:	f000 fa97 	bl	8008980 <scalbn>
 8008452:	2200      	movs	r2, #0
 8008454:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 8008458:	4604      	mov	r4, r0
 800845a:	460d      	mov	r5, r1
 800845c:	f7f8 f834 	bl	80004c8 <__aeabi_dmul>
 8008460:	f000 fb02 	bl	8008a68 <floor>
 8008464:	2200      	movs	r2, #0
 8008466:	4b74      	ldr	r3, [pc, #464]	@ (8008638 <__kernel_rem_pio2+0x2fc>)
 8008468:	f7f8 f82e 	bl	80004c8 <__aeabi_dmul>
 800846c:	4602      	mov	r2, r0
 800846e:	460b      	mov	r3, r1
 8008470:	4620      	mov	r0, r4
 8008472:	4629      	mov	r1, r5
 8008474:	f7f7 fe70 	bl	8000158 <__aeabi_dsub>
 8008478:	460d      	mov	r5, r1
 800847a:	4604      	mov	r4, r0
 800847c:	f7f8 fabe 	bl	80009fc <__aeabi_d2iz>
 8008480:	9005      	str	r0, [sp, #20]
 8008482:	f7f7 ffb7 	bl	80003f4 <__aeabi_i2d>
 8008486:	4602      	mov	r2, r0
 8008488:	460b      	mov	r3, r1
 800848a:	4620      	mov	r0, r4
 800848c:	4629      	mov	r1, r5
 800848e:	f7f7 fe63 	bl	8000158 <__aeabi_dsub>
 8008492:	f1ba 0f00 	cmp.w	sl, #0
 8008496:	4680      	mov	r8, r0
 8008498:	4689      	mov	r9, r1
 800849a:	dd6d      	ble.n	8008578 <__kernel_rem_pio2+0x23c>
 800849c:	f10b 31ff 	add.w	r1, fp, #4294967295
 80084a0:	ab0c      	add	r3, sp, #48	@ 0x30
 80084a2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80084a6:	9c05      	ldr	r4, [sp, #20]
 80084a8:	f1ca 0018 	rsb	r0, sl, #24
 80084ac:	fa43 f200 	asr.w	r2, r3, r0
 80084b0:	4414      	add	r4, r2
 80084b2:	4082      	lsls	r2, r0
 80084b4:	1a9b      	subs	r3, r3, r2
 80084b6:	aa0c      	add	r2, sp, #48	@ 0x30
 80084b8:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 80084bc:	f1ca 0217 	rsb	r2, sl, #23
 80084c0:	9405      	str	r4, [sp, #20]
 80084c2:	4113      	asrs	r3, r2
 80084c4:	9300      	str	r3, [sp, #0]
 80084c6:	9b00      	ldr	r3, [sp, #0]
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	dd64      	ble.n	8008596 <__kernel_rem_pio2+0x25a>
 80084cc:	2200      	movs	r2, #0
 80084ce:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 80084d2:	4614      	mov	r4, r2
 80084d4:	9b05      	ldr	r3, [sp, #20]
 80084d6:	3301      	adds	r3, #1
 80084d8:	9305      	str	r3, [sp, #20]
 80084da:	4593      	cmp	fp, r2
 80084dc:	f300 809d 	bgt.w	800861a <__kernel_rem_pio2+0x2de>
 80084e0:	f1ba 0f00 	cmp.w	sl, #0
 80084e4:	dd07      	ble.n	80084f6 <__kernel_rem_pio2+0x1ba>
 80084e6:	f1ba 0f01 	cmp.w	sl, #1
 80084ea:	f000 80b3 	beq.w	8008654 <__kernel_rem_pio2+0x318>
 80084ee:	f1ba 0f02 	cmp.w	sl, #2
 80084f2:	f000 80ba 	beq.w	800866a <__kernel_rem_pio2+0x32e>
 80084f6:	9b00      	ldr	r3, [sp, #0]
 80084f8:	2b02      	cmp	r3, #2
 80084fa:	d14c      	bne.n	8008596 <__kernel_rem_pio2+0x25a>
 80084fc:	4642      	mov	r2, r8
 80084fe:	464b      	mov	r3, r9
 8008500:	2000      	movs	r0, #0
 8008502:	494e      	ldr	r1, [pc, #312]	@ (800863c <__kernel_rem_pio2+0x300>)
 8008504:	f7f7 fe28 	bl	8000158 <__aeabi_dsub>
 8008508:	4680      	mov	r8, r0
 800850a:	4689      	mov	r9, r1
 800850c:	2c00      	cmp	r4, #0
 800850e:	d042      	beq.n	8008596 <__kernel_rem_pio2+0x25a>
 8008510:	4652      	mov	r2, sl
 8008512:	2000      	movs	r0, #0
 8008514:	4949      	ldr	r1, [pc, #292]	@ (800863c <__kernel_rem_pio2+0x300>)
 8008516:	f000 fa33 	bl	8008980 <scalbn>
 800851a:	4602      	mov	r2, r0
 800851c:	460b      	mov	r3, r1
 800851e:	4640      	mov	r0, r8
 8008520:	4649      	mov	r1, r9
 8008522:	f7f7 fe19 	bl	8000158 <__aeabi_dsub>
 8008526:	4680      	mov	r8, r0
 8008528:	4689      	mov	r9, r1
 800852a:	e034      	b.n	8008596 <__kernel_rem_pio2+0x25a>
 800852c:	2200      	movs	r2, #0
 800852e:	4b44      	ldr	r3, [pc, #272]	@ (8008640 <__kernel_rem_pio2+0x304>)
 8008530:	4620      	mov	r0, r4
 8008532:	4629      	mov	r1, r5
 8008534:	f7f7 ffc8 	bl	80004c8 <__aeabi_dmul>
 8008538:	f7f8 fa60 	bl	80009fc <__aeabi_d2iz>
 800853c:	f7f7 ff5a 	bl	80003f4 <__aeabi_i2d>
 8008540:	4602      	mov	r2, r0
 8008542:	460b      	mov	r3, r1
 8008544:	e9cd 2300 	strd	r2, r3, [sp]
 8008548:	2200      	movs	r2, #0
 800854a:	4b3e      	ldr	r3, [pc, #248]	@ (8008644 <__kernel_rem_pio2+0x308>)
 800854c:	f7f7 ffbc 	bl	80004c8 <__aeabi_dmul>
 8008550:	4602      	mov	r2, r0
 8008552:	460b      	mov	r3, r1
 8008554:	4620      	mov	r0, r4
 8008556:	4629      	mov	r1, r5
 8008558:	f7f7 fdfe 	bl	8000158 <__aeabi_dsub>
 800855c:	f7f8 fa4e 	bl	80009fc <__aeabi_d2iz>
 8008560:	e979 2302 	ldrd	r2, r3, [r9, #-8]!
 8008564:	f848 0b04 	str.w	r0, [r8], #4
 8008568:	e9dd 0100 	ldrd	r0, r1, [sp]
 800856c:	f7f7 fdf6 	bl	800015c <__adddf3>
 8008570:	3f01      	subs	r7, #1
 8008572:	4604      	mov	r4, r0
 8008574:	460d      	mov	r5, r1
 8008576:	e765      	b.n	8008444 <__kernel_rem_pio2+0x108>
 8008578:	d106      	bne.n	8008588 <__kernel_rem_pio2+0x24c>
 800857a:	f10b 33ff 	add.w	r3, fp, #4294967295
 800857e:	aa0c      	add	r2, sp, #48	@ 0x30
 8008580:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008584:	15db      	asrs	r3, r3, #23
 8008586:	e79d      	b.n	80084c4 <__kernel_rem_pio2+0x188>
 8008588:	2200      	movs	r2, #0
 800858a:	4b2f      	ldr	r3, [pc, #188]	@ (8008648 <__kernel_rem_pio2+0x30c>)
 800858c:	f7f8 fa22 	bl	80009d4 <__aeabi_dcmpge>
 8008590:	2800      	cmp	r0, #0
 8008592:	d13f      	bne.n	8008614 <__kernel_rem_pio2+0x2d8>
 8008594:	9000      	str	r0, [sp, #0]
 8008596:	2200      	movs	r2, #0
 8008598:	2300      	movs	r3, #0
 800859a:	4640      	mov	r0, r8
 800859c:	4649      	mov	r1, r9
 800859e:	f7f8 f9fb 	bl	8000998 <__aeabi_dcmpeq>
 80085a2:	2800      	cmp	r0, #0
 80085a4:	f000 80b0 	beq.w	8008708 <__kernel_rem_pio2+0x3cc>
 80085a8:	2200      	movs	r2, #0
 80085aa:	f10b 33ff 	add.w	r3, fp, #4294967295
 80085ae:	9902      	ldr	r1, [sp, #8]
 80085b0:	428b      	cmp	r3, r1
 80085b2:	da62      	bge.n	800867a <__kernel_rem_pio2+0x33e>
 80085b4:	2a00      	cmp	r2, #0
 80085b6:	d077      	beq.n	80086a8 <__kernel_rem_pio2+0x36c>
 80085b8:	f10b 3bff 	add.w	fp, fp, #4294967295
 80085bc:	ab0c      	add	r3, sp, #48	@ 0x30
 80085be:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 80085c2:	f1aa 0a18 	sub.w	sl, sl, #24
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d0f6      	beq.n	80085b8 <__kernel_rem_pio2+0x27c>
 80085ca:	4652      	mov	r2, sl
 80085cc:	2000      	movs	r0, #0
 80085ce:	491b      	ldr	r1, [pc, #108]	@ (800863c <__kernel_rem_pio2+0x300>)
 80085d0:	f000 f9d6 	bl	8008980 <scalbn>
 80085d4:	465d      	mov	r5, fp
 80085d6:	4606      	mov	r6, r0
 80085d8:	460f      	mov	r7, r1
 80085da:	f04f 0900 	mov.w	r9, #0
 80085de:	ab70      	add	r3, sp, #448	@ 0x1c0
 80085e0:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8008640 <__kernel_rem_pio2+0x304>
 80085e4:	ea4f 04cb 	mov.w	r4, fp, lsl #3
 80085e8:	eb03 08cb 	add.w	r8, r3, fp, lsl #3
 80085ec:	2d00      	cmp	r5, #0
 80085ee:	f280 80c1 	bge.w	8008774 <__kernel_rem_pio2+0x438>
 80085f2:	465d      	mov	r5, fp
 80085f4:	2d00      	cmp	r5, #0
 80085f6:	f2c0 80f1 	blt.w	80087dc <__kernel_rem_pio2+0x4a0>
 80085fa:	4b14      	ldr	r3, [pc, #80]	@ (800864c <__kernel_rem_pio2+0x310>)
 80085fc:	f04f 0900 	mov.w	r9, #0
 8008600:	9306      	str	r3, [sp, #24]
 8008602:	ab70      	add	r3, sp, #448	@ 0x1c0
 8008604:	f04f 0a00 	mov.w	sl, #0
 8008608:	2700      	movs	r7, #0
 800860a:	eb03 08c5 	add.w	r8, r3, r5, lsl #3
 800860e:	ebab 0605 	sub.w	r6, fp, r5
 8008612:	e0d7      	b.n	80087c4 <__kernel_rem_pio2+0x488>
 8008614:	2302      	movs	r3, #2
 8008616:	9300      	str	r3, [sp, #0]
 8008618:	e758      	b.n	80084cc <__kernel_rem_pio2+0x190>
 800861a:	f856 3b04 	ldr.w	r3, [r6], #4
 800861e:	b9bc      	cbnz	r4, 8008650 <__kernel_rem_pio2+0x314>
 8008620:	b123      	cbz	r3, 800862c <__kernel_rem_pio2+0x2f0>
 8008622:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 8008626:	f846 3c04 	str.w	r3, [r6, #-4]
 800862a:	2301      	movs	r3, #1
 800862c:	461c      	mov	r4, r3
 800862e:	3201      	adds	r2, #1
 8008630:	e753      	b.n	80084da <__kernel_rem_pio2+0x19e>
 8008632:	bf00      	nop
 8008634:	08008ef8 	.word	0x08008ef8
 8008638:	40200000 	.word	0x40200000
 800863c:	3ff00000 	.word	0x3ff00000
 8008640:	3e700000 	.word	0x3e700000
 8008644:	41700000 	.word	0x41700000
 8008648:	3fe00000 	.word	0x3fe00000
 800864c:	08008eb8 	.word	0x08008eb8
 8008650:	1acb      	subs	r3, r1, r3
 8008652:	e7e8      	b.n	8008626 <__kernel_rem_pio2+0x2ea>
 8008654:	f10b 32ff 	add.w	r2, fp, #4294967295
 8008658:	ab0c      	add	r3, sp, #48	@ 0x30
 800865a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800865e:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8008662:	a90c      	add	r1, sp, #48	@ 0x30
 8008664:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8008668:	e745      	b.n	80084f6 <__kernel_rem_pio2+0x1ba>
 800866a:	f10b 32ff 	add.w	r2, fp, #4294967295
 800866e:	ab0c      	add	r3, sp, #48	@ 0x30
 8008670:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008674:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8008678:	e7f3      	b.n	8008662 <__kernel_rem_pio2+0x326>
 800867a:	a90c      	add	r1, sp, #48	@ 0x30
 800867c:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8008680:	3b01      	subs	r3, #1
 8008682:	430a      	orrs	r2, r1
 8008684:	e793      	b.n	80085ae <__kernel_rem_pio2+0x272>
 8008686:	3401      	adds	r4, #1
 8008688:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800868c:	2a00      	cmp	r2, #0
 800868e:	d0fa      	beq.n	8008686 <__kernel_rem_pio2+0x34a>
 8008690:	9b08      	ldr	r3, [sp, #32]
 8008692:	aa20      	add	r2, sp, #128	@ 0x80
 8008694:	445b      	add	r3, fp
 8008696:	f10b 0801 	add.w	r8, fp, #1
 800869a:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800869e:	445c      	add	r4, fp
 80086a0:	4544      	cmp	r4, r8
 80086a2:	da04      	bge.n	80086ae <__kernel_rem_pio2+0x372>
 80086a4:	46a3      	mov	fp, r4
 80086a6:	e6c0      	b.n	800842a <__kernel_rem_pio2+0xee>
 80086a8:	2401      	movs	r4, #1
 80086aa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80086ac:	e7ec      	b.n	8008688 <__kernel_rem_pio2+0x34c>
 80086ae:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80086b0:	46ab      	mov	fp, r5
 80086b2:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 80086b6:	f7f7 fe9d 	bl	80003f4 <__aeabi_i2d>
 80086ba:	f04f 0900 	mov.w	r9, #0
 80086be:	2600      	movs	r6, #0
 80086c0:	2700      	movs	r7, #0
 80086c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80086c4:	e9c5 0100 	strd	r0, r1, [r5]
 80086c8:	3b08      	subs	r3, #8
 80086ca:	9300      	str	r3, [sp, #0]
 80086cc:	9b06      	ldr	r3, [sp, #24]
 80086ce:	4599      	cmp	r9, r3
 80086d0:	dd07      	ble.n	80086e2 <__kernel_rem_pio2+0x3a6>
 80086d2:	9b07      	ldr	r3, [sp, #28]
 80086d4:	f108 0801 	add.w	r8, r8, #1
 80086d8:	e9e3 6702 	strd	r6, r7, [r3, #8]!
 80086dc:	3508      	adds	r5, #8
 80086de:	9307      	str	r3, [sp, #28]
 80086e0:	e7de      	b.n	80086a0 <__kernel_rem_pio2+0x364>
 80086e2:	9900      	ldr	r1, [sp, #0]
 80086e4:	f109 0901 	add.w	r9, r9, #1
 80086e8:	e9f1 2302 	ldrd	r2, r3, [r1, #8]!
 80086ec:	9100      	str	r1, [sp, #0]
 80086ee:	e87b 0102 	ldrd	r0, r1, [fp], #-8
 80086f2:	f7f7 fee9 	bl	80004c8 <__aeabi_dmul>
 80086f6:	4602      	mov	r2, r0
 80086f8:	460b      	mov	r3, r1
 80086fa:	4630      	mov	r0, r6
 80086fc:	4639      	mov	r1, r7
 80086fe:	f7f7 fd2d 	bl	800015c <__adddf3>
 8008702:	4606      	mov	r6, r0
 8008704:	460f      	mov	r7, r1
 8008706:	e7e1      	b.n	80086cc <__kernel_rem_pio2+0x390>
 8008708:	f1ca 0200 	rsb	r2, sl, #0
 800870c:	4640      	mov	r0, r8
 800870e:	4649      	mov	r1, r9
 8008710:	f000 f936 	bl	8008980 <scalbn>
 8008714:	2200      	movs	r2, #0
 8008716:	4b97      	ldr	r3, [pc, #604]	@ (8008974 <__kernel_rem_pio2+0x638>)
 8008718:	4604      	mov	r4, r0
 800871a:	460d      	mov	r5, r1
 800871c:	f7f8 f95a 	bl	80009d4 <__aeabi_dcmpge>
 8008720:	b300      	cbz	r0, 8008764 <__kernel_rem_pio2+0x428>
 8008722:	2200      	movs	r2, #0
 8008724:	4b94      	ldr	r3, [pc, #592]	@ (8008978 <__kernel_rem_pio2+0x63c>)
 8008726:	4620      	mov	r0, r4
 8008728:	4629      	mov	r1, r5
 800872a:	f7f7 fecd 	bl	80004c8 <__aeabi_dmul>
 800872e:	f7f8 f965 	bl	80009fc <__aeabi_d2iz>
 8008732:	4606      	mov	r6, r0
 8008734:	f7f7 fe5e 	bl	80003f4 <__aeabi_i2d>
 8008738:	2200      	movs	r2, #0
 800873a:	4b8e      	ldr	r3, [pc, #568]	@ (8008974 <__kernel_rem_pio2+0x638>)
 800873c:	f7f7 fec4 	bl	80004c8 <__aeabi_dmul>
 8008740:	460b      	mov	r3, r1
 8008742:	4602      	mov	r2, r0
 8008744:	4629      	mov	r1, r5
 8008746:	4620      	mov	r0, r4
 8008748:	f7f7 fd06 	bl	8000158 <__aeabi_dsub>
 800874c:	f7f8 f956 	bl	80009fc <__aeabi_d2iz>
 8008750:	ab0c      	add	r3, sp, #48	@ 0x30
 8008752:	f843 002b 	str.w	r0, [r3, fp, lsl #2]
 8008756:	f10b 0b01 	add.w	fp, fp, #1
 800875a:	f10a 0a18 	add.w	sl, sl, #24
 800875e:	f843 602b 	str.w	r6, [r3, fp, lsl #2]
 8008762:	e732      	b.n	80085ca <__kernel_rem_pio2+0x28e>
 8008764:	4620      	mov	r0, r4
 8008766:	4629      	mov	r1, r5
 8008768:	f7f8 f948 	bl	80009fc <__aeabi_d2iz>
 800876c:	ab0c      	add	r3, sp, #48	@ 0x30
 800876e:	f843 002b 	str.w	r0, [r3, fp, lsl #2]
 8008772:	e72a      	b.n	80085ca <__kernel_rem_pio2+0x28e>
 8008774:	ab0c      	add	r3, sp, #48	@ 0x30
 8008776:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800877a:	f7f7 fe3b 	bl	80003f4 <__aeabi_i2d>
 800877e:	4632      	mov	r2, r6
 8008780:	463b      	mov	r3, r7
 8008782:	f7f7 fea1 	bl	80004c8 <__aeabi_dmul>
 8008786:	464a      	mov	r2, r9
 8008788:	e868 0102 	strd	r0, r1, [r8], #-8
 800878c:	4653      	mov	r3, sl
 800878e:	4630      	mov	r0, r6
 8008790:	4639      	mov	r1, r7
 8008792:	f7f7 fe99 	bl	80004c8 <__aeabi_dmul>
 8008796:	3d01      	subs	r5, #1
 8008798:	4606      	mov	r6, r0
 800879a:	460f      	mov	r7, r1
 800879c:	e726      	b.n	80085ec <__kernel_rem_pio2+0x2b0>
 800879e:	f8dd c018 	ldr.w	ip, [sp, #24]
 80087a2:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 80087a6:	e8fc 0102 	ldrd	r0, r1, [ip], #8
 80087aa:	f8cd c018 	str.w	ip, [sp, #24]
 80087ae:	f7f7 fe8b 	bl	80004c8 <__aeabi_dmul>
 80087b2:	4602      	mov	r2, r0
 80087b4:	460b      	mov	r3, r1
 80087b6:	4648      	mov	r0, r9
 80087b8:	4651      	mov	r1, sl
 80087ba:	f7f7 fccf 	bl	800015c <__adddf3>
 80087be:	4681      	mov	r9, r0
 80087c0:	468a      	mov	sl, r1
 80087c2:	3701      	adds	r7, #1
 80087c4:	9b02      	ldr	r3, [sp, #8]
 80087c6:	429f      	cmp	r7, r3
 80087c8:	dc01      	bgt.n	80087ce <__kernel_rem_pio2+0x492>
 80087ca:	42b7      	cmp	r7, r6
 80087cc:	dde7      	ble.n	800879e <__kernel_rem_pio2+0x462>
 80087ce:	ab48      	add	r3, sp, #288	@ 0x120
 80087d0:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 80087d4:	e9c6 9a00 	strd	r9, sl, [r6]
 80087d8:	3d01      	subs	r5, #1
 80087da:	e70b      	b.n	80085f4 <__kernel_rem_pio2+0x2b8>
 80087dc:	9ba2      	ldr	r3, [sp, #648]	@ 0x288
 80087de:	2b02      	cmp	r3, #2
 80087e0:	dc09      	bgt.n	80087f6 <__kernel_rem_pio2+0x4ba>
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	dc2c      	bgt.n	8008840 <__kernel_rem_pio2+0x504>
 80087e6:	d04e      	beq.n	8008886 <__kernel_rem_pio2+0x54a>
 80087e8:	9b05      	ldr	r3, [sp, #20]
 80087ea:	f003 0007 	and.w	r0, r3, #7
 80087ee:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 80087f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087f6:	9ba2      	ldr	r3, [sp, #648]	@ 0x288
 80087f8:	2b03      	cmp	r3, #3
 80087fa:	d1f5      	bne.n	80087e8 <__kernel_rem_pio2+0x4ac>
 80087fc:	ab48      	add	r3, sp, #288	@ 0x120
 80087fe:	441c      	add	r4, r3
 8008800:	4625      	mov	r5, r4
 8008802:	46da      	mov	sl, fp
 8008804:	f1ba 0f00 	cmp.w	sl, #0
 8008808:	dc63      	bgt.n	80088d2 <__kernel_rem_pio2+0x596>
 800880a:	4625      	mov	r5, r4
 800880c:	46da      	mov	sl, fp
 800880e:	f1ba 0f01 	cmp.w	sl, #1
 8008812:	dc7b      	bgt.n	800890c <__kernel_rem_pio2+0x5d0>
 8008814:	2000      	movs	r0, #0
 8008816:	2100      	movs	r1, #0
 8008818:	f1bb 0f01 	cmp.w	fp, #1
 800881c:	f300 8093 	bgt.w	8008946 <__kernel_rem_pio2+0x60a>
 8008820:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	@ 0x120
 8008824:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	@ 0x128
 8008828:	9b00      	ldr	r3, [sp, #0]
 800882a:	2b00      	cmp	r3, #0
 800882c:	f040 8092 	bne.w	8008954 <__kernel_rem_pio2+0x618>
 8008830:	9b04      	ldr	r3, [sp, #16]
 8008832:	e9c3 5600 	strd	r5, r6, [r3]
 8008836:	e9c3 7802 	strd	r7, r8, [r3, #8]
 800883a:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800883e:	e7d3      	b.n	80087e8 <__kernel_rem_pio2+0x4ac>
 8008840:	465d      	mov	r5, fp
 8008842:	2000      	movs	r0, #0
 8008844:	2100      	movs	r1, #0
 8008846:	ab48      	add	r3, sp, #288	@ 0x120
 8008848:	441c      	add	r4, r3
 800884a:	2d00      	cmp	r5, #0
 800884c:	da32      	bge.n	80088b4 <__kernel_rem_pio2+0x578>
 800884e:	9b00      	ldr	r3, [sp, #0]
 8008850:	2b00      	cmp	r3, #0
 8008852:	d035      	beq.n	80088c0 <__kernel_rem_pio2+0x584>
 8008854:	4602      	mov	r2, r0
 8008856:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800885a:	9c04      	ldr	r4, [sp, #16]
 800885c:	2501      	movs	r5, #1
 800885e:	e9c4 2300 	strd	r2, r3, [r4]
 8008862:	4602      	mov	r2, r0
 8008864:	460b      	mov	r3, r1
 8008866:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 800886a:	f7f7 fc75 	bl	8000158 <__aeabi_dsub>
 800886e:	ac48      	add	r4, sp, #288	@ 0x120
 8008870:	45ab      	cmp	fp, r5
 8008872:	da28      	bge.n	80088c6 <__kernel_rem_pio2+0x58a>
 8008874:	9b00      	ldr	r3, [sp, #0]
 8008876:	b113      	cbz	r3, 800887e <__kernel_rem_pio2+0x542>
 8008878:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800887c:	4619      	mov	r1, r3
 800887e:	9b04      	ldr	r3, [sp, #16]
 8008880:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8008884:	e7b0      	b.n	80087e8 <__kernel_rem_pio2+0x4ac>
 8008886:	2000      	movs	r0, #0
 8008888:	2100      	movs	r1, #0
 800888a:	ab48      	add	r3, sp, #288	@ 0x120
 800888c:	441c      	add	r4, r3
 800888e:	f1bb 0f00 	cmp.w	fp, #0
 8008892:	da08      	bge.n	80088a6 <__kernel_rem_pio2+0x56a>
 8008894:	9b00      	ldr	r3, [sp, #0]
 8008896:	b113      	cbz	r3, 800889e <__kernel_rem_pio2+0x562>
 8008898:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800889c:	4619      	mov	r1, r3
 800889e:	9b04      	ldr	r3, [sp, #16]
 80088a0:	e9c3 0100 	strd	r0, r1, [r3]
 80088a4:	e7a0      	b.n	80087e8 <__kernel_rem_pio2+0x4ac>
 80088a6:	e874 2302 	ldrd	r2, r3, [r4], #-8
 80088aa:	f7f7 fc57 	bl	800015c <__adddf3>
 80088ae:	f10b 3bff 	add.w	fp, fp, #4294967295
 80088b2:	e7ec      	b.n	800888e <__kernel_rem_pio2+0x552>
 80088b4:	e874 2302 	ldrd	r2, r3, [r4], #-8
 80088b8:	f7f7 fc50 	bl	800015c <__adddf3>
 80088bc:	3d01      	subs	r5, #1
 80088be:	e7c4      	b.n	800884a <__kernel_rem_pio2+0x50e>
 80088c0:	4602      	mov	r2, r0
 80088c2:	460b      	mov	r3, r1
 80088c4:	e7c9      	b.n	800885a <__kernel_rem_pio2+0x51e>
 80088c6:	e9f4 2302 	ldrd	r2, r3, [r4, #8]!
 80088ca:	f7f7 fc47 	bl	800015c <__adddf3>
 80088ce:	3501      	adds	r5, #1
 80088d0:	e7ce      	b.n	8008870 <__kernel_rem_pio2+0x534>
 80088d2:	e9d5 2300 	ldrd	r2, r3, [r5]
 80088d6:	e955 8902 	ldrd	r8, r9, [r5, #-8]
 80088da:	4640      	mov	r0, r8
 80088dc:	4649      	mov	r1, r9
 80088de:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80088e2:	f7f7 fc3b 	bl	800015c <__adddf3>
 80088e6:	4602      	mov	r2, r0
 80088e8:	460b      	mov	r3, r1
 80088ea:	4606      	mov	r6, r0
 80088ec:	460f      	mov	r7, r1
 80088ee:	4640      	mov	r0, r8
 80088f0:	4649      	mov	r1, r9
 80088f2:	f7f7 fc31 	bl	8000158 <__aeabi_dsub>
 80088f6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80088fa:	f7f7 fc2f 	bl	800015c <__adddf3>
 80088fe:	e865 0102 	strd	r0, r1, [r5], #-8
 8008902:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008906:	e9c5 6700 	strd	r6, r7, [r5]
 800890a:	e77b      	b.n	8008804 <__kernel_rem_pio2+0x4c8>
 800890c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008910:	e955 8902 	ldrd	r8, r9, [r5, #-8]
 8008914:	4640      	mov	r0, r8
 8008916:	4649      	mov	r1, r9
 8008918:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800891c:	f7f7 fc1e 	bl	800015c <__adddf3>
 8008920:	4602      	mov	r2, r0
 8008922:	460b      	mov	r3, r1
 8008924:	4606      	mov	r6, r0
 8008926:	460f      	mov	r7, r1
 8008928:	4640      	mov	r0, r8
 800892a:	4649      	mov	r1, r9
 800892c:	f7f7 fc14 	bl	8000158 <__aeabi_dsub>
 8008930:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008934:	f7f7 fc12 	bl	800015c <__adddf3>
 8008938:	e865 0102 	strd	r0, r1, [r5], #-8
 800893c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008940:	e9c5 6700 	strd	r6, r7, [r5]
 8008944:	e763      	b.n	800880e <__kernel_rem_pio2+0x4d2>
 8008946:	e874 2302 	ldrd	r2, r3, [r4], #-8
 800894a:	f7f7 fc07 	bl	800015c <__adddf3>
 800894e:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008952:	e761      	b.n	8008818 <__kernel_rem_pio2+0x4dc>
 8008954:	9b04      	ldr	r3, [sp, #16]
 8008956:	9a04      	ldr	r2, [sp, #16]
 8008958:	f106 4400 	add.w	r4, r6, #2147483648	@ 0x80000000
 800895c:	601d      	str	r5, [r3, #0]
 800895e:	605c      	str	r4, [r3, #4]
 8008960:	609f      	str	r7, [r3, #8]
 8008962:	f108 4300 	add.w	r3, r8, #2147483648	@ 0x80000000
 8008966:	60d3      	str	r3, [r2, #12]
 8008968:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800896c:	6110      	str	r0, [r2, #16]
 800896e:	6153      	str	r3, [r2, #20]
 8008970:	e73a      	b.n	80087e8 <__kernel_rem_pio2+0x4ac>
 8008972:	bf00      	nop
 8008974:	41700000 	.word	0x41700000
 8008978:	3e700000 	.word	0x3e700000
 800897c:	00000000 	.word	0x00000000

08008980 <scalbn>:
 8008980:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 8008984:	4616      	mov	r6, r2
 8008986:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800898a:	4683      	mov	fp, r0
 800898c:	468c      	mov	ip, r1
 800898e:	460b      	mov	r3, r1
 8008990:	b982      	cbnz	r2, 80089b4 <scalbn+0x34>
 8008992:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8008996:	4303      	orrs	r3, r0
 8008998:	d035      	beq.n	8008a06 <scalbn+0x86>
 800899a:	4b2d      	ldr	r3, [pc, #180]	@ (8008a50 <scalbn+0xd0>)
 800899c:	2200      	movs	r2, #0
 800899e:	f7f7 fd93 	bl	80004c8 <__aeabi_dmul>
 80089a2:	4b2c      	ldr	r3, [pc, #176]	@ (8008a54 <scalbn+0xd4>)
 80089a4:	4683      	mov	fp, r0
 80089a6:	429e      	cmp	r6, r3
 80089a8:	468c      	mov	ip, r1
 80089aa:	da0d      	bge.n	80089c8 <scalbn+0x48>
 80089ac:	a324      	add	r3, pc, #144	@ (adr r3, 8008a40 <scalbn+0xc0>)
 80089ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089b2:	e019      	b.n	80089e8 <scalbn+0x68>
 80089b4:	f240 77ff 	movw	r7, #2047	@ 0x7ff
 80089b8:	42ba      	cmp	r2, r7
 80089ba:	d109      	bne.n	80089d0 <scalbn+0x50>
 80089bc:	4602      	mov	r2, r0
 80089be:	f7f7 fbcd 	bl	800015c <__adddf3>
 80089c2:	4683      	mov	fp, r0
 80089c4:	468c      	mov	ip, r1
 80089c6:	e01e      	b.n	8008a06 <scalbn+0x86>
 80089c8:	460b      	mov	r3, r1
 80089ca:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80089ce:	3a36      	subs	r2, #54	@ 0x36
 80089d0:	f24c 3150 	movw	r1, #50000	@ 0xc350
 80089d4:	428e      	cmp	r6, r1
 80089d6:	dd0a      	ble.n	80089ee <scalbn+0x6e>
 80089d8:	a31b      	add	r3, pc, #108	@ (adr r3, 8008a48 <scalbn+0xc8>)
 80089da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089de:	4665      	mov	r5, ip
 80089e0:	f363 051e 	bfi	r5, r3, #0, #31
 80089e4:	4629      	mov	r1, r5
 80089e6:	481c      	ldr	r0, [pc, #112]	@ (8008a58 <scalbn+0xd8>)
 80089e8:	f7f7 fd6e 	bl	80004c8 <__aeabi_dmul>
 80089ec:	e7e9      	b.n	80089c2 <scalbn+0x42>
 80089ee:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 80089f2:	4432      	add	r2, r6
 80089f4:	428a      	cmp	r2, r1
 80089f6:	dcef      	bgt.n	80089d8 <scalbn+0x58>
 80089f8:	2a00      	cmp	r2, #0
 80089fa:	dd08      	ble.n	8008a0e <scalbn+0x8e>
 80089fc:	f36f 531e 	bfc	r3, #20, #11
 8008a00:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8008a04:	46ac      	mov	ip, r5
 8008a06:	4658      	mov	r0, fp
 8008a08:	4661      	mov	r1, ip
 8008a0a:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
 8008a0e:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 8008a12:	da09      	bge.n	8008a28 <scalbn+0xa8>
 8008a14:	f00c 4300 	and.w	r3, ip, #2147483648	@ 0x80000000
 8008a18:	f043 71d2 	orr.w	r1, r3, #27525120	@ 0x1a40000
 8008a1c:	f441 31b7 	orr.w	r1, r1, #93696	@ 0x16e00
 8008a20:	480e      	ldr	r0, [pc, #56]	@ (8008a5c <scalbn+0xdc>)
 8008a22:	f041 011f 	orr.w	r1, r1, #31
 8008a26:	e7c1      	b.n	80089ac <scalbn+0x2c>
 8008a28:	3236      	adds	r2, #54	@ 0x36
 8008a2a:	f36f 531e 	bfc	r3, #20, #11
 8008a2e:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8008a32:	4658      	mov	r0, fp
 8008a34:	4629      	mov	r1, r5
 8008a36:	2200      	movs	r2, #0
 8008a38:	4b09      	ldr	r3, [pc, #36]	@ (8008a60 <scalbn+0xe0>)
 8008a3a:	e7d5      	b.n	80089e8 <scalbn+0x68>
 8008a3c:	f3af 8000 	nop.w
 8008a40:	c2f8f359 	.word	0xc2f8f359
 8008a44:	01a56e1f 	.word	0x01a56e1f
 8008a48:	8800759c 	.word	0x8800759c
 8008a4c:	7e37e43c 	.word	0x7e37e43c
 8008a50:	43500000 	.word	0x43500000
 8008a54:	ffff3cb0 	.word	0xffff3cb0
 8008a58:	8800759c 	.word	0x8800759c
 8008a5c:	c2f8f359 	.word	0xc2f8f359
 8008a60:	3c900000 	.word	0x3c900000
 8008a64:	00000000 	.word	0x00000000

08008a68 <floor>:
 8008a68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a6c:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8008a70:	f2a7 36ff 	subw	r6, r7, #1023	@ 0x3ff
 8008a74:	2e13      	cmp	r6, #19
 8008a76:	4602      	mov	r2, r0
 8008a78:	460b      	mov	r3, r1
 8008a7a:	460c      	mov	r4, r1
 8008a7c:	4605      	mov	r5, r0
 8008a7e:	4680      	mov	r8, r0
 8008a80:	dc35      	bgt.n	8008aee <floor+0x86>
 8008a82:	2e00      	cmp	r6, #0
 8008a84:	da17      	bge.n	8008ab6 <floor+0x4e>
 8008a86:	a334      	add	r3, pc, #208	@ (adr r3, 8008b58 <floor+0xf0>)
 8008a88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a8c:	f7f7 fb66 	bl	800015c <__adddf3>
 8008a90:	2200      	movs	r2, #0
 8008a92:	2300      	movs	r3, #0
 8008a94:	f7f7 ffa8 	bl	80009e8 <__aeabi_dcmpgt>
 8008a98:	b150      	cbz	r0, 8008ab0 <floor+0x48>
 8008a9a:	2c00      	cmp	r4, #0
 8008a9c:	da57      	bge.n	8008b4e <floor+0xe6>
 8008a9e:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 8008aa2:	432c      	orrs	r4, r5
 8008aa4:	2500      	movs	r5, #0
 8008aa6:	42ac      	cmp	r4, r5
 8008aa8:	4c2d      	ldr	r4, [pc, #180]	@ (8008b60 <floor+0xf8>)
 8008aaa:	bf08      	it	eq
 8008aac:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 8008ab0:	4623      	mov	r3, r4
 8008ab2:	462a      	mov	r2, r5
 8008ab4:	e024      	b.n	8008b00 <floor+0x98>
 8008ab6:	4f2b      	ldr	r7, [pc, #172]	@ (8008b64 <floor+0xfc>)
 8008ab8:	4137      	asrs	r7, r6
 8008aba:	ea01 0c07 	and.w	ip, r1, r7
 8008abe:	ea5c 0c00 	orrs.w	ip, ip, r0
 8008ac2:	d01d      	beq.n	8008b00 <floor+0x98>
 8008ac4:	a324      	add	r3, pc, #144	@ (adr r3, 8008b58 <floor+0xf0>)
 8008ac6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008aca:	f7f7 fb47 	bl	800015c <__adddf3>
 8008ace:	2200      	movs	r2, #0
 8008ad0:	2300      	movs	r3, #0
 8008ad2:	f7f7 ff89 	bl	80009e8 <__aeabi_dcmpgt>
 8008ad6:	2800      	cmp	r0, #0
 8008ad8:	d0ea      	beq.n	8008ab0 <floor+0x48>
 8008ada:	2c00      	cmp	r4, #0
 8008adc:	bfbe      	ittt	lt
 8008ade:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 8008ae2:	4133      	asrlt	r3, r6
 8008ae4:	18e4      	addlt	r4, r4, r3
 8008ae6:	2500      	movs	r5, #0
 8008ae8:	ea24 0407 	bic.w	r4, r4, r7
 8008aec:	e7e0      	b.n	8008ab0 <floor+0x48>
 8008aee:	2e33      	cmp	r6, #51	@ 0x33
 8008af0:	dd0a      	ble.n	8008b08 <floor+0xa0>
 8008af2:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 8008af6:	d103      	bne.n	8008b00 <floor+0x98>
 8008af8:	f7f7 fb30 	bl	800015c <__adddf3>
 8008afc:	4602      	mov	r2, r0
 8008afe:	460b      	mov	r3, r1
 8008b00:	4610      	mov	r0, r2
 8008b02:	4619      	mov	r1, r3
 8008b04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008b08:	f04f 3cff 	mov.w	ip, #4294967295
 8008b0c:	f2a7 4713 	subw	r7, r7, #1043	@ 0x413
 8008b10:	fa2c f707 	lsr.w	r7, ip, r7
 8008b14:	4207      	tst	r7, r0
 8008b16:	d0f3      	beq.n	8008b00 <floor+0x98>
 8008b18:	a30f      	add	r3, pc, #60	@ (adr r3, 8008b58 <floor+0xf0>)
 8008b1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b1e:	f7f7 fb1d 	bl	800015c <__adddf3>
 8008b22:	2200      	movs	r2, #0
 8008b24:	2300      	movs	r3, #0
 8008b26:	f7f7 ff5f 	bl	80009e8 <__aeabi_dcmpgt>
 8008b2a:	2800      	cmp	r0, #0
 8008b2c:	d0c0      	beq.n	8008ab0 <floor+0x48>
 8008b2e:	2c00      	cmp	r4, #0
 8008b30:	da0a      	bge.n	8008b48 <floor+0xe0>
 8008b32:	2e14      	cmp	r6, #20
 8008b34:	d101      	bne.n	8008b3a <floor+0xd2>
 8008b36:	3401      	adds	r4, #1
 8008b38:	e006      	b.n	8008b48 <floor+0xe0>
 8008b3a:	2301      	movs	r3, #1
 8008b3c:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 8008b40:	40b3      	lsls	r3, r6
 8008b42:	441d      	add	r5, r3
 8008b44:	4545      	cmp	r5, r8
 8008b46:	d3f6      	bcc.n	8008b36 <floor+0xce>
 8008b48:	ea25 0507 	bic.w	r5, r5, r7
 8008b4c:	e7b0      	b.n	8008ab0 <floor+0x48>
 8008b4e:	2500      	movs	r5, #0
 8008b50:	462c      	mov	r4, r5
 8008b52:	e7ad      	b.n	8008ab0 <floor+0x48>
 8008b54:	f3af 8000 	nop.w
 8008b58:	8800759c 	.word	0x8800759c
 8008b5c:	7e37e43c 	.word	0x7e37e43c
 8008b60:	bff00000 	.word	0xbff00000
 8008b64:	000fffff 	.word	0x000fffff

08008b68 <_init>:
 8008b68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b6a:	bf00      	nop
 8008b6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b6e:	bc08      	pop	{r3}
 8008b70:	469e      	mov	lr, r3
 8008b72:	4770      	bx	lr

08008b74 <_fini>:
 8008b74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b76:	bf00      	nop
 8008b78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b7a:	bc08      	pop	{r3}
 8008b7c:	469e      	mov	lr, r3
 8008b7e:	4770      	bx	lr
