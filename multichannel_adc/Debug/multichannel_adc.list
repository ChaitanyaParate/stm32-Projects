
multichannel_adc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000684c  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003dc  08006960  08006960  00007960  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006d3c  08006d3c  000081e4  2**0
                  CONTENTS
  4 .ARM          00000008  08006d3c  08006d3c  00007d3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006d44  08006d44  000081e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006d44  08006d44  00007d44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006d48  08006d48  00007d48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  08006d4c  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000264  200001e4  08006f30  000081e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000448  08006f30  00008448  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000081e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008d38  00000000  00000000  0000820d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b63  00000000  00000000  00010f45  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000898  00000000  00000000  00012aa8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000688  00000000  00000000  00013340  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001828c  00000000  00000000  000139c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a82e  00000000  00000000  0002bc54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00088e48  00000000  00000000  00036482  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000bf2ca  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003440  00000000  00000000  000bf310  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000054  00000000  00000000  000c2750  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e4 	.word	0x200001e4
 800012c:	00000000 	.word	0x00000000
 8000130:	08006944 	.word	0x08006944

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e8 	.word	0x200001e8
 800014c:	08006944 	.word	0x08006944

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <__aeabi_frsub>:
 8000b28:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b2c:	e002      	b.n	8000b34 <__addsf3>
 8000b2e:	bf00      	nop

08000b30 <__aeabi_fsub>:
 8000b30:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b34 <__addsf3>:
 8000b34:	0042      	lsls	r2, r0, #1
 8000b36:	bf1f      	itttt	ne
 8000b38:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b3c:	ea92 0f03 	teqne	r2, r3
 8000b40:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b44:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b48:	d06a      	beq.n	8000c20 <__addsf3+0xec>
 8000b4a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b4e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b52:	bfc1      	itttt	gt
 8000b54:	18d2      	addgt	r2, r2, r3
 8000b56:	4041      	eorgt	r1, r0
 8000b58:	4048      	eorgt	r0, r1
 8000b5a:	4041      	eorgt	r1, r0
 8000b5c:	bfb8      	it	lt
 8000b5e:	425b      	neglt	r3, r3
 8000b60:	2b19      	cmp	r3, #25
 8000b62:	bf88      	it	hi
 8000b64:	4770      	bxhi	lr
 8000b66:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000b6a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b6e:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7a:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000b7e:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000b82:	bf18      	it	ne
 8000b84:	4249      	negne	r1, r1
 8000b86:	ea92 0f03 	teq	r2, r3
 8000b8a:	d03f      	beq.n	8000c0c <__addsf3+0xd8>
 8000b8c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b90:	fa41 fc03 	asr.w	ip, r1, r3
 8000b94:	eb10 000c 	adds.w	r0, r0, ip
 8000b98:	f1c3 0320 	rsb	r3, r3, #32
 8000b9c:	fa01 f103 	lsl.w	r1, r1, r3
 8000ba0:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000ba4:	d502      	bpl.n	8000bac <__addsf3+0x78>
 8000ba6:	4249      	negs	r1, r1
 8000ba8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bac:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000bb0:	d313      	bcc.n	8000bda <__addsf3+0xa6>
 8000bb2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000bb6:	d306      	bcc.n	8000bc6 <__addsf3+0x92>
 8000bb8:	0840      	lsrs	r0, r0, #1
 8000bba:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bbe:	f102 0201 	add.w	r2, r2, #1
 8000bc2:	2afe      	cmp	r2, #254	@ 0xfe
 8000bc4:	d251      	bcs.n	8000c6a <__addsf3+0x136>
 8000bc6:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000bca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bce:	bf08      	it	eq
 8000bd0:	f020 0001 	biceq.w	r0, r0, #1
 8000bd4:	ea40 0003 	orr.w	r0, r0, r3
 8000bd8:	4770      	bx	lr
 8000bda:	0049      	lsls	r1, r1, #1
 8000bdc:	eb40 0000 	adc.w	r0, r0, r0
 8000be0:	3a01      	subs	r2, #1
 8000be2:	bf28      	it	cs
 8000be4:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000be8:	d2ed      	bcs.n	8000bc6 <__addsf3+0x92>
 8000bea:	fab0 fc80 	clz	ip, r0
 8000bee:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bf2:	ebb2 020c 	subs.w	r2, r2, ip
 8000bf6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bfa:	bfaa      	itet	ge
 8000bfc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c00:	4252      	neglt	r2, r2
 8000c02:	4318      	orrge	r0, r3
 8000c04:	bfbc      	itt	lt
 8000c06:	40d0      	lsrlt	r0, r2
 8000c08:	4318      	orrlt	r0, r3
 8000c0a:	4770      	bx	lr
 8000c0c:	f092 0f00 	teq	r2, #0
 8000c10:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c14:	bf06      	itte	eq
 8000c16:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c1a:	3201      	addeq	r2, #1
 8000c1c:	3b01      	subne	r3, #1
 8000c1e:	e7b5      	b.n	8000b8c <__addsf3+0x58>
 8000c20:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c24:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c28:	bf18      	it	ne
 8000c2a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c2e:	d021      	beq.n	8000c74 <__addsf3+0x140>
 8000c30:	ea92 0f03 	teq	r2, r3
 8000c34:	d004      	beq.n	8000c40 <__addsf3+0x10c>
 8000c36:	f092 0f00 	teq	r2, #0
 8000c3a:	bf08      	it	eq
 8000c3c:	4608      	moveq	r0, r1
 8000c3e:	4770      	bx	lr
 8000c40:	ea90 0f01 	teq	r0, r1
 8000c44:	bf1c      	itt	ne
 8000c46:	2000      	movne	r0, #0
 8000c48:	4770      	bxne	lr
 8000c4a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c4e:	d104      	bne.n	8000c5a <__addsf3+0x126>
 8000c50:	0040      	lsls	r0, r0, #1
 8000c52:	bf28      	it	cs
 8000c54:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c58:	4770      	bx	lr
 8000c5a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c5e:	bf3c      	itt	cc
 8000c60:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000c64:	4770      	bxcc	lr
 8000c66:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c6a:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000c6e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c72:	4770      	bx	lr
 8000c74:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c78:	bf16      	itet	ne
 8000c7a:	4608      	movne	r0, r1
 8000c7c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c80:	4601      	movne	r1, r0
 8000c82:	0242      	lsls	r2, r0, #9
 8000c84:	bf06      	itte	eq
 8000c86:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c8a:	ea90 0f01 	teqeq	r0, r1
 8000c8e:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000c92:	4770      	bx	lr

08000c94 <__aeabi_ui2f>:
 8000c94:	f04f 0300 	mov.w	r3, #0
 8000c98:	e004      	b.n	8000ca4 <__aeabi_i2f+0x8>
 8000c9a:	bf00      	nop

08000c9c <__aeabi_i2f>:
 8000c9c:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000ca0:	bf48      	it	mi
 8000ca2:	4240      	negmi	r0, r0
 8000ca4:	ea5f 0c00 	movs.w	ip, r0
 8000ca8:	bf08      	it	eq
 8000caa:	4770      	bxeq	lr
 8000cac:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000cb0:	4601      	mov	r1, r0
 8000cb2:	f04f 0000 	mov.w	r0, #0
 8000cb6:	e01c      	b.n	8000cf2 <__aeabi_l2f+0x2a>

08000cb8 <__aeabi_ul2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f04f 0300 	mov.w	r3, #0
 8000cc4:	e00a      	b.n	8000cdc <__aeabi_l2f+0x14>
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_l2f>:
 8000cc8:	ea50 0201 	orrs.w	r2, r0, r1
 8000ccc:	bf08      	it	eq
 8000cce:	4770      	bxeq	lr
 8000cd0:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000cd4:	d502      	bpl.n	8000cdc <__aeabi_l2f+0x14>
 8000cd6:	4240      	negs	r0, r0
 8000cd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cdc:	ea5f 0c01 	movs.w	ip, r1
 8000ce0:	bf02      	ittt	eq
 8000ce2:	4684      	moveq	ip, r0
 8000ce4:	4601      	moveq	r1, r0
 8000ce6:	2000      	moveq	r0, #0
 8000ce8:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000cec:	bf08      	it	eq
 8000cee:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000cf2:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000cf6:	fabc f28c 	clz	r2, ip
 8000cfa:	3a08      	subs	r2, #8
 8000cfc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d00:	db10      	blt.n	8000d24 <__aeabi_l2f+0x5c>
 8000d02:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d06:	4463      	add	r3, ip
 8000d08:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d0c:	f1c2 0220 	rsb	r2, r2, #32
 8000d10:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d14:	fa20 f202 	lsr.w	r2, r0, r2
 8000d18:	eb43 0002 	adc.w	r0, r3, r2
 8000d1c:	bf08      	it	eq
 8000d1e:	f020 0001 	biceq.w	r0, r0, #1
 8000d22:	4770      	bx	lr
 8000d24:	f102 0220 	add.w	r2, r2, #32
 8000d28:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d2c:	f1c2 0220 	rsb	r2, r2, #32
 8000d30:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d34:	fa21 f202 	lsr.w	r2, r1, r2
 8000d38:	eb43 0002 	adc.w	r0, r3, r2
 8000d3c:	bf08      	it	eq
 8000d3e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d42:	4770      	bx	lr

08000d44 <__aeabi_fmul>:
 8000d44:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d48:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d4c:	bf1e      	ittt	ne
 8000d4e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d52:	ea92 0f0c 	teqne	r2, ip
 8000d56:	ea93 0f0c 	teqne	r3, ip
 8000d5a:	d06f      	beq.n	8000e3c <__aeabi_fmul+0xf8>
 8000d5c:	441a      	add	r2, r3
 8000d5e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d62:	0240      	lsls	r0, r0, #9
 8000d64:	bf18      	it	ne
 8000d66:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d6a:	d01e      	beq.n	8000daa <__aeabi_fmul+0x66>
 8000d6c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000d70:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d74:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d78:	fba0 3101 	umull	r3, r1, r0, r1
 8000d7c:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000d80:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000d84:	bf3e      	ittt	cc
 8000d86:	0049      	lslcc	r1, r1, #1
 8000d88:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d8c:	005b      	lslcc	r3, r3, #1
 8000d8e:	ea40 0001 	orr.w	r0, r0, r1
 8000d92:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000d96:	2afd      	cmp	r2, #253	@ 0xfd
 8000d98:	d81d      	bhi.n	8000dd6 <__aeabi_fmul+0x92>
 8000d9a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000d9e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000da2:	bf08      	it	eq
 8000da4:	f020 0001 	biceq.w	r0, r0, #1
 8000da8:	4770      	bx	lr
 8000daa:	f090 0f00 	teq	r0, #0
 8000dae:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000db2:	bf08      	it	eq
 8000db4:	0249      	lsleq	r1, r1, #9
 8000db6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dba:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dbe:	3a7f      	subs	r2, #127	@ 0x7f
 8000dc0:	bfc2      	ittt	gt
 8000dc2:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000dc6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dca:	4770      	bxgt	lr
 8000dcc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000dd0:	f04f 0300 	mov.w	r3, #0
 8000dd4:	3a01      	subs	r2, #1
 8000dd6:	dc5d      	bgt.n	8000e94 <__aeabi_fmul+0x150>
 8000dd8:	f112 0f19 	cmn.w	r2, #25
 8000ddc:	bfdc      	itt	le
 8000dde:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000de2:	4770      	bxle	lr
 8000de4:	f1c2 0200 	rsb	r2, r2, #0
 8000de8:	0041      	lsls	r1, r0, #1
 8000dea:	fa21 f102 	lsr.w	r1, r1, r2
 8000dee:	f1c2 0220 	rsb	r2, r2, #32
 8000df2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000df6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dfa:	f140 0000 	adc.w	r0, r0, #0
 8000dfe:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e02:	bf08      	it	eq
 8000e04:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e08:	4770      	bx	lr
 8000e0a:	f092 0f00 	teq	r2, #0
 8000e0e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000e12:	bf02      	ittt	eq
 8000e14:	0040      	lsleq	r0, r0, #1
 8000e16:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000e1a:	3a01      	subeq	r2, #1
 8000e1c:	d0f9      	beq.n	8000e12 <__aeabi_fmul+0xce>
 8000e1e:	ea40 000c 	orr.w	r0, r0, ip
 8000e22:	f093 0f00 	teq	r3, #0
 8000e26:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000e2a:	bf02      	ittt	eq
 8000e2c:	0049      	lsleq	r1, r1, #1
 8000e2e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000e32:	3b01      	subeq	r3, #1
 8000e34:	d0f9      	beq.n	8000e2a <__aeabi_fmul+0xe6>
 8000e36:	ea41 010c 	orr.w	r1, r1, ip
 8000e3a:	e78f      	b.n	8000d5c <__aeabi_fmul+0x18>
 8000e3c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e40:	ea92 0f0c 	teq	r2, ip
 8000e44:	bf18      	it	ne
 8000e46:	ea93 0f0c 	teqne	r3, ip
 8000e4a:	d00a      	beq.n	8000e62 <__aeabi_fmul+0x11e>
 8000e4c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000e50:	bf18      	it	ne
 8000e52:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000e56:	d1d8      	bne.n	8000e0a <__aeabi_fmul+0xc6>
 8000e58:	ea80 0001 	eor.w	r0, r0, r1
 8000e5c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e60:	4770      	bx	lr
 8000e62:	f090 0f00 	teq	r0, #0
 8000e66:	bf17      	itett	ne
 8000e68:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000e6c:	4608      	moveq	r0, r1
 8000e6e:	f091 0f00 	teqne	r1, #0
 8000e72:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000e76:	d014      	beq.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e78:	ea92 0f0c 	teq	r2, ip
 8000e7c:	d101      	bne.n	8000e82 <__aeabi_fmul+0x13e>
 8000e7e:	0242      	lsls	r2, r0, #9
 8000e80:	d10f      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e82:	ea93 0f0c 	teq	r3, ip
 8000e86:	d103      	bne.n	8000e90 <__aeabi_fmul+0x14c>
 8000e88:	024b      	lsls	r3, r1, #9
 8000e8a:	bf18      	it	ne
 8000e8c:	4608      	movne	r0, r1
 8000e8e:	d108      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e90:	ea80 0001 	eor.w	r0, r0, r1
 8000e94:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e98:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e9c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ea0:	4770      	bx	lr
 8000ea2:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ea6:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000eaa:	4770      	bx	lr

08000eac <__aeabi_fdiv>:
 8000eac:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000eb0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000eb4:	bf1e      	ittt	ne
 8000eb6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eba:	ea92 0f0c 	teqne	r2, ip
 8000ebe:	ea93 0f0c 	teqne	r3, ip
 8000ec2:	d069      	beq.n	8000f98 <__aeabi_fdiv+0xec>
 8000ec4:	eba2 0203 	sub.w	r2, r2, r3
 8000ec8:	ea80 0c01 	eor.w	ip, r0, r1
 8000ecc:	0249      	lsls	r1, r1, #9
 8000ece:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ed2:	d037      	beq.n	8000f44 <__aeabi_fdiv+0x98>
 8000ed4:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000ed8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000edc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ee0:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000ee4:	428b      	cmp	r3, r1
 8000ee6:	bf38      	it	cc
 8000ee8:	005b      	lslcc	r3, r3, #1
 8000eea:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000eee:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000ef2:	428b      	cmp	r3, r1
 8000ef4:	bf24      	itt	cs
 8000ef6:	1a5b      	subcs	r3, r3, r1
 8000ef8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000efc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f00:	bf24      	itt	cs
 8000f02:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f06:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f0a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f0e:	bf24      	itt	cs
 8000f10:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f14:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f18:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f1c:	bf24      	itt	cs
 8000f1e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f22:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f26:	011b      	lsls	r3, r3, #4
 8000f28:	bf18      	it	ne
 8000f2a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f2e:	d1e0      	bne.n	8000ef2 <__aeabi_fdiv+0x46>
 8000f30:	2afd      	cmp	r2, #253	@ 0xfd
 8000f32:	f63f af50 	bhi.w	8000dd6 <__aeabi_fmul+0x92>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f3c:	bf08      	it	eq
 8000f3e:	f020 0001 	biceq.w	r0, r0, #1
 8000f42:	4770      	bx	lr
 8000f44:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000f48:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f4c:	327f      	adds	r2, #127	@ 0x7f
 8000f4e:	bfc2      	ittt	gt
 8000f50:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000f54:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f58:	4770      	bxgt	lr
 8000f5a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f5e:	f04f 0300 	mov.w	r3, #0
 8000f62:	3a01      	subs	r2, #1
 8000f64:	e737      	b.n	8000dd6 <__aeabi_fmul+0x92>
 8000f66:	f092 0f00 	teq	r2, #0
 8000f6a:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000f6e:	bf02      	ittt	eq
 8000f70:	0040      	lsleq	r0, r0, #1
 8000f72:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000f76:	3a01      	subeq	r2, #1
 8000f78:	d0f9      	beq.n	8000f6e <__aeabi_fdiv+0xc2>
 8000f7a:	ea40 000c 	orr.w	r0, r0, ip
 8000f7e:	f093 0f00 	teq	r3, #0
 8000f82:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000f86:	bf02      	ittt	eq
 8000f88:	0049      	lsleq	r1, r1, #1
 8000f8a:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000f8e:	3b01      	subeq	r3, #1
 8000f90:	d0f9      	beq.n	8000f86 <__aeabi_fdiv+0xda>
 8000f92:	ea41 010c 	orr.w	r1, r1, ip
 8000f96:	e795      	b.n	8000ec4 <__aeabi_fdiv+0x18>
 8000f98:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f9c:	ea92 0f0c 	teq	r2, ip
 8000fa0:	d108      	bne.n	8000fb4 <__aeabi_fdiv+0x108>
 8000fa2:	0242      	lsls	r2, r0, #9
 8000fa4:	f47f af7d 	bne.w	8000ea2 <__aeabi_fmul+0x15e>
 8000fa8:	ea93 0f0c 	teq	r3, ip
 8000fac:	f47f af70 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fb0:	4608      	mov	r0, r1
 8000fb2:	e776      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fb4:	ea93 0f0c 	teq	r3, ip
 8000fb8:	d104      	bne.n	8000fc4 <__aeabi_fdiv+0x118>
 8000fba:	024b      	lsls	r3, r1, #9
 8000fbc:	f43f af4c 	beq.w	8000e58 <__aeabi_fmul+0x114>
 8000fc0:	4608      	mov	r0, r1
 8000fc2:	e76e      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fc4:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000fc8:	bf18      	it	ne
 8000fca:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000fce:	d1ca      	bne.n	8000f66 <__aeabi_fdiv+0xba>
 8000fd0:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000fd4:	f47f af5c 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fd8:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000fdc:	f47f af3c 	bne.w	8000e58 <__aeabi_fmul+0x114>
 8000fe0:	e75f      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fe2:	bf00      	nop

08000fe4 <ADC_Select_CH1>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void ADC_Select_CH1 (void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b084      	sub	sp, #16
 8000fe8:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 8000fea:	1d3b      	adds	r3, r7, #4
 8000fec:	2200      	movs	r2, #0
 8000fee:	601a      	str	r2, [r3, #0]
 8000ff0:	605a      	str	r2, [r3, #4]
 8000ff2:	609a      	str	r2, [r3, #8]
	  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	  */
	  sConfig.Channel = ADC_CHANNEL_1;
 8000ff4:	2301      	movs	r3, #1
 8000ff6:	607b      	str	r3, [r7, #4]
	  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000ff8:	2301      	movs	r3, #1
 8000ffa:	60bb      	str	r3, [r7, #8]
	  sConfig.SamplingTime = ADC_SAMPLETIME_71CYCLES_5;
 8000ffc:	2306      	movs	r3, #6
 8000ffe:	60fb      	str	r3, [r7, #12]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001000:	1d3b      	adds	r3, r7, #4
 8001002:	4619      	mov	r1, r3
 8001004:	4805      	ldr	r0, [pc, #20]	@ (800101c <ADC_Select_CH1+0x38>)
 8001006:	f001 f849 	bl	800209c <HAL_ADC_ConfigChannel>
 800100a:	4603      	mov	r3, r0
 800100c:	2b00      	cmp	r3, #0
 800100e:	d001      	beq.n	8001014 <ADC_Select_CH1+0x30>
	  {
	    Error_Handler();
 8001010:	f000 fb5c 	bl	80016cc <Error_Handler>
	  }
}
 8001014:	bf00      	nop
 8001016:	3710      	adds	r7, #16
 8001018:	46bd      	mov	sp, r7
 800101a:	bd80      	pop	{r7, pc}
 800101c:	20000200 	.word	0x20000200

08001020 <ADC_Select_CH2>:

void ADC_Select_CH2 (void)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b084      	sub	sp, #16
 8001024:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 8001026:	1d3b      	adds	r3, r7, #4
 8001028:	2200      	movs	r2, #0
 800102a:	601a      	str	r2, [r3, #0]
 800102c:	605a      	str	r2, [r3, #4]
 800102e:	609a      	str	r2, [r3, #8]
	  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	  */
	  sConfig.Channel = ADC_CHANNEL_2;
 8001030:	2302      	movs	r3, #2
 8001032:	607b      	str	r3, [r7, #4]
	  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001034:	2302      	movs	r3, #2
 8001036:	60bb      	str	r3, [r7, #8]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001038:	1d3b      	adds	r3, r7, #4
 800103a:	4619      	mov	r1, r3
 800103c:	4805      	ldr	r0, [pc, #20]	@ (8001054 <ADC_Select_CH2+0x34>)
 800103e:	f001 f82d 	bl	800209c <HAL_ADC_ConfigChannel>
 8001042:	4603      	mov	r3, r0
 8001044:	2b00      	cmp	r3, #0
 8001046:	d001      	beq.n	800104c <ADC_Select_CH2+0x2c>
	  {
	    Error_Handler();
 8001048:	f000 fb40 	bl	80016cc <Error_Handler>
	  }
}
 800104c:	bf00      	nop
 800104e:	3710      	adds	r7, #16
 8001050:	46bd      	mov	sp, r7
 8001052:	bd80      	pop	{r7, pc}
 8001054:	20000200 	.word	0x20000200

08001058 <ADC_Select_CH3>:

void ADC_Select_CH3 (void)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b084      	sub	sp, #16
 800105c:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 800105e:	1d3b      	adds	r3, r7, #4
 8001060:	2200      	movs	r2, #0
 8001062:	601a      	str	r2, [r3, #0]
 8001064:	605a      	str	r2, [r3, #4]
 8001066:	609a      	str	r2, [r3, #8]
	  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	  */
	  sConfig.Channel = ADC_CHANNEL_1;
 8001068:	2301      	movs	r3, #1
 800106a:	607b      	str	r3, [r7, #4]
	  sConfig.Rank = ADC_REGULAR_RANK_3;
 800106c:	2303      	movs	r3, #3
 800106e:	60bb      	str	r3, [r7, #8]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001070:	1d3b      	adds	r3, r7, #4
 8001072:	4619      	mov	r1, r3
 8001074:	4805      	ldr	r0, [pc, #20]	@ (800108c <ADC_Select_CH3+0x34>)
 8001076:	f001 f811 	bl	800209c <HAL_ADC_ConfigChannel>
 800107a:	4603      	mov	r3, r0
 800107c:	2b00      	cmp	r3, #0
 800107e:	d001      	beq.n	8001084 <ADC_Select_CH3+0x2c>
	  {
	    Error_Handler();
 8001080:	f000 fb24 	bl	80016cc <Error_Handler>
	  }
}
 8001084:	bf00      	nop
 8001086:	3710      	adds	r7, #16
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}
 800108c:	20000200 	.word	0x20000200

08001090 <ADC_Select_CH4>:

void ADC_Select_CH4 (void)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b084      	sub	sp, #16
 8001094:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 8001096:	1d3b      	adds	r3, r7, #4
 8001098:	2200      	movs	r2, #0
 800109a:	601a      	str	r2, [r3, #0]
 800109c:	605a      	str	r2, [r3, #4]
 800109e:	609a      	str	r2, [r3, #8]
	  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	  */
	  sConfig.Rank = ADC_REGULAR_RANK_4;
 80010a0:	2304      	movs	r3, #4
 80010a2:	60bb      	str	r3, [r7, #8]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010a4:	1d3b      	adds	r3, r7, #4
 80010a6:	4619      	mov	r1, r3
 80010a8:	4805      	ldr	r0, [pc, #20]	@ (80010c0 <ADC_Select_CH4+0x30>)
 80010aa:	f000 fff7 	bl	800209c <HAL_ADC_ConfigChannel>
 80010ae:	4603      	mov	r3, r0
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d001      	beq.n	80010b8 <ADC_Select_CH4+0x28>
	  {
	    Error_Handler();
 80010b4:	f000 fb0a 	bl	80016cc <Error_Handler>
	  }
}
 80010b8:	bf00      	nop
 80010ba:	3710      	adds	r7, #16
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd80      	pop	{r7, pc}
 80010c0:	20000200 	.word	0x20000200
 80010c4:	00000000 	.word	0x00000000

080010c8 <getTemperature>:

void getTemperature(float *adc_val)
{
 80010c8:	b5b0      	push	{r4, r5, r7, lr}
 80010ca:	b086      	sub	sp, #24
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
	  float Vout = (*adc_val) * (Vin/4095.00); //4095 = 12 bit resolution
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	4618      	mov	r0, r3
 80010d6:	f7ff f9a7 	bl	8000428 <__aeabi_f2d>
 80010da:	4604      	mov	r4, r0
 80010dc:	460d      	mov	r5, r1
 80010de:	4b50      	ldr	r3, [pc, #320]	@ (8001220 <getTemperature+0x158>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	4618      	mov	r0, r3
 80010e4:	f7ff f9a0 	bl	8000428 <__aeabi_f2d>
 80010e8:	a347      	add	r3, pc, #284	@ (adr r3, 8001208 <getTemperature+0x140>)
 80010ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010ee:	f7ff fb1d 	bl	800072c <__aeabi_ddiv>
 80010f2:	4602      	mov	r2, r0
 80010f4:	460b      	mov	r3, r1
 80010f6:	4620      	mov	r0, r4
 80010f8:	4629      	mov	r1, r5
 80010fa:	f7ff f9ed 	bl	80004d8 <__aeabi_dmul>
 80010fe:	4602      	mov	r2, r0
 8001100:	460b      	mov	r3, r1
 8001102:	4610      	mov	r0, r2
 8001104:	4619      	mov	r1, r3
 8001106:	f7ff fcbf 	bl	8000a88 <__aeabi_d2f>
 800110a:	4603      	mov	r3, r0
 800110c:	617b      	str	r3, [r7, #20]
	  float Rt = (Vout * Rs) / (Vin - Vout);
 800110e:	4b45      	ldr	r3, [pc, #276]	@ (8001224 <getTemperature+0x15c>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	6979      	ldr	r1, [r7, #20]
 8001114:	4618      	mov	r0, r3
 8001116:	f7ff fe15 	bl	8000d44 <__aeabi_fmul>
 800111a:	4603      	mov	r3, r0
 800111c:	461c      	mov	r4, r3
 800111e:	4b40      	ldr	r3, [pc, #256]	@ (8001220 <getTemperature+0x158>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	6979      	ldr	r1, [r7, #20]
 8001124:	4618      	mov	r0, r3
 8001126:	f7ff fd03 	bl	8000b30 <__aeabi_fsub>
 800112a:	4603      	mov	r3, r0
 800112c:	4619      	mov	r1, r3
 800112e:	4620      	mov	r0, r4
 8001130:	f7ff febc 	bl	8000eac <__aeabi_fdiv>
 8001134:	4603      	mov	r3, r0
 8001136:	613b      	str	r3, [r7, #16]
	  float temperature = (1/((1/298.15)+(log(Rt/R25)/beta_val))-275.5);
 8001138:	4b3b      	ldr	r3, [pc, #236]	@ (8001228 <getTemperature+0x160>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	4619      	mov	r1, r3
 800113e:	6938      	ldr	r0, [r7, #16]
 8001140:	f7ff feb4 	bl	8000eac <__aeabi_fdiv>
 8001144:	4603      	mov	r3, r0
 8001146:	4618      	mov	r0, r3
 8001148:	f7ff f96e 	bl	8000428 <__aeabi_f2d>
 800114c:	4602      	mov	r2, r0
 800114e:	460b      	mov	r3, r1
 8001150:	4610      	mov	r0, r2
 8001152:	4619      	mov	r1, r3
 8001154:	f005 fa0c 	bl	8006570 <log>
 8001158:	4604      	mov	r4, r0
 800115a:	460d      	mov	r5, r1
 800115c:	4b33      	ldr	r3, [pc, #204]	@ (800122c <getTemperature+0x164>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	4618      	mov	r0, r3
 8001162:	f7ff f961 	bl	8000428 <__aeabi_f2d>
 8001166:	4602      	mov	r2, r0
 8001168:	460b      	mov	r3, r1
 800116a:	4620      	mov	r0, r4
 800116c:	4629      	mov	r1, r5
 800116e:	f7ff fadd 	bl	800072c <__aeabi_ddiv>
 8001172:	4602      	mov	r2, r0
 8001174:	460b      	mov	r3, r1
 8001176:	4610      	mov	r0, r2
 8001178:	4619      	mov	r1, r3
 800117a:	a325      	add	r3, pc, #148	@ (adr r3, 8001210 <getTemperature+0x148>)
 800117c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001180:	f7fe fff4 	bl	800016c <__adddf3>
 8001184:	4602      	mov	r2, r0
 8001186:	460b      	mov	r3, r1
 8001188:	f04f 0000 	mov.w	r0, #0
 800118c:	4928      	ldr	r1, [pc, #160]	@ (8001230 <getTemperature+0x168>)
 800118e:	f7ff facd 	bl	800072c <__aeabi_ddiv>
 8001192:	4602      	mov	r2, r0
 8001194:	460b      	mov	r3, r1
 8001196:	4610      	mov	r0, r2
 8001198:	4619      	mov	r1, r3
 800119a:	a31f      	add	r3, pc, #124	@ (adr r3, 8001218 <getTemperature+0x150>)
 800119c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011a0:	f7fe ffe2 	bl	8000168 <__aeabi_dsub>
 80011a4:	4602      	mov	r2, r0
 80011a6:	460b      	mov	r3, r1
 80011a8:	4610      	mov	r0, r2
 80011aa:	4619      	mov	r1, r3
 80011ac:	f7ff fc6c 	bl	8000a88 <__aeabi_d2f>
 80011b0:	4603      	mov	r3, r0
 80011b2:	60fb      	str	r3, [r7, #12]
	  int number=(int)(temperature + 0.5);
 80011b4:	68f8      	ldr	r0, [r7, #12]
 80011b6:	f7ff f937 	bl	8000428 <__aeabi_f2d>
 80011ba:	f04f 0200 	mov.w	r2, #0
 80011be:	4b1d      	ldr	r3, [pc, #116]	@ (8001234 <getTemperature+0x16c>)
 80011c0:	f7fe ffd4 	bl	800016c <__adddf3>
 80011c4:	4602      	mov	r2, r0
 80011c6:	460b      	mov	r3, r1
 80011c8:	4610      	mov	r0, r2
 80011ca:	4619      	mov	r1, r3
 80011cc:	f7ff fc34 	bl	8000a38 <__aeabi_d2iz>
 80011d0:	4603      	mov	r3, r0
 80011d2:	60bb      	str	r3, [r7, #8]
	  sprintf(txBuffer,"T:%d\n",number);
 80011d4:	68ba      	ldr	r2, [r7, #8]
 80011d6:	4918      	ldr	r1, [pc, #96]	@ (8001238 <getTemperature+0x170>)
 80011d8:	4818      	ldr	r0, [pc, #96]	@ (800123c <getTemperature+0x174>)
 80011da:	f003 f88b 	bl	80042f4 <siprintf>
	  HAL_Delay(50);
 80011de:	2032      	movs	r0, #50	@ 0x32
 80011e0:	f000 fca0 	bl	8001b24 <HAL_Delay>
	  HAL_UART_Transmit(&huart1, (uint8_t*)txBuffer,  strlen(txBuffer), 500);
 80011e4:	4815      	ldr	r0, [pc, #84]	@ (800123c <getTemperature+0x174>)
 80011e6:	f7fe ffb3 	bl	8000150 <strlen>
 80011ea:	4603      	mov	r3, r0
 80011ec:	b29a      	uxth	r2, r3
 80011ee:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80011f2:	4912      	ldr	r1, [pc, #72]	@ (800123c <getTemperature+0x174>)
 80011f4:	4812      	ldr	r0, [pc, #72]	@ (8001240 <getTemperature+0x178>)
 80011f6:	f002 f9e1 	bl	80035bc <HAL_UART_Transmit>
}
 80011fa:	bf00      	nop
 80011fc:	3718      	adds	r7, #24
 80011fe:	46bd      	mov	sp, r7
 8001200:	bdb0      	pop	{r4, r5, r7, pc}
 8001202:	bf00      	nop
 8001204:	f3af 8000 	nop.w
 8001208:	00000000 	.word	0x00000000
 800120c:	40affe00 	.word	0x40affe00
 8001210:	dcb5db83 	.word	0xdcb5db83
 8001214:	3f6b79e1 	.word	0x3f6b79e1
 8001218:	00000000 	.word	0x00000000
 800121c:	40713800 	.word	0x40713800
 8001220:	20000004 	.word	0x20000004
 8001224:	20000008 	.word	0x20000008
 8001228:	2000000c 	.word	0x2000000c
 800122c:	20000000 	.word	0x20000000
 8001230:	3ff00000 	.word	0x3ff00000
 8001234:	3fe00000 	.word	0x3fe00000
 8001238:	08006960 	.word	0x08006960
 800123c:	2000028c 	.word	0x2000028c
 8001240:	20000230 	.word	0x20000230

08001244 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b082      	sub	sp, #8
 8001248:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800124a:	f000 fc09 	bl	8001a60 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800124e:	f000 f92d 	bl	80014ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001252:	f000 fa19 	bl	8001688 <MX_GPIO_Init>
  MX_ADC1_Init();
 8001256:	f000 f985 	bl	8001564 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 800125a:	f000 f9eb 	bl	8001634 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_StatusTypeDef ret;
	ret = HAL_ADCEx_Calibration_Start(&hadc1);
 800125e:	4886      	ldr	r0, [pc, #536]	@ (8001478 <main+0x234>)
 8001260:	f001 f8b0 	bl	80023c4 <HAL_ADCEx_Calibration_Start>
 8001264:	4603      	mov	r3, r0
 8001266:	71fb      	strb	r3, [r7, #7]
	if(ret != HAL_OK)
 8001268:	79fb      	ldrb	r3, [r7, #7]
 800126a:	2b00      	cmp	r3, #0
 800126c:	d002      	beq.n	8001274 <main+0x30>
	{
		return -1;
 800126e:	f04f 33ff 	mov.w	r3, #4294967295
 8001272:	e0fc      	b.n	800146e <main+0x22a>
	}

	HAL_Delay(10);
 8001274:	200a      	movs	r0, #10
 8001276:	f000 fc55 	bl	8001b24 <HAL_Delay>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  //Temperature Sensor 1
	  ADC_Select_CH1();
 800127a:	f7ff feb3 	bl	8000fe4 <ADC_Select_CH1>
	  ret = HAL_ADC_Start(&hadc1);
 800127e:	487e      	ldr	r0, [pc, #504]	@ (8001478 <main+0x234>)
 8001280:	f000 fd4c 	bl	8001d1c <HAL_ADC_Start>
 8001284:	4603      	mov	r3, r0
 8001286:	71fb      	strb	r3, [r7, #7]
	  	if(ret != HAL_OK)
 8001288:	79fb      	ldrb	r3, [r7, #7]
 800128a:	2b00      	cmp	r3, #0
 800128c:	d002      	beq.n	8001294 <main+0x50>
	  	{
	  		return -1;
 800128e:	f04f 33ff 	mov.w	r3, #4294967295
 8001292:	e0ec      	b.n	800146e <main+0x22a>
	  	}
	  ret = HAL_ADC_PollForConversion(&hadc1, 50);
 8001294:	2132      	movs	r1, #50	@ 0x32
 8001296:	4878      	ldr	r0, [pc, #480]	@ (8001478 <main+0x234>)
 8001298:	f000 fdee 	bl	8001e78 <HAL_ADC_PollForConversion>
 800129c:	4603      	mov	r3, r0
 800129e:	71fb      	strb	r3, [r7, #7]
	  	if(ret != HAL_OK)
 80012a0:	79fb      	ldrb	r3, [r7, #7]
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d002      	beq.n	80012ac <main+0x68>
	  	{
	  		return -1;
 80012a6:	f04f 33ff 	mov.w	r3, #4294967295
 80012aa:	e0e0      	b.n	800146e <main+0x22a>
	  	}
	  adc_val[0] = HAL_ADC_GetValue(&hadc1); // get the adc value
 80012ac:	4872      	ldr	r0, [pc, #456]	@ (8001478 <main+0x234>)
 80012ae:	f000 fee9 	bl	8002084 <HAL_ADC_GetValue>
 80012b2:	4603      	mov	r3, r0
 80012b4:	4618      	mov	r0, r3
 80012b6:	f7ff fced 	bl	8000c94 <__aeabi_ui2f>
 80012ba:	4603      	mov	r3, r0
 80012bc:	4a6f      	ldr	r2, [pc, #444]	@ (800147c <main+0x238>)
 80012be:	6013      	str	r3, [r2, #0]
//	  HAL_ADC_Stop(&hadc1);
	  HAL_Delay(100);
 80012c0:	2064      	movs	r0, #100	@ 0x64
 80012c2:	f000 fc2f 	bl	8001b24 <HAL_Delay>
	  sprintf(txBuffer,"\nCH1");
 80012c6:	496e      	ldr	r1, [pc, #440]	@ (8001480 <main+0x23c>)
 80012c8:	486e      	ldr	r0, [pc, #440]	@ (8001484 <main+0x240>)
 80012ca:	f003 f813 	bl	80042f4 <siprintf>
	  HAL_Delay(50);
 80012ce:	2032      	movs	r0, #50	@ 0x32
 80012d0:	f000 fc28 	bl	8001b24 <HAL_Delay>
	  HAL_UART_Transmit(&huart1, (uint8_t*)txBuffer,  strlen(txBuffer), 500);
 80012d4:	486b      	ldr	r0, [pc, #428]	@ (8001484 <main+0x240>)
 80012d6:	f7fe ff3b 	bl	8000150 <strlen>
 80012da:	4603      	mov	r3, r0
 80012dc:	b29a      	uxth	r2, r3
 80012de:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80012e2:	4968      	ldr	r1, [pc, #416]	@ (8001484 <main+0x240>)
 80012e4:	4868      	ldr	r0, [pc, #416]	@ (8001488 <main+0x244>)
 80012e6:	f002 f969 	bl	80035bc <HAL_UART_Transmit>
	  getTemperature(&adc_val[0]);
 80012ea:	4864      	ldr	r0, [pc, #400]	@ (800147c <main+0x238>)
 80012ec:	f7ff feec 	bl	80010c8 <getTemperature>


	  //Temperature Sensor 2
	  ADC_Select_CH2();
 80012f0:	f7ff fe96 	bl	8001020 <ADC_Select_CH2>
	  ret = HAL_ADC_Start(&hadc1);
 80012f4:	4860      	ldr	r0, [pc, #384]	@ (8001478 <main+0x234>)
 80012f6:	f000 fd11 	bl	8001d1c <HAL_ADC_Start>
 80012fa:	4603      	mov	r3, r0
 80012fc:	71fb      	strb	r3, [r7, #7]
	  	if(ret != HAL_OK)
 80012fe:	79fb      	ldrb	r3, [r7, #7]
 8001300:	2b00      	cmp	r3, #0
 8001302:	d002      	beq.n	800130a <main+0xc6>
	  	{
	  		return -1;
 8001304:	f04f 33ff 	mov.w	r3, #4294967295
 8001308:	e0b1      	b.n	800146e <main+0x22a>
	  	}
	  ret = HAL_ADC_PollForConversion(&hadc1, 50);
 800130a:	2132      	movs	r1, #50	@ 0x32
 800130c:	485a      	ldr	r0, [pc, #360]	@ (8001478 <main+0x234>)
 800130e:	f000 fdb3 	bl	8001e78 <HAL_ADC_PollForConversion>
 8001312:	4603      	mov	r3, r0
 8001314:	71fb      	strb	r3, [r7, #7]
	  	if(ret != HAL_OK)
 8001316:	79fb      	ldrb	r3, [r7, #7]
 8001318:	2b00      	cmp	r3, #0
 800131a:	d002      	beq.n	8001322 <main+0xde>
	  	{
	  		return -1;
 800131c:	f04f 33ff 	mov.w	r3, #4294967295
 8001320:	e0a5      	b.n	800146e <main+0x22a>
	  	}
	  adc_val[1] = HAL_ADC_GetValue(&hadc1); // get the adc value
 8001322:	4855      	ldr	r0, [pc, #340]	@ (8001478 <main+0x234>)
 8001324:	f000 feae 	bl	8002084 <HAL_ADC_GetValue>
 8001328:	4603      	mov	r3, r0
 800132a:	4618      	mov	r0, r3
 800132c:	f7ff fcb2 	bl	8000c94 <__aeabi_ui2f>
 8001330:	4603      	mov	r3, r0
 8001332:	4a52      	ldr	r2, [pc, #328]	@ (800147c <main+0x238>)
 8001334:	6053      	str	r3, [r2, #4]
//	  HAL_ADC_Stop(&hadc1);
	  HAL_Delay(100);
 8001336:	2064      	movs	r0, #100	@ 0x64
 8001338:	f000 fbf4 	bl	8001b24 <HAL_Delay>
	  sprintf(txBuffer,"\nCH2");
 800133c:	4953      	ldr	r1, [pc, #332]	@ (800148c <main+0x248>)
 800133e:	4851      	ldr	r0, [pc, #324]	@ (8001484 <main+0x240>)
 8001340:	f002 ffd8 	bl	80042f4 <siprintf>
	  HAL_Delay(50);
 8001344:	2032      	movs	r0, #50	@ 0x32
 8001346:	f000 fbed 	bl	8001b24 <HAL_Delay>
	  HAL_UART_Transmit(&huart1, (uint8_t*)txBuffer,  strlen(txBuffer), 500);
 800134a:	484e      	ldr	r0, [pc, #312]	@ (8001484 <main+0x240>)
 800134c:	f7fe ff00 	bl	8000150 <strlen>
 8001350:	4603      	mov	r3, r0
 8001352:	b29a      	uxth	r2, r3
 8001354:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8001358:	494a      	ldr	r1, [pc, #296]	@ (8001484 <main+0x240>)
 800135a:	484b      	ldr	r0, [pc, #300]	@ (8001488 <main+0x244>)
 800135c:	f002 f92e 	bl	80035bc <HAL_UART_Transmit>
	  getTemperature(&adc_val[1]);
 8001360:	484b      	ldr	r0, [pc, #300]	@ (8001490 <main+0x24c>)
 8001362:	f7ff feb1 	bl	80010c8 <getTemperature>

	  //Temperature Sensor 3
	  ADC_Select_CH3();
 8001366:	f7ff fe77 	bl	8001058 <ADC_Select_CH3>
	  ret = HAL_ADC_Start(&hadc1);
 800136a:	4843      	ldr	r0, [pc, #268]	@ (8001478 <main+0x234>)
 800136c:	f000 fcd6 	bl	8001d1c <HAL_ADC_Start>
 8001370:	4603      	mov	r3, r0
 8001372:	71fb      	strb	r3, [r7, #7]
	  	if(ret != HAL_OK)
 8001374:	79fb      	ldrb	r3, [r7, #7]
 8001376:	2b00      	cmp	r3, #0
 8001378:	d002      	beq.n	8001380 <main+0x13c>
	  	{
	  		return -1;
 800137a:	f04f 33ff 	mov.w	r3, #4294967295
 800137e:	e076      	b.n	800146e <main+0x22a>
	  	}
	  ret = HAL_ADC_PollForConversion(&hadc1, 50);
 8001380:	2132      	movs	r1, #50	@ 0x32
 8001382:	483d      	ldr	r0, [pc, #244]	@ (8001478 <main+0x234>)
 8001384:	f000 fd78 	bl	8001e78 <HAL_ADC_PollForConversion>
 8001388:	4603      	mov	r3, r0
 800138a:	71fb      	strb	r3, [r7, #7]
	  	if(ret != HAL_OK)
 800138c:	79fb      	ldrb	r3, [r7, #7]
 800138e:	2b00      	cmp	r3, #0
 8001390:	d002      	beq.n	8001398 <main+0x154>
	  	{
	  		return -1;
 8001392:	f04f 33ff 	mov.w	r3, #4294967295
 8001396:	e06a      	b.n	800146e <main+0x22a>
	  	}
	  adc_val[2] = HAL_ADC_GetValue(&hadc1); // get the adc value
 8001398:	4837      	ldr	r0, [pc, #220]	@ (8001478 <main+0x234>)
 800139a:	f000 fe73 	bl	8002084 <HAL_ADC_GetValue>
 800139e:	4603      	mov	r3, r0
 80013a0:	4618      	mov	r0, r3
 80013a2:	f7ff fc77 	bl	8000c94 <__aeabi_ui2f>
 80013a6:	4603      	mov	r3, r0
 80013a8:	4a34      	ldr	r2, [pc, #208]	@ (800147c <main+0x238>)
 80013aa:	6093      	str	r3, [r2, #8]
//	  HAL_ADC_Stop(&hadc1);
	  HAL_Delay(100);
 80013ac:	2064      	movs	r0, #100	@ 0x64
 80013ae:	f000 fbb9 	bl	8001b24 <HAL_Delay>
	  sprintf(txBuffer,"\nCH3");
 80013b2:	4938      	ldr	r1, [pc, #224]	@ (8001494 <main+0x250>)
 80013b4:	4833      	ldr	r0, [pc, #204]	@ (8001484 <main+0x240>)
 80013b6:	f002 ff9d 	bl	80042f4 <siprintf>
	  HAL_Delay(50);
 80013ba:	2032      	movs	r0, #50	@ 0x32
 80013bc:	f000 fbb2 	bl	8001b24 <HAL_Delay>
	  HAL_UART_Transmit(&huart1, (uint8_t*)txBuffer,  strlen(txBuffer), 500);
 80013c0:	4830      	ldr	r0, [pc, #192]	@ (8001484 <main+0x240>)
 80013c2:	f7fe fec5 	bl	8000150 <strlen>
 80013c6:	4603      	mov	r3, r0
 80013c8:	b29a      	uxth	r2, r3
 80013ca:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80013ce:	492d      	ldr	r1, [pc, #180]	@ (8001484 <main+0x240>)
 80013d0:	482d      	ldr	r0, [pc, #180]	@ (8001488 <main+0x244>)
 80013d2:	f002 f8f3 	bl	80035bc <HAL_UART_Transmit>
	  getTemperature(&adc_val[2]);
 80013d6:	4830      	ldr	r0, [pc, #192]	@ (8001498 <main+0x254>)
 80013d8:	f7ff fe76 	bl	80010c8 <getTemperature>

	  //Temperature Sensor 4
	  ADC_Select_CH4();
 80013dc:	f7ff fe58 	bl	8001090 <ADC_Select_CH4>
	  ret = HAL_ADC_Start(&hadc1);
 80013e0:	4825      	ldr	r0, [pc, #148]	@ (8001478 <main+0x234>)
 80013e2:	f000 fc9b 	bl	8001d1c <HAL_ADC_Start>
 80013e6:	4603      	mov	r3, r0
 80013e8:	71fb      	strb	r3, [r7, #7]
	  	if(ret != HAL_OK)
 80013ea:	79fb      	ldrb	r3, [r7, #7]
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d002      	beq.n	80013f6 <main+0x1b2>
	  	{
	  		return -1;
 80013f0:	f04f 33ff 	mov.w	r3, #4294967295
 80013f4:	e03b      	b.n	800146e <main+0x22a>
	  	}
	  ret = HAL_ADC_PollForConversion(&hadc1, 50);
 80013f6:	2132      	movs	r1, #50	@ 0x32
 80013f8:	481f      	ldr	r0, [pc, #124]	@ (8001478 <main+0x234>)
 80013fa:	f000 fd3d 	bl	8001e78 <HAL_ADC_PollForConversion>
 80013fe:	4603      	mov	r3, r0
 8001400:	71fb      	strb	r3, [r7, #7]
	  	if(ret != HAL_OK)
 8001402:	79fb      	ldrb	r3, [r7, #7]
 8001404:	2b00      	cmp	r3, #0
 8001406:	d002      	beq.n	800140e <main+0x1ca>
	  	{
	  		return -1;
 8001408:	f04f 33ff 	mov.w	r3, #4294967295
 800140c:	e02f      	b.n	800146e <main+0x22a>
	  	}
	  adc_val[3] = HAL_ADC_GetValue(&hadc1); // get the adc value
 800140e:	481a      	ldr	r0, [pc, #104]	@ (8001478 <main+0x234>)
 8001410:	f000 fe38 	bl	8002084 <HAL_ADC_GetValue>
 8001414:	4603      	mov	r3, r0
 8001416:	4618      	mov	r0, r3
 8001418:	f7ff fc3c 	bl	8000c94 <__aeabi_ui2f>
 800141c:	4603      	mov	r3, r0
 800141e:	4a17      	ldr	r2, [pc, #92]	@ (800147c <main+0x238>)
 8001420:	60d3      	str	r3, [r2, #12]
//	  HAL_ADC_Stop(&hadc1);
	  HAL_Delay(100);
 8001422:	2064      	movs	r0, #100	@ 0x64
 8001424:	f000 fb7e 	bl	8001b24 <HAL_Delay>
	  sprintf(txBuffer,"\nCH4");
 8001428:	491c      	ldr	r1, [pc, #112]	@ (800149c <main+0x258>)
 800142a:	4816      	ldr	r0, [pc, #88]	@ (8001484 <main+0x240>)
 800142c:	f002 ff62 	bl	80042f4 <siprintf>
	  HAL_Delay(50);
 8001430:	2032      	movs	r0, #50	@ 0x32
 8001432:	f000 fb77 	bl	8001b24 <HAL_Delay>
	  HAL_UART_Transmit(&huart1, (uint8_t*)txBuffer,  strlen(txBuffer), 500);
 8001436:	4813      	ldr	r0, [pc, #76]	@ (8001484 <main+0x240>)
 8001438:	f7fe fe8a 	bl	8000150 <strlen>
 800143c:	4603      	mov	r3, r0
 800143e:	b29a      	uxth	r2, r3
 8001440:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8001444:	490f      	ldr	r1, [pc, #60]	@ (8001484 <main+0x240>)
 8001446:	4810      	ldr	r0, [pc, #64]	@ (8001488 <main+0x244>)
 8001448:	f002 f8b8 	bl	80035bc <HAL_UART_Transmit>
	  getTemperature(&adc_val[3]);
 800144c:	4814      	ldr	r0, [pc, #80]	@ (80014a0 <main+0x25c>)
 800144e:	f7ff fe3b 	bl	80010c8 <getTemperature>

	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8001452:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001456:	4813      	ldr	r0, [pc, #76]	@ (80014a4 <main+0x260>)
 8001458:	f001 faca 	bl	80029f0 <HAL_GPIO_TogglePin>
	  HAL_Delay(50);
 800145c:	2032      	movs	r0, #50	@ 0x32
 800145e:	f000 fb61 	bl	8001b24 <HAL_Delay>

	  a++;
 8001462:	4b11      	ldr	r3, [pc, #68]	@ (80014a8 <main+0x264>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	3301      	adds	r3, #1
 8001468:	4a0f      	ldr	r2, [pc, #60]	@ (80014a8 <main+0x264>)
 800146a:	6013      	str	r3, [r2, #0]
  {
 800146c:	e705      	b.n	800127a <main+0x36>

  }
  /* USER CODE END 3 */
}
 800146e:	4618      	mov	r0, r3
 8001470:	3708      	adds	r7, #8
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}
 8001476:	bf00      	nop
 8001478:	20000200 	.word	0x20000200
 800147c:	20000278 	.word	0x20000278
 8001480:	08006968 	.word	0x08006968
 8001484:	2000028c 	.word	0x2000028c
 8001488:	20000230 	.word	0x20000230
 800148c:	08006970 	.word	0x08006970
 8001490:	2000027c 	.word	0x2000027c
 8001494:	08006978 	.word	0x08006978
 8001498:	20000280 	.word	0x20000280
 800149c:	08006980 	.word	0x08006980
 80014a0:	20000284 	.word	0x20000284
 80014a4:	40011000 	.word	0x40011000
 80014a8:	200002f0 	.word	0x200002f0

080014ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b094      	sub	sp, #80	@ 0x50
 80014b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014b2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80014b6:	2228      	movs	r2, #40	@ 0x28
 80014b8:	2100      	movs	r1, #0
 80014ba:	4618      	mov	r0, r3
 80014bc:	f002 ff7f 	bl	80043be <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014c0:	f107 0314 	add.w	r3, r7, #20
 80014c4:	2200      	movs	r2, #0
 80014c6:	601a      	str	r2, [r3, #0]
 80014c8:	605a      	str	r2, [r3, #4]
 80014ca:	609a      	str	r2, [r3, #8]
 80014cc:	60da      	str	r2, [r3, #12]
 80014ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80014d0:	1d3b      	adds	r3, r7, #4
 80014d2:	2200      	movs	r2, #0
 80014d4:	601a      	str	r2, [r3, #0]
 80014d6:	605a      	str	r2, [r3, #4]
 80014d8:	609a      	str	r2, [r3, #8]
 80014da:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80014dc:	2301      	movs	r3, #1
 80014de:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80014e0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80014e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80014e6:	2300      	movs	r3, #0
 80014e8:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80014ea:	2301      	movs	r3, #1
 80014ec:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014ee:	2302      	movs	r3, #2
 80014f0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80014f2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80014f6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL7;
 80014f8:	f44f 13a0 	mov.w	r3, #1310720	@ 0x140000
 80014fc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014fe:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001502:	4618      	mov	r0, r3
 8001504:	f001 fa8e 	bl	8002a24 <HAL_RCC_OscConfig>
 8001508:	4603      	mov	r3, r0
 800150a:	2b00      	cmp	r3, #0
 800150c:	d001      	beq.n	8001512 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800150e:	f000 f8dd 	bl	80016cc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001512:	230f      	movs	r3, #15
 8001514:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001516:	2302      	movs	r3, #2
 8001518:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800151a:	2300      	movs	r3, #0
 800151c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800151e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001522:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001524:	2300      	movs	r3, #0
 8001526:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001528:	f107 0314 	add.w	r3, r7, #20
 800152c:	2102      	movs	r1, #2
 800152e:	4618      	mov	r0, r3
 8001530:	f001 fcfa 	bl	8002f28 <HAL_RCC_ClockConfig>
 8001534:	4603      	mov	r3, r0
 8001536:	2b00      	cmp	r3, #0
 8001538:	d001      	beq.n	800153e <SystemClock_Config+0x92>
  {
    Error_Handler();
 800153a:	f000 f8c7 	bl	80016cc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800153e:	2302      	movs	r3, #2
 8001540:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV4;
 8001542:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001546:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001548:	1d3b      	adds	r3, r7, #4
 800154a:	4618      	mov	r0, r3
 800154c:	f001 fe7a 	bl	8003244 <HAL_RCCEx_PeriphCLKConfig>
 8001550:	4603      	mov	r3, r0
 8001552:	2b00      	cmp	r3, #0
 8001554:	d001      	beq.n	800155a <SystemClock_Config+0xae>
  {
    Error_Handler();
 8001556:	f000 f8b9 	bl	80016cc <Error_Handler>
  }
}
 800155a:	bf00      	nop
 800155c:	3750      	adds	r7, #80	@ 0x50
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}
	...

08001564 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b084      	sub	sp, #16
 8001568:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800156a:	1d3b      	adds	r3, r7, #4
 800156c:	2200      	movs	r2, #0
 800156e:	601a      	str	r2, [r3, #0]
 8001570:	605a      	str	r2, [r3, #4]
 8001572:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001574:	4b2d      	ldr	r3, [pc, #180]	@ (800162c <MX_ADC1_Init+0xc8>)
 8001576:	4a2e      	ldr	r2, [pc, #184]	@ (8001630 <MX_ADC1_Init+0xcc>)
 8001578:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800157a:	4b2c      	ldr	r3, [pc, #176]	@ (800162c <MX_ADC1_Init+0xc8>)
 800157c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001580:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001582:	4b2a      	ldr	r3, [pc, #168]	@ (800162c <MX_ADC1_Init+0xc8>)
 8001584:	2201      	movs	r2, #1
 8001586:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001588:	4b28      	ldr	r3, [pc, #160]	@ (800162c <MX_ADC1_Init+0xc8>)
 800158a:	2200      	movs	r2, #0
 800158c:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800158e:	4b27      	ldr	r3, [pc, #156]	@ (800162c <MX_ADC1_Init+0xc8>)
 8001590:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8001594:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001596:	4b25      	ldr	r3, [pc, #148]	@ (800162c <MX_ADC1_Init+0xc8>)
 8001598:	2200      	movs	r2, #0
 800159a:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 4;
 800159c:	4b23      	ldr	r3, [pc, #140]	@ (800162c <MX_ADC1_Init+0xc8>)
 800159e:	2204      	movs	r2, #4
 80015a0:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80015a2:	4822      	ldr	r0, [pc, #136]	@ (800162c <MX_ADC1_Init+0xc8>)
 80015a4:	f000 fae2 	bl	8001b6c <HAL_ADC_Init>
 80015a8:	4603      	mov	r3, r0
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d001      	beq.n	80015b2 <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 80015ae:	f000 f88d 	bl	80016cc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80015b2:	2301      	movs	r3, #1
 80015b4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80015b6:	2301      	movs	r3, #1
 80015b8:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_71CYCLES_5;
 80015ba:	2306      	movs	r3, #6
 80015bc:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80015be:	1d3b      	adds	r3, r7, #4
 80015c0:	4619      	mov	r1, r3
 80015c2:	481a      	ldr	r0, [pc, #104]	@ (800162c <MX_ADC1_Init+0xc8>)
 80015c4:	f000 fd6a 	bl	800209c <HAL_ADC_ConfigChannel>
 80015c8:	4603      	mov	r3, r0
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d001      	beq.n	80015d2 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80015ce:	f000 f87d 	bl	80016cc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80015d2:	2302      	movs	r3, #2
 80015d4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80015d6:	2302      	movs	r3, #2
 80015d8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80015da:	1d3b      	adds	r3, r7, #4
 80015dc:	4619      	mov	r1, r3
 80015de:	4813      	ldr	r0, [pc, #76]	@ (800162c <MX_ADC1_Init+0xc8>)
 80015e0:	f000 fd5c 	bl	800209c <HAL_ADC_ConfigChannel>
 80015e4:	4603      	mov	r3, r0
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d001      	beq.n	80015ee <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 80015ea:	f000 f86f 	bl	80016cc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80015ee:	2301      	movs	r3, #1
 80015f0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80015f2:	2303      	movs	r3, #3
 80015f4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80015f6:	1d3b      	adds	r3, r7, #4
 80015f8:	4619      	mov	r1, r3
 80015fa:	480c      	ldr	r0, [pc, #48]	@ (800162c <MX_ADC1_Init+0xc8>)
 80015fc:	f000 fd4e 	bl	800209c <HAL_ADC_ConfigChannel>
 8001600:	4603      	mov	r3, r0
 8001602:	2b00      	cmp	r3, #0
 8001604:	d001      	beq.n	800160a <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8001606:	f000 f861 	bl	80016cc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_4;
 800160a:	2304      	movs	r3, #4
 800160c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800160e:	1d3b      	adds	r3, r7, #4
 8001610:	4619      	mov	r1, r3
 8001612:	4806      	ldr	r0, [pc, #24]	@ (800162c <MX_ADC1_Init+0xc8>)
 8001614:	f000 fd42 	bl	800209c <HAL_ADC_ConfigChannel>
 8001618:	4603      	mov	r3, r0
 800161a:	2b00      	cmp	r3, #0
 800161c:	d001      	beq.n	8001622 <MX_ADC1_Init+0xbe>
  {
    Error_Handler();
 800161e:	f000 f855 	bl	80016cc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001622:	bf00      	nop
 8001624:	3710      	adds	r7, #16
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}
 800162a:	bf00      	nop
 800162c:	20000200 	.word	0x20000200
 8001630:	40012400 	.word	0x40012400

08001634 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001638:	4b11      	ldr	r3, [pc, #68]	@ (8001680 <MX_USART1_UART_Init+0x4c>)
 800163a:	4a12      	ldr	r2, [pc, #72]	@ (8001684 <MX_USART1_UART_Init+0x50>)
 800163c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800163e:	4b10      	ldr	r3, [pc, #64]	@ (8001680 <MX_USART1_UART_Init+0x4c>)
 8001640:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001644:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001646:	4b0e      	ldr	r3, [pc, #56]	@ (8001680 <MX_USART1_UART_Init+0x4c>)
 8001648:	2200      	movs	r2, #0
 800164a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800164c:	4b0c      	ldr	r3, [pc, #48]	@ (8001680 <MX_USART1_UART_Init+0x4c>)
 800164e:	2200      	movs	r2, #0
 8001650:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001652:	4b0b      	ldr	r3, [pc, #44]	@ (8001680 <MX_USART1_UART_Init+0x4c>)
 8001654:	2200      	movs	r2, #0
 8001656:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001658:	4b09      	ldr	r3, [pc, #36]	@ (8001680 <MX_USART1_UART_Init+0x4c>)
 800165a:	220c      	movs	r2, #12
 800165c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800165e:	4b08      	ldr	r3, [pc, #32]	@ (8001680 <MX_USART1_UART_Init+0x4c>)
 8001660:	2200      	movs	r2, #0
 8001662:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001664:	4b06      	ldr	r3, [pc, #24]	@ (8001680 <MX_USART1_UART_Init+0x4c>)
 8001666:	2200      	movs	r2, #0
 8001668:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800166a:	4805      	ldr	r0, [pc, #20]	@ (8001680 <MX_USART1_UART_Init+0x4c>)
 800166c:	f001 ff56 	bl	800351c <HAL_UART_Init>
 8001670:	4603      	mov	r3, r0
 8001672:	2b00      	cmp	r3, #0
 8001674:	d001      	beq.n	800167a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001676:	f000 f829 	bl	80016cc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800167a:	bf00      	nop
 800167c:	bd80      	pop	{r7, pc}
 800167e:	bf00      	nop
 8001680:	20000230 	.word	0x20000230
 8001684:	40013800 	.word	0x40013800

08001688 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001688:	b480      	push	{r7}
 800168a:	b083      	sub	sp, #12
 800168c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800168e:	4b0e      	ldr	r3, [pc, #56]	@ (80016c8 <MX_GPIO_Init+0x40>)
 8001690:	699b      	ldr	r3, [r3, #24]
 8001692:	4a0d      	ldr	r2, [pc, #52]	@ (80016c8 <MX_GPIO_Init+0x40>)
 8001694:	f043 0320 	orr.w	r3, r3, #32
 8001698:	6193      	str	r3, [r2, #24]
 800169a:	4b0b      	ldr	r3, [pc, #44]	@ (80016c8 <MX_GPIO_Init+0x40>)
 800169c:	699b      	ldr	r3, [r3, #24]
 800169e:	f003 0320 	and.w	r3, r3, #32
 80016a2:	607b      	str	r3, [r7, #4]
 80016a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016a6:	4b08      	ldr	r3, [pc, #32]	@ (80016c8 <MX_GPIO_Init+0x40>)
 80016a8:	699b      	ldr	r3, [r3, #24]
 80016aa:	4a07      	ldr	r2, [pc, #28]	@ (80016c8 <MX_GPIO_Init+0x40>)
 80016ac:	f043 0304 	orr.w	r3, r3, #4
 80016b0:	6193      	str	r3, [r2, #24]
 80016b2:	4b05      	ldr	r3, [pc, #20]	@ (80016c8 <MX_GPIO_Init+0x40>)
 80016b4:	699b      	ldr	r3, [r3, #24]
 80016b6:	f003 0304 	and.w	r3, r3, #4
 80016ba:	603b      	str	r3, [r7, #0]
 80016bc:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80016be:	bf00      	nop
 80016c0:	370c      	adds	r7, #12
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bc80      	pop	{r7}
 80016c6:	4770      	bx	lr
 80016c8:	40021000 	.word	0x40021000

080016cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016cc:	b480      	push	{r7}
 80016ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016d0:	b672      	cpsid	i
}
 80016d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016d4:	bf00      	nop
 80016d6:	e7fd      	b.n	80016d4 <Error_Handler+0x8>

080016d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016d8:	b480      	push	{r7}
 80016da:	b083      	sub	sp, #12
 80016dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80016de:	4b0e      	ldr	r3, [pc, #56]	@ (8001718 <HAL_MspInit+0x40>)
 80016e0:	699b      	ldr	r3, [r3, #24]
 80016e2:	4a0d      	ldr	r2, [pc, #52]	@ (8001718 <HAL_MspInit+0x40>)
 80016e4:	f043 0301 	orr.w	r3, r3, #1
 80016e8:	6193      	str	r3, [r2, #24]
 80016ea:	4b0b      	ldr	r3, [pc, #44]	@ (8001718 <HAL_MspInit+0x40>)
 80016ec:	699b      	ldr	r3, [r3, #24]
 80016ee:	f003 0301 	and.w	r3, r3, #1
 80016f2:	607b      	str	r3, [r7, #4]
 80016f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016f6:	4b08      	ldr	r3, [pc, #32]	@ (8001718 <HAL_MspInit+0x40>)
 80016f8:	69db      	ldr	r3, [r3, #28]
 80016fa:	4a07      	ldr	r2, [pc, #28]	@ (8001718 <HAL_MspInit+0x40>)
 80016fc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001700:	61d3      	str	r3, [r2, #28]
 8001702:	4b05      	ldr	r3, [pc, #20]	@ (8001718 <HAL_MspInit+0x40>)
 8001704:	69db      	ldr	r3, [r3, #28]
 8001706:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800170a:	603b      	str	r3, [r7, #0]
 800170c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800170e:	bf00      	nop
 8001710:	370c      	adds	r7, #12
 8001712:	46bd      	mov	sp, r7
 8001714:	bc80      	pop	{r7}
 8001716:	4770      	bx	lr
 8001718:	40021000 	.word	0x40021000

0800171c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b088      	sub	sp, #32
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001724:	f107 0310 	add.w	r3, r7, #16
 8001728:	2200      	movs	r2, #0
 800172a:	601a      	str	r2, [r3, #0]
 800172c:	605a      	str	r2, [r3, #4]
 800172e:	609a      	str	r2, [r3, #8]
 8001730:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	4a14      	ldr	r2, [pc, #80]	@ (8001788 <HAL_ADC_MspInit+0x6c>)
 8001738:	4293      	cmp	r3, r2
 800173a:	d121      	bne.n	8001780 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800173c:	4b13      	ldr	r3, [pc, #76]	@ (800178c <HAL_ADC_MspInit+0x70>)
 800173e:	699b      	ldr	r3, [r3, #24]
 8001740:	4a12      	ldr	r2, [pc, #72]	@ (800178c <HAL_ADC_MspInit+0x70>)
 8001742:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001746:	6193      	str	r3, [r2, #24]
 8001748:	4b10      	ldr	r3, [pc, #64]	@ (800178c <HAL_ADC_MspInit+0x70>)
 800174a:	699b      	ldr	r3, [r3, #24]
 800174c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001750:	60fb      	str	r3, [r7, #12]
 8001752:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001754:	4b0d      	ldr	r3, [pc, #52]	@ (800178c <HAL_ADC_MspInit+0x70>)
 8001756:	699b      	ldr	r3, [r3, #24]
 8001758:	4a0c      	ldr	r2, [pc, #48]	@ (800178c <HAL_ADC_MspInit+0x70>)
 800175a:	f043 0304 	orr.w	r3, r3, #4
 800175e:	6193      	str	r3, [r2, #24]
 8001760:	4b0a      	ldr	r3, [pc, #40]	@ (800178c <HAL_ADC_MspInit+0x70>)
 8001762:	699b      	ldr	r3, [r3, #24]
 8001764:	f003 0304 	and.w	r3, r3, #4
 8001768:	60bb      	str	r3, [r7, #8]
 800176a:	68bb      	ldr	r3, [r7, #8]
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4;
 800176c:	231e      	movs	r3, #30
 800176e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001770:	2303      	movs	r3, #3
 8001772:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001774:	f107 0310 	add.w	r3, r7, #16
 8001778:	4619      	mov	r1, r3
 800177a:	4805      	ldr	r0, [pc, #20]	@ (8001790 <HAL_ADC_MspInit+0x74>)
 800177c:	f000 ffb4 	bl	80026e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001780:	bf00      	nop
 8001782:	3720      	adds	r7, #32
 8001784:	46bd      	mov	sp, r7
 8001786:	bd80      	pop	{r7, pc}
 8001788:	40012400 	.word	0x40012400
 800178c:	40021000 	.word	0x40021000
 8001790:	40010800 	.word	0x40010800

08001794 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b088      	sub	sp, #32
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800179c:	f107 0310 	add.w	r3, r7, #16
 80017a0:	2200      	movs	r2, #0
 80017a2:	601a      	str	r2, [r3, #0]
 80017a4:	605a      	str	r2, [r3, #4]
 80017a6:	609a      	str	r2, [r3, #8]
 80017a8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	4a1c      	ldr	r2, [pc, #112]	@ (8001820 <HAL_UART_MspInit+0x8c>)
 80017b0:	4293      	cmp	r3, r2
 80017b2:	d131      	bne.n	8001818 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80017b4:	4b1b      	ldr	r3, [pc, #108]	@ (8001824 <HAL_UART_MspInit+0x90>)
 80017b6:	699b      	ldr	r3, [r3, #24]
 80017b8:	4a1a      	ldr	r2, [pc, #104]	@ (8001824 <HAL_UART_MspInit+0x90>)
 80017ba:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80017be:	6193      	str	r3, [r2, #24]
 80017c0:	4b18      	ldr	r3, [pc, #96]	@ (8001824 <HAL_UART_MspInit+0x90>)
 80017c2:	699b      	ldr	r3, [r3, #24]
 80017c4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80017c8:	60fb      	str	r3, [r7, #12]
 80017ca:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017cc:	4b15      	ldr	r3, [pc, #84]	@ (8001824 <HAL_UART_MspInit+0x90>)
 80017ce:	699b      	ldr	r3, [r3, #24]
 80017d0:	4a14      	ldr	r2, [pc, #80]	@ (8001824 <HAL_UART_MspInit+0x90>)
 80017d2:	f043 0304 	orr.w	r3, r3, #4
 80017d6:	6193      	str	r3, [r2, #24]
 80017d8:	4b12      	ldr	r3, [pc, #72]	@ (8001824 <HAL_UART_MspInit+0x90>)
 80017da:	699b      	ldr	r3, [r3, #24]
 80017dc:	f003 0304 	and.w	r3, r3, #4
 80017e0:	60bb      	str	r3, [r7, #8]
 80017e2:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80017e4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80017e8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017ea:	2302      	movs	r3, #2
 80017ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80017ee:	2303      	movs	r3, #3
 80017f0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017f2:	f107 0310 	add.w	r3, r7, #16
 80017f6:	4619      	mov	r1, r3
 80017f8:	480b      	ldr	r0, [pc, #44]	@ (8001828 <HAL_UART_MspInit+0x94>)
 80017fa:	f000 ff75 	bl	80026e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80017fe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001802:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001804:	2300      	movs	r3, #0
 8001806:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001808:	2300      	movs	r3, #0
 800180a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800180c:	f107 0310 	add.w	r3, r7, #16
 8001810:	4619      	mov	r1, r3
 8001812:	4805      	ldr	r0, [pc, #20]	@ (8001828 <HAL_UART_MspInit+0x94>)
 8001814:	f000 ff68 	bl	80026e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001818:	bf00      	nop
 800181a:	3720      	adds	r7, #32
 800181c:	46bd      	mov	sp, r7
 800181e:	bd80      	pop	{r7, pc}
 8001820:	40013800 	.word	0x40013800
 8001824:	40021000 	.word	0x40021000
 8001828:	40010800 	.word	0x40010800

0800182c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800182c:	b480      	push	{r7}
 800182e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001830:	bf00      	nop
 8001832:	e7fd      	b.n	8001830 <NMI_Handler+0x4>

08001834 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001834:	b480      	push	{r7}
 8001836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001838:	bf00      	nop
 800183a:	e7fd      	b.n	8001838 <HardFault_Handler+0x4>

0800183c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800183c:	b480      	push	{r7}
 800183e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001840:	bf00      	nop
 8001842:	e7fd      	b.n	8001840 <MemManage_Handler+0x4>

08001844 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001844:	b480      	push	{r7}
 8001846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001848:	bf00      	nop
 800184a:	e7fd      	b.n	8001848 <BusFault_Handler+0x4>

0800184c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800184c:	b480      	push	{r7}
 800184e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001850:	bf00      	nop
 8001852:	e7fd      	b.n	8001850 <UsageFault_Handler+0x4>

08001854 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001854:	b480      	push	{r7}
 8001856:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001858:	bf00      	nop
 800185a:	46bd      	mov	sp, r7
 800185c:	bc80      	pop	{r7}
 800185e:	4770      	bx	lr

08001860 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001860:	b480      	push	{r7}
 8001862:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001864:	bf00      	nop
 8001866:	46bd      	mov	sp, r7
 8001868:	bc80      	pop	{r7}
 800186a:	4770      	bx	lr

0800186c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800186c:	b480      	push	{r7}
 800186e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001870:	bf00      	nop
 8001872:	46bd      	mov	sp, r7
 8001874:	bc80      	pop	{r7}
 8001876:	4770      	bx	lr

08001878 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800187c:	f000 f936 	bl	8001aec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001880:	bf00      	nop
 8001882:	bd80      	pop	{r7, pc}

08001884 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001884:	b480      	push	{r7}
 8001886:	af00      	add	r7, sp, #0
  return 1;
 8001888:	2301      	movs	r3, #1
}
 800188a:	4618      	mov	r0, r3
 800188c:	46bd      	mov	sp, r7
 800188e:	bc80      	pop	{r7}
 8001890:	4770      	bx	lr

08001892 <_kill>:

int _kill(int pid, int sig)
{
 8001892:	b580      	push	{r7, lr}
 8001894:	b082      	sub	sp, #8
 8001896:	af00      	add	r7, sp, #0
 8001898:	6078      	str	r0, [r7, #4]
 800189a:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800189c:	f002 fde2 	bl	8004464 <__errno>
 80018a0:	4603      	mov	r3, r0
 80018a2:	2216      	movs	r2, #22
 80018a4:	601a      	str	r2, [r3, #0]
  return -1;
 80018a6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80018aa:	4618      	mov	r0, r3
 80018ac:	3708      	adds	r7, #8
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd80      	pop	{r7, pc}

080018b2 <_exit>:

void _exit (int status)
{
 80018b2:	b580      	push	{r7, lr}
 80018b4:	b082      	sub	sp, #8
 80018b6:	af00      	add	r7, sp, #0
 80018b8:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80018ba:	f04f 31ff 	mov.w	r1, #4294967295
 80018be:	6878      	ldr	r0, [r7, #4]
 80018c0:	f7ff ffe7 	bl	8001892 <_kill>
  while (1) {}    /* Make sure we hang here */
 80018c4:	bf00      	nop
 80018c6:	e7fd      	b.n	80018c4 <_exit+0x12>

080018c8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b086      	sub	sp, #24
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	60f8      	str	r0, [r7, #12]
 80018d0:	60b9      	str	r1, [r7, #8]
 80018d2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018d4:	2300      	movs	r3, #0
 80018d6:	617b      	str	r3, [r7, #20]
 80018d8:	e00a      	b.n	80018f0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80018da:	f3af 8000 	nop.w
 80018de:	4601      	mov	r1, r0
 80018e0:	68bb      	ldr	r3, [r7, #8]
 80018e2:	1c5a      	adds	r2, r3, #1
 80018e4:	60ba      	str	r2, [r7, #8]
 80018e6:	b2ca      	uxtb	r2, r1
 80018e8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018ea:	697b      	ldr	r3, [r7, #20]
 80018ec:	3301      	adds	r3, #1
 80018ee:	617b      	str	r3, [r7, #20]
 80018f0:	697a      	ldr	r2, [r7, #20]
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	429a      	cmp	r2, r3
 80018f6:	dbf0      	blt.n	80018da <_read+0x12>
  }

  return len;
 80018f8:	687b      	ldr	r3, [r7, #4]
}
 80018fa:	4618      	mov	r0, r3
 80018fc:	3718      	adds	r7, #24
 80018fe:	46bd      	mov	sp, r7
 8001900:	bd80      	pop	{r7, pc}

08001902 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001902:	b580      	push	{r7, lr}
 8001904:	b086      	sub	sp, #24
 8001906:	af00      	add	r7, sp, #0
 8001908:	60f8      	str	r0, [r7, #12]
 800190a:	60b9      	str	r1, [r7, #8]
 800190c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800190e:	2300      	movs	r3, #0
 8001910:	617b      	str	r3, [r7, #20]
 8001912:	e009      	b.n	8001928 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001914:	68bb      	ldr	r3, [r7, #8]
 8001916:	1c5a      	adds	r2, r3, #1
 8001918:	60ba      	str	r2, [r7, #8]
 800191a:	781b      	ldrb	r3, [r3, #0]
 800191c:	4618      	mov	r0, r3
 800191e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001922:	697b      	ldr	r3, [r7, #20]
 8001924:	3301      	adds	r3, #1
 8001926:	617b      	str	r3, [r7, #20]
 8001928:	697a      	ldr	r2, [r7, #20]
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	429a      	cmp	r2, r3
 800192e:	dbf1      	blt.n	8001914 <_write+0x12>
  }
  return len;
 8001930:	687b      	ldr	r3, [r7, #4]
}
 8001932:	4618      	mov	r0, r3
 8001934:	3718      	adds	r7, #24
 8001936:	46bd      	mov	sp, r7
 8001938:	bd80      	pop	{r7, pc}

0800193a <_close>:

int _close(int file)
{
 800193a:	b480      	push	{r7}
 800193c:	b083      	sub	sp, #12
 800193e:	af00      	add	r7, sp, #0
 8001940:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001942:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001946:	4618      	mov	r0, r3
 8001948:	370c      	adds	r7, #12
 800194a:	46bd      	mov	sp, r7
 800194c:	bc80      	pop	{r7}
 800194e:	4770      	bx	lr

08001950 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001950:	b480      	push	{r7}
 8001952:	b083      	sub	sp, #12
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
 8001958:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800195a:	683b      	ldr	r3, [r7, #0]
 800195c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001960:	605a      	str	r2, [r3, #4]
  return 0;
 8001962:	2300      	movs	r3, #0
}
 8001964:	4618      	mov	r0, r3
 8001966:	370c      	adds	r7, #12
 8001968:	46bd      	mov	sp, r7
 800196a:	bc80      	pop	{r7}
 800196c:	4770      	bx	lr

0800196e <_isatty>:

int _isatty(int file)
{
 800196e:	b480      	push	{r7}
 8001970:	b083      	sub	sp, #12
 8001972:	af00      	add	r7, sp, #0
 8001974:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001976:	2301      	movs	r3, #1
}
 8001978:	4618      	mov	r0, r3
 800197a:	370c      	adds	r7, #12
 800197c:	46bd      	mov	sp, r7
 800197e:	bc80      	pop	{r7}
 8001980:	4770      	bx	lr

08001982 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001982:	b480      	push	{r7}
 8001984:	b085      	sub	sp, #20
 8001986:	af00      	add	r7, sp, #0
 8001988:	60f8      	str	r0, [r7, #12]
 800198a:	60b9      	str	r1, [r7, #8]
 800198c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800198e:	2300      	movs	r3, #0
}
 8001990:	4618      	mov	r0, r3
 8001992:	3714      	adds	r7, #20
 8001994:	46bd      	mov	sp, r7
 8001996:	bc80      	pop	{r7}
 8001998:	4770      	bx	lr
	...

0800199c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b086      	sub	sp, #24
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80019a4:	4a14      	ldr	r2, [pc, #80]	@ (80019f8 <_sbrk+0x5c>)
 80019a6:	4b15      	ldr	r3, [pc, #84]	@ (80019fc <_sbrk+0x60>)
 80019a8:	1ad3      	subs	r3, r2, r3
 80019aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80019ac:	697b      	ldr	r3, [r7, #20]
 80019ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80019b0:	4b13      	ldr	r3, [pc, #76]	@ (8001a00 <_sbrk+0x64>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d102      	bne.n	80019be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80019b8:	4b11      	ldr	r3, [pc, #68]	@ (8001a00 <_sbrk+0x64>)
 80019ba:	4a12      	ldr	r2, [pc, #72]	@ (8001a04 <_sbrk+0x68>)
 80019bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80019be:	4b10      	ldr	r3, [pc, #64]	@ (8001a00 <_sbrk+0x64>)
 80019c0:	681a      	ldr	r2, [r3, #0]
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	4413      	add	r3, r2
 80019c6:	693a      	ldr	r2, [r7, #16]
 80019c8:	429a      	cmp	r2, r3
 80019ca:	d207      	bcs.n	80019dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80019cc:	f002 fd4a 	bl	8004464 <__errno>
 80019d0:	4603      	mov	r3, r0
 80019d2:	220c      	movs	r2, #12
 80019d4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80019d6:	f04f 33ff 	mov.w	r3, #4294967295
 80019da:	e009      	b.n	80019f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80019dc:	4b08      	ldr	r3, [pc, #32]	@ (8001a00 <_sbrk+0x64>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80019e2:	4b07      	ldr	r3, [pc, #28]	@ (8001a00 <_sbrk+0x64>)
 80019e4:	681a      	ldr	r2, [r3, #0]
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	4413      	add	r3, r2
 80019ea:	4a05      	ldr	r2, [pc, #20]	@ (8001a00 <_sbrk+0x64>)
 80019ec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80019ee:	68fb      	ldr	r3, [r7, #12]
}
 80019f0:	4618      	mov	r0, r3
 80019f2:	3718      	adds	r7, #24
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bd80      	pop	{r7, pc}
 80019f8:	20005000 	.word	0x20005000
 80019fc:	00000400 	.word	0x00000400
 8001a00:	200002f4 	.word	0x200002f4
 8001a04:	20000448 	.word	0x20000448

08001a08 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a0c:	bf00      	nop
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bc80      	pop	{r7}
 8001a12:	4770      	bx	lr

08001a14 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001a14:	f7ff fff8 	bl	8001a08 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a18:	480b      	ldr	r0, [pc, #44]	@ (8001a48 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001a1a:	490c      	ldr	r1, [pc, #48]	@ (8001a4c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001a1c:	4a0c      	ldr	r2, [pc, #48]	@ (8001a50 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001a1e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a20:	e002      	b.n	8001a28 <LoopCopyDataInit>

08001a22 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a22:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a24:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a26:	3304      	adds	r3, #4

08001a28 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a28:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a2a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a2c:	d3f9      	bcc.n	8001a22 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a2e:	4a09      	ldr	r2, [pc, #36]	@ (8001a54 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001a30:	4c09      	ldr	r4, [pc, #36]	@ (8001a58 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001a32:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a34:	e001      	b.n	8001a3a <LoopFillZerobss>

08001a36 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a36:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a38:	3204      	adds	r2, #4

08001a3a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a3a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a3c:	d3fb      	bcc.n	8001a36 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001a3e:	f002 fd17 	bl	8004470 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001a42:	f7ff fbff 	bl	8001244 <main>
  bx lr
 8001a46:	4770      	bx	lr
  ldr r0, =_sdata
 8001a48:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a4c:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8001a50:	08006d4c 	.word	0x08006d4c
  ldr r2, =_sbss
 8001a54:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8001a58:	20000448 	.word	0x20000448

08001a5c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001a5c:	e7fe      	b.n	8001a5c <ADC1_2_IRQHandler>
	...

08001a60 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a64:	4b08      	ldr	r3, [pc, #32]	@ (8001a88 <HAL_Init+0x28>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	4a07      	ldr	r2, [pc, #28]	@ (8001a88 <HAL_Init+0x28>)
 8001a6a:	f043 0310 	orr.w	r3, r3, #16
 8001a6e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a70:	2003      	movs	r0, #3
 8001a72:	f000 fe05 	bl	8002680 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a76:	200f      	movs	r0, #15
 8001a78:	f000 f808 	bl	8001a8c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a7c:	f7ff fe2c 	bl	80016d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a80:	2300      	movs	r3, #0
}
 8001a82:	4618      	mov	r0, r3
 8001a84:	bd80      	pop	{r7, pc}
 8001a86:	bf00      	nop
 8001a88:	40022000 	.word	0x40022000

08001a8c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b082      	sub	sp, #8
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a94:	4b12      	ldr	r3, [pc, #72]	@ (8001ae0 <HAL_InitTick+0x54>)
 8001a96:	681a      	ldr	r2, [r3, #0]
 8001a98:	4b12      	ldr	r3, [pc, #72]	@ (8001ae4 <HAL_InitTick+0x58>)
 8001a9a:	781b      	ldrb	r3, [r3, #0]
 8001a9c:	4619      	mov	r1, r3
 8001a9e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001aa2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001aa6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001aaa:	4618      	mov	r0, r3
 8001aac:	f000 fe0f 	bl	80026ce <HAL_SYSTICK_Config>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d001      	beq.n	8001aba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	e00e      	b.n	8001ad8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	2b0f      	cmp	r3, #15
 8001abe:	d80a      	bhi.n	8001ad6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	6879      	ldr	r1, [r7, #4]
 8001ac4:	f04f 30ff 	mov.w	r0, #4294967295
 8001ac8:	f000 fde5 	bl	8002696 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001acc:	4a06      	ldr	r2, [pc, #24]	@ (8001ae8 <HAL_InitTick+0x5c>)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	e000      	b.n	8001ad8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001ad6:	2301      	movs	r3, #1
}
 8001ad8:	4618      	mov	r0, r3
 8001ada:	3708      	adds	r7, #8
 8001adc:	46bd      	mov	sp, r7
 8001ade:	bd80      	pop	{r7, pc}
 8001ae0:	20000010 	.word	0x20000010
 8001ae4:	20000018 	.word	0x20000018
 8001ae8:	20000014 	.word	0x20000014

08001aec <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001aec:	b480      	push	{r7}
 8001aee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001af0:	4b05      	ldr	r3, [pc, #20]	@ (8001b08 <HAL_IncTick+0x1c>)
 8001af2:	781b      	ldrb	r3, [r3, #0]
 8001af4:	461a      	mov	r2, r3
 8001af6:	4b05      	ldr	r3, [pc, #20]	@ (8001b0c <HAL_IncTick+0x20>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	4413      	add	r3, r2
 8001afc:	4a03      	ldr	r2, [pc, #12]	@ (8001b0c <HAL_IncTick+0x20>)
 8001afe:	6013      	str	r3, [r2, #0]
}
 8001b00:	bf00      	nop
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bc80      	pop	{r7}
 8001b06:	4770      	bx	lr
 8001b08:	20000018 	.word	0x20000018
 8001b0c:	200002f8 	.word	0x200002f8

08001b10 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b10:	b480      	push	{r7}
 8001b12:	af00      	add	r7, sp, #0
  return uwTick;
 8001b14:	4b02      	ldr	r3, [pc, #8]	@ (8001b20 <HAL_GetTick+0x10>)
 8001b16:	681b      	ldr	r3, [r3, #0]
}
 8001b18:	4618      	mov	r0, r3
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bc80      	pop	{r7}
 8001b1e:	4770      	bx	lr
 8001b20:	200002f8 	.word	0x200002f8

08001b24 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b084      	sub	sp, #16
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b2c:	f7ff fff0 	bl	8001b10 <HAL_GetTick>
 8001b30:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b3c:	d005      	beq.n	8001b4a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b3e:	4b0a      	ldr	r3, [pc, #40]	@ (8001b68 <HAL_Delay+0x44>)
 8001b40:	781b      	ldrb	r3, [r3, #0]
 8001b42:	461a      	mov	r2, r3
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	4413      	add	r3, r2
 8001b48:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001b4a:	bf00      	nop
 8001b4c:	f7ff ffe0 	bl	8001b10 <HAL_GetTick>
 8001b50:	4602      	mov	r2, r0
 8001b52:	68bb      	ldr	r3, [r7, #8]
 8001b54:	1ad3      	subs	r3, r2, r3
 8001b56:	68fa      	ldr	r2, [r7, #12]
 8001b58:	429a      	cmp	r2, r3
 8001b5a:	d8f7      	bhi.n	8001b4c <HAL_Delay+0x28>
  {
  }
}
 8001b5c:	bf00      	nop
 8001b5e:	bf00      	nop
 8001b60:	3710      	adds	r7, #16
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bd80      	pop	{r7, pc}
 8001b66:	bf00      	nop
 8001b68:	20000018 	.word	0x20000018

08001b6c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b086      	sub	sp, #24
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b74:	2300      	movs	r3, #0
 8001b76:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001b80:	2300      	movs	r3, #0
 8001b82:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d101      	bne.n	8001b8e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	e0be      	b.n	8001d0c <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	689b      	ldr	r3, [r3, #8]
 8001b92:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d109      	bne.n	8001bb0 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001baa:	6878      	ldr	r0, [r7, #4]
 8001bac:	f7ff fdb6 	bl	800171c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001bb0:	6878      	ldr	r0, [r7, #4]
 8001bb2:	f000 fbc5 	bl	8002340 <ADC_ConversionStop_Disable>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001bbe:	f003 0310 	and.w	r3, r3, #16
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	f040 8099 	bne.w	8001cfa <HAL_ADC_Init+0x18e>
 8001bc8:	7dfb      	ldrb	r3, [r7, #23]
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	f040 8095 	bne.w	8001cfa <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001bd4:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001bd8:	f023 0302 	bic.w	r3, r3, #2
 8001bdc:	f043 0202 	orr.w	r2, r3, #2
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001bec:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	7b1b      	ldrb	r3, [r3, #12]
 8001bf2:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001bf4:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001bf6:	68ba      	ldr	r2, [r7, #8]
 8001bf8:	4313      	orrs	r3, r2
 8001bfa:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	689b      	ldr	r3, [r3, #8]
 8001c00:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001c04:	d003      	beq.n	8001c0e <HAL_ADC_Init+0xa2>
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	689b      	ldr	r3, [r3, #8]
 8001c0a:	2b01      	cmp	r3, #1
 8001c0c:	d102      	bne.n	8001c14 <HAL_ADC_Init+0xa8>
 8001c0e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001c12:	e000      	b.n	8001c16 <HAL_ADC_Init+0xaa>
 8001c14:	2300      	movs	r3, #0
 8001c16:	693a      	ldr	r2, [r7, #16]
 8001c18:	4313      	orrs	r3, r2
 8001c1a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	7d1b      	ldrb	r3, [r3, #20]
 8001c20:	2b01      	cmp	r3, #1
 8001c22:	d119      	bne.n	8001c58 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	7b1b      	ldrb	r3, [r3, #12]
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d109      	bne.n	8001c40 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	699b      	ldr	r3, [r3, #24]
 8001c30:	3b01      	subs	r3, #1
 8001c32:	035a      	lsls	r2, r3, #13
 8001c34:	693b      	ldr	r3, [r7, #16]
 8001c36:	4313      	orrs	r3, r2
 8001c38:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001c3c:	613b      	str	r3, [r7, #16]
 8001c3e:	e00b      	b.n	8001c58 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c44:	f043 0220 	orr.w	r2, r3, #32
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c50:	f043 0201 	orr.w	r2, r3, #1
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	685b      	ldr	r3, [r3, #4]
 8001c5e:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	693a      	ldr	r2, [r7, #16]
 8001c68:	430a      	orrs	r2, r1
 8001c6a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	689a      	ldr	r2, [r3, #8]
 8001c72:	4b28      	ldr	r3, [pc, #160]	@ (8001d14 <HAL_ADC_Init+0x1a8>)
 8001c74:	4013      	ands	r3, r2
 8001c76:	687a      	ldr	r2, [r7, #4]
 8001c78:	6812      	ldr	r2, [r2, #0]
 8001c7a:	68b9      	ldr	r1, [r7, #8]
 8001c7c:	430b      	orrs	r3, r1
 8001c7e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	689b      	ldr	r3, [r3, #8]
 8001c84:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001c88:	d003      	beq.n	8001c92 <HAL_ADC_Init+0x126>
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	689b      	ldr	r3, [r3, #8]
 8001c8e:	2b01      	cmp	r3, #1
 8001c90:	d104      	bne.n	8001c9c <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	691b      	ldr	r3, [r3, #16]
 8001c96:	3b01      	subs	r3, #1
 8001c98:	051b      	lsls	r3, r3, #20
 8001c9a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ca2:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	68fa      	ldr	r2, [r7, #12]
 8001cac:	430a      	orrs	r2, r1
 8001cae:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	689a      	ldr	r2, [r3, #8]
 8001cb6:	4b18      	ldr	r3, [pc, #96]	@ (8001d18 <HAL_ADC_Init+0x1ac>)
 8001cb8:	4013      	ands	r3, r2
 8001cba:	68ba      	ldr	r2, [r7, #8]
 8001cbc:	429a      	cmp	r2, r3
 8001cbe:	d10b      	bne.n	8001cd8 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cca:	f023 0303 	bic.w	r3, r3, #3
 8001cce:	f043 0201 	orr.w	r2, r3, #1
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001cd6:	e018      	b.n	8001d0a <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cdc:	f023 0312 	bic.w	r3, r3, #18
 8001ce0:	f043 0210 	orr.w	r2, r3, #16
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001cec:	f043 0201 	orr.w	r2, r3, #1
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001cf4:	2301      	movs	r3, #1
 8001cf6:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001cf8:	e007      	b.n	8001d0a <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cfe:	f043 0210 	orr.w	r2, r3, #16
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001d06:	2301      	movs	r3, #1
 8001d08:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001d0a:	7dfb      	ldrb	r3, [r7, #23]
}
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	3718      	adds	r7, #24
 8001d10:	46bd      	mov	sp, r7
 8001d12:	bd80      	pop	{r7, pc}
 8001d14:	ffe1f7fd 	.word	0xffe1f7fd
 8001d18:	ff1f0efe 	.word	0xff1f0efe

08001d1c <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b084      	sub	sp, #16
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d24:	2300      	movs	r3, #0
 8001d26:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001d2e:	2b01      	cmp	r3, #1
 8001d30:	d101      	bne.n	8001d36 <HAL_ADC_Start+0x1a>
 8001d32:	2302      	movs	r3, #2
 8001d34:	e098      	b.n	8001e68 <HAL_ADC_Start+0x14c>
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	2201      	movs	r2, #1
 8001d3a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8001d3e:	6878      	ldr	r0, [r7, #4]
 8001d40:	f000 faa4 	bl	800228c <ADC_Enable>
 8001d44:	4603      	mov	r3, r0
 8001d46:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8001d48:	7bfb      	ldrb	r3, [r7, #15]
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	f040 8087 	bne.w	8001e5e <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d54:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001d58:	f023 0301 	bic.w	r3, r3, #1
 8001d5c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	4a41      	ldr	r2, [pc, #260]	@ (8001e70 <HAL_ADC_Start+0x154>)
 8001d6a:	4293      	cmp	r3, r2
 8001d6c:	d105      	bne.n	8001d7a <HAL_ADC_Start+0x5e>
 8001d6e:	4b41      	ldr	r3, [pc, #260]	@ (8001e74 <HAL_ADC_Start+0x158>)
 8001d70:	685b      	ldr	r3, [r3, #4]
 8001d72:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d115      	bne.n	8001da6 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d7e:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	685b      	ldr	r3, [r3, #4]
 8001d8c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d026      	beq.n	8001de2 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d98:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001d9c:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001da4:	e01d      	b.n	8001de2 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001daa:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	4a2f      	ldr	r2, [pc, #188]	@ (8001e74 <HAL_ADC_Start+0x158>)
 8001db8:	4293      	cmp	r3, r2
 8001dba:	d004      	beq.n	8001dc6 <HAL_ADC_Start+0xaa>
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	4a2b      	ldr	r2, [pc, #172]	@ (8001e70 <HAL_ADC_Start+0x154>)
 8001dc2:	4293      	cmp	r3, r2
 8001dc4:	d10d      	bne.n	8001de2 <HAL_ADC_Start+0xc6>
 8001dc6:	4b2b      	ldr	r3, [pc, #172]	@ (8001e74 <HAL_ADC_Start+0x158>)
 8001dc8:	685b      	ldr	r3, [r3, #4]
 8001dca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d007      	beq.n	8001de2 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001dd6:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001dda:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001de6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d006      	beq.n	8001dfc <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001df2:	f023 0206 	bic.w	r2, r3, #6
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001dfa:	e002      	b.n	8001e02 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	2200      	movs	r2, #0
 8001e00:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	2200      	movs	r2, #0
 8001e06:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f06f 0202 	mvn.w	r2, #2
 8001e12:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	689b      	ldr	r3, [r3, #8]
 8001e1a:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8001e1e:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8001e22:	d113      	bne.n	8001e4c <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001e28:	4a11      	ldr	r2, [pc, #68]	@ (8001e70 <HAL_ADC_Start+0x154>)
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d105      	bne.n	8001e3a <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001e2e:	4b11      	ldr	r3, [pc, #68]	@ (8001e74 <HAL_ADC_Start+0x158>)
 8001e30:	685b      	ldr	r3, [r3, #4]
 8001e32:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d108      	bne.n	8001e4c <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	689a      	ldr	r2, [r3, #8]
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8001e48:	609a      	str	r2, [r3, #8]
 8001e4a:	e00c      	b.n	8001e66 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	689a      	ldr	r2, [r3, #8]
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8001e5a:	609a      	str	r2, [r3, #8]
 8001e5c:	e003      	b.n	8001e66 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	2200      	movs	r2, #0
 8001e62:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8001e66:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e68:	4618      	mov	r0, r3
 8001e6a:	3710      	adds	r7, #16
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	bd80      	pop	{r7, pc}
 8001e70:	40012800 	.word	0x40012800
 8001e74:	40012400 	.word	0x40012400

08001e78 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001e78:	b590      	push	{r4, r7, lr}
 8001e7a:	b087      	sub	sp, #28
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
 8001e80:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001e82:	2300      	movs	r3, #0
 8001e84:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8001e86:	2300      	movs	r3, #0
 8001e88:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8001e8e:	f7ff fe3f 	bl	8001b10 <HAL_GetTick>
 8001e92:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	689b      	ldr	r3, [r3, #8]
 8001e9a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d00b      	beq.n	8001eba <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ea6:	f043 0220 	orr.w	r2, r3, #32
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    return HAL_ERROR;
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	e0d3      	b.n	8002062 <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	685b      	ldr	r3, [r3, #4]
 8001ec0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d131      	bne.n	8001f2c <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ece:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d12a      	bne.n	8001f2c <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001ed6:	e021      	b.n	8001f1c <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ede:	d01d      	beq.n	8001f1c <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d007      	beq.n	8001ef6 <HAL_ADC_PollForConversion+0x7e>
 8001ee6:	f7ff fe13 	bl	8001b10 <HAL_GetTick>
 8001eea:	4602      	mov	r2, r0
 8001eec:	697b      	ldr	r3, [r7, #20]
 8001eee:	1ad3      	subs	r3, r2, r3
 8001ef0:	683a      	ldr	r2, [r7, #0]
 8001ef2:	429a      	cmp	r2, r3
 8001ef4:	d212      	bcs.n	8001f1c <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f003 0302 	and.w	r3, r3, #2
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d10b      	bne.n	8001f1c <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f08:	f043 0204 	orr.w	r2, r3, #4
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	629a      	str	r2, [r3, #40]	@ 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	2200      	movs	r2, #0
 8001f14:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
            
            return HAL_TIMEOUT;
 8001f18:	2303      	movs	r3, #3
 8001f1a:	e0a2      	b.n	8002062 <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f003 0302 	and.w	r3, r3, #2
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d0d6      	beq.n	8001ed8 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001f2a:	e070      	b.n	800200e <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8001f2c:	4b4f      	ldr	r3, [pc, #316]	@ (800206c <HAL_ADC_PollForConversion+0x1f4>)
 8001f2e:	681c      	ldr	r4, [r3, #0]
 8001f30:	2002      	movs	r0, #2
 8001f32:	f001 fa3d 	bl	80033b0 <HAL_RCCEx_GetPeriphCLKFreq>
 8001f36:	4603      	mov	r3, r0
 8001f38:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	6919      	ldr	r1, [r3, #16]
 8001f42:	4b4b      	ldr	r3, [pc, #300]	@ (8002070 <HAL_ADC_PollForConversion+0x1f8>)
 8001f44:	400b      	ands	r3, r1
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d118      	bne.n	8001f7c <HAL_ADC_PollForConversion+0x104>
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	68d9      	ldr	r1, [r3, #12]
 8001f50:	4b48      	ldr	r3, [pc, #288]	@ (8002074 <HAL_ADC_PollForConversion+0x1fc>)
 8001f52:	400b      	ands	r3, r1
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d111      	bne.n	8001f7c <HAL_ADC_PollForConversion+0x104>
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	6919      	ldr	r1, [r3, #16]
 8001f5e:	4b46      	ldr	r3, [pc, #280]	@ (8002078 <HAL_ADC_PollForConversion+0x200>)
 8001f60:	400b      	ands	r3, r1
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d108      	bne.n	8001f78 <HAL_ADC_PollForConversion+0x100>
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	68d9      	ldr	r1, [r3, #12]
 8001f6c:	4b43      	ldr	r3, [pc, #268]	@ (800207c <HAL_ADC_PollForConversion+0x204>)
 8001f6e:	400b      	ands	r3, r1
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d101      	bne.n	8001f78 <HAL_ADC_PollForConversion+0x100>
 8001f74:	2314      	movs	r3, #20
 8001f76:	e020      	b.n	8001fba <HAL_ADC_PollForConversion+0x142>
 8001f78:	2329      	movs	r3, #41	@ 0x29
 8001f7a:	e01e      	b.n	8001fba <HAL_ADC_PollForConversion+0x142>
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	6919      	ldr	r1, [r3, #16]
 8001f82:	4b3d      	ldr	r3, [pc, #244]	@ (8002078 <HAL_ADC_PollForConversion+0x200>)
 8001f84:	400b      	ands	r3, r1
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d106      	bne.n	8001f98 <HAL_ADC_PollForConversion+0x120>
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	68d9      	ldr	r1, [r3, #12]
 8001f90:	4b3a      	ldr	r3, [pc, #232]	@ (800207c <HAL_ADC_PollForConversion+0x204>)
 8001f92:	400b      	ands	r3, r1
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d00d      	beq.n	8001fb4 <HAL_ADC_PollForConversion+0x13c>
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	6919      	ldr	r1, [r3, #16]
 8001f9e:	4b38      	ldr	r3, [pc, #224]	@ (8002080 <HAL_ADC_PollForConversion+0x208>)
 8001fa0:	400b      	ands	r3, r1
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d108      	bne.n	8001fb8 <HAL_ADC_PollForConversion+0x140>
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	68d9      	ldr	r1, [r3, #12]
 8001fac:	4b34      	ldr	r3, [pc, #208]	@ (8002080 <HAL_ADC_PollForConversion+0x208>)
 8001fae:	400b      	ands	r3, r1
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d101      	bne.n	8001fb8 <HAL_ADC_PollForConversion+0x140>
 8001fb4:	2354      	movs	r3, #84	@ 0x54
 8001fb6:	e000      	b.n	8001fba <HAL_ADC_PollForConversion+0x142>
 8001fb8:	23fc      	movs	r3, #252	@ 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8001fba:	fb02 f303 	mul.w	r3, r2, r3
 8001fbe:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001fc0:	e021      	b.n	8002006 <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fc8:	d01a      	beq.n	8002000 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d007      	beq.n	8001fe0 <HAL_ADC_PollForConversion+0x168>
 8001fd0:	f7ff fd9e 	bl	8001b10 <HAL_GetTick>
 8001fd4:	4602      	mov	r2, r0
 8001fd6:	697b      	ldr	r3, [r7, #20]
 8001fd8:	1ad3      	subs	r3, r2, r3
 8001fda:	683a      	ldr	r2, [r7, #0]
 8001fdc:	429a      	cmp	r2, r3
 8001fde:	d20f      	bcs.n	8002000 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	693a      	ldr	r2, [r7, #16]
 8001fe4:	429a      	cmp	r2, r3
 8001fe6:	d90b      	bls.n	8002000 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fec:	f043 0204 	orr.w	r2, r3, #4
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	629a      	str	r2, [r3, #40]	@ 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

            return HAL_TIMEOUT;
 8001ffc:	2303      	movs	r3, #3
 8001ffe:	e030      	b.n	8002062 <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	3301      	adds	r3, #1
 8002004:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	693a      	ldr	r2, [r7, #16]
 800200a:	429a      	cmp	r2, r3
 800200c:	d8d9      	bhi.n	8001fc2 <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f06f 0212 	mvn.w	r2, #18
 8002016:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800201c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	629a      	str	r2, [r3, #40]	@ 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	689b      	ldr	r3, [r3, #8]
 800202a:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 800202e:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8002032:	d115      	bne.n	8002060 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002038:	2b00      	cmp	r3, #0
 800203a:	d111      	bne.n	8002060 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002040:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	629a      	str	r2, [r3, #40]	@ 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800204c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002050:	2b00      	cmp	r3, #0
 8002052:	d105      	bne.n	8002060 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002058:	f043 0201 	orr.w	r2, r3, #1
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	629a      	str	r2, [r3, #40]	@ 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002060:	2300      	movs	r3, #0
}
 8002062:	4618      	mov	r0, r3
 8002064:	371c      	adds	r7, #28
 8002066:	46bd      	mov	sp, r7
 8002068:	bd90      	pop	{r4, r7, pc}
 800206a:	bf00      	nop
 800206c:	20000010 	.word	0x20000010
 8002070:	24924924 	.word	0x24924924
 8002074:	00924924 	.word	0x00924924
 8002078:	12492492 	.word	0x12492492
 800207c:	00492492 	.word	0x00492492
 8002080:	00249249 	.word	0x00249249

08002084 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8002084:	b480      	push	{r7}
 8002086:	b083      	sub	sp, #12
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8002092:	4618      	mov	r0, r3
 8002094:	370c      	adds	r7, #12
 8002096:	46bd      	mov	sp, r7
 8002098:	bc80      	pop	{r7}
 800209a:	4770      	bx	lr

0800209c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 800209c:	b480      	push	{r7}
 800209e:	b085      	sub	sp, #20
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
 80020a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80020a6:	2300      	movs	r3, #0
 80020a8:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80020aa:	2300      	movs	r3, #0
 80020ac:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80020b4:	2b01      	cmp	r3, #1
 80020b6:	d101      	bne.n	80020bc <HAL_ADC_ConfigChannel+0x20>
 80020b8:	2302      	movs	r3, #2
 80020ba:	e0dc      	b.n	8002276 <HAL_ADC_ConfigChannel+0x1da>
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2201      	movs	r2, #1
 80020c0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	685b      	ldr	r3, [r3, #4]
 80020c8:	2b06      	cmp	r3, #6
 80020ca:	d81c      	bhi.n	8002106 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	685a      	ldr	r2, [r3, #4]
 80020d6:	4613      	mov	r3, r2
 80020d8:	009b      	lsls	r3, r3, #2
 80020da:	4413      	add	r3, r2
 80020dc:	3b05      	subs	r3, #5
 80020de:	221f      	movs	r2, #31
 80020e0:	fa02 f303 	lsl.w	r3, r2, r3
 80020e4:	43db      	mvns	r3, r3
 80020e6:	4019      	ands	r1, r3
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	6818      	ldr	r0, [r3, #0]
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	685a      	ldr	r2, [r3, #4]
 80020f0:	4613      	mov	r3, r2
 80020f2:	009b      	lsls	r3, r3, #2
 80020f4:	4413      	add	r3, r2
 80020f6:	3b05      	subs	r3, #5
 80020f8:	fa00 f203 	lsl.w	r2, r0, r3
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	430a      	orrs	r2, r1
 8002102:	635a      	str	r2, [r3, #52]	@ 0x34
 8002104:	e03c      	b.n	8002180 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	685b      	ldr	r3, [r3, #4]
 800210a:	2b0c      	cmp	r3, #12
 800210c:	d81c      	bhi.n	8002148 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	685a      	ldr	r2, [r3, #4]
 8002118:	4613      	mov	r3, r2
 800211a:	009b      	lsls	r3, r3, #2
 800211c:	4413      	add	r3, r2
 800211e:	3b23      	subs	r3, #35	@ 0x23
 8002120:	221f      	movs	r2, #31
 8002122:	fa02 f303 	lsl.w	r3, r2, r3
 8002126:	43db      	mvns	r3, r3
 8002128:	4019      	ands	r1, r3
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	6818      	ldr	r0, [r3, #0]
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	685a      	ldr	r2, [r3, #4]
 8002132:	4613      	mov	r3, r2
 8002134:	009b      	lsls	r3, r3, #2
 8002136:	4413      	add	r3, r2
 8002138:	3b23      	subs	r3, #35	@ 0x23
 800213a:	fa00 f203 	lsl.w	r2, r0, r3
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	430a      	orrs	r2, r1
 8002144:	631a      	str	r2, [r3, #48]	@ 0x30
 8002146:	e01b      	b.n	8002180 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800214e:	683b      	ldr	r3, [r7, #0]
 8002150:	685a      	ldr	r2, [r3, #4]
 8002152:	4613      	mov	r3, r2
 8002154:	009b      	lsls	r3, r3, #2
 8002156:	4413      	add	r3, r2
 8002158:	3b41      	subs	r3, #65	@ 0x41
 800215a:	221f      	movs	r2, #31
 800215c:	fa02 f303 	lsl.w	r3, r2, r3
 8002160:	43db      	mvns	r3, r3
 8002162:	4019      	ands	r1, r3
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	6818      	ldr	r0, [r3, #0]
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	685a      	ldr	r2, [r3, #4]
 800216c:	4613      	mov	r3, r2
 800216e:	009b      	lsls	r3, r3, #2
 8002170:	4413      	add	r3, r2
 8002172:	3b41      	subs	r3, #65	@ 0x41
 8002174:	fa00 f203 	lsl.w	r2, r0, r3
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	430a      	orrs	r2, r1
 800217e:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	2b09      	cmp	r3, #9
 8002186:	d91c      	bls.n	80021c2 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	68d9      	ldr	r1, [r3, #12]
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	681a      	ldr	r2, [r3, #0]
 8002192:	4613      	mov	r3, r2
 8002194:	005b      	lsls	r3, r3, #1
 8002196:	4413      	add	r3, r2
 8002198:	3b1e      	subs	r3, #30
 800219a:	2207      	movs	r2, #7
 800219c:	fa02 f303 	lsl.w	r3, r2, r3
 80021a0:	43db      	mvns	r3, r3
 80021a2:	4019      	ands	r1, r3
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	6898      	ldr	r0, [r3, #8]
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	681a      	ldr	r2, [r3, #0]
 80021ac:	4613      	mov	r3, r2
 80021ae:	005b      	lsls	r3, r3, #1
 80021b0:	4413      	add	r3, r2
 80021b2:	3b1e      	subs	r3, #30
 80021b4:	fa00 f203 	lsl.w	r2, r0, r3
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	430a      	orrs	r2, r1
 80021be:	60da      	str	r2, [r3, #12]
 80021c0:	e019      	b.n	80021f6 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	6919      	ldr	r1, [r3, #16]
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	681a      	ldr	r2, [r3, #0]
 80021cc:	4613      	mov	r3, r2
 80021ce:	005b      	lsls	r3, r3, #1
 80021d0:	4413      	add	r3, r2
 80021d2:	2207      	movs	r2, #7
 80021d4:	fa02 f303 	lsl.w	r3, r2, r3
 80021d8:	43db      	mvns	r3, r3
 80021da:	4019      	ands	r1, r3
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	6898      	ldr	r0, [r3, #8]
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	681a      	ldr	r2, [r3, #0]
 80021e4:	4613      	mov	r3, r2
 80021e6:	005b      	lsls	r3, r3, #1
 80021e8:	4413      	add	r3, r2
 80021ea:	fa00 f203 	lsl.w	r2, r0, r3
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	430a      	orrs	r2, r1
 80021f4:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80021f6:	683b      	ldr	r3, [r7, #0]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	2b10      	cmp	r3, #16
 80021fc:	d003      	beq.n	8002206 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002202:	2b11      	cmp	r3, #17
 8002204:	d132      	bne.n	800226c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	4a1d      	ldr	r2, [pc, #116]	@ (8002280 <HAL_ADC_ConfigChannel+0x1e4>)
 800220c:	4293      	cmp	r3, r2
 800220e:	d125      	bne.n	800225c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	689b      	ldr	r3, [r3, #8]
 8002216:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800221a:	2b00      	cmp	r3, #0
 800221c:	d126      	bne.n	800226c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	689a      	ldr	r2, [r3, #8]
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 800222c:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	2b10      	cmp	r3, #16
 8002234:	d11a      	bne.n	800226c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002236:	4b13      	ldr	r3, [pc, #76]	@ (8002284 <HAL_ADC_ConfigChannel+0x1e8>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	4a13      	ldr	r2, [pc, #76]	@ (8002288 <HAL_ADC_ConfigChannel+0x1ec>)
 800223c:	fba2 2303 	umull	r2, r3, r2, r3
 8002240:	0c9a      	lsrs	r2, r3, #18
 8002242:	4613      	mov	r3, r2
 8002244:	009b      	lsls	r3, r3, #2
 8002246:	4413      	add	r3, r2
 8002248:	005b      	lsls	r3, r3, #1
 800224a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800224c:	e002      	b.n	8002254 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800224e:	68bb      	ldr	r3, [r7, #8]
 8002250:	3b01      	subs	r3, #1
 8002252:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002254:	68bb      	ldr	r3, [r7, #8]
 8002256:	2b00      	cmp	r3, #0
 8002258:	d1f9      	bne.n	800224e <HAL_ADC_ConfigChannel+0x1b2>
 800225a:	e007      	b.n	800226c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002260:	f043 0220 	orr.w	r2, r3, #32
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002268:	2301      	movs	r3, #1
 800226a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2200      	movs	r2, #0
 8002270:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002274:	7bfb      	ldrb	r3, [r7, #15]
}
 8002276:	4618      	mov	r0, r3
 8002278:	3714      	adds	r7, #20
 800227a:	46bd      	mov	sp, r7
 800227c:	bc80      	pop	{r7}
 800227e:	4770      	bx	lr
 8002280:	40012400 	.word	0x40012400
 8002284:	20000010 	.word	0x20000010
 8002288:	431bde83 	.word	0x431bde83

0800228c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b084      	sub	sp, #16
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002294:	2300      	movs	r3, #0
 8002296:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002298:	2300      	movs	r3, #0
 800229a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	689b      	ldr	r3, [r3, #8]
 80022a2:	f003 0301 	and.w	r3, r3, #1
 80022a6:	2b01      	cmp	r3, #1
 80022a8:	d040      	beq.n	800232c <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	689a      	ldr	r2, [r3, #8]
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f042 0201 	orr.w	r2, r2, #1
 80022b8:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80022ba:	4b1f      	ldr	r3, [pc, #124]	@ (8002338 <ADC_Enable+0xac>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	4a1f      	ldr	r2, [pc, #124]	@ (800233c <ADC_Enable+0xb0>)
 80022c0:	fba2 2303 	umull	r2, r3, r2, r3
 80022c4:	0c9b      	lsrs	r3, r3, #18
 80022c6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80022c8:	e002      	b.n	80022d0 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80022ca:	68bb      	ldr	r3, [r7, #8]
 80022cc:	3b01      	subs	r3, #1
 80022ce:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80022d0:	68bb      	ldr	r3, [r7, #8]
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d1f9      	bne.n	80022ca <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80022d6:	f7ff fc1b 	bl	8001b10 <HAL_GetTick>
 80022da:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80022dc:	e01f      	b.n	800231e <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80022de:	f7ff fc17 	bl	8001b10 <HAL_GetTick>
 80022e2:	4602      	mov	r2, r0
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	1ad3      	subs	r3, r2, r3
 80022e8:	2b02      	cmp	r3, #2
 80022ea:	d918      	bls.n	800231e <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	689b      	ldr	r3, [r3, #8]
 80022f2:	f003 0301 	and.w	r3, r3, #1
 80022f6:	2b01      	cmp	r3, #1
 80022f8:	d011      	beq.n	800231e <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022fe:	f043 0210 	orr.w	r2, r3, #16
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800230a:	f043 0201 	orr.w	r2, r3, #1
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	2200      	movs	r2, #0
 8002316:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 800231a:	2301      	movs	r3, #1
 800231c:	e007      	b.n	800232e <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	689b      	ldr	r3, [r3, #8]
 8002324:	f003 0301 	and.w	r3, r3, #1
 8002328:	2b01      	cmp	r3, #1
 800232a:	d1d8      	bne.n	80022de <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 800232c:	2300      	movs	r3, #0
}
 800232e:	4618      	mov	r0, r3
 8002330:	3710      	adds	r7, #16
 8002332:	46bd      	mov	sp, r7
 8002334:	bd80      	pop	{r7, pc}
 8002336:	bf00      	nop
 8002338:	20000010 	.word	0x20000010
 800233c:	431bde83 	.word	0x431bde83

08002340 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b084      	sub	sp, #16
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002348:	2300      	movs	r3, #0
 800234a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	689b      	ldr	r3, [r3, #8]
 8002352:	f003 0301 	and.w	r3, r3, #1
 8002356:	2b01      	cmp	r3, #1
 8002358:	d12e      	bne.n	80023b8 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	689a      	ldr	r2, [r3, #8]
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f022 0201 	bic.w	r2, r2, #1
 8002368:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800236a:	f7ff fbd1 	bl	8001b10 <HAL_GetTick>
 800236e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002370:	e01b      	b.n	80023aa <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002372:	f7ff fbcd 	bl	8001b10 <HAL_GetTick>
 8002376:	4602      	mov	r2, r0
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	1ad3      	subs	r3, r2, r3
 800237c:	2b02      	cmp	r3, #2
 800237e:	d914      	bls.n	80023aa <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	689b      	ldr	r3, [r3, #8]
 8002386:	f003 0301 	and.w	r3, r3, #1
 800238a:	2b01      	cmp	r3, #1
 800238c:	d10d      	bne.n	80023aa <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002392:	f043 0210 	orr.w	r2, r3, #16
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800239e:	f043 0201 	orr.w	r2, r3, #1
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 80023a6:	2301      	movs	r3, #1
 80023a8:	e007      	b.n	80023ba <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	689b      	ldr	r3, [r3, #8]
 80023b0:	f003 0301 	and.w	r3, r3, #1
 80023b4:	2b01      	cmp	r3, #1
 80023b6:	d0dc      	beq.n	8002372 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80023b8:	2300      	movs	r3, #0
}
 80023ba:	4618      	mov	r0, r3
 80023bc:	3710      	adds	r7, #16
 80023be:	46bd      	mov	sp, r7
 80023c0:	bd80      	pop	{r7, pc}
	...

080023c4 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 80023c4:	b590      	push	{r4, r7, lr}
 80023c6:	b087      	sub	sp, #28
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80023cc:	2300      	movs	r3, #0
 80023ce:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 80023d0:	2300      	movs	r3, #0
 80023d2:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80023da:	2b01      	cmp	r3, #1
 80023dc:	d101      	bne.n	80023e2 <HAL_ADCEx_Calibration_Start+0x1e>
 80023de:	2302      	movs	r3, #2
 80023e0:	e097      	b.n	8002512 <HAL_ADCEx_Calibration_Start+0x14e>
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	2201      	movs	r2, #1
 80023e6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
   /* 1. Disable ADC peripheral                                                 */
   tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80023ea:	6878      	ldr	r0, [r7, #4]
 80023ec:	f7ff ffa8 	bl	8002340 <ADC_ConversionStop_Disable>
 80023f0:	4603      	mov	r3, r0
 80023f2:	75fb      	strb	r3, [r7, #23]
  
   /* 2. Calibration prerequisite delay before starting the calibration.       */
   /*    - ADC must be enabled for at least two ADC clock cycles               */
   tmp_hal_status = ADC_Enable(hadc);
 80023f4:	6878      	ldr	r0, [r7, #4]
 80023f6:	f7ff ff49 	bl	800228c <ADC_Enable>
 80023fa:	4603      	mov	r3, r0
 80023fc:	75fb      	strb	r3, [r7, #23]

   /* Check if ADC is effectively enabled */
   if (tmp_hal_status == HAL_OK)
 80023fe:	7dfb      	ldrb	r3, [r7, #23]
 8002400:	2b00      	cmp	r3, #0
 8002402:	f040 8081 	bne.w	8002508 <HAL_ADCEx_Calibration_Start+0x144>
   {
     /* Set ADC state */
     ADC_STATE_CLR_SET(hadc->State,
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800240a:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800240e:	f023 0302 	bic.w	r3, r3, #2
 8002412:	f043 0202 	orr.w	r2, r3, #2
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 800241a:	4b40      	ldr	r3, [pc, #256]	@ (800251c <HAL_ADCEx_Calibration_Start+0x158>)
 800241c:	681c      	ldr	r4, [r3, #0]
 800241e:	2002      	movs	r0, #2
 8002420:	f000 ffc6 	bl	80033b0 <HAL_RCCEx_GetPeriphCLKFreq>
 8002424:	4603      	mov	r3, r0
 8002426:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 800242a:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 800242c:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 800242e:	e002      	b.n	8002436 <HAL_ADCEx_Calibration_Start+0x72>
    {
      wait_loop_index--;
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	3b01      	subs	r3, #1
 8002434:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	2b00      	cmp	r3, #0
 800243a:	d1f9      	bne.n	8002430 <HAL_ADCEx_Calibration_Start+0x6c>
    }

    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	689a      	ldr	r2, [r3, #8]
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f042 0208 	orr.w	r2, r2, #8
 800244a:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 800244c:	f7ff fb60 	bl	8001b10 <HAL_GetTick>
 8002450:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8002452:	e01b      	b.n	800248c <HAL_ADCEx_Calibration_Start+0xc8>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8002454:	f7ff fb5c 	bl	8001b10 <HAL_GetTick>
 8002458:	4602      	mov	r2, r0
 800245a:	693b      	ldr	r3, [r7, #16]
 800245c:	1ad3      	subs	r3, r2, r3
 800245e:	2b0a      	cmp	r3, #10
 8002460:	d914      	bls.n	800248c <HAL_ADCEx_Calibration_Start+0xc8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	689b      	ldr	r3, [r3, #8]
 8002468:	f003 0308 	and.w	r3, r3, #8
 800246c:	2b00      	cmp	r3, #0
 800246e:	d00d      	beq.n	800248c <HAL_ADCEx_Calibration_Start+0xc8>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002474:	f023 0312 	bic.w	r3, r3, #18
 8002478:	f043 0210 	orr.w	r2, r3, #16
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	629a      	str	r2, [r3, #40]	@ 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	2200      	movs	r2, #0
 8002484:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8002488:	2301      	movs	r3, #1
 800248a:	e042      	b.n	8002512 <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	689b      	ldr	r3, [r3, #8]
 8002492:	f003 0308 	and.w	r3, r3, #8
 8002496:	2b00      	cmp	r3, #0
 8002498:	d1dc      	bne.n	8002454 <HAL_ADCEx_Calibration_Start+0x90>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	689a      	ldr	r2, [r3, #8]
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f042 0204 	orr.w	r2, r2, #4
 80024a8:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 80024aa:	f7ff fb31 	bl	8001b10 <HAL_GetTick>
 80024ae:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 80024b0:	e01b      	b.n	80024ea <HAL_ADCEx_Calibration_Start+0x126>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80024b2:	f7ff fb2d 	bl	8001b10 <HAL_GetTick>
 80024b6:	4602      	mov	r2, r0
 80024b8:	693b      	ldr	r3, [r7, #16]
 80024ba:	1ad3      	subs	r3, r2, r3
 80024bc:	2b0a      	cmp	r3, #10
 80024be:	d914      	bls.n	80024ea <HAL_ADCEx_Calibration_Start+0x126>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	689b      	ldr	r3, [r3, #8]
 80024c6:	f003 0304 	and.w	r3, r3, #4
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d00d      	beq.n	80024ea <HAL_ADCEx_Calibration_Start+0x126>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024d2:	f023 0312 	bic.w	r3, r3, #18
 80024d6:	f043 0210 	orr.w	r2, r3, #16
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	629a      	str	r2, [r3, #40]	@ 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	2200      	movs	r2, #0
 80024e2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 80024e6:	2301      	movs	r3, #1
 80024e8:	e013      	b.n	8002512 <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	689b      	ldr	r3, [r3, #8]
 80024f0:	f003 0304 	and.w	r3, r3, #4
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d1dc      	bne.n	80024b2 <HAL_ADCEx_Calibration_Start+0xee>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024fc:	f023 0303 	bic.w	r3, r3, #3
 8002500:	f043 0201 	orr.w	r2, r3, #1
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2200      	movs	r2, #0
 800250c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002510:	7dfb      	ldrb	r3, [r7, #23]
}
 8002512:	4618      	mov	r0, r3
 8002514:	371c      	adds	r7, #28
 8002516:	46bd      	mov	sp, r7
 8002518:	bd90      	pop	{r4, r7, pc}
 800251a:	bf00      	nop
 800251c:	20000010 	.word	0x20000010

08002520 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002520:	b480      	push	{r7}
 8002522:	b085      	sub	sp, #20
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	f003 0307 	and.w	r3, r3, #7
 800252e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002530:	4b0c      	ldr	r3, [pc, #48]	@ (8002564 <__NVIC_SetPriorityGrouping+0x44>)
 8002532:	68db      	ldr	r3, [r3, #12]
 8002534:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002536:	68ba      	ldr	r2, [r7, #8]
 8002538:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800253c:	4013      	ands	r3, r2
 800253e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002544:	68bb      	ldr	r3, [r7, #8]
 8002546:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002548:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800254c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002550:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002552:	4a04      	ldr	r2, [pc, #16]	@ (8002564 <__NVIC_SetPriorityGrouping+0x44>)
 8002554:	68bb      	ldr	r3, [r7, #8]
 8002556:	60d3      	str	r3, [r2, #12]
}
 8002558:	bf00      	nop
 800255a:	3714      	adds	r7, #20
 800255c:	46bd      	mov	sp, r7
 800255e:	bc80      	pop	{r7}
 8002560:	4770      	bx	lr
 8002562:	bf00      	nop
 8002564:	e000ed00 	.word	0xe000ed00

08002568 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002568:	b480      	push	{r7}
 800256a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800256c:	4b04      	ldr	r3, [pc, #16]	@ (8002580 <__NVIC_GetPriorityGrouping+0x18>)
 800256e:	68db      	ldr	r3, [r3, #12]
 8002570:	0a1b      	lsrs	r3, r3, #8
 8002572:	f003 0307 	and.w	r3, r3, #7
}
 8002576:	4618      	mov	r0, r3
 8002578:	46bd      	mov	sp, r7
 800257a:	bc80      	pop	{r7}
 800257c:	4770      	bx	lr
 800257e:	bf00      	nop
 8002580:	e000ed00 	.word	0xe000ed00

08002584 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002584:	b480      	push	{r7}
 8002586:	b083      	sub	sp, #12
 8002588:	af00      	add	r7, sp, #0
 800258a:	4603      	mov	r3, r0
 800258c:	6039      	str	r1, [r7, #0]
 800258e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002590:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002594:	2b00      	cmp	r3, #0
 8002596:	db0a      	blt.n	80025ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	b2da      	uxtb	r2, r3
 800259c:	490c      	ldr	r1, [pc, #48]	@ (80025d0 <__NVIC_SetPriority+0x4c>)
 800259e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025a2:	0112      	lsls	r2, r2, #4
 80025a4:	b2d2      	uxtb	r2, r2
 80025a6:	440b      	add	r3, r1
 80025a8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80025ac:	e00a      	b.n	80025c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	b2da      	uxtb	r2, r3
 80025b2:	4908      	ldr	r1, [pc, #32]	@ (80025d4 <__NVIC_SetPriority+0x50>)
 80025b4:	79fb      	ldrb	r3, [r7, #7]
 80025b6:	f003 030f 	and.w	r3, r3, #15
 80025ba:	3b04      	subs	r3, #4
 80025bc:	0112      	lsls	r2, r2, #4
 80025be:	b2d2      	uxtb	r2, r2
 80025c0:	440b      	add	r3, r1
 80025c2:	761a      	strb	r2, [r3, #24]
}
 80025c4:	bf00      	nop
 80025c6:	370c      	adds	r7, #12
 80025c8:	46bd      	mov	sp, r7
 80025ca:	bc80      	pop	{r7}
 80025cc:	4770      	bx	lr
 80025ce:	bf00      	nop
 80025d0:	e000e100 	.word	0xe000e100
 80025d4:	e000ed00 	.word	0xe000ed00

080025d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80025d8:	b480      	push	{r7}
 80025da:	b089      	sub	sp, #36	@ 0x24
 80025dc:	af00      	add	r7, sp, #0
 80025de:	60f8      	str	r0, [r7, #12]
 80025e0:	60b9      	str	r1, [r7, #8]
 80025e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	f003 0307 	and.w	r3, r3, #7
 80025ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80025ec:	69fb      	ldr	r3, [r7, #28]
 80025ee:	f1c3 0307 	rsb	r3, r3, #7
 80025f2:	2b04      	cmp	r3, #4
 80025f4:	bf28      	it	cs
 80025f6:	2304      	movcs	r3, #4
 80025f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80025fa:	69fb      	ldr	r3, [r7, #28]
 80025fc:	3304      	adds	r3, #4
 80025fe:	2b06      	cmp	r3, #6
 8002600:	d902      	bls.n	8002608 <NVIC_EncodePriority+0x30>
 8002602:	69fb      	ldr	r3, [r7, #28]
 8002604:	3b03      	subs	r3, #3
 8002606:	e000      	b.n	800260a <NVIC_EncodePriority+0x32>
 8002608:	2300      	movs	r3, #0
 800260a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800260c:	f04f 32ff 	mov.w	r2, #4294967295
 8002610:	69bb      	ldr	r3, [r7, #24]
 8002612:	fa02 f303 	lsl.w	r3, r2, r3
 8002616:	43da      	mvns	r2, r3
 8002618:	68bb      	ldr	r3, [r7, #8]
 800261a:	401a      	ands	r2, r3
 800261c:	697b      	ldr	r3, [r7, #20]
 800261e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002620:	f04f 31ff 	mov.w	r1, #4294967295
 8002624:	697b      	ldr	r3, [r7, #20]
 8002626:	fa01 f303 	lsl.w	r3, r1, r3
 800262a:	43d9      	mvns	r1, r3
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002630:	4313      	orrs	r3, r2
         );
}
 8002632:	4618      	mov	r0, r3
 8002634:	3724      	adds	r7, #36	@ 0x24
 8002636:	46bd      	mov	sp, r7
 8002638:	bc80      	pop	{r7}
 800263a:	4770      	bx	lr

0800263c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	b082      	sub	sp, #8
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	3b01      	subs	r3, #1
 8002648:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800264c:	d301      	bcc.n	8002652 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800264e:	2301      	movs	r3, #1
 8002650:	e00f      	b.n	8002672 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002652:	4a0a      	ldr	r2, [pc, #40]	@ (800267c <SysTick_Config+0x40>)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	3b01      	subs	r3, #1
 8002658:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800265a:	210f      	movs	r1, #15
 800265c:	f04f 30ff 	mov.w	r0, #4294967295
 8002660:	f7ff ff90 	bl	8002584 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002664:	4b05      	ldr	r3, [pc, #20]	@ (800267c <SysTick_Config+0x40>)
 8002666:	2200      	movs	r2, #0
 8002668:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800266a:	4b04      	ldr	r3, [pc, #16]	@ (800267c <SysTick_Config+0x40>)
 800266c:	2207      	movs	r2, #7
 800266e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002670:	2300      	movs	r3, #0
}
 8002672:	4618      	mov	r0, r3
 8002674:	3708      	adds	r7, #8
 8002676:	46bd      	mov	sp, r7
 8002678:	bd80      	pop	{r7, pc}
 800267a:	bf00      	nop
 800267c:	e000e010 	.word	0xe000e010

08002680 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b082      	sub	sp, #8
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002688:	6878      	ldr	r0, [r7, #4]
 800268a:	f7ff ff49 	bl	8002520 <__NVIC_SetPriorityGrouping>
}
 800268e:	bf00      	nop
 8002690:	3708      	adds	r7, #8
 8002692:	46bd      	mov	sp, r7
 8002694:	bd80      	pop	{r7, pc}

08002696 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002696:	b580      	push	{r7, lr}
 8002698:	b086      	sub	sp, #24
 800269a:	af00      	add	r7, sp, #0
 800269c:	4603      	mov	r3, r0
 800269e:	60b9      	str	r1, [r7, #8]
 80026a0:	607a      	str	r2, [r7, #4]
 80026a2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80026a4:	2300      	movs	r3, #0
 80026a6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80026a8:	f7ff ff5e 	bl	8002568 <__NVIC_GetPriorityGrouping>
 80026ac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80026ae:	687a      	ldr	r2, [r7, #4]
 80026b0:	68b9      	ldr	r1, [r7, #8]
 80026b2:	6978      	ldr	r0, [r7, #20]
 80026b4:	f7ff ff90 	bl	80025d8 <NVIC_EncodePriority>
 80026b8:	4602      	mov	r2, r0
 80026ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026be:	4611      	mov	r1, r2
 80026c0:	4618      	mov	r0, r3
 80026c2:	f7ff ff5f 	bl	8002584 <__NVIC_SetPriority>
}
 80026c6:	bf00      	nop
 80026c8:	3718      	adds	r7, #24
 80026ca:	46bd      	mov	sp, r7
 80026cc:	bd80      	pop	{r7, pc}

080026ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80026ce:	b580      	push	{r7, lr}
 80026d0:	b082      	sub	sp, #8
 80026d2:	af00      	add	r7, sp, #0
 80026d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80026d6:	6878      	ldr	r0, [r7, #4]
 80026d8:	f7ff ffb0 	bl	800263c <SysTick_Config>
 80026dc:	4603      	mov	r3, r0
}
 80026de:	4618      	mov	r0, r3
 80026e0:	3708      	adds	r7, #8
 80026e2:	46bd      	mov	sp, r7
 80026e4:	bd80      	pop	{r7, pc}
	...

080026e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80026e8:	b480      	push	{r7}
 80026ea:	b08b      	sub	sp, #44	@ 0x2c
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
 80026f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80026f2:	2300      	movs	r3, #0
 80026f4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80026f6:	2300      	movs	r3, #0
 80026f8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80026fa:	e169      	b.n	80029d0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80026fc:	2201      	movs	r2, #1
 80026fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002700:	fa02 f303 	lsl.w	r3, r2, r3
 8002704:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	69fa      	ldr	r2, [r7, #28]
 800270c:	4013      	ands	r3, r2
 800270e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002710:	69ba      	ldr	r2, [r7, #24]
 8002712:	69fb      	ldr	r3, [r7, #28]
 8002714:	429a      	cmp	r2, r3
 8002716:	f040 8158 	bne.w	80029ca <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	685b      	ldr	r3, [r3, #4]
 800271e:	4a9a      	ldr	r2, [pc, #616]	@ (8002988 <HAL_GPIO_Init+0x2a0>)
 8002720:	4293      	cmp	r3, r2
 8002722:	d05e      	beq.n	80027e2 <HAL_GPIO_Init+0xfa>
 8002724:	4a98      	ldr	r2, [pc, #608]	@ (8002988 <HAL_GPIO_Init+0x2a0>)
 8002726:	4293      	cmp	r3, r2
 8002728:	d875      	bhi.n	8002816 <HAL_GPIO_Init+0x12e>
 800272a:	4a98      	ldr	r2, [pc, #608]	@ (800298c <HAL_GPIO_Init+0x2a4>)
 800272c:	4293      	cmp	r3, r2
 800272e:	d058      	beq.n	80027e2 <HAL_GPIO_Init+0xfa>
 8002730:	4a96      	ldr	r2, [pc, #600]	@ (800298c <HAL_GPIO_Init+0x2a4>)
 8002732:	4293      	cmp	r3, r2
 8002734:	d86f      	bhi.n	8002816 <HAL_GPIO_Init+0x12e>
 8002736:	4a96      	ldr	r2, [pc, #600]	@ (8002990 <HAL_GPIO_Init+0x2a8>)
 8002738:	4293      	cmp	r3, r2
 800273a:	d052      	beq.n	80027e2 <HAL_GPIO_Init+0xfa>
 800273c:	4a94      	ldr	r2, [pc, #592]	@ (8002990 <HAL_GPIO_Init+0x2a8>)
 800273e:	4293      	cmp	r3, r2
 8002740:	d869      	bhi.n	8002816 <HAL_GPIO_Init+0x12e>
 8002742:	4a94      	ldr	r2, [pc, #592]	@ (8002994 <HAL_GPIO_Init+0x2ac>)
 8002744:	4293      	cmp	r3, r2
 8002746:	d04c      	beq.n	80027e2 <HAL_GPIO_Init+0xfa>
 8002748:	4a92      	ldr	r2, [pc, #584]	@ (8002994 <HAL_GPIO_Init+0x2ac>)
 800274a:	4293      	cmp	r3, r2
 800274c:	d863      	bhi.n	8002816 <HAL_GPIO_Init+0x12e>
 800274e:	4a92      	ldr	r2, [pc, #584]	@ (8002998 <HAL_GPIO_Init+0x2b0>)
 8002750:	4293      	cmp	r3, r2
 8002752:	d046      	beq.n	80027e2 <HAL_GPIO_Init+0xfa>
 8002754:	4a90      	ldr	r2, [pc, #576]	@ (8002998 <HAL_GPIO_Init+0x2b0>)
 8002756:	4293      	cmp	r3, r2
 8002758:	d85d      	bhi.n	8002816 <HAL_GPIO_Init+0x12e>
 800275a:	2b12      	cmp	r3, #18
 800275c:	d82a      	bhi.n	80027b4 <HAL_GPIO_Init+0xcc>
 800275e:	2b12      	cmp	r3, #18
 8002760:	d859      	bhi.n	8002816 <HAL_GPIO_Init+0x12e>
 8002762:	a201      	add	r2, pc, #4	@ (adr r2, 8002768 <HAL_GPIO_Init+0x80>)
 8002764:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002768:	080027e3 	.word	0x080027e3
 800276c:	080027bd 	.word	0x080027bd
 8002770:	080027cf 	.word	0x080027cf
 8002774:	08002811 	.word	0x08002811
 8002778:	08002817 	.word	0x08002817
 800277c:	08002817 	.word	0x08002817
 8002780:	08002817 	.word	0x08002817
 8002784:	08002817 	.word	0x08002817
 8002788:	08002817 	.word	0x08002817
 800278c:	08002817 	.word	0x08002817
 8002790:	08002817 	.word	0x08002817
 8002794:	08002817 	.word	0x08002817
 8002798:	08002817 	.word	0x08002817
 800279c:	08002817 	.word	0x08002817
 80027a0:	08002817 	.word	0x08002817
 80027a4:	08002817 	.word	0x08002817
 80027a8:	08002817 	.word	0x08002817
 80027ac:	080027c5 	.word	0x080027c5
 80027b0:	080027d9 	.word	0x080027d9
 80027b4:	4a79      	ldr	r2, [pc, #484]	@ (800299c <HAL_GPIO_Init+0x2b4>)
 80027b6:	4293      	cmp	r3, r2
 80027b8:	d013      	beq.n	80027e2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80027ba:	e02c      	b.n	8002816 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	68db      	ldr	r3, [r3, #12]
 80027c0:	623b      	str	r3, [r7, #32]
          break;
 80027c2:	e029      	b.n	8002818 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	68db      	ldr	r3, [r3, #12]
 80027c8:	3304      	adds	r3, #4
 80027ca:	623b      	str	r3, [r7, #32]
          break;
 80027cc:	e024      	b.n	8002818 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	68db      	ldr	r3, [r3, #12]
 80027d2:	3308      	adds	r3, #8
 80027d4:	623b      	str	r3, [r7, #32]
          break;
 80027d6:	e01f      	b.n	8002818 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	68db      	ldr	r3, [r3, #12]
 80027dc:	330c      	adds	r3, #12
 80027de:	623b      	str	r3, [r7, #32]
          break;
 80027e0:	e01a      	b.n	8002818 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	689b      	ldr	r3, [r3, #8]
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d102      	bne.n	80027f0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80027ea:	2304      	movs	r3, #4
 80027ec:	623b      	str	r3, [r7, #32]
          break;
 80027ee:	e013      	b.n	8002818 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	689b      	ldr	r3, [r3, #8]
 80027f4:	2b01      	cmp	r3, #1
 80027f6:	d105      	bne.n	8002804 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80027f8:	2308      	movs	r3, #8
 80027fa:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	69fa      	ldr	r2, [r7, #28]
 8002800:	611a      	str	r2, [r3, #16]
          break;
 8002802:	e009      	b.n	8002818 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002804:	2308      	movs	r3, #8
 8002806:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	69fa      	ldr	r2, [r7, #28]
 800280c:	615a      	str	r2, [r3, #20]
          break;
 800280e:	e003      	b.n	8002818 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002810:	2300      	movs	r3, #0
 8002812:	623b      	str	r3, [r7, #32]
          break;
 8002814:	e000      	b.n	8002818 <HAL_GPIO_Init+0x130>
          break;
 8002816:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002818:	69bb      	ldr	r3, [r7, #24]
 800281a:	2bff      	cmp	r3, #255	@ 0xff
 800281c:	d801      	bhi.n	8002822 <HAL_GPIO_Init+0x13a>
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	e001      	b.n	8002826 <HAL_GPIO_Init+0x13e>
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	3304      	adds	r3, #4
 8002826:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002828:	69bb      	ldr	r3, [r7, #24]
 800282a:	2bff      	cmp	r3, #255	@ 0xff
 800282c:	d802      	bhi.n	8002834 <HAL_GPIO_Init+0x14c>
 800282e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002830:	009b      	lsls	r3, r3, #2
 8002832:	e002      	b.n	800283a <HAL_GPIO_Init+0x152>
 8002834:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002836:	3b08      	subs	r3, #8
 8002838:	009b      	lsls	r3, r3, #2
 800283a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800283c:	697b      	ldr	r3, [r7, #20]
 800283e:	681a      	ldr	r2, [r3, #0]
 8002840:	210f      	movs	r1, #15
 8002842:	693b      	ldr	r3, [r7, #16]
 8002844:	fa01 f303 	lsl.w	r3, r1, r3
 8002848:	43db      	mvns	r3, r3
 800284a:	401a      	ands	r2, r3
 800284c:	6a39      	ldr	r1, [r7, #32]
 800284e:	693b      	ldr	r3, [r7, #16]
 8002850:	fa01 f303 	lsl.w	r3, r1, r3
 8002854:	431a      	orrs	r2, r3
 8002856:	697b      	ldr	r3, [r7, #20]
 8002858:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	685b      	ldr	r3, [r3, #4]
 800285e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002862:	2b00      	cmp	r3, #0
 8002864:	f000 80b1 	beq.w	80029ca <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002868:	4b4d      	ldr	r3, [pc, #308]	@ (80029a0 <HAL_GPIO_Init+0x2b8>)
 800286a:	699b      	ldr	r3, [r3, #24]
 800286c:	4a4c      	ldr	r2, [pc, #304]	@ (80029a0 <HAL_GPIO_Init+0x2b8>)
 800286e:	f043 0301 	orr.w	r3, r3, #1
 8002872:	6193      	str	r3, [r2, #24]
 8002874:	4b4a      	ldr	r3, [pc, #296]	@ (80029a0 <HAL_GPIO_Init+0x2b8>)
 8002876:	699b      	ldr	r3, [r3, #24]
 8002878:	f003 0301 	and.w	r3, r3, #1
 800287c:	60bb      	str	r3, [r7, #8]
 800287e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002880:	4a48      	ldr	r2, [pc, #288]	@ (80029a4 <HAL_GPIO_Init+0x2bc>)
 8002882:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002884:	089b      	lsrs	r3, r3, #2
 8002886:	3302      	adds	r3, #2
 8002888:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800288c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800288e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002890:	f003 0303 	and.w	r3, r3, #3
 8002894:	009b      	lsls	r3, r3, #2
 8002896:	220f      	movs	r2, #15
 8002898:	fa02 f303 	lsl.w	r3, r2, r3
 800289c:	43db      	mvns	r3, r3
 800289e:	68fa      	ldr	r2, [r7, #12]
 80028a0:	4013      	ands	r3, r2
 80028a2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	4a40      	ldr	r2, [pc, #256]	@ (80029a8 <HAL_GPIO_Init+0x2c0>)
 80028a8:	4293      	cmp	r3, r2
 80028aa:	d013      	beq.n	80028d4 <HAL_GPIO_Init+0x1ec>
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	4a3f      	ldr	r2, [pc, #252]	@ (80029ac <HAL_GPIO_Init+0x2c4>)
 80028b0:	4293      	cmp	r3, r2
 80028b2:	d00d      	beq.n	80028d0 <HAL_GPIO_Init+0x1e8>
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	4a3e      	ldr	r2, [pc, #248]	@ (80029b0 <HAL_GPIO_Init+0x2c8>)
 80028b8:	4293      	cmp	r3, r2
 80028ba:	d007      	beq.n	80028cc <HAL_GPIO_Init+0x1e4>
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	4a3d      	ldr	r2, [pc, #244]	@ (80029b4 <HAL_GPIO_Init+0x2cc>)
 80028c0:	4293      	cmp	r3, r2
 80028c2:	d101      	bne.n	80028c8 <HAL_GPIO_Init+0x1e0>
 80028c4:	2303      	movs	r3, #3
 80028c6:	e006      	b.n	80028d6 <HAL_GPIO_Init+0x1ee>
 80028c8:	2304      	movs	r3, #4
 80028ca:	e004      	b.n	80028d6 <HAL_GPIO_Init+0x1ee>
 80028cc:	2302      	movs	r3, #2
 80028ce:	e002      	b.n	80028d6 <HAL_GPIO_Init+0x1ee>
 80028d0:	2301      	movs	r3, #1
 80028d2:	e000      	b.n	80028d6 <HAL_GPIO_Init+0x1ee>
 80028d4:	2300      	movs	r3, #0
 80028d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80028d8:	f002 0203 	and.w	r2, r2, #3
 80028dc:	0092      	lsls	r2, r2, #2
 80028de:	4093      	lsls	r3, r2
 80028e0:	68fa      	ldr	r2, [r7, #12]
 80028e2:	4313      	orrs	r3, r2
 80028e4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80028e6:	492f      	ldr	r1, [pc, #188]	@ (80029a4 <HAL_GPIO_Init+0x2bc>)
 80028e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028ea:	089b      	lsrs	r3, r3, #2
 80028ec:	3302      	adds	r3, #2
 80028ee:	68fa      	ldr	r2, [r7, #12]
 80028f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	685b      	ldr	r3, [r3, #4]
 80028f8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d006      	beq.n	800290e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002900:	4b2d      	ldr	r3, [pc, #180]	@ (80029b8 <HAL_GPIO_Init+0x2d0>)
 8002902:	689a      	ldr	r2, [r3, #8]
 8002904:	492c      	ldr	r1, [pc, #176]	@ (80029b8 <HAL_GPIO_Init+0x2d0>)
 8002906:	69bb      	ldr	r3, [r7, #24]
 8002908:	4313      	orrs	r3, r2
 800290a:	608b      	str	r3, [r1, #8]
 800290c:	e006      	b.n	800291c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800290e:	4b2a      	ldr	r3, [pc, #168]	@ (80029b8 <HAL_GPIO_Init+0x2d0>)
 8002910:	689a      	ldr	r2, [r3, #8]
 8002912:	69bb      	ldr	r3, [r7, #24]
 8002914:	43db      	mvns	r3, r3
 8002916:	4928      	ldr	r1, [pc, #160]	@ (80029b8 <HAL_GPIO_Init+0x2d0>)
 8002918:	4013      	ands	r3, r2
 800291a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	685b      	ldr	r3, [r3, #4]
 8002920:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002924:	2b00      	cmp	r3, #0
 8002926:	d006      	beq.n	8002936 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002928:	4b23      	ldr	r3, [pc, #140]	@ (80029b8 <HAL_GPIO_Init+0x2d0>)
 800292a:	68da      	ldr	r2, [r3, #12]
 800292c:	4922      	ldr	r1, [pc, #136]	@ (80029b8 <HAL_GPIO_Init+0x2d0>)
 800292e:	69bb      	ldr	r3, [r7, #24]
 8002930:	4313      	orrs	r3, r2
 8002932:	60cb      	str	r3, [r1, #12]
 8002934:	e006      	b.n	8002944 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002936:	4b20      	ldr	r3, [pc, #128]	@ (80029b8 <HAL_GPIO_Init+0x2d0>)
 8002938:	68da      	ldr	r2, [r3, #12]
 800293a:	69bb      	ldr	r3, [r7, #24]
 800293c:	43db      	mvns	r3, r3
 800293e:	491e      	ldr	r1, [pc, #120]	@ (80029b8 <HAL_GPIO_Init+0x2d0>)
 8002940:	4013      	ands	r3, r2
 8002942:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	685b      	ldr	r3, [r3, #4]
 8002948:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800294c:	2b00      	cmp	r3, #0
 800294e:	d006      	beq.n	800295e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002950:	4b19      	ldr	r3, [pc, #100]	@ (80029b8 <HAL_GPIO_Init+0x2d0>)
 8002952:	685a      	ldr	r2, [r3, #4]
 8002954:	4918      	ldr	r1, [pc, #96]	@ (80029b8 <HAL_GPIO_Init+0x2d0>)
 8002956:	69bb      	ldr	r3, [r7, #24]
 8002958:	4313      	orrs	r3, r2
 800295a:	604b      	str	r3, [r1, #4]
 800295c:	e006      	b.n	800296c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800295e:	4b16      	ldr	r3, [pc, #88]	@ (80029b8 <HAL_GPIO_Init+0x2d0>)
 8002960:	685a      	ldr	r2, [r3, #4]
 8002962:	69bb      	ldr	r3, [r7, #24]
 8002964:	43db      	mvns	r3, r3
 8002966:	4914      	ldr	r1, [pc, #80]	@ (80029b8 <HAL_GPIO_Init+0x2d0>)
 8002968:	4013      	ands	r3, r2
 800296a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	685b      	ldr	r3, [r3, #4]
 8002970:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002974:	2b00      	cmp	r3, #0
 8002976:	d021      	beq.n	80029bc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002978:	4b0f      	ldr	r3, [pc, #60]	@ (80029b8 <HAL_GPIO_Init+0x2d0>)
 800297a:	681a      	ldr	r2, [r3, #0]
 800297c:	490e      	ldr	r1, [pc, #56]	@ (80029b8 <HAL_GPIO_Init+0x2d0>)
 800297e:	69bb      	ldr	r3, [r7, #24]
 8002980:	4313      	orrs	r3, r2
 8002982:	600b      	str	r3, [r1, #0]
 8002984:	e021      	b.n	80029ca <HAL_GPIO_Init+0x2e2>
 8002986:	bf00      	nop
 8002988:	10320000 	.word	0x10320000
 800298c:	10310000 	.word	0x10310000
 8002990:	10220000 	.word	0x10220000
 8002994:	10210000 	.word	0x10210000
 8002998:	10120000 	.word	0x10120000
 800299c:	10110000 	.word	0x10110000
 80029a0:	40021000 	.word	0x40021000
 80029a4:	40010000 	.word	0x40010000
 80029a8:	40010800 	.word	0x40010800
 80029ac:	40010c00 	.word	0x40010c00
 80029b0:	40011000 	.word	0x40011000
 80029b4:	40011400 	.word	0x40011400
 80029b8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80029bc:	4b0b      	ldr	r3, [pc, #44]	@ (80029ec <HAL_GPIO_Init+0x304>)
 80029be:	681a      	ldr	r2, [r3, #0]
 80029c0:	69bb      	ldr	r3, [r7, #24]
 80029c2:	43db      	mvns	r3, r3
 80029c4:	4909      	ldr	r1, [pc, #36]	@ (80029ec <HAL_GPIO_Init+0x304>)
 80029c6:	4013      	ands	r3, r2
 80029c8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80029ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029cc:	3301      	adds	r3, #1
 80029ce:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	681a      	ldr	r2, [r3, #0]
 80029d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029d6:	fa22 f303 	lsr.w	r3, r2, r3
 80029da:	2b00      	cmp	r3, #0
 80029dc:	f47f ae8e 	bne.w	80026fc <HAL_GPIO_Init+0x14>
  }
}
 80029e0:	bf00      	nop
 80029e2:	bf00      	nop
 80029e4:	372c      	adds	r7, #44	@ 0x2c
 80029e6:	46bd      	mov	sp, r7
 80029e8:	bc80      	pop	{r7}
 80029ea:	4770      	bx	lr
 80029ec:	40010400 	.word	0x40010400

080029f0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80029f0:	b480      	push	{r7}
 80029f2:	b085      	sub	sp, #20
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
 80029f8:	460b      	mov	r3, r1
 80029fa:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	68db      	ldr	r3, [r3, #12]
 8002a00:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002a02:	887a      	ldrh	r2, [r7, #2]
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	4013      	ands	r3, r2
 8002a08:	041a      	lsls	r2, r3, #16
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	43d9      	mvns	r1, r3
 8002a0e:	887b      	ldrh	r3, [r7, #2]
 8002a10:	400b      	ands	r3, r1
 8002a12:	431a      	orrs	r2, r3
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	611a      	str	r2, [r3, #16]
}
 8002a18:	bf00      	nop
 8002a1a:	3714      	adds	r7, #20
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	bc80      	pop	{r7}
 8002a20:	4770      	bx	lr
	...

08002a24 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b086      	sub	sp, #24
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d101      	bne.n	8002a36 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002a32:	2301      	movs	r3, #1
 8002a34:	e272      	b.n	8002f1c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f003 0301 	and.w	r3, r3, #1
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	f000 8087 	beq.w	8002b52 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002a44:	4b92      	ldr	r3, [pc, #584]	@ (8002c90 <HAL_RCC_OscConfig+0x26c>)
 8002a46:	685b      	ldr	r3, [r3, #4]
 8002a48:	f003 030c 	and.w	r3, r3, #12
 8002a4c:	2b04      	cmp	r3, #4
 8002a4e:	d00c      	beq.n	8002a6a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002a50:	4b8f      	ldr	r3, [pc, #572]	@ (8002c90 <HAL_RCC_OscConfig+0x26c>)
 8002a52:	685b      	ldr	r3, [r3, #4]
 8002a54:	f003 030c 	and.w	r3, r3, #12
 8002a58:	2b08      	cmp	r3, #8
 8002a5a:	d112      	bne.n	8002a82 <HAL_RCC_OscConfig+0x5e>
 8002a5c:	4b8c      	ldr	r3, [pc, #560]	@ (8002c90 <HAL_RCC_OscConfig+0x26c>)
 8002a5e:	685b      	ldr	r3, [r3, #4]
 8002a60:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002a64:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002a68:	d10b      	bne.n	8002a82 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a6a:	4b89      	ldr	r3, [pc, #548]	@ (8002c90 <HAL_RCC_OscConfig+0x26c>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d06c      	beq.n	8002b50 <HAL_RCC_OscConfig+0x12c>
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	685b      	ldr	r3, [r3, #4]
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d168      	bne.n	8002b50 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002a7e:	2301      	movs	r3, #1
 8002a80:	e24c      	b.n	8002f1c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	685b      	ldr	r3, [r3, #4]
 8002a86:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002a8a:	d106      	bne.n	8002a9a <HAL_RCC_OscConfig+0x76>
 8002a8c:	4b80      	ldr	r3, [pc, #512]	@ (8002c90 <HAL_RCC_OscConfig+0x26c>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4a7f      	ldr	r2, [pc, #508]	@ (8002c90 <HAL_RCC_OscConfig+0x26c>)
 8002a92:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a96:	6013      	str	r3, [r2, #0]
 8002a98:	e02e      	b.n	8002af8 <HAL_RCC_OscConfig+0xd4>
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	685b      	ldr	r3, [r3, #4]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d10c      	bne.n	8002abc <HAL_RCC_OscConfig+0x98>
 8002aa2:	4b7b      	ldr	r3, [pc, #492]	@ (8002c90 <HAL_RCC_OscConfig+0x26c>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	4a7a      	ldr	r2, [pc, #488]	@ (8002c90 <HAL_RCC_OscConfig+0x26c>)
 8002aa8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002aac:	6013      	str	r3, [r2, #0]
 8002aae:	4b78      	ldr	r3, [pc, #480]	@ (8002c90 <HAL_RCC_OscConfig+0x26c>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	4a77      	ldr	r2, [pc, #476]	@ (8002c90 <HAL_RCC_OscConfig+0x26c>)
 8002ab4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002ab8:	6013      	str	r3, [r2, #0]
 8002aba:	e01d      	b.n	8002af8 <HAL_RCC_OscConfig+0xd4>
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	685b      	ldr	r3, [r3, #4]
 8002ac0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002ac4:	d10c      	bne.n	8002ae0 <HAL_RCC_OscConfig+0xbc>
 8002ac6:	4b72      	ldr	r3, [pc, #456]	@ (8002c90 <HAL_RCC_OscConfig+0x26c>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	4a71      	ldr	r2, [pc, #452]	@ (8002c90 <HAL_RCC_OscConfig+0x26c>)
 8002acc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002ad0:	6013      	str	r3, [r2, #0]
 8002ad2:	4b6f      	ldr	r3, [pc, #444]	@ (8002c90 <HAL_RCC_OscConfig+0x26c>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	4a6e      	ldr	r2, [pc, #440]	@ (8002c90 <HAL_RCC_OscConfig+0x26c>)
 8002ad8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002adc:	6013      	str	r3, [r2, #0]
 8002ade:	e00b      	b.n	8002af8 <HAL_RCC_OscConfig+0xd4>
 8002ae0:	4b6b      	ldr	r3, [pc, #428]	@ (8002c90 <HAL_RCC_OscConfig+0x26c>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4a6a      	ldr	r2, [pc, #424]	@ (8002c90 <HAL_RCC_OscConfig+0x26c>)
 8002ae6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002aea:	6013      	str	r3, [r2, #0]
 8002aec:	4b68      	ldr	r3, [pc, #416]	@ (8002c90 <HAL_RCC_OscConfig+0x26c>)
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	4a67      	ldr	r2, [pc, #412]	@ (8002c90 <HAL_RCC_OscConfig+0x26c>)
 8002af2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002af6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	685b      	ldr	r3, [r3, #4]
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d013      	beq.n	8002b28 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b00:	f7ff f806 	bl	8001b10 <HAL_GetTick>
 8002b04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b06:	e008      	b.n	8002b1a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b08:	f7ff f802 	bl	8001b10 <HAL_GetTick>
 8002b0c:	4602      	mov	r2, r0
 8002b0e:	693b      	ldr	r3, [r7, #16]
 8002b10:	1ad3      	subs	r3, r2, r3
 8002b12:	2b64      	cmp	r3, #100	@ 0x64
 8002b14:	d901      	bls.n	8002b1a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002b16:	2303      	movs	r3, #3
 8002b18:	e200      	b.n	8002f1c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b1a:	4b5d      	ldr	r3, [pc, #372]	@ (8002c90 <HAL_RCC_OscConfig+0x26c>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d0f0      	beq.n	8002b08 <HAL_RCC_OscConfig+0xe4>
 8002b26:	e014      	b.n	8002b52 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b28:	f7fe fff2 	bl	8001b10 <HAL_GetTick>
 8002b2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b2e:	e008      	b.n	8002b42 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b30:	f7fe ffee 	bl	8001b10 <HAL_GetTick>
 8002b34:	4602      	mov	r2, r0
 8002b36:	693b      	ldr	r3, [r7, #16]
 8002b38:	1ad3      	subs	r3, r2, r3
 8002b3a:	2b64      	cmp	r3, #100	@ 0x64
 8002b3c:	d901      	bls.n	8002b42 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002b3e:	2303      	movs	r3, #3
 8002b40:	e1ec      	b.n	8002f1c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b42:	4b53      	ldr	r3, [pc, #332]	@ (8002c90 <HAL_RCC_OscConfig+0x26c>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d1f0      	bne.n	8002b30 <HAL_RCC_OscConfig+0x10c>
 8002b4e:	e000      	b.n	8002b52 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b50:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f003 0302 	and.w	r3, r3, #2
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d063      	beq.n	8002c26 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002b5e:	4b4c      	ldr	r3, [pc, #304]	@ (8002c90 <HAL_RCC_OscConfig+0x26c>)
 8002b60:	685b      	ldr	r3, [r3, #4]
 8002b62:	f003 030c 	and.w	r3, r3, #12
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d00b      	beq.n	8002b82 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002b6a:	4b49      	ldr	r3, [pc, #292]	@ (8002c90 <HAL_RCC_OscConfig+0x26c>)
 8002b6c:	685b      	ldr	r3, [r3, #4]
 8002b6e:	f003 030c 	and.w	r3, r3, #12
 8002b72:	2b08      	cmp	r3, #8
 8002b74:	d11c      	bne.n	8002bb0 <HAL_RCC_OscConfig+0x18c>
 8002b76:	4b46      	ldr	r3, [pc, #280]	@ (8002c90 <HAL_RCC_OscConfig+0x26c>)
 8002b78:	685b      	ldr	r3, [r3, #4]
 8002b7a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d116      	bne.n	8002bb0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b82:	4b43      	ldr	r3, [pc, #268]	@ (8002c90 <HAL_RCC_OscConfig+0x26c>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f003 0302 	and.w	r3, r3, #2
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d005      	beq.n	8002b9a <HAL_RCC_OscConfig+0x176>
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	691b      	ldr	r3, [r3, #16]
 8002b92:	2b01      	cmp	r3, #1
 8002b94:	d001      	beq.n	8002b9a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002b96:	2301      	movs	r3, #1
 8002b98:	e1c0      	b.n	8002f1c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b9a:	4b3d      	ldr	r3, [pc, #244]	@ (8002c90 <HAL_RCC_OscConfig+0x26c>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	695b      	ldr	r3, [r3, #20]
 8002ba6:	00db      	lsls	r3, r3, #3
 8002ba8:	4939      	ldr	r1, [pc, #228]	@ (8002c90 <HAL_RCC_OscConfig+0x26c>)
 8002baa:	4313      	orrs	r3, r2
 8002bac:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002bae:	e03a      	b.n	8002c26 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	691b      	ldr	r3, [r3, #16]
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d020      	beq.n	8002bfa <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002bb8:	4b36      	ldr	r3, [pc, #216]	@ (8002c94 <HAL_RCC_OscConfig+0x270>)
 8002bba:	2201      	movs	r2, #1
 8002bbc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bbe:	f7fe ffa7 	bl	8001b10 <HAL_GetTick>
 8002bc2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bc4:	e008      	b.n	8002bd8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002bc6:	f7fe ffa3 	bl	8001b10 <HAL_GetTick>
 8002bca:	4602      	mov	r2, r0
 8002bcc:	693b      	ldr	r3, [r7, #16]
 8002bce:	1ad3      	subs	r3, r2, r3
 8002bd0:	2b02      	cmp	r3, #2
 8002bd2:	d901      	bls.n	8002bd8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002bd4:	2303      	movs	r3, #3
 8002bd6:	e1a1      	b.n	8002f1c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bd8:	4b2d      	ldr	r3, [pc, #180]	@ (8002c90 <HAL_RCC_OscConfig+0x26c>)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f003 0302 	and.w	r3, r3, #2
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d0f0      	beq.n	8002bc6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002be4:	4b2a      	ldr	r3, [pc, #168]	@ (8002c90 <HAL_RCC_OscConfig+0x26c>)
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	695b      	ldr	r3, [r3, #20]
 8002bf0:	00db      	lsls	r3, r3, #3
 8002bf2:	4927      	ldr	r1, [pc, #156]	@ (8002c90 <HAL_RCC_OscConfig+0x26c>)
 8002bf4:	4313      	orrs	r3, r2
 8002bf6:	600b      	str	r3, [r1, #0]
 8002bf8:	e015      	b.n	8002c26 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002bfa:	4b26      	ldr	r3, [pc, #152]	@ (8002c94 <HAL_RCC_OscConfig+0x270>)
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c00:	f7fe ff86 	bl	8001b10 <HAL_GetTick>
 8002c04:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c06:	e008      	b.n	8002c1a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c08:	f7fe ff82 	bl	8001b10 <HAL_GetTick>
 8002c0c:	4602      	mov	r2, r0
 8002c0e:	693b      	ldr	r3, [r7, #16]
 8002c10:	1ad3      	subs	r3, r2, r3
 8002c12:	2b02      	cmp	r3, #2
 8002c14:	d901      	bls.n	8002c1a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002c16:	2303      	movs	r3, #3
 8002c18:	e180      	b.n	8002f1c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c1a:	4b1d      	ldr	r3, [pc, #116]	@ (8002c90 <HAL_RCC_OscConfig+0x26c>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f003 0302 	and.w	r3, r3, #2
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d1f0      	bne.n	8002c08 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f003 0308 	and.w	r3, r3, #8
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d03a      	beq.n	8002ca8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	699b      	ldr	r3, [r3, #24]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d019      	beq.n	8002c6e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c3a:	4b17      	ldr	r3, [pc, #92]	@ (8002c98 <HAL_RCC_OscConfig+0x274>)
 8002c3c:	2201      	movs	r2, #1
 8002c3e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c40:	f7fe ff66 	bl	8001b10 <HAL_GetTick>
 8002c44:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c46:	e008      	b.n	8002c5a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c48:	f7fe ff62 	bl	8001b10 <HAL_GetTick>
 8002c4c:	4602      	mov	r2, r0
 8002c4e:	693b      	ldr	r3, [r7, #16]
 8002c50:	1ad3      	subs	r3, r2, r3
 8002c52:	2b02      	cmp	r3, #2
 8002c54:	d901      	bls.n	8002c5a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002c56:	2303      	movs	r3, #3
 8002c58:	e160      	b.n	8002f1c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c5a:	4b0d      	ldr	r3, [pc, #52]	@ (8002c90 <HAL_RCC_OscConfig+0x26c>)
 8002c5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c5e:	f003 0302 	and.w	r3, r3, #2
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d0f0      	beq.n	8002c48 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002c66:	2001      	movs	r0, #1
 8002c68:	f000 face 	bl	8003208 <RCC_Delay>
 8002c6c:	e01c      	b.n	8002ca8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c6e:	4b0a      	ldr	r3, [pc, #40]	@ (8002c98 <HAL_RCC_OscConfig+0x274>)
 8002c70:	2200      	movs	r2, #0
 8002c72:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c74:	f7fe ff4c 	bl	8001b10 <HAL_GetTick>
 8002c78:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c7a:	e00f      	b.n	8002c9c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c7c:	f7fe ff48 	bl	8001b10 <HAL_GetTick>
 8002c80:	4602      	mov	r2, r0
 8002c82:	693b      	ldr	r3, [r7, #16]
 8002c84:	1ad3      	subs	r3, r2, r3
 8002c86:	2b02      	cmp	r3, #2
 8002c88:	d908      	bls.n	8002c9c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002c8a:	2303      	movs	r3, #3
 8002c8c:	e146      	b.n	8002f1c <HAL_RCC_OscConfig+0x4f8>
 8002c8e:	bf00      	nop
 8002c90:	40021000 	.word	0x40021000
 8002c94:	42420000 	.word	0x42420000
 8002c98:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c9c:	4b92      	ldr	r3, [pc, #584]	@ (8002ee8 <HAL_RCC_OscConfig+0x4c4>)
 8002c9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ca0:	f003 0302 	and.w	r3, r3, #2
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d1e9      	bne.n	8002c7c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f003 0304 	and.w	r3, r3, #4
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	f000 80a6 	beq.w	8002e02 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002cba:	4b8b      	ldr	r3, [pc, #556]	@ (8002ee8 <HAL_RCC_OscConfig+0x4c4>)
 8002cbc:	69db      	ldr	r3, [r3, #28]
 8002cbe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d10d      	bne.n	8002ce2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002cc6:	4b88      	ldr	r3, [pc, #544]	@ (8002ee8 <HAL_RCC_OscConfig+0x4c4>)
 8002cc8:	69db      	ldr	r3, [r3, #28]
 8002cca:	4a87      	ldr	r2, [pc, #540]	@ (8002ee8 <HAL_RCC_OscConfig+0x4c4>)
 8002ccc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002cd0:	61d3      	str	r3, [r2, #28]
 8002cd2:	4b85      	ldr	r3, [pc, #532]	@ (8002ee8 <HAL_RCC_OscConfig+0x4c4>)
 8002cd4:	69db      	ldr	r3, [r3, #28]
 8002cd6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002cda:	60bb      	str	r3, [r7, #8]
 8002cdc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002cde:	2301      	movs	r3, #1
 8002ce0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ce2:	4b82      	ldr	r3, [pc, #520]	@ (8002eec <HAL_RCC_OscConfig+0x4c8>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d118      	bne.n	8002d20 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002cee:	4b7f      	ldr	r3, [pc, #508]	@ (8002eec <HAL_RCC_OscConfig+0x4c8>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	4a7e      	ldr	r2, [pc, #504]	@ (8002eec <HAL_RCC_OscConfig+0x4c8>)
 8002cf4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002cf8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002cfa:	f7fe ff09 	bl	8001b10 <HAL_GetTick>
 8002cfe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d00:	e008      	b.n	8002d14 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d02:	f7fe ff05 	bl	8001b10 <HAL_GetTick>
 8002d06:	4602      	mov	r2, r0
 8002d08:	693b      	ldr	r3, [r7, #16]
 8002d0a:	1ad3      	subs	r3, r2, r3
 8002d0c:	2b64      	cmp	r3, #100	@ 0x64
 8002d0e:	d901      	bls.n	8002d14 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002d10:	2303      	movs	r3, #3
 8002d12:	e103      	b.n	8002f1c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d14:	4b75      	ldr	r3, [pc, #468]	@ (8002eec <HAL_RCC_OscConfig+0x4c8>)
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d0f0      	beq.n	8002d02 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	68db      	ldr	r3, [r3, #12]
 8002d24:	2b01      	cmp	r3, #1
 8002d26:	d106      	bne.n	8002d36 <HAL_RCC_OscConfig+0x312>
 8002d28:	4b6f      	ldr	r3, [pc, #444]	@ (8002ee8 <HAL_RCC_OscConfig+0x4c4>)
 8002d2a:	6a1b      	ldr	r3, [r3, #32]
 8002d2c:	4a6e      	ldr	r2, [pc, #440]	@ (8002ee8 <HAL_RCC_OscConfig+0x4c4>)
 8002d2e:	f043 0301 	orr.w	r3, r3, #1
 8002d32:	6213      	str	r3, [r2, #32]
 8002d34:	e02d      	b.n	8002d92 <HAL_RCC_OscConfig+0x36e>
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	68db      	ldr	r3, [r3, #12]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d10c      	bne.n	8002d58 <HAL_RCC_OscConfig+0x334>
 8002d3e:	4b6a      	ldr	r3, [pc, #424]	@ (8002ee8 <HAL_RCC_OscConfig+0x4c4>)
 8002d40:	6a1b      	ldr	r3, [r3, #32]
 8002d42:	4a69      	ldr	r2, [pc, #420]	@ (8002ee8 <HAL_RCC_OscConfig+0x4c4>)
 8002d44:	f023 0301 	bic.w	r3, r3, #1
 8002d48:	6213      	str	r3, [r2, #32]
 8002d4a:	4b67      	ldr	r3, [pc, #412]	@ (8002ee8 <HAL_RCC_OscConfig+0x4c4>)
 8002d4c:	6a1b      	ldr	r3, [r3, #32]
 8002d4e:	4a66      	ldr	r2, [pc, #408]	@ (8002ee8 <HAL_RCC_OscConfig+0x4c4>)
 8002d50:	f023 0304 	bic.w	r3, r3, #4
 8002d54:	6213      	str	r3, [r2, #32]
 8002d56:	e01c      	b.n	8002d92 <HAL_RCC_OscConfig+0x36e>
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	68db      	ldr	r3, [r3, #12]
 8002d5c:	2b05      	cmp	r3, #5
 8002d5e:	d10c      	bne.n	8002d7a <HAL_RCC_OscConfig+0x356>
 8002d60:	4b61      	ldr	r3, [pc, #388]	@ (8002ee8 <HAL_RCC_OscConfig+0x4c4>)
 8002d62:	6a1b      	ldr	r3, [r3, #32]
 8002d64:	4a60      	ldr	r2, [pc, #384]	@ (8002ee8 <HAL_RCC_OscConfig+0x4c4>)
 8002d66:	f043 0304 	orr.w	r3, r3, #4
 8002d6a:	6213      	str	r3, [r2, #32]
 8002d6c:	4b5e      	ldr	r3, [pc, #376]	@ (8002ee8 <HAL_RCC_OscConfig+0x4c4>)
 8002d6e:	6a1b      	ldr	r3, [r3, #32]
 8002d70:	4a5d      	ldr	r2, [pc, #372]	@ (8002ee8 <HAL_RCC_OscConfig+0x4c4>)
 8002d72:	f043 0301 	orr.w	r3, r3, #1
 8002d76:	6213      	str	r3, [r2, #32]
 8002d78:	e00b      	b.n	8002d92 <HAL_RCC_OscConfig+0x36e>
 8002d7a:	4b5b      	ldr	r3, [pc, #364]	@ (8002ee8 <HAL_RCC_OscConfig+0x4c4>)
 8002d7c:	6a1b      	ldr	r3, [r3, #32]
 8002d7e:	4a5a      	ldr	r2, [pc, #360]	@ (8002ee8 <HAL_RCC_OscConfig+0x4c4>)
 8002d80:	f023 0301 	bic.w	r3, r3, #1
 8002d84:	6213      	str	r3, [r2, #32]
 8002d86:	4b58      	ldr	r3, [pc, #352]	@ (8002ee8 <HAL_RCC_OscConfig+0x4c4>)
 8002d88:	6a1b      	ldr	r3, [r3, #32]
 8002d8a:	4a57      	ldr	r2, [pc, #348]	@ (8002ee8 <HAL_RCC_OscConfig+0x4c4>)
 8002d8c:	f023 0304 	bic.w	r3, r3, #4
 8002d90:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	68db      	ldr	r3, [r3, #12]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d015      	beq.n	8002dc6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d9a:	f7fe feb9 	bl	8001b10 <HAL_GetTick>
 8002d9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002da0:	e00a      	b.n	8002db8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002da2:	f7fe feb5 	bl	8001b10 <HAL_GetTick>
 8002da6:	4602      	mov	r2, r0
 8002da8:	693b      	ldr	r3, [r7, #16]
 8002daa:	1ad3      	subs	r3, r2, r3
 8002dac:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002db0:	4293      	cmp	r3, r2
 8002db2:	d901      	bls.n	8002db8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002db4:	2303      	movs	r3, #3
 8002db6:	e0b1      	b.n	8002f1c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002db8:	4b4b      	ldr	r3, [pc, #300]	@ (8002ee8 <HAL_RCC_OscConfig+0x4c4>)
 8002dba:	6a1b      	ldr	r3, [r3, #32]
 8002dbc:	f003 0302 	and.w	r3, r3, #2
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d0ee      	beq.n	8002da2 <HAL_RCC_OscConfig+0x37e>
 8002dc4:	e014      	b.n	8002df0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002dc6:	f7fe fea3 	bl	8001b10 <HAL_GetTick>
 8002dca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002dcc:	e00a      	b.n	8002de4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002dce:	f7fe fe9f 	bl	8001b10 <HAL_GetTick>
 8002dd2:	4602      	mov	r2, r0
 8002dd4:	693b      	ldr	r3, [r7, #16]
 8002dd6:	1ad3      	subs	r3, r2, r3
 8002dd8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ddc:	4293      	cmp	r3, r2
 8002dde:	d901      	bls.n	8002de4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002de0:	2303      	movs	r3, #3
 8002de2:	e09b      	b.n	8002f1c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002de4:	4b40      	ldr	r3, [pc, #256]	@ (8002ee8 <HAL_RCC_OscConfig+0x4c4>)
 8002de6:	6a1b      	ldr	r3, [r3, #32]
 8002de8:	f003 0302 	and.w	r3, r3, #2
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d1ee      	bne.n	8002dce <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002df0:	7dfb      	ldrb	r3, [r7, #23]
 8002df2:	2b01      	cmp	r3, #1
 8002df4:	d105      	bne.n	8002e02 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002df6:	4b3c      	ldr	r3, [pc, #240]	@ (8002ee8 <HAL_RCC_OscConfig+0x4c4>)
 8002df8:	69db      	ldr	r3, [r3, #28]
 8002dfa:	4a3b      	ldr	r2, [pc, #236]	@ (8002ee8 <HAL_RCC_OscConfig+0x4c4>)
 8002dfc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002e00:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	69db      	ldr	r3, [r3, #28]
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	f000 8087 	beq.w	8002f1a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002e0c:	4b36      	ldr	r3, [pc, #216]	@ (8002ee8 <HAL_RCC_OscConfig+0x4c4>)
 8002e0e:	685b      	ldr	r3, [r3, #4]
 8002e10:	f003 030c 	and.w	r3, r3, #12
 8002e14:	2b08      	cmp	r3, #8
 8002e16:	d061      	beq.n	8002edc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	69db      	ldr	r3, [r3, #28]
 8002e1c:	2b02      	cmp	r3, #2
 8002e1e:	d146      	bne.n	8002eae <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e20:	4b33      	ldr	r3, [pc, #204]	@ (8002ef0 <HAL_RCC_OscConfig+0x4cc>)
 8002e22:	2200      	movs	r2, #0
 8002e24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e26:	f7fe fe73 	bl	8001b10 <HAL_GetTick>
 8002e2a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e2c:	e008      	b.n	8002e40 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e2e:	f7fe fe6f 	bl	8001b10 <HAL_GetTick>
 8002e32:	4602      	mov	r2, r0
 8002e34:	693b      	ldr	r3, [r7, #16]
 8002e36:	1ad3      	subs	r3, r2, r3
 8002e38:	2b02      	cmp	r3, #2
 8002e3a:	d901      	bls.n	8002e40 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002e3c:	2303      	movs	r3, #3
 8002e3e:	e06d      	b.n	8002f1c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e40:	4b29      	ldr	r3, [pc, #164]	@ (8002ee8 <HAL_RCC_OscConfig+0x4c4>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d1f0      	bne.n	8002e2e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6a1b      	ldr	r3, [r3, #32]
 8002e50:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002e54:	d108      	bne.n	8002e68 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002e56:	4b24      	ldr	r3, [pc, #144]	@ (8002ee8 <HAL_RCC_OscConfig+0x4c4>)
 8002e58:	685b      	ldr	r3, [r3, #4]
 8002e5a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	689b      	ldr	r3, [r3, #8]
 8002e62:	4921      	ldr	r1, [pc, #132]	@ (8002ee8 <HAL_RCC_OscConfig+0x4c4>)
 8002e64:	4313      	orrs	r3, r2
 8002e66:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002e68:	4b1f      	ldr	r3, [pc, #124]	@ (8002ee8 <HAL_RCC_OscConfig+0x4c4>)
 8002e6a:	685b      	ldr	r3, [r3, #4]
 8002e6c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6a19      	ldr	r1, [r3, #32]
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e78:	430b      	orrs	r3, r1
 8002e7a:	491b      	ldr	r1, [pc, #108]	@ (8002ee8 <HAL_RCC_OscConfig+0x4c4>)
 8002e7c:	4313      	orrs	r3, r2
 8002e7e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e80:	4b1b      	ldr	r3, [pc, #108]	@ (8002ef0 <HAL_RCC_OscConfig+0x4cc>)
 8002e82:	2201      	movs	r2, #1
 8002e84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e86:	f7fe fe43 	bl	8001b10 <HAL_GetTick>
 8002e8a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002e8c:	e008      	b.n	8002ea0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e8e:	f7fe fe3f 	bl	8001b10 <HAL_GetTick>
 8002e92:	4602      	mov	r2, r0
 8002e94:	693b      	ldr	r3, [r7, #16]
 8002e96:	1ad3      	subs	r3, r2, r3
 8002e98:	2b02      	cmp	r3, #2
 8002e9a:	d901      	bls.n	8002ea0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002e9c:	2303      	movs	r3, #3
 8002e9e:	e03d      	b.n	8002f1c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002ea0:	4b11      	ldr	r3, [pc, #68]	@ (8002ee8 <HAL_RCC_OscConfig+0x4c4>)
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d0f0      	beq.n	8002e8e <HAL_RCC_OscConfig+0x46a>
 8002eac:	e035      	b.n	8002f1a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002eae:	4b10      	ldr	r3, [pc, #64]	@ (8002ef0 <HAL_RCC_OscConfig+0x4cc>)
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002eb4:	f7fe fe2c 	bl	8001b10 <HAL_GetTick>
 8002eb8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002eba:	e008      	b.n	8002ece <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ebc:	f7fe fe28 	bl	8001b10 <HAL_GetTick>
 8002ec0:	4602      	mov	r2, r0
 8002ec2:	693b      	ldr	r3, [r7, #16]
 8002ec4:	1ad3      	subs	r3, r2, r3
 8002ec6:	2b02      	cmp	r3, #2
 8002ec8:	d901      	bls.n	8002ece <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002eca:	2303      	movs	r3, #3
 8002ecc:	e026      	b.n	8002f1c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ece:	4b06      	ldr	r3, [pc, #24]	@ (8002ee8 <HAL_RCC_OscConfig+0x4c4>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d1f0      	bne.n	8002ebc <HAL_RCC_OscConfig+0x498>
 8002eda:	e01e      	b.n	8002f1a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	69db      	ldr	r3, [r3, #28]
 8002ee0:	2b01      	cmp	r3, #1
 8002ee2:	d107      	bne.n	8002ef4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002ee4:	2301      	movs	r3, #1
 8002ee6:	e019      	b.n	8002f1c <HAL_RCC_OscConfig+0x4f8>
 8002ee8:	40021000 	.word	0x40021000
 8002eec:	40007000 	.word	0x40007000
 8002ef0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002ef4:	4b0b      	ldr	r3, [pc, #44]	@ (8002f24 <HAL_RCC_OscConfig+0x500>)
 8002ef6:	685b      	ldr	r3, [r3, #4]
 8002ef8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6a1b      	ldr	r3, [r3, #32]
 8002f04:	429a      	cmp	r2, r3
 8002f06:	d106      	bne.n	8002f16 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f12:	429a      	cmp	r2, r3
 8002f14:	d001      	beq.n	8002f1a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002f16:	2301      	movs	r3, #1
 8002f18:	e000      	b.n	8002f1c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002f1a:	2300      	movs	r3, #0
}
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	3718      	adds	r7, #24
 8002f20:	46bd      	mov	sp, r7
 8002f22:	bd80      	pop	{r7, pc}
 8002f24:	40021000 	.word	0x40021000

08002f28 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b084      	sub	sp, #16
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
 8002f30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d101      	bne.n	8002f3c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f38:	2301      	movs	r3, #1
 8002f3a:	e0d0      	b.n	80030de <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002f3c:	4b6a      	ldr	r3, [pc, #424]	@ (80030e8 <HAL_RCC_ClockConfig+0x1c0>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f003 0307 	and.w	r3, r3, #7
 8002f44:	683a      	ldr	r2, [r7, #0]
 8002f46:	429a      	cmp	r2, r3
 8002f48:	d910      	bls.n	8002f6c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f4a:	4b67      	ldr	r3, [pc, #412]	@ (80030e8 <HAL_RCC_ClockConfig+0x1c0>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f023 0207 	bic.w	r2, r3, #7
 8002f52:	4965      	ldr	r1, [pc, #404]	@ (80030e8 <HAL_RCC_ClockConfig+0x1c0>)
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	4313      	orrs	r3, r2
 8002f58:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f5a:	4b63      	ldr	r3, [pc, #396]	@ (80030e8 <HAL_RCC_ClockConfig+0x1c0>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f003 0307 	and.w	r3, r3, #7
 8002f62:	683a      	ldr	r2, [r7, #0]
 8002f64:	429a      	cmp	r2, r3
 8002f66:	d001      	beq.n	8002f6c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002f68:	2301      	movs	r3, #1
 8002f6a:	e0b8      	b.n	80030de <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f003 0302 	and.w	r3, r3, #2
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d020      	beq.n	8002fba <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f003 0304 	and.w	r3, r3, #4
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d005      	beq.n	8002f90 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002f84:	4b59      	ldr	r3, [pc, #356]	@ (80030ec <HAL_RCC_ClockConfig+0x1c4>)
 8002f86:	685b      	ldr	r3, [r3, #4]
 8002f88:	4a58      	ldr	r2, [pc, #352]	@ (80030ec <HAL_RCC_ClockConfig+0x1c4>)
 8002f8a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002f8e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f003 0308 	and.w	r3, r3, #8
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d005      	beq.n	8002fa8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002f9c:	4b53      	ldr	r3, [pc, #332]	@ (80030ec <HAL_RCC_ClockConfig+0x1c4>)
 8002f9e:	685b      	ldr	r3, [r3, #4]
 8002fa0:	4a52      	ldr	r2, [pc, #328]	@ (80030ec <HAL_RCC_ClockConfig+0x1c4>)
 8002fa2:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002fa6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002fa8:	4b50      	ldr	r3, [pc, #320]	@ (80030ec <HAL_RCC_ClockConfig+0x1c4>)
 8002faa:	685b      	ldr	r3, [r3, #4]
 8002fac:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	689b      	ldr	r3, [r3, #8]
 8002fb4:	494d      	ldr	r1, [pc, #308]	@ (80030ec <HAL_RCC_ClockConfig+0x1c4>)
 8002fb6:	4313      	orrs	r3, r2
 8002fb8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f003 0301 	and.w	r3, r3, #1
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d040      	beq.n	8003048 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	685b      	ldr	r3, [r3, #4]
 8002fca:	2b01      	cmp	r3, #1
 8002fcc:	d107      	bne.n	8002fde <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fce:	4b47      	ldr	r3, [pc, #284]	@ (80030ec <HAL_RCC_ClockConfig+0x1c4>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d115      	bne.n	8003006 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fda:	2301      	movs	r3, #1
 8002fdc:	e07f      	b.n	80030de <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	685b      	ldr	r3, [r3, #4]
 8002fe2:	2b02      	cmp	r3, #2
 8002fe4:	d107      	bne.n	8002ff6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fe6:	4b41      	ldr	r3, [pc, #260]	@ (80030ec <HAL_RCC_ClockConfig+0x1c4>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d109      	bne.n	8003006 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	e073      	b.n	80030de <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ff6:	4b3d      	ldr	r3, [pc, #244]	@ (80030ec <HAL_RCC_ClockConfig+0x1c4>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f003 0302 	and.w	r3, r3, #2
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d101      	bne.n	8003006 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003002:	2301      	movs	r3, #1
 8003004:	e06b      	b.n	80030de <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003006:	4b39      	ldr	r3, [pc, #228]	@ (80030ec <HAL_RCC_ClockConfig+0x1c4>)
 8003008:	685b      	ldr	r3, [r3, #4]
 800300a:	f023 0203 	bic.w	r2, r3, #3
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	685b      	ldr	r3, [r3, #4]
 8003012:	4936      	ldr	r1, [pc, #216]	@ (80030ec <HAL_RCC_ClockConfig+0x1c4>)
 8003014:	4313      	orrs	r3, r2
 8003016:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003018:	f7fe fd7a 	bl	8001b10 <HAL_GetTick>
 800301c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800301e:	e00a      	b.n	8003036 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003020:	f7fe fd76 	bl	8001b10 <HAL_GetTick>
 8003024:	4602      	mov	r2, r0
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	1ad3      	subs	r3, r2, r3
 800302a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800302e:	4293      	cmp	r3, r2
 8003030:	d901      	bls.n	8003036 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003032:	2303      	movs	r3, #3
 8003034:	e053      	b.n	80030de <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003036:	4b2d      	ldr	r3, [pc, #180]	@ (80030ec <HAL_RCC_ClockConfig+0x1c4>)
 8003038:	685b      	ldr	r3, [r3, #4]
 800303a:	f003 020c 	and.w	r2, r3, #12
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	685b      	ldr	r3, [r3, #4]
 8003042:	009b      	lsls	r3, r3, #2
 8003044:	429a      	cmp	r2, r3
 8003046:	d1eb      	bne.n	8003020 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003048:	4b27      	ldr	r3, [pc, #156]	@ (80030e8 <HAL_RCC_ClockConfig+0x1c0>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f003 0307 	and.w	r3, r3, #7
 8003050:	683a      	ldr	r2, [r7, #0]
 8003052:	429a      	cmp	r2, r3
 8003054:	d210      	bcs.n	8003078 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003056:	4b24      	ldr	r3, [pc, #144]	@ (80030e8 <HAL_RCC_ClockConfig+0x1c0>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f023 0207 	bic.w	r2, r3, #7
 800305e:	4922      	ldr	r1, [pc, #136]	@ (80030e8 <HAL_RCC_ClockConfig+0x1c0>)
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	4313      	orrs	r3, r2
 8003064:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003066:	4b20      	ldr	r3, [pc, #128]	@ (80030e8 <HAL_RCC_ClockConfig+0x1c0>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f003 0307 	and.w	r3, r3, #7
 800306e:	683a      	ldr	r2, [r7, #0]
 8003070:	429a      	cmp	r2, r3
 8003072:	d001      	beq.n	8003078 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003074:	2301      	movs	r3, #1
 8003076:	e032      	b.n	80030de <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f003 0304 	and.w	r3, r3, #4
 8003080:	2b00      	cmp	r3, #0
 8003082:	d008      	beq.n	8003096 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003084:	4b19      	ldr	r3, [pc, #100]	@ (80030ec <HAL_RCC_ClockConfig+0x1c4>)
 8003086:	685b      	ldr	r3, [r3, #4]
 8003088:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	68db      	ldr	r3, [r3, #12]
 8003090:	4916      	ldr	r1, [pc, #88]	@ (80030ec <HAL_RCC_ClockConfig+0x1c4>)
 8003092:	4313      	orrs	r3, r2
 8003094:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f003 0308 	and.w	r3, r3, #8
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d009      	beq.n	80030b6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80030a2:	4b12      	ldr	r3, [pc, #72]	@ (80030ec <HAL_RCC_ClockConfig+0x1c4>)
 80030a4:	685b      	ldr	r3, [r3, #4]
 80030a6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	691b      	ldr	r3, [r3, #16]
 80030ae:	00db      	lsls	r3, r3, #3
 80030b0:	490e      	ldr	r1, [pc, #56]	@ (80030ec <HAL_RCC_ClockConfig+0x1c4>)
 80030b2:	4313      	orrs	r3, r2
 80030b4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80030b6:	f000 f821 	bl	80030fc <HAL_RCC_GetSysClockFreq>
 80030ba:	4602      	mov	r2, r0
 80030bc:	4b0b      	ldr	r3, [pc, #44]	@ (80030ec <HAL_RCC_ClockConfig+0x1c4>)
 80030be:	685b      	ldr	r3, [r3, #4]
 80030c0:	091b      	lsrs	r3, r3, #4
 80030c2:	f003 030f 	and.w	r3, r3, #15
 80030c6:	490a      	ldr	r1, [pc, #40]	@ (80030f0 <HAL_RCC_ClockConfig+0x1c8>)
 80030c8:	5ccb      	ldrb	r3, [r1, r3]
 80030ca:	fa22 f303 	lsr.w	r3, r2, r3
 80030ce:	4a09      	ldr	r2, [pc, #36]	@ (80030f4 <HAL_RCC_ClockConfig+0x1cc>)
 80030d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80030d2:	4b09      	ldr	r3, [pc, #36]	@ (80030f8 <HAL_RCC_ClockConfig+0x1d0>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	4618      	mov	r0, r3
 80030d8:	f7fe fcd8 	bl	8001a8c <HAL_InitTick>

  return HAL_OK;
 80030dc:	2300      	movs	r3, #0
}
 80030de:	4618      	mov	r0, r3
 80030e0:	3710      	adds	r7, #16
 80030e2:	46bd      	mov	sp, r7
 80030e4:	bd80      	pop	{r7, pc}
 80030e6:	bf00      	nop
 80030e8:	40022000 	.word	0x40022000
 80030ec:	40021000 	.word	0x40021000
 80030f0:	08006988 	.word	0x08006988
 80030f4:	20000010 	.word	0x20000010
 80030f8:	20000014 	.word	0x20000014

080030fc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80030fc:	b480      	push	{r7}
 80030fe:	b087      	sub	sp, #28
 8003100:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003102:	2300      	movs	r3, #0
 8003104:	60fb      	str	r3, [r7, #12]
 8003106:	2300      	movs	r3, #0
 8003108:	60bb      	str	r3, [r7, #8]
 800310a:	2300      	movs	r3, #0
 800310c:	617b      	str	r3, [r7, #20]
 800310e:	2300      	movs	r3, #0
 8003110:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003112:	2300      	movs	r3, #0
 8003114:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003116:	4b1e      	ldr	r3, [pc, #120]	@ (8003190 <HAL_RCC_GetSysClockFreq+0x94>)
 8003118:	685b      	ldr	r3, [r3, #4]
 800311a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	f003 030c 	and.w	r3, r3, #12
 8003122:	2b04      	cmp	r3, #4
 8003124:	d002      	beq.n	800312c <HAL_RCC_GetSysClockFreq+0x30>
 8003126:	2b08      	cmp	r3, #8
 8003128:	d003      	beq.n	8003132 <HAL_RCC_GetSysClockFreq+0x36>
 800312a:	e027      	b.n	800317c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800312c:	4b19      	ldr	r3, [pc, #100]	@ (8003194 <HAL_RCC_GetSysClockFreq+0x98>)
 800312e:	613b      	str	r3, [r7, #16]
      break;
 8003130:	e027      	b.n	8003182 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	0c9b      	lsrs	r3, r3, #18
 8003136:	f003 030f 	and.w	r3, r3, #15
 800313a:	4a17      	ldr	r2, [pc, #92]	@ (8003198 <HAL_RCC_GetSysClockFreq+0x9c>)
 800313c:	5cd3      	ldrb	r3, [r2, r3]
 800313e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003146:	2b00      	cmp	r3, #0
 8003148:	d010      	beq.n	800316c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800314a:	4b11      	ldr	r3, [pc, #68]	@ (8003190 <HAL_RCC_GetSysClockFreq+0x94>)
 800314c:	685b      	ldr	r3, [r3, #4]
 800314e:	0c5b      	lsrs	r3, r3, #17
 8003150:	f003 0301 	and.w	r3, r3, #1
 8003154:	4a11      	ldr	r2, [pc, #68]	@ (800319c <HAL_RCC_GetSysClockFreq+0xa0>)
 8003156:	5cd3      	ldrb	r3, [r2, r3]
 8003158:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	4a0d      	ldr	r2, [pc, #52]	@ (8003194 <HAL_RCC_GetSysClockFreq+0x98>)
 800315e:	fb03 f202 	mul.w	r2, r3, r2
 8003162:	68bb      	ldr	r3, [r7, #8]
 8003164:	fbb2 f3f3 	udiv	r3, r2, r3
 8003168:	617b      	str	r3, [r7, #20]
 800316a:	e004      	b.n	8003176 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	4a0c      	ldr	r2, [pc, #48]	@ (80031a0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003170:	fb02 f303 	mul.w	r3, r2, r3
 8003174:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003176:	697b      	ldr	r3, [r7, #20]
 8003178:	613b      	str	r3, [r7, #16]
      break;
 800317a:	e002      	b.n	8003182 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800317c:	4b05      	ldr	r3, [pc, #20]	@ (8003194 <HAL_RCC_GetSysClockFreq+0x98>)
 800317e:	613b      	str	r3, [r7, #16]
      break;
 8003180:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003182:	693b      	ldr	r3, [r7, #16]
}
 8003184:	4618      	mov	r0, r3
 8003186:	371c      	adds	r7, #28
 8003188:	46bd      	mov	sp, r7
 800318a:	bc80      	pop	{r7}
 800318c:	4770      	bx	lr
 800318e:	bf00      	nop
 8003190:	40021000 	.word	0x40021000
 8003194:	007a1200 	.word	0x007a1200
 8003198:	080069a0 	.word	0x080069a0
 800319c:	080069b0 	.word	0x080069b0
 80031a0:	003d0900 	.word	0x003d0900

080031a4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80031a4:	b480      	push	{r7}
 80031a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80031a8:	4b02      	ldr	r3, [pc, #8]	@ (80031b4 <HAL_RCC_GetHCLKFreq+0x10>)
 80031aa:	681b      	ldr	r3, [r3, #0]
}
 80031ac:	4618      	mov	r0, r3
 80031ae:	46bd      	mov	sp, r7
 80031b0:	bc80      	pop	{r7}
 80031b2:	4770      	bx	lr
 80031b4:	20000010 	.word	0x20000010

080031b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80031bc:	f7ff fff2 	bl	80031a4 <HAL_RCC_GetHCLKFreq>
 80031c0:	4602      	mov	r2, r0
 80031c2:	4b05      	ldr	r3, [pc, #20]	@ (80031d8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80031c4:	685b      	ldr	r3, [r3, #4]
 80031c6:	0a1b      	lsrs	r3, r3, #8
 80031c8:	f003 0307 	and.w	r3, r3, #7
 80031cc:	4903      	ldr	r1, [pc, #12]	@ (80031dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80031ce:	5ccb      	ldrb	r3, [r1, r3]
 80031d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80031d4:	4618      	mov	r0, r3
 80031d6:	bd80      	pop	{r7, pc}
 80031d8:	40021000 	.word	0x40021000
 80031dc:	08006998 	.word	0x08006998

080031e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80031e4:	f7ff ffde 	bl	80031a4 <HAL_RCC_GetHCLKFreq>
 80031e8:	4602      	mov	r2, r0
 80031ea:	4b05      	ldr	r3, [pc, #20]	@ (8003200 <HAL_RCC_GetPCLK2Freq+0x20>)
 80031ec:	685b      	ldr	r3, [r3, #4]
 80031ee:	0adb      	lsrs	r3, r3, #11
 80031f0:	f003 0307 	and.w	r3, r3, #7
 80031f4:	4903      	ldr	r1, [pc, #12]	@ (8003204 <HAL_RCC_GetPCLK2Freq+0x24>)
 80031f6:	5ccb      	ldrb	r3, [r1, r3]
 80031f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80031fc:	4618      	mov	r0, r3
 80031fe:	bd80      	pop	{r7, pc}
 8003200:	40021000 	.word	0x40021000
 8003204:	08006998 	.word	0x08006998

08003208 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003208:	b480      	push	{r7}
 800320a:	b085      	sub	sp, #20
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003210:	4b0a      	ldr	r3, [pc, #40]	@ (800323c <RCC_Delay+0x34>)
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	4a0a      	ldr	r2, [pc, #40]	@ (8003240 <RCC_Delay+0x38>)
 8003216:	fba2 2303 	umull	r2, r3, r2, r3
 800321a:	0a5b      	lsrs	r3, r3, #9
 800321c:	687a      	ldr	r2, [r7, #4]
 800321e:	fb02 f303 	mul.w	r3, r2, r3
 8003222:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003224:	bf00      	nop
  }
  while (Delay --);
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	1e5a      	subs	r2, r3, #1
 800322a:	60fa      	str	r2, [r7, #12]
 800322c:	2b00      	cmp	r3, #0
 800322e:	d1f9      	bne.n	8003224 <RCC_Delay+0x1c>
}
 8003230:	bf00      	nop
 8003232:	bf00      	nop
 8003234:	3714      	adds	r7, #20
 8003236:	46bd      	mov	sp, r7
 8003238:	bc80      	pop	{r7}
 800323a:	4770      	bx	lr
 800323c:	20000010 	.word	0x20000010
 8003240:	10624dd3 	.word	0x10624dd3

08003244 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	b086      	sub	sp, #24
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 800324c:	2300      	movs	r3, #0
 800324e:	613b      	str	r3, [r7, #16]
 8003250:	2300      	movs	r3, #0
 8003252:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f003 0301 	and.w	r3, r3, #1
 800325c:	2b00      	cmp	r3, #0
 800325e:	d07d      	beq.n	800335c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003260:	2300      	movs	r3, #0
 8003262:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003264:	4b4f      	ldr	r3, [pc, #316]	@ (80033a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003266:	69db      	ldr	r3, [r3, #28]
 8003268:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800326c:	2b00      	cmp	r3, #0
 800326e:	d10d      	bne.n	800328c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003270:	4b4c      	ldr	r3, [pc, #304]	@ (80033a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003272:	69db      	ldr	r3, [r3, #28]
 8003274:	4a4b      	ldr	r2, [pc, #300]	@ (80033a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003276:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800327a:	61d3      	str	r3, [r2, #28]
 800327c:	4b49      	ldr	r3, [pc, #292]	@ (80033a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800327e:	69db      	ldr	r3, [r3, #28]
 8003280:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003284:	60bb      	str	r3, [r7, #8]
 8003286:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003288:	2301      	movs	r3, #1
 800328a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800328c:	4b46      	ldr	r3, [pc, #280]	@ (80033a8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003294:	2b00      	cmp	r3, #0
 8003296:	d118      	bne.n	80032ca <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003298:	4b43      	ldr	r3, [pc, #268]	@ (80033a8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	4a42      	ldr	r2, [pc, #264]	@ (80033a8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800329e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80032a2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80032a4:	f7fe fc34 	bl	8001b10 <HAL_GetTick>
 80032a8:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032aa:	e008      	b.n	80032be <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032ac:	f7fe fc30 	bl	8001b10 <HAL_GetTick>
 80032b0:	4602      	mov	r2, r0
 80032b2:	693b      	ldr	r3, [r7, #16]
 80032b4:	1ad3      	subs	r3, r2, r3
 80032b6:	2b64      	cmp	r3, #100	@ 0x64
 80032b8:	d901      	bls.n	80032be <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80032ba:	2303      	movs	r3, #3
 80032bc:	e06d      	b.n	800339a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032be:	4b3a      	ldr	r3, [pc, #232]	@ (80033a8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d0f0      	beq.n	80032ac <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80032ca:	4b36      	ldr	r3, [pc, #216]	@ (80033a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032cc:	6a1b      	ldr	r3, [r3, #32]
 80032ce:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80032d2:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d02e      	beq.n	8003338 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	685b      	ldr	r3, [r3, #4]
 80032de:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80032e2:	68fa      	ldr	r2, [r7, #12]
 80032e4:	429a      	cmp	r2, r3
 80032e6:	d027      	beq.n	8003338 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80032e8:	4b2e      	ldr	r3, [pc, #184]	@ (80033a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032ea:	6a1b      	ldr	r3, [r3, #32]
 80032ec:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80032f0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80032f2:	4b2e      	ldr	r3, [pc, #184]	@ (80033ac <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80032f4:	2201      	movs	r2, #1
 80032f6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80032f8:	4b2c      	ldr	r3, [pc, #176]	@ (80033ac <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80032fa:	2200      	movs	r2, #0
 80032fc:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80032fe:	4a29      	ldr	r2, [pc, #164]	@ (80033a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	f003 0301 	and.w	r3, r3, #1
 800330a:	2b00      	cmp	r3, #0
 800330c:	d014      	beq.n	8003338 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800330e:	f7fe fbff 	bl	8001b10 <HAL_GetTick>
 8003312:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003314:	e00a      	b.n	800332c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003316:	f7fe fbfb 	bl	8001b10 <HAL_GetTick>
 800331a:	4602      	mov	r2, r0
 800331c:	693b      	ldr	r3, [r7, #16]
 800331e:	1ad3      	subs	r3, r2, r3
 8003320:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003324:	4293      	cmp	r3, r2
 8003326:	d901      	bls.n	800332c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003328:	2303      	movs	r3, #3
 800332a:	e036      	b.n	800339a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800332c:	4b1d      	ldr	r3, [pc, #116]	@ (80033a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800332e:	6a1b      	ldr	r3, [r3, #32]
 8003330:	f003 0302 	and.w	r3, r3, #2
 8003334:	2b00      	cmp	r3, #0
 8003336:	d0ee      	beq.n	8003316 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003338:	4b1a      	ldr	r3, [pc, #104]	@ (80033a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800333a:	6a1b      	ldr	r3, [r3, #32]
 800333c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	685b      	ldr	r3, [r3, #4]
 8003344:	4917      	ldr	r1, [pc, #92]	@ (80033a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003346:	4313      	orrs	r3, r2
 8003348:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800334a:	7dfb      	ldrb	r3, [r7, #23]
 800334c:	2b01      	cmp	r3, #1
 800334e:	d105      	bne.n	800335c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003350:	4b14      	ldr	r3, [pc, #80]	@ (80033a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003352:	69db      	ldr	r3, [r3, #28]
 8003354:	4a13      	ldr	r2, [pc, #76]	@ (80033a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003356:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800335a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f003 0302 	and.w	r3, r3, #2
 8003364:	2b00      	cmp	r3, #0
 8003366:	d008      	beq.n	800337a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003368:	4b0e      	ldr	r3, [pc, #56]	@ (80033a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800336a:	685b      	ldr	r3, [r3, #4]
 800336c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	689b      	ldr	r3, [r3, #8]
 8003374:	490b      	ldr	r1, [pc, #44]	@ (80033a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003376:	4313      	orrs	r3, r2
 8003378:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f003 0310 	and.w	r3, r3, #16
 8003382:	2b00      	cmp	r3, #0
 8003384:	d008      	beq.n	8003398 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003386:	4b07      	ldr	r3, [pc, #28]	@ (80033a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003388:	685b      	ldr	r3, [r3, #4]
 800338a:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	68db      	ldr	r3, [r3, #12]
 8003392:	4904      	ldr	r1, [pc, #16]	@ (80033a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003394:	4313      	orrs	r3, r2
 8003396:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003398:	2300      	movs	r3, #0
}
 800339a:	4618      	mov	r0, r3
 800339c:	3718      	adds	r7, #24
 800339e:	46bd      	mov	sp, r7
 80033a0:	bd80      	pop	{r7, pc}
 80033a2:	bf00      	nop
 80033a4:	40021000 	.word	0x40021000
 80033a8:	40007000 	.word	0x40007000
 80033ac:	42420440 	.word	0x42420440

080033b0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	b088      	sub	sp, #32
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 80033b8:	2300      	movs	r3, #0
 80033ba:	617b      	str	r3, [r7, #20]
 80033bc:	2300      	movs	r3, #0
 80033be:	61fb      	str	r3, [r7, #28]
 80033c0:	2300      	movs	r3, #0
 80033c2:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 80033c4:	2300      	movs	r3, #0
 80033c6:	60fb      	str	r3, [r7, #12]
 80033c8:	2300      	movs	r3, #0
 80033ca:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2b10      	cmp	r3, #16
 80033d0:	d00a      	beq.n	80033e8 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	2b10      	cmp	r3, #16
 80033d6:	f200 808a 	bhi.w	80034ee <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	2b01      	cmp	r3, #1
 80033de:	d045      	beq.n	800346c <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2b02      	cmp	r3, #2
 80033e4:	d075      	beq.n	80034d2 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 80033e6:	e082      	b.n	80034ee <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 80033e8:	4b46      	ldr	r3, [pc, #280]	@ (8003504 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80033ea:	685b      	ldr	r3, [r3, #4]
 80033ec:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 80033ee:	4b45      	ldr	r3, [pc, #276]	@ (8003504 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d07b      	beq.n	80034f2 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	0c9b      	lsrs	r3, r3, #18
 80033fe:	f003 030f 	and.w	r3, r3, #15
 8003402:	4a41      	ldr	r2, [pc, #260]	@ (8003508 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8003404:	5cd3      	ldrb	r3, [r2, r3]
 8003406:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800340e:	2b00      	cmp	r3, #0
 8003410:	d015      	beq.n	800343e <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003412:	4b3c      	ldr	r3, [pc, #240]	@ (8003504 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003414:	685b      	ldr	r3, [r3, #4]
 8003416:	0c5b      	lsrs	r3, r3, #17
 8003418:	f003 0301 	and.w	r3, r3, #1
 800341c:	4a3b      	ldr	r2, [pc, #236]	@ (800350c <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 800341e:	5cd3      	ldrb	r3, [r2, r3]
 8003420:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003428:	2b00      	cmp	r3, #0
 800342a:	d00d      	beq.n	8003448 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 800342c:	4a38      	ldr	r2, [pc, #224]	@ (8003510 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 800342e:	697b      	ldr	r3, [r7, #20]
 8003430:	fbb2 f2f3 	udiv	r2, r2, r3
 8003434:	693b      	ldr	r3, [r7, #16]
 8003436:	fb02 f303 	mul.w	r3, r2, r3
 800343a:	61fb      	str	r3, [r7, #28]
 800343c:	e004      	b.n	8003448 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800343e:	693b      	ldr	r3, [r7, #16]
 8003440:	4a34      	ldr	r2, [pc, #208]	@ (8003514 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8003442:	fb02 f303 	mul.w	r3, r2, r3
 8003446:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8003448:	4b2e      	ldr	r3, [pc, #184]	@ (8003504 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800344a:	685b      	ldr	r3, [r3, #4]
 800344c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003450:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003454:	d102      	bne.n	800345c <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8003456:	69fb      	ldr	r3, [r7, #28]
 8003458:	61bb      	str	r3, [r7, #24]
      break;
 800345a:	e04a      	b.n	80034f2 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 800345c:	69fb      	ldr	r3, [r7, #28]
 800345e:	005b      	lsls	r3, r3, #1
 8003460:	4a2d      	ldr	r2, [pc, #180]	@ (8003518 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003462:	fba2 2303 	umull	r2, r3, r2, r3
 8003466:	085b      	lsrs	r3, r3, #1
 8003468:	61bb      	str	r3, [r7, #24]
      break;
 800346a:	e042      	b.n	80034f2 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 800346c:	4b25      	ldr	r3, [pc, #148]	@ (8003504 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800346e:	6a1b      	ldr	r3, [r3, #32]
 8003470:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003478:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800347c:	d108      	bne.n	8003490 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	f003 0302 	and.w	r3, r3, #2
 8003484:	2b00      	cmp	r3, #0
 8003486:	d003      	beq.n	8003490 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8003488:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800348c:	61bb      	str	r3, [r7, #24]
 800348e:	e01f      	b.n	80034d0 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003496:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800349a:	d109      	bne.n	80034b0 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 800349c:	4b19      	ldr	r3, [pc, #100]	@ (8003504 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800349e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034a0:	f003 0302 	and.w	r3, r3, #2
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d003      	beq.n	80034b0 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 80034a8:	f649 4340 	movw	r3, #40000	@ 0x9c40
 80034ac:	61bb      	str	r3, [r7, #24]
 80034ae:	e00f      	b.n	80034d0 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80034b6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80034ba:	d11c      	bne.n	80034f6 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 80034bc:	4b11      	ldr	r3, [pc, #68]	@ (8003504 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d016      	beq.n	80034f6 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 80034c8:	f24f 4324 	movw	r3, #62500	@ 0xf424
 80034cc:	61bb      	str	r3, [r7, #24]
      break;
 80034ce:	e012      	b.n	80034f6 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 80034d0:	e011      	b.n	80034f6 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80034d2:	f7ff fe85 	bl	80031e0 <HAL_RCC_GetPCLK2Freq>
 80034d6:	4602      	mov	r2, r0
 80034d8:	4b0a      	ldr	r3, [pc, #40]	@ (8003504 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80034da:	685b      	ldr	r3, [r3, #4]
 80034dc:	0b9b      	lsrs	r3, r3, #14
 80034de:	f003 0303 	and.w	r3, r3, #3
 80034e2:	3301      	adds	r3, #1
 80034e4:	005b      	lsls	r3, r3, #1
 80034e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80034ea:	61bb      	str	r3, [r7, #24]
      break;
 80034ec:	e004      	b.n	80034f8 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80034ee:	bf00      	nop
 80034f0:	e002      	b.n	80034f8 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80034f2:	bf00      	nop
 80034f4:	e000      	b.n	80034f8 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80034f6:	bf00      	nop
    }
  }
  return (frequency);
 80034f8:	69bb      	ldr	r3, [r7, #24]
}
 80034fa:	4618      	mov	r0, r3
 80034fc:	3720      	adds	r7, #32
 80034fe:	46bd      	mov	sp, r7
 8003500:	bd80      	pop	{r7, pc}
 8003502:	bf00      	nop
 8003504:	40021000 	.word	0x40021000
 8003508:	080069b4 	.word	0x080069b4
 800350c:	080069c4 	.word	0x080069c4
 8003510:	007a1200 	.word	0x007a1200
 8003514:	003d0900 	.word	0x003d0900
 8003518:	aaaaaaab 	.word	0xaaaaaaab

0800351c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800351c:	b580      	push	{r7, lr}
 800351e:	b082      	sub	sp, #8
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2b00      	cmp	r3, #0
 8003528:	d101      	bne.n	800352e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800352a:	2301      	movs	r3, #1
 800352c:	e042      	b.n	80035b4 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003534:	b2db      	uxtb	r3, r3
 8003536:	2b00      	cmp	r3, #0
 8003538:	d106      	bne.n	8003548 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	2200      	movs	r2, #0
 800353e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003542:	6878      	ldr	r0, [r7, #4]
 8003544:	f7fe f926 	bl	8001794 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2224      	movs	r2, #36	@ 0x24
 800354c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	68da      	ldr	r2, [r3, #12]
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800355e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003560:	6878      	ldr	r0, [r7, #4]
 8003562:	f000 f91d 	bl	80037a0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	691a      	ldr	r2, [r3, #16]
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003574:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	695a      	ldr	r2, [r3, #20]
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003584:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	68da      	ldr	r2, [r3, #12]
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003594:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	2200      	movs	r2, #0
 800359a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2220      	movs	r2, #32
 80035a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2220      	movs	r2, #32
 80035a8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2200      	movs	r2, #0
 80035b0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80035b2:	2300      	movs	r3, #0
}
 80035b4:	4618      	mov	r0, r3
 80035b6:	3708      	adds	r7, #8
 80035b8:	46bd      	mov	sp, r7
 80035ba:	bd80      	pop	{r7, pc}

080035bc <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	b08a      	sub	sp, #40	@ 0x28
 80035c0:	af02      	add	r7, sp, #8
 80035c2:	60f8      	str	r0, [r7, #12]
 80035c4:	60b9      	str	r1, [r7, #8]
 80035c6:	603b      	str	r3, [r7, #0]
 80035c8:	4613      	mov	r3, r2
 80035ca:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80035cc:	2300      	movs	r3, #0
 80035ce:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80035d6:	b2db      	uxtb	r3, r3
 80035d8:	2b20      	cmp	r3, #32
 80035da:	d16d      	bne.n	80036b8 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80035dc:	68bb      	ldr	r3, [r7, #8]
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d002      	beq.n	80035e8 <HAL_UART_Transmit+0x2c>
 80035e2:	88fb      	ldrh	r3, [r7, #6]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d101      	bne.n	80035ec <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80035e8:	2301      	movs	r3, #1
 80035ea:	e066      	b.n	80036ba <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	2200      	movs	r2, #0
 80035f0:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	2221      	movs	r2, #33	@ 0x21
 80035f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80035fa:	f7fe fa89 	bl	8001b10 <HAL_GetTick>
 80035fe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	88fa      	ldrh	r2, [r7, #6]
 8003604:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	88fa      	ldrh	r2, [r7, #6]
 800360a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	689b      	ldr	r3, [r3, #8]
 8003610:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003614:	d108      	bne.n	8003628 <HAL_UART_Transmit+0x6c>
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	691b      	ldr	r3, [r3, #16]
 800361a:	2b00      	cmp	r3, #0
 800361c:	d104      	bne.n	8003628 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800361e:	2300      	movs	r3, #0
 8003620:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003622:	68bb      	ldr	r3, [r7, #8]
 8003624:	61bb      	str	r3, [r7, #24]
 8003626:	e003      	b.n	8003630 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003628:	68bb      	ldr	r3, [r7, #8]
 800362a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800362c:	2300      	movs	r3, #0
 800362e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003630:	e02a      	b.n	8003688 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	9300      	str	r3, [sp, #0]
 8003636:	697b      	ldr	r3, [r7, #20]
 8003638:	2200      	movs	r2, #0
 800363a:	2180      	movs	r1, #128	@ 0x80
 800363c:	68f8      	ldr	r0, [r7, #12]
 800363e:	f000 f840 	bl	80036c2 <UART_WaitOnFlagUntilTimeout>
 8003642:	4603      	mov	r3, r0
 8003644:	2b00      	cmp	r3, #0
 8003646:	d001      	beq.n	800364c <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8003648:	2303      	movs	r3, #3
 800364a:	e036      	b.n	80036ba <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 800364c:	69fb      	ldr	r3, [r7, #28]
 800364e:	2b00      	cmp	r3, #0
 8003650:	d10b      	bne.n	800366a <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003652:	69bb      	ldr	r3, [r7, #24]
 8003654:	881b      	ldrh	r3, [r3, #0]
 8003656:	461a      	mov	r2, r3
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003660:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003662:	69bb      	ldr	r3, [r7, #24]
 8003664:	3302      	adds	r3, #2
 8003666:	61bb      	str	r3, [r7, #24]
 8003668:	e007      	b.n	800367a <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800366a:	69fb      	ldr	r3, [r7, #28]
 800366c:	781a      	ldrb	r2, [r3, #0]
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003674:	69fb      	ldr	r3, [r7, #28]
 8003676:	3301      	adds	r3, #1
 8003678:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800367e:	b29b      	uxth	r3, r3
 8003680:	3b01      	subs	r3, #1
 8003682:	b29a      	uxth	r2, r3
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800368c:	b29b      	uxth	r3, r3
 800368e:	2b00      	cmp	r3, #0
 8003690:	d1cf      	bne.n	8003632 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003692:	683b      	ldr	r3, [r7, #0]
 8003694:	9300      	str	r3, [sp, #0]
 8003696:	697b      	ldr	r3, [r7, #20]
 8003698:	2200      	movs	r2, #0
 800369a:	2140      	movs	r1, #64	@ 0x40
 800369c:	68f8      	ldr	r0, [r7, #12]
 800369e:	f000 f810 	bl	80036c2 <UART_WaitOnFlagUntilTimeout>
 80036a2:	4603      	mov	r3, r0
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d001      	beq.n	80036ac <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 80036a8:	2303      	movs	r3, #3
 80036aa:	e006      	b.n	80036ba <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	2220      	movs	r2, #32
 80036b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80036b4:	2300      	movs	r3, #0
 80036b6:	e000      	b.n	80036ba <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80036b8:	2302      	movs	r3, #2
  }
}
 80036ba:	4618      	mov	r0, r3
 80036bc:	3720      	adds	r7, #32
 80036be:	46bd      	mov	sp, r7
 80036c0:	bd80      	pop	{r7, pc}

080036c2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80036c2:	b580      	push	{r7, lr}
 80036c4:	b090      	sub	sp, #64	@ 0x40
 80036c6:	af00      	add	r7, sp, #0
 80036c8:	60f8      	str	r0, [r7, #12]
 80036ca:	60b9      	str	r1, [r7, #8]
 80036cc:	603b      	str	r3, [r7, #0]
 80036ce:	4613      	mov	r3, r2
 80036d0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80036d2:	e050      	b.n	8003776 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036d4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80036d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036da:	d04c      	beq.n	8003776 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80036dc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d007      	beq.n	80036f2 <UART_WaitOnFlagUntilTimeout+0x30>
 80036e2:	f7fe fa15 	bl	8001b10 <HAL_GetTick>
 80036e6:	4602      	mov	r2, r0
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	1ad3      	subs	r3, r2, r3
 80036ec:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80036ee:	429a      	cmp	r2, r3
 80036f0:	d241      	bcs.n	8003776 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	330c      	adds	r3, #12
 80036f8:	62bb      	str	r3, [r7, #40]	@ 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036fc:	e853 3f00 	ldrex	r3, [r3]
 8003700:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003702:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003704:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8003708:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	330c      	adds	r3, #12
 8003710:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003712:	637a      	str	r2, [r7, #52]	@ 0x34
 8003714:	633b      	str	r3, [r7, #48]	@ 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003716:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003718:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800371a:	e841 2300 	strex	r3, r2, [r1]
 800371e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8003720:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003722:	2b00      	cmp	r3, #0
 8003724:	d1e5      	bne.n	80036f2 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	3314      	adds	r3, #20
 800372c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800372e:	697b      	ldr	r3, [r7, #20]
 8003730:	e853 3f00 	ldrex	r3, [r3]
 8003734:	613b      	str	r3, [r7, #16]
   return(result);
 8003736:	693b      	ldr	r3, [r7, #16]
 8003738:	f023 0301 	bic.w	r3, r3, #1
 800373c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	3314      	adds	r3, #20
 8003744:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003746:	623a      	str	r2, [r7, #32]
 8003748:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800374a:	69f9      	ldr	r1, [r7, #28]
 800374c:	6a3a      	ldr	r2, [r7, #32]
 800374e:	e841 2300 	strex	r3, r2, [r1]
 8003752:	61bb      	str	r3, [r7, #24]
   return(result);
 8003754:	69bb      	ldr	r3, [r7, #24]
 8003756:	2b00      	cmp	r3, #0
 8003758:	d1e5      	bne.n	8003726 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	2220      	movs	r2, #32
 800375e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	2220      	movs	r2, #32
 8003766:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	2200      	movs	r2, #0
 800376e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_TIMEOUT;
 8003772:	2303      	movs	r3, #3
 8003774:	e00f      	b.n	8003796 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	681a      	ldr	r2, [r3, #0]
 800377c:	68bb      	ldr	r3, [r7, #8]
 800377e:	4013      	ands	r3, r2
 8003780:	68ba      	ldr	r2, [r7, #8]
 8003782:	429a      	cmp	r2, r3
 8003784:	bf0c      	ite	eq
 8003786:	2301      	moveq	r3, #1
 8003788:	2300      	movne	r3, #0
 800378a:	b2db      	uxtb	r3, r3
 800378c:	461a      	mov	r2, r3
 800378e:	79fb      	ldrb	r3, [r7, #7]
 8003790:	429a      	cmp	r2, r3
 8003792:	d09f      	beq.n	80036d4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003794:	2300      	movs	r3, #0
}
 8003796:	4618      	mov	r0, r3
 8003798:	3740      	adds	r7, #64	@ 0x40
 800379a:	46bd      	mov	sp, r7
 800379c:	bd80      	pop	{r7, pc}
	...

080037a0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b084      	sub	sp, #16
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	691b      	ldr	r3, [r3, #16]
 80037ae:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	68da      	ldr	r2, [r3, #12]
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	430a      	orrs	r2, r1
 80037bc:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	689a      	ldr	r2, [r3, #8]
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	691b      	ldr	r3, [r3, #16]
 80037c6:	431a      	orrs	r2, r3
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	695b      	ldr	r3, [r3, #20]
 80037cc:	4313      	orrs	r3, r2
 80037ce:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	68db      	ldr	r3, [r3, #12]
 80037d6:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80037da:	f023 030c 	bic.w	r3, r3, #12
 80037de:	687a      	ldr	r2, [r7, #4]
 80037e0:	6812      	ldr	r2, [r2, #0]
 80037e2:	68b9      	ldr	r1, [r7, #8]
 80037e4:	430b      	orrs	r3, r1
 80037e6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	695b      	ldr	r3, [r3, #20]
 80037ee:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	699a      	ldr	r2, [r3, #24]
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	430a      	orrs	r2, r1
 80037fc:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	4a2c      	ldr	r2, [pc, #176]	@ (80038b4 <UART_SetConfig+0x114>)
 8003804:	4293      	cmp	r3, r2
 8003806:	d103      	bne.n	8003810 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003808:	f7ff fcea 	bl	80031e0 <HAL_RCC_GetPCLK2Freq>
 800380c:	60f8      	str	r0, [r7, #12]
 800380e:	e002      	b.n	8003816 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003810:	f7ff fcd2 	bl	80031b8 <HAL_RCC_GetPCLK1Freq>
 8003814:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003816:	68fa      	ldr	r2, [r7, #12]
 8003818:	4613      	mov	r3, r2
 800381a:	009b      	lsls	r3, r3, #2
 800381c:	4413      	add	r3, r2
 800381e:	009a      	lsls	r2, r3, #2
 8003820:	441a      	add	r2, r3
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	685b      	ldr	r3, [r3, #4]
 8003826:	009b      	lsls	r3, r3, #2
 8003828:	fbb2 f3f3 	udiv	r3, r2, r3
 800382c:	4a22      	ldr	r2, [pc, #136]	@ (80038b8 <UART_SetConfig+0x118>)
 800382e:	fba2 2303 	umull	r2, r3, r2, r3
 8003832:	095b      	lsrs	r3, r3, #5
 8003834:	0119      	lsls	r1, r3, #4
 8003836:	68fa      	ldr	r2, [r7, #12]
 8003838:	4613      	mov	r3, r2
 800383a:	009b      	lsls	r3, r3, #2
 800383c:	4413      	add	r3, r2
 800383e:	009a      	lsls	r2, r3, #2
 8003840:	441a      	add	r2, r3
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	685b      	ldr	r3, [r3, #4]
 8003846:	009b      	lsls	r3, r3, #2
 8003848:	fbb2 f2f3 	udiv	r2, r2, r3
 800384c:	4b1a      	ldr	r3, [pc, #104]	@ (80038b8 <UART_SetConfig+0x118>)
 800384e:	fba3 0302 	umull	r0, r3, r3, r2
 8003852:	095b      	lsrs	r3, r3, #5
 8003854:	2064      	movs	r0, #100	@ 0x64
 8003856:	fb00 f303 	mul.w	r3, r0, r3
 800385a:	1ad3      	subs	r3, r2, r3
 800385c:	011b      	lsls	r3, r3, #4
 800385e:	3332      	adds	r3, #50	@ 0x32
 8003860:	4a15      	ldr	r2, [pc, #84]	@ (80038b8 <UART_SetConfig+0x118>)
 8003862:	fba2 2303 	umull	r2, r3, r2, r3
 8003866:	095b      	lsrs	r3, r3, #5
 8003868:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800386c:	4419      	add	r1, r3
 800386e:	68fa      	ldr	r2, [r7, #12]
 8003870:	4613      	mov	r3, r2
 8003872:	009b      	lsls	r3, r3, #2
 8003874:	4413      	add	r3, r2
 8003876:	009a      	lsls	r2, r3, #2
 8003878:	441a      	add	r2, r3
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	685b      	ldr	r3, [r3, #4]
 800387e:	009b      	lsls	r3, r3, #2
 8003880:	fbb2 f2f3 	udiv	r2, r2, r3
 8003884:	4b0c      	ldr	r3, [pc, #48]	@ (80038b8 <UART_SetConfig+0x118>)
 8003886:	fba3 0302 	umull	r0, r3, r3, r2
 800388a:	095b      	lsrs	r3, r3, #5
 800388c:	2064      	movs	r0, #100	@ 0x64
 800388e:	fb00 f303 	mul.w	r3, r0, r3
 8003892:	1ad3      	subs	r3, r2, r3
 8003894:	011b      	lsls	r3, r3, #4
 8003896:	3332      	adds	r3, #50	@ 0x32
 8003898:	4a07      	ldr	r2, [pc, #28]	@ (80038b8 <UART_SetConfig+0x118>)
 800389a:	fba2 2303 	umull	r2, r3, r2, r3
 800389e:	095b      	lsrs	r3, r3, #5
 80038a0:	f003 020f 	and.w	r2, r3, #15
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	440a      	add	r2, r1
 80038aa:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80038ac:	bf00      	nop
 80038ae:	3710      	adds	r7, #16
 80038b0:	46bd      	mov	sp, r7
 80038b2:	bd80      	pop	{r7, pc}
 80038b4:	40013800 	.word	0x40013800
 80038b8:	51eb851f 	.word	0x51eb851f

080038bc <__cvt>:
 80038bc:	2b00      	cmp	r3, #0
 80038be:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80038c2:	461d      	mov	r5, r3
 80038c4:	bfbb      	ittet	lt
 80038c6:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 80038ca:	461d      	movlt	r5, r3
 80038cc:	2300      	movge	r3, #0
 80038ce:	232d      	movlt	r3, #45	@ 0x2d
 80038d0:	b088      	sub	sp, #32
 80038d2:	4614      	mov	r4, r2
 80038d4:	bfb8      	it	lt
 80038d6:	4614      	movlt	r4, r2
 80038d8:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80038da:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 80038dc:	7013      	strb	r3, [r2, #0]
 80038de:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80038e0:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 80038e4:	f023 0820 	bic.w	r8, r3, #32
 80038e8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80038ec:	d005      	beq.n	80038fa <__cvt+0x3e>
 80038ee:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80038f2:	d100      	bne.n	80038f6 <__cvt+0x3a>
 80038f4:	3601      	adds	r6, #1
 80038f6:	2302      	movs	r3, #2
 80038f8:	e000      	b.n	80038fc <__cvt+0x40>
 80038fa:	2303      	movs	r3, #3
 80038fc:	aa07      	add	r2, sp, #28
 80038fe:	9204      	str	r2, [sp, #16]
 8003900:	aa06      	add	r2, sp, #24
 8003902:	e9cd a202 	strd	sl, r2, [sp, #8]
 8003906:	e9cd 3600 	strd	r3, r6, [sp]
 800390a:	4622      	mov	r2, r4
 800390c:	462b      	mov	r3, r5
 800390e:	f000 fe6f 	bl	80045f0 <_dtoa_r>
 8003912:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8003916:	4607      	mov	r7, r0
 8003918:	d119      	bne.n	800394e <__cvt+0x92>
 800391a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800391c:	07db      	lsls	r3, r3, #31
 800391e:	d50e      	bpl.n	800393e <__cvt+0x82>
 8003920:	eb00 0906 	add.w	r9, r0, r6
 8003924:	2200      	movs	r2, #0
 8003926:	2300      	movs	r3, #0
 8003928:	4620      	mov	r0, r4
 800392a:	4629      	mov	r1, r5
 800392c:	f7fd f83c 	bl	80009a8 <__aeabi_dcmpeq>
 8003930:	b108      	cbz	r0, 8003936 <__cvt+0x7a>
 8003932:	f8cd 901c 	str.w	r9, [sp, #28]
 8003936:	2230      	movs	r2, #48	@ 0x30
 8003938:	9b07      	ldr	r3, [sp, #28]
 800393a:	454b      	cmp	r3, r9
 800393c:	d31e      	bcc.n	800397c <__cvt+0xc0>
 800393e:	4638      	mov	r0, r7
 8003940:	9b07      	ldr	r3, [sp, #28]
 8003942:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8003944:	1bdb      	subs	r3, r3, r7
 8003946:	6013      	str	r3, [r2, #0]
 8003948:	b008      	add	sp, #32
 800394a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800394e:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8003952:	eb00 0906 	add.w	r9, r0, r6
 8003956:	d1e5      	bne.n	8003924 <__cvt+0x68>
 8003958:	7803      	ldrb	r3, [r0, #0]
 800395a:	2b30      	cmp	r3, #48	@ 0x30
 800395c:	d10a      	bne.n	8003974 <__cvt+0xb8>
 800395e:	2200      	movs	r2, #0
 8003960:	2300      	movs	r3, #0
 8003962:	4620      	mov	r0, r4
 8003964:	4629      	mov	r1, r5
 8003966:	f7fd f81f 	bl	80009a8 <__aeabi_dcmpeq>
 800396a:	b918      	cbnz	r0, 8003974 <__cvt+0xb8>
 800396c:	f1c6 0601 	rsb	r6, r6, #1
 8003970:	f8ca 6000 	str.w	r6, [sl]
 8003974:	f8da 3000 	ldr.w	r3, [sl]
 8003978:	4499      	add	r9, r3
 800397a:	e7d3      	b.n	8003924 <__cvt+0x68>
 800397c:	1c59      	adds	r1, r3, #1
 800397e:	9107      	str	r1, [sp, #28]
 8003980:	701a      	strb	r2, [r3, #0]
 8003982:	e7d9      	b.n	8003938 <__cvt+0x7c>

08003984 <__exponent>:
 8003984:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003986:	2900      	cmp	r1, #0
 8003988:	bfb6      	itet	lt
 800398a:	232d      	movlt	r3, #45	@ 0x2d
 800398c:	232b      	movge	r3, #43	@ 0x2b
 800398e:	4249      	neglt	r1, r1
 8003990:	2909      	cmp	r1, #9
 8003992:	7002      	strb	r2, [r0, #0]
 8003994:	7043      	strb	r3, [r0, #1]
 8003996:	dd29      	ble.n	80039ec <__exponent+0x68>
 8003998:	f10d 0307 	add.w	r3, sp, #7
 800399c:	461d      	mov	r5, r3
 800399e:	270a      	movs	r7, #10
 80039a0:	fbb1 f6f7 	udiv	r6, r1, r7
 80039a4:	461a      	mov	r2, r3
 80039a6:	fb07 1416 	mls	r4, r7, r6, r1
 80039aa:	3430      	adds	r4, #48	@ 0x30
 80039ac:	f802 4c01 	strb.w	r4, [r2, #-1]
 80039b0:	460c      	mov	r4, r1
 80039b2:	2c63      	cmp	r4, #99	@ 0x63
 80039b4:	4631      	mov	r1, r6
 80039b6:	f103 33ff 	add.w	r3, r3, #4294967295
 80039ba:	dcf1      	bgt.n	80039a0 <__exponent+0x1c>
 80039bc:	3130      	adds	r1, #48	@ 0x30
 80039be:	1e94      	subs	r4, r2, #2
 80039c0:	f803 1c01 	strb.w	r1, [r3, #-1]
 80039c4:	4623      	mov	r3, r4
 80039c6:	1c41      	adds	r1, r0, #1
 80039c8:	42ab      	cmp	r3, r5
 80039ca:	d30a      	bcc.n	80039e2 <__exponent+0x5e>
 80039cc:	f10d 0309 	add.w	r3, sp, #9
 80039d0:	1a9b      	subs	r3, r3, r2
 80039d2:	42ac      	cmp	r4, r5
 80039d4:	bf88      	it	hi
 80039d6:	2300      	movhi	r3, #0
 80039d8:	3302      	adds	r3, #2
 80039da:	4403      	add	r3, r0
 80039dc:	1a18      	subs	r0, r3, r0
 80039de:	b003      	add	sp, #12
 80039e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80039e2:	f813 6b01 	ldrb.w	r6, [r3], #1
 80039e6:	f801 6f01 	strb.w	r6, [r1, #1]!
 80039ea:	e7ed      	b.n	80039c8 <__exponent+0x44>
 80039ec:	2330      	movs	r3, #48	@ 0x30
 80039ee:	3130      	adds	r1, #48	@ 0x30
 80039f0:	7083      	strb	r3, [r0, #2]
 80039f2:	70c1      	strb	r1, [r0, #3]
 80039f4:	1d03      	adds	r3, r0, #4
 80039f6:	e7f1      	b.n	80039dc <__exponent+0x58>

080039f8 <_printf_float>:
 80039f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80039fc:	b091      	sub	sp, #68	@ 0x44
 80039fe:	460c      	mov	r4, r1
 8003a00:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8003a04:	4616      	mov	r6, r2
 8003a06:	461f      	mov	r7, r3
 8003a08:	4605      	mov	r5, r0
 8003a0a:	f000 fce1 	bl	80043d0 <_localeconv_r>
 8003a0e:	6803      	ldr	r3, [r0, #0]
 8003a10:	4618      	mov	r0, r3
 8003a12:	9308      	str	r3, [sp, #32]
 8003a14:	f7fc fb9c 	bl	8000150 <strlen>
 8003a18:	2300      	movs	r3, #0
 8003a1a:	930e      	str	r3, [sp, #56]	@ 0x38
 8003a1c:	f8d8 3000 	ldr.w	r3, [r8]
 8003a20:	9009      	str	r0, [sp, #36]	@ 0x24
 8003a22:	3307      	adds	r3, #7
 8003a24:	f023 0307 	bic.w	r3, r3, #7
 8003a28:	f103 0208 	add.w	r2, r3, #8
 8003a2c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8003a30:	f8d4 b000 	ldr.w	fp, [r4]
 8003a34:	f8c8 2000 	str.w	r2, [r8]
 8003a38:	e9d3 8900 	ldrd	r8, r9, [r3]
 8003a3c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8003a40:	930b      	str	r3, [sp, #44]	@ 0x2c
 8003a42:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8003a46:	f04f 32ff 	mov.w	r2, #4294967295
 8003a4a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8003a4e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8003a52:	4b9c      	ldr	r3, [pc, #624]	@ (8003cc4 <_printf_float+0x2cc>)
 8003a54:	f7fc ffda 	bl	8000a0c <__aeabi_dcmpun>
 8003a58:	bb70      	cbnz	r0, 8003ab8 <_printf_float+0xc0>
 8003a5a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8003a5e:	f04f 32ff 	mov.w	r2, #4294967295
 8003a62:	4b98      	ldr	r3, [pc, #608]	@ (8003cc4 <_printf_float+0x2cc>)
 8003a64:	f7fc ffb4 	bl	80009d0 <__aeabi_dcmple>
 8003a68:	bb30      	cbnz	r0, 8003ab8 <_printf_float+0xc0>
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	2300      	movs	r3, #0
 8003a6e:	4640      	mov	r0, r8
 8003a70:	4649      	mov	r1, r9
 8003a72:	f7fc ffa3 	bl	80009bc <__aeabi_dcmplt>
 8003a76:	b110      	cbz	r0, 8003a7e <_printf_float+0x86>
 8003a78:	232d      	movs	r3, #45	@ 0x2d
 8003a7a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003a7e:	4a92      	ldr	r2, [pc, #584]	@ (8003cc8 <_printf_float+0x2d0>)
 8003a80:	4b92      	ldr	r3, [pc, #584]	@ (8003ccc <_printf_float+0x2d4>)
 8003a82:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8003a86:	bf8c      	ite	hi
 8003a88:	4690      	movhi	r8, r2
 8003a8a:	4698      	movls	r8, r3
 8003a8c:	2303      	movs	r3, #3
 8003a8e:	f04f 0900 	mov.w	r9, #0
 8003a92:	6123      	str	r3, [r4, #16]
 8003a94:	f02b 0304 	bic.w	r3, fp, #4
 8003a98:	6023      	str	r3, [r4, #0]
 8003a9a:	4633      	mov	r3, r6
 8003a9c:	4621      	mov	r1, r4
 8003a9e:	4628      	mov	r0, r5
 8003aa0:	9700      	str	r7, [sp, #0]
 8003aa2:	aa0f      	add	r2, sp, #60	@ 0x3c
 8003aa4:	f000 f9d4 	bl	8003e50 <_printf_common>
 8003aa8:	3001      	adds	r0, #1
 8003aaa:	f040 8090 	bne.w	8003bce <_printf_float+0x1d6>
 8003aae:	f04f 30ff 	mov.w	r0, #4294967295
 8003ab2:	b011      	add	sp, #68	@ 0x44
 8003ab4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003ab8:	4642      	mov	r2, r8
 8003aba:	464b      	mov	r3, r9
 8003abc:	4640      	mov	r0, r8
 8003abe:	4649      	mov	r1, r9
 8003ac0:	f7fc ffa4 	bl	8000a0c <__aeabi_dcmpun>
 8003ac4:	b148      	cbz	r0, 8003ada <_printf_float+0xe2>
 8003ac6:	464b      	mov	r3, r9
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	bfb8      	it	lt
 8003acc:	232d      	movlt	r3, #45	@ 0x2d
 8003ace:	4a80      	ldr	r2, [pc, #512]	@ (8003cd0 <_printf_float+0x2d8>)
 8003ad0:	bfb8      	it	lt
 8003ad2:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8003ad6:	4b7f      	ldr	r3, [pc, #508]	@ (8003cd4 <_printf_float+0x2dc>)
 8003ad8:	e7d3      	b.n	8003a82 <_printf_float+0x8a>
 8003ada:	6863      	ldr	r3, [r4, #4]
 8003adc:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8003ae0:	1c5a      	adds	r2, r3, #1
 8003ae2:	d13f      	bne.n	8003b64 <_printf_float+0x16c>
 8003ae4:	2306      	movs	r3, #6
 8003ae6:	6063      	str	r3, [r4, #4]
 8003ae8:	2200      	movs	r2, #0
 8003aea:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8003aee:	6023      	str	r3, [r4, #0]
 8003af0:	9206      	str	r2, [sp, #24]
 8003af2:	aa0e      	add	r2, sp, #56	@ 0x38
 8003af4:	e9cd a204 	strd	sl, r2, [sp, #16]
 8003af8:	aa0d      	add	r2, sp, #52	@ 0x34
 8003afa:	9203      	str	r2, [sp, #12]
 8003afc:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8003b00:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8003b04:	6863      	ldr	r3, [r4, #4]
 8003b06:	4642      	mov	r2, r8
 8003b08:	9300      	str	r3, [sp, #0]
 8003b0a:	4628      	mov	r0, r5
 8003b0c:	464b      	mov	r3, r9
 8003b0e:	910a      	str	r1, [sp, #40]	@ 0x28
 8003b10:	f7ff fed4 	bl	80038bc <__cvt>
 8003b14:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8003b16:	4680      	mov	r8, r0
 8003b18:	2947      	cmp	r1, #71	@ 0x47
 8003b1a:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8003b1c:	d128      	bne.n	8003b70 <_printf_float+0x178>
 8003b1e:	1cc8      	adds	r0, r1, #3
 8003b20:	db02      	blt.n	8003b28 <_printf_float+0x130>
 8003b22:	6863      	ldr	r3, [r4, #4]
 8003b24:	4299      	cmp	r1, r3
 8003b26:	dd40      	ble.n	8003baa <_printf_float+0x1b2>
 8003b28:	f1aa 0a02 	sub.w	sl, sl, #2
 8003b2c:	fa5f fa8a 	uxtb.w	sl, sl
 8003b30:	4652      	mov	r2, sl
 8003b32:	3901      	subs	r1, #1
 8003b34:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8003b38:	910d      	str	r1, [sp, #52]	@ 0x34
 8003b3a:	f7ff ff23 	bl	8003984 <__exponent>
 8003b3e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8003b40:	4681      	mov	r9, r0
 8003b42:	1813      	adds	r3, r2, r0
 8003b44:	2a01      	cmp	r2, #1
 8003b46:	6123      	str	r3, [r4, #16]
 8003b48:	dc02      	bgt.n	8003b50 <_printf_float+0x158>
 8003b4a:	6822      	ldr	r2, [r4, #0]
 8003b4c:	07d2      	lsls	r2, r2, #31
 8003b4e:	d501      	bpl.n	8003b54 <_printf_float+0x15c>
 8003b50:	3301      	adds	r3, #1
 8003b52:	6123      	str	r3, [r4, #16]
 8003b54:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d09e      	beq.n	8003a9a <_printf_float+0xa2>
 8003b5c:	232d      	movs	r3, #45	@ 0x2d
 8003b5e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003b62:	e79a      	b.n	8003a9a <_printf_float+0xa2>
 8003b64:	2947      	cmp	r1, #71	@ 0x47
 8003b66:	d1bf      	bne.n	8003ae8 <_printf_float+0xf0>
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d1bd      	bne.n	8003ae8 <_printf_float+0xf0>
 8003b6c:	2301      	movs	r3, #1
 8003b6e:	e7ba      	b.n	8003ae6 <_printf_float+0xee>
 8003b70:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8003b74:	d9dc      	bls.n	8003b30 <_printf_float+0x138>
 8003b76:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8003b7a:	d118      	bne.n	8003bae <_printf_float+0x1b6>
 8003b7c:	2900      	cmp	r1, #0
 8003b7e:	6863      	ldr	r3, [r4, #4]
 8003b80:	dd0b      	ble.n	8003b9a <_printf_float+0x1a2>
 8003b82:	6121      	str	r1, [r4, #16]
 8003b84:	b913      	cbnz	r3, 8003b8c <_printf_float+0x194>
 8003b86:	6822      	ldr	r2, [r4, #0]
 8003b88:	07d0      	lsls	r0, r2, #31
 8003b8a:	d502      	bpl.n	8003b92 <_printf_float+0x19a>
 8003b8c:	3301      	adds	r3, #1
 8003b8e:	440b      	add	r3, r1
 8003b90:	6123      	str	r3, [r4, #16]
 8003b92:	f04f 0900 	mov.w	r9, #0
 8003b96:	65a1      	str	r1, [r4, #88]	@ 0x58
 8003b98:	e7dc      	b.n	8003b54 <_printf_float+0x15c>
 8003b9a:	b913      	cbnz	r3, 8003ba2 <_printf_float+0x1aa>
 8003b9c:	6822      	ldr	r2, [r4, #0]
 8003b9e:	07d2      	lsls	r2, r2, #31
 8003ba0:	d501      	bpl.n	8003ba6 <_printf_float+0x1ae>
 8003ba2:	3302      	adds	r3, #2
 8003ba4:	e7f4      	b.n	8003b90 <_printf_float+0x198>
 8003ba6:	2301      	movs	r3, #1
 8003ba8:	e7f2      	b.n	8003b90 <_printf_float+0x198>
 8003baa:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8003bae:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8003bb0:	4299      	cmp	r1, r3
 8003bb2:	db05      	blt.n	8003bc0 <_printf_float+0x1c8>
 8003bb4:	6823      	ldr	r3, [r4, #0]
 8003bb6:	6121      	str	r1, [r4, #16]
 8003bb8:	07d8      	lsls	r0, r3, #31
 8003bba:	d5ea      	bpl.n	8003b92 <_printf_float+0x19a>
 8003bbc:	1c4b      	adds	r3, r1, #1
 8003bbe:	e7e7      	b.n	8003b90 <_printf_float+0x198>
 8003bc0:	2900      	cmp	r1, #0
 8003bc2:	bfcc      	ite	gt
 8003bc4:	2201      	movgt	r2, #1
 8003bc6:	f1c1 0202 	rsble	r2, r1, #2
 8003bca:	4413      	add	r3, r2
 8003bcc:	e7e0      	b.n	8003b90 <_printf_float+0x198>
 8003bce:	6823      	ldr	r3, [r4, #0]
 8003bd0:	055a      	lsls	r2, r3, #21
 8003bd2:	d407      	bmi.n	8003be4 <_printf_float+0x1ec>
 8003bd4:	6923      	ldr	r3, [r4, #16]
 8003bd6:	4642      	mov	r2, r8
 8003bd8:	4631      	mov	r1, r6
 8003bda:	4628      	mov	r0, r5
 8003bdc:	47b8      	blx	r7
 8003bde:	3001      	adds	r0, #1
 8003be0:	d12b      	bne.n	8003c3a <_printf_float+0x242>
 8003be2:	e764      	b.n	8003aae <_printf_float+0xb6>
 8003be4:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8003be8:	f240 80dc 	bls.w	8003da4 <_printf_float+0x3ac>
 8003bec:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	f7fc fed8 	bl	80009a8 <__aeabi_dcmpeq>
 8003bf8:	2800      	cmp	r0, #0
 8003bfa:	d033      	beq.n	8003c64 <_printf_float+0x26c>
 8003bfc:	2301      	movs	r3, #1
 8003bfe:	4631      	mov	r1, r6
 8003c00:	4628      	mov	r0, r5
 8003c02:	4a35      	ldr	r2, [pc, #212]	@ (8003cd8 <_printf_float+0x2e0>)
 8003c04:	47b8      	blx	r7
 8003c06:	3001      	adds	r0, #1
 8003c08:	f43f af51 	beq.w	8003aae <_printf_float+0xb6>
 8003c0c:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8003c10:	4543      	cmp	r3, r8
 8003c12:	db02      	blt.n	8003c1a <_printf_float+0x222>
 8003c14:	6823      	ldr	r3, [r4, #0]
 8003c16:	07d8      	lsls	r0, r3, #31
 8003c18:	d50f      	bpl.n	8003c3a <_printf_float+0x242>
 8003c1a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8003c1e:	4631      	mov	r1, r6
 8003c20:	4628      	mov	r0, r5
 8003c22:	47b8      	blx	r7
 8003c24:	3001      	adds	r0, #1
 8003c26:	f43f af42 	beq.w	8003aae <_printf_float+0xb6>
 8003c2a:	f04f 0900 	mov.w	r9, #0
 8003c2e:	f108 38ff 	add.w	r8, r8, #4294967295
 8003c32:	f104 0a1a 	add.w	sl, r4, #26
 8003c36:	45c8      	cmp	r8, r9
 8003c38:	dc09      	bgt.n	8003c4e <_printf_float+0x256>
 8003c3a:	6823      	ldr	r3, [r4, #0]
 8003c3c:	079b      	lsls	r3, r3, #30
 8003c3e:	f100 8102 	bmi.w	8003e46 <_printf_float+0x44e>
 8003c42:	68e0      	ldr	r0, [r4, #12]
 8003c44:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8003c46:	4298      	cmp	r0, r3
 8003c48:	bfb8      	it	lt
 8003c4a:	4618      	movlt	r0, r3
 8003c4c:	e731      	b.n	8003ab2 <_printf_float+0xba>
 8003c4e:	2301      	movs	r3, #1
 8003c50:	4652      	mov	r2, sl
 8003c52:	4631      	mov	r1, r6
 8003c54:	4628      	mov	r0, r5
 8003c56:	47b8      	blx	r7
 8003c58:	3001      	adds	r0, #1
 8003c5a:	f43f af28 	beq.w	8003aae <_printf_float+0xb6>
 8003c5e:	f109 0901 	add.w	r9, r9, #1
 8003c62:	e7e8      	b.n	8003c36 <_printf_float+0x23e>
 8003c64:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	dc38      	bgt.n	8003cdc <_printf_float+0x2e4>
 8003c6a:	2301      	movs	r3, #1
 8003c6c:	4631      	mov	r1, r6
 8003c6e:	4628      	mov	r0, r5
 8003c70:	4a19      	ldr	r2, [pc, #100]	@ (8003cd8 <_printf_float+0x2e0>)
 8003c72:	47b8      	blx	r7
 8003c74:	3001      	adds	r0, #1
 8003c76:	f43f af1a 	beq.w	8003aae <_printf_float+0xb6>
 8003c7a:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 8003c7e:	ea59 0303 	orrs.w	r3, r9, r3
 8003c82:	d102      	bne.n	8003c8a <_printf_float+0x292>
 8003c84:	6823      	ldr	r3, [r4, #0]
 8003c86:	07d9      	lsls	r1, r3, #31
 8003c88:	d5d7      	bpl.n	8003c3a <_printf_float+0x242>
 8003c8a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8003c8e:	4631      	mov	r1, r6
 8003c90:	4628      	mov	r0, r5
 8003c92:	47b8      	blx	r7
 8003c94:	3001      	adds	r0, #1
 8003c96:	f43f af0a 	beq.w	8003aae <_printf_float+0xb6>
 8003c9a:	f04f 0a00 	mov.w	sl, #0
 8003c9e:	f104 0b1a 	add.w	fp, r4, #26
 8003ca2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003ca4:	425b      	negs	r3, r3
 8003ca6:	4553      	cmp	r3, sl
 8003ca8:	dc01      	bgt.n	8003cae <_printf_float+0x2b6>
 8003caa:	464b      	mov	r3, r9
 8003cac:	e793      	b.n	8003bd6 <_printf_float+0x1de>
 8003cae:	2301      	movs	r3, #1
 8003cb0:	465a      	mov	r2, fp
 8003cb2:	4631      	mov	r1, r6
 8003cb4:	4628      	mov	r0, r5
 8003cb6:	47b8      	blx	r7
 8003cb8:	3001      	adds	r0, #1
 8003cba:	f43f aef8 	beq.w	8003aae <_printf_float+0xb6>
 8003cbe:	f10a 0a01 	add.w	sl, sl, #1
 8003cc2:	e7ee      	b.n	8003ca2 <_printf_float+0x2aa>
 8003cc4:	7fefffff 	.word	0x7fefffff
 8003cc8:	080069ca 	.word	0x080069ca
 8003ccc:	080069c6 	.word	0x080069c6
 8003cd0:	080069d2 	.word	0x080069d2
 8003cd4:	080069ce 	.word	0x080069ce
 8003cd8:	080069d6 	.word	0x080069d6
 8003cdc:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003cde:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8003ce2:	4553      	cmp	r3, sl
 8003ce4:	bfa8      	it	ge
 8003ce6:	4653      	movge	r3, sl
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	4699      	mov	r9, r3
 8003cec:	dc36      	bgt.n	8003d5c <_printf_float+0x364>
 8003cee:	f04f 0b00 	mov.w	fp, #0
 8003cf2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003cf6:	f104 021a 	add.w	r2, r4, #26
 8003cfa:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003cfc:	930a      	str	r3, [sp, #40]	@ 0x28
 8003cfe:	eba3 0309 	sub.w	r3, r3, r9
 8003d02:	455b      	cmp	r3, fp
 8003d04:	dc31      	bgt.n	8003d6a <_printf_float+0x372>
 8003d06:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003d08:	459a      	cmp	sl, r3
 8003d0a:	dc3a      	bgt.n	8003d82 <_printf_float+0x38a>
 8003d0c:	6823      	ldr	r3, [r4, #0]
 8003d0e:	07da      	lsls	r2, r3, #31
 8003d10:	d437      	bmi.n	8003d82 <_printf_float+0x38a>
 8003d12:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003d14:	ebaa 0903 	sub.w	r9, sl, r3
 8003d18:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8003d1a:	ebaa 0303 	sub.w	r3, sl, r3
 8003d1e:	4599      	cmp	r9, r3
 8003d20:	bfa8      	it	ge
 8003d22:	4699      	movge	r9, r3
 8003d24:	f1b9 0f00 	cmp.w	r9, #0
 8003d28:	dc33      	bgt.n	8003d92 <_printf_float+0x39a>
 8003d2a:	f04f 0800 	mov.w	r8, #0
 8003d2e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003d32:	f104 0b1a 	add.w	fp, r4, #26
 8003d36:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003d38:	ebaa 0303 	sub.w	r3, sl, r3
 8003d3c:	eba3 0309 	sub.w	r3, r3, r9
 8003d40:	4543      	cmp	r3, r8
 8003d42:	f77f af7a 	ble.w	8003c3a <_printf_float+0x242>
 8003d46:	2301      	movs	r3, #1
 8003d48:	465a      	mov	r2, fp
 8003d4a:	4631      	mov	r1, r6
 8003d4c:	4628      	mov	r0, r5
 8003d4e:	47b8      	blx	r7
 8003d50:	3001      	adds	r0, #1
 8003d52:	f43f aeac 	beq.w	8003aae <_printf_float+0xb6>
 8003d56:	f108 0801 	add.w	r8, r8, #1
 8003d5a:	e7ec      	b.n	8003d36 <_printf_float+0x33e>
 8003d5c:	4642      	mov	r2, r8
 8003d5e:	4631      	mov	r1, r6
 8003d60:	4628      	mov	r0, r5
 8003d62:	47b8      	blx	r7
 8003d64:	3001      	adds	r0, #1
 8003d66:	d1c2      	bne.n	8003cee <_printf_float+0x2f6>
 8003d68:	e6a1      	b.n	8003aae <_printf_float+0xb6>
 8003d6a:	2301      	movs	r3, #1
 8003d6c:	4631      	mov	r1, r6
 8003d6e:	4628      	mov	r0, r5
 8003d70:	920a      	str	r2, [sp, #40]	@ 0x28
 8003d72:	47b8      	blx	r7
 8003d74:	3001      	adds	r0, #1
 8003d76:	f43f ae9a 	beq.w	8003aae <_printf_float+0xb6>
 8003d7a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8003d7c:	f10b 0b01 	add.w	fp, fp, #1
 8003d80:	e7bb      	b.n	8003cfa <_printf_float+0x302>
 8003d82:	4631      	mov	r1, r6
 8003d84:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8003d88:	4628      	mov	r0, r5
 8003d8a:	47b8      	blx	r7
 8003d8c:	3001      	adds	r0, #1
 8003d8e:	d1c0      	bne.n	8003d12 <_printf_float+0x31a>
 8003d90:	e68d      	b.n	8003aae <_printf_float+0xb6>
 8003d92:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8003d94:	464b      	mov	r3, r9
 8003d96:	4631      	mov	r1, r6
 8003d98:	4628      	mov	r0, r5
 8003d9a:	4442      	add	r2, r8
 8003d9c:	47b8      	blx	r7
 8003d9e:	3001      	adds	r0, #1
 8003da0:	d1c3      	bne.n	8003d2a <_printf_float+0x332>
 8003da2:	e684      	b.n	8003aae <_printf_float+0xb6>
 8003da4:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8003da8:	f1ba 0f01 	cmp.w	sl, #1
 8003dac:	dc01      	bgt.n	8003db2 <_printf_float+0x3ba>
 8003dae:	07db      	lsls	r3, r3, #31
 8003db0:	d536      	bpl.n	8003e20 <_printf_float+0x428>
 8003db2:	2301      	movs	r3, #1
 8003db4:	4642      	mov	r2, r8
 8003db6:	4631      	mov	r1, r6
 8003db8:	4628      	mov	r0, r5
 8003dba:	47b8      	blx	r7
 8003dbc:	3001      	adds	r0, #1
 8003dbe:	f43f ae76 	beq.w	8003aae <_printf_float+0xb6>
 8003dc2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8003dc6:	4631      	mov	r1, r6
 8003dc8:	4628      	mov	r0, r5
 8003dca:	47b8      	blx	r7
 8003dcc:	3001      	adds	r0, #1
 8003dce:	f43f ae6e 	beq.w	8003aae <_printf_float+0xb6>
 8003dd2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	2300      	movs	r3, #0
 8003dda:	f10a 3aff 	add.w	sl, sl, #4294967295
 8003dde:	f7fc fde3 	bl	80009a8 <__aeabi_dcmpeq>
 8003de2:	b9c0      	cbnz	r0, 8003e16 <_printf_float+0x41e>
 8003de4:	4653      	mov	r3, sl
 8003de6:	f108 0201 	add.w	r2, r8, #1
 8003dea:	4631      	mov	r1, r6
 8003dec:	4628      	mov	r0, r5
 8003dee:	47b8      	blx	r7
 8003df0:	3001      	adds	r0, #1
 8003df2:	d10c      	bne.n	8003e0e <_printf_float+0x416>
 8003df4:	e65b      	b.n	8003aae <_printf_float+0xb6>
 8003df6:	2301      	movs	r3, #1
 8003df8:	465a      	mov	r2, fp
 8003dfa:	4631      	mov	r1, r6
 8003dfc:	4628      	mov	r0, r5
 8003dfe:	47b8      	blx	r7
 8003e00:	3001      	adds	r0, #1
 8003e02:	f43f ae54 	beq.w	8003aae <_printf_float+0xb6>
 8003e06:	f108 0801 	add.w	r8, r8, #1
 8003e0a:	45d0      	cmp	r8, sl
 8003e0c:	dbf3      	blt.n	8003df6 <_printf_float+0x3fe>
 8003e0e:	464b      	mov	r3, r9
 8003e10:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8003e14:	e6e0      	b.n	8003bd8 <_printf_float+0x1e0>
 8003e16:	f04f 0800 	mov.w	r8, #0
 8003e1a:	f104 0b1a 	add.w	fp, r4, #26
 8003e1e:	e7f4      	b.n	8003e0a <_printf_float+0x412>
 8003e20:	2301      	movs	r3, #1
 8003e22:	4642      	mov	r2, r8
 8003e24:	e7e1      	b.n	8003dea <_printf_float+0x3f2>
 8003e26:	2301      	movs	r3, #1
 8003e28:	464a      	mov	r2, r9
 8003e2a:	4631      	mov	r1, r6
 8003e2c:	4628      	mov	r0, r5
 8003e2e:	47b8      	blx	r7
 8003e30:	3001      	adds	r0, #1
 8003e32:	f43f ae3c 	beq.w	8003aae <_printf_float+0xb6>
 8003e36:	f108 0801 	add.w	r8, r8, #1
 8003e3a:	68e3      	ldr	r3, [r4, #12]
 8003e3c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8003e3e:	1a5b      	subs	r3, r3, r1
 8003e40:	4543      	cmp	r3, r8
 8003e42:	dcf0      	bgt.n	8003e26 <_printf_float+0x42e>
 8003e44:	e6fd      	b.n	8003c42 <_printf_float+0x24a>
 8003e46:	f04f 0800 	mov.w	r8, #0
 8003e4a:	f104 0919 	add.w	r9, r4, #25
 8003e4e:	e7f4      	b.n	8003e3a <_printf_float+0x442>

08003e50 <_printf_common>:
 8003e50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003e54:	4616      	mov	r6, r2
 8003e56:	4698      	mov	r8, r3
 8003e58:	688a      	ldr	r2, [r1, #8]
 8003e5a:	690b      	ldr	r3, [r1, #16]
 8003e5c:	4607      	mov	r7, r0
 8003e5e:	4293      	cmp	r3, r2
 8003e60:	bfb8      	it	lt
 8003e62:	4613      	movlt	r3, r2
 8003e64:	6033      	str	r3, [r6, #0]
 8003e66:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003e6a:	460c      	mov	r4, r1
 8003e6c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003e70:	b10a      	cbz	r2, 8003e76 <_printf_common+0x26>
 8003e72:	3301      	adds	r3, #1
 8003e74:	6033      	str	r3, [r6, #0]
 8003e76:	6823      	ldr	r3, [r4, #0]
 8003e78:	0699      	lsls	r1, r3, #26
 8003e7a:	bf42      	ittt	mi
 8003e7c:	6833      	ldrmi	r3, [r6, #0]
 8003e7e:	3302      	addmi	r3, #2
 8003e80:	6033      	strmi	r3, [r6, #0]
 8003e82:	6825      	ldr	r5, [r4, #0]
 8003e84:	f015 0506 	ands.w	r5, r5, #6
 8003e88:	d106      	bne.n	8003e98 <_printf_common+0x48>
 8003e8a:	f104 0a19 	add.w	sl, r4, #25
 8003e8e:	68e3      	ldr	r3, [r4, #12]
 8003e90:	6832      	ldr	r2, [r6, #0]
 8003e92:	1a9b      	subs	r3, r3, r2
 8003e94:	42ab      	cmp	r3, r5
 8003e96:	dc2b      	bgt.n	8003ef0 <_printf_common+0xa0>
 8003e98:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003e9c:	6822      	ldr	r2, [r4, #0]
 8003e9e:	3b00      	subs	r3, #0
 8003ea0:	bf18      	it	ne
 8003ea2:	2301      	movne	r3, #1
 8003ea4:	0692      	lsls	r2, r2, #26
 8003ea6:	d430      	bmi.n	8003f0a <_printf_common+0xba>
 8003ea8:	4641      	mov	r1, r8
 8003eaa:	4638      	mov	r0, r7
 8003eac:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003eb0:	47c8      	blx	r9
 8003eb2:	3001      	adds	r0, #1
 8003eb4:	d023      	beq.n	8003efe <_printf_common+0xae>
 8003eb6:	6823      	ldr	r3, [r4, #0]
 8003eb8:	6922      	ldr	r2, [r4, #16]
 8003eba:	f003 0306 	and.w	r3, r3, #6
 8003ebe:	2b04      	cmp	r3, #4
 8003ec0:	bf14      	ite	ne
 8003ec2:	2500      	movne	r5, #0
 8003ec4:	6833      	ldreq	r3, [r6, #0]
 8003ec6:	f04f 0600 	mov.w	r6, #0
 8003eca:	bf08      	it	eq
 8003ecc:	68e5      	ldreq	r5, [r4, #12]
 8003ece:	f104 041a 	add.w	r4, r4, #26
 8003ed2:	bf08      	it	eq
 8003ed4:	1aed      	subeq	r5, r5, r3
 8003ed6:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8003eda:	bf08      	it	eq
 8003edc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003ee0:	4293      	cmp	r3, r2
 8003ee2:	bfc4      	itt	gt
 8003ee4:	1a9b      	subgt	r3, r3, r2
 8003ee6:	18ed      	addgt	r5, r5, r3
 8003ee8:	42b5      	cmp	r5, r6
 8003eea:	d11a      	bne.n	8003f22 <_printf_common+0xd2>
 8003eec:	2000      	movs	r0, #0
 8003eee:	e008      	b.n	8003f02 <_printf_common+0xb2>
 8003ef0:	2301      	movs	r3, #1
 8003ef2:	4652      	mov	r2, sl
 8003ef4:	4641      	mov	r1, r8
 8003ef6:	4638      	mov	r0, r7
 8003ef8:	47c8      	blx	r9
 8003efa:	3001      	adds	r0, #1
 8003efc:	d103      	bne.n	8003f06 <_printf_common+0xb6>
 8003efe:	f04f 30ff 	mov.w	r0, #4294967295
 8003f02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f06:	3501      	adds	r5, #1
 8003f08:	e7c1      	b.n	8003e8e <_printf_common+0x3e>
 8003f0a:	2030      	movs	r0, #48	@ 0x30
 8003f0c:	18e1      	adds	r1, r4, r3
 8003f0e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003f12:	1c5a      	adds	r2, r3, #1
 8003f14:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003f18:	4422      	add	r2, r4
 8003f1a:	3302      	adds	r3, #2
 8003f1c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003f20:	e7c2      	b.n	8003ea8 <_printf_common+0x58>
 8003f22:	2301      	movs	r3, #1
 8003f24:	4622      	mov	r2, r4
 8003f26:	4641      	mov	r1, r8
 8003f28:	4638      	mov	r0, r7
 8003f2a:	47c8      	blx	r9
 8003f2c:	3001      	adds	r0, #1
 8003f2e:	d0e6      	beq.n	8003efe <_printf_common+0xae>
 8003f30:	3601      	adds	r6, #1
 8003f32:	e7d9      	b.n	8003ee8 <_printf_common+0x98>

08003f34 <_printf_i>:
 8003f34:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003f38:	7e0f      	ldrb	r7, [r1, #24]
 8003f3a:	4691      	mov	r9, r2
 8003f3c:	2f78      	cmp	r7, #120	@ 0x78
 8003f3e:	4680      	mov	r8, r0
 8003f40:	460c      	mov	r4, r1
 8003f42:	469a      	mov	sl, r3
 8003f44:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003f46:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003f4a:	d807      	bhi.n	8003f5c <_printf_i+0x28>
 8003f4c:	2f62      	cmp	r7, #98	@ 0x62
 8003f4e:	d80a      	bhi.n	8003f66 <_printf_i+0x32>
 8003f50:	2f00      	cmp	r7, #0
 8003f52:	f000 80d1 	beq.w	80040f8 <_printf_i+0x1c4>
 8003f56:	2f58      	cmp	r7, #88	@ 0x58
 8003f58:	f000 80b8 	beq.w	80040cc <_printf_i+0x198>
 8003f5c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003f60:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003f64:	e03a      	b.n	8003fdc <_printf_i+0xa8>
 8003f66:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003f6a:	2b15      	cmp	r3, #21
 8003f6c:	d8f6      	bhi.n	8003f5c <_printf_i+0x28>
 8003f6e:	a101      	add	r1, pc, #4	@ (adr r1, 8003f74 <_printf_i+0x40>)
 8003f70:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003f74:	08003fcd 	.word	0x08003fcd
 8003f78:	08003fe1 	.word	0x08003fe1
 8003f7c:	08003f5d 	.word	0x08003f5d
 8003f80:	08003f5d 	.word	0x08003f5d
 8003f84:	08003f5d 	.word	0x08003f5d
 8003f88:	08003f5d 	.word	0x08003f5d
 8003f8c:	08003fe1 	.word	0x08003fe1
 8003f90:	08003f5d 	.word	0x08003f5d
 8003f94:	08003f5d 	.word	0x08003f5d
 8003f98:	08003f5d 	.word	0x08003f5d
 8003f9c:	08003f5d 	.word	0x08003f5d
 8003fa0:	080040df 	.word	0x080040df
 8003fa4:	0800400b 	.word	0x0800400b
 8003fa8:	08004099 	.word	0x08004099
 8003fac:	08003f5d 	.word	0x08003f5d
 8003fb0:	08003f5d 	.word	0x08003f5d
 8003fb4:	08004101 	.word	0x08004101
 8003fb8:	08003f5d 	.word	0x08003f5d
 8003fbc:	0800400b 	.word	0x0800400b
 8003fc0:	08003f5d 	.word	0x08003f5d
 8003fc4:	08003f5d 	.word	0x08003f5d
 8003fc8:	080040a1 	.word	0x080040a1
 8003fcc:	6833      	ldr	r3, [r6, #0]
 8003fce:	1d1a      	adds	r2, r3, #4
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	6032      	str	r2, [r6, #0]
 8003fd4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003fd8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003fdc:	2301      	movs	r3, #1
 8003fde:	e09c      	b.n	800411a <_printf_i+0x1e6>
 8003fe0:	6833      	ldr	r3, [r6, #0]
 8003fe2:	6820      	ldr	r0, [r4, #0]
 8003fe4:	1d19      	adds	r1, r3, #4
 8003fe6:	6031      	str	r1, [r6, #0]
 8003fe8:	0606      	lsls	r6, r0, #24
 8003fea:	d501      	bpl.n	8003ff0 <_printf_i+0xbc>
 8003fec:	681d      	ldr	r5, [r3, #0]
 8003fee:	e003      	b.n	8003ff8 <_printf_i+0xc4>
 8003ff0:	0645      	lsls	r5, r0, #25
 8003ff2:	d5fb      	bpl.n	8003fec <_printf_i+0xb8>
 8003ff4:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003ff8:	2d00      	cmp	r5, #0
 8003ffa:	da03      	bge.n	8004004 <_printf_i+0xd0>
 8003ffc:	232d      	movs	r3, #45	@ 0x2d
 8003ffe:	426d      	negs	r5, r5
 8004000:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004004:	230a      	movs	r3, #10
 8004006:	4858      	ldr	r0, [pc, #352]	@ (8004168 <_printf_i+0x234>)
 8004008:	e011      	b.n	800402e <_printf_i+0xfa>
 800400a:	6821      	ldr	r1, [r4, #0]
 800400c:	6833      	ldr	r3, [r6, #0]
 800400e:	0608      	lsls	r0, r1, #24
 8004010:	f853 5b04 	ldr.w	r5, [r3], #4
 8004014:	d402      	bmi.n	800401c <_printf_i+0xe8>
 8004016:	0649      	lsls	r1, r1, #25
 8004018:	bf48      	it	mi
 800401a:	b2ad      	uxthmi	r5, r5
 800401c:	2f6f      	cmp	r7, #111	@ 0x6f
 800401e:	6033      	str	r3, [r6, #0]
 8004020:	bf14      	ite	ne
 8004022:	230a      	movne	r3, #10
 8004024:	2308      	moveq	r3, #8
 8004026:	4850      	ldr	r0, [pc, #320]	@ (8004168 <_printf_i+0x234>)
 8004028:	2100      	movs	r1, #0
 800402a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800402e:	6866      	ldr	r6, [r4, #4]
 8004030:	2e00      	cmp	r6, #0
 8004032:	60a6      	str	r6, [r4, #8]
 8004034:	db05      	blt.n	8004042 <_printf_i+0x10e>
 8004036:	6821      	ldr	r1, [r4, #0]
 8004038:	432e      	orrs	r6, r5
 800403a:	f021 0104 	bic.w	r1, r1, #4
 800403e:	6021      	str	r1, [r4, #0]
 8004040:	d04b      	beq.n	80040da <_printf_i+0x1a6>
 8004042:	4616      	mov	r6, r2
 8004044:	fbb5 f1f3 	udiv	r1, r5, r3
 8004048:	fb03 5711 	mls	r7, r3, r1, r5
 800404c:	5dc7      	ldrb	r7, [r0, r7]
 800404e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004052:	462f      	mov	r7, r5
 8004054:	42bb      	cmp	r3, r7
 8004056:	460d      	mov	r5, r1
 8004058:	d9f4      	bls.n	8004044 <_printf_i+0x110>
 800405a:	2b08      	cmp	r3, #8
 800405c:	d10b      	bne.n	8004076 <_printf_i+0x142>
 800405e:	6823      	ldr	r3, [r4, #0]
 8004060:	07df      	lsls	r7, r3, #31
 8004062:	d508      	bpl.n	8004076 <_printf_i+0x142>
 8004064:	6923      	ldr	r3, [r4, #16]
 8004066:	6861      	ldr	r1, [r4, #4]
 8004068:	4299      	cmp	r1, r3
 800406a:	bfde      	ittt	le
 800406c:	2330      	movle	r3, #48	@ 0x30
 800406e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004072:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004076:	1b92      	subs	r2, r2, r6
 8004078:	6122      	str	r2, [r4, #16]
 800407a:	464b      	mov	r3, r9
 800407c:	4621      	mov	r1, r4
 800407e:	4640      	mov	r0, r8
 8004080:	f8cd a000 	str.w	sl, [sp]
 8004084:	aa03      	add	r2, sp, #12
 8004086:	f7ff fee3 	bl	8003e50 <_printf_common>
 800408a:	3001      	adds	r0, #1
 800408c:	d14a      	bne.n	8004124 <_printf_i+0x1f0>
 800408e:	f04f 30ff 	mov.w	r0, #4294967295
 8004092:	b004      	add	sp, #16
 8004094:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004098:	6823      	ldr	r3, [r4, #0]
 800409a:	f043 0320 	orr.w	r3, r3, #32
 800409e:	6023      	str	r3, [r4, #0]
 80040a0:	2778      	movs	r7, #120	@ 0x78
 80040a2:	4832      	ldr	r0, [pc, #200]	@ (800416c <_printf_i+0x238>)
 80040a4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80040a8:	6823      	ldr	r3, [r4, #0]
 80040aa:	6831      	ldr	r1, [r6, #0]
 80040ac:	061f      	lsls	r7, r3, #24
 80040ae:	f851 5b04 	ldr.w	r5, [r1], #4
 80040b2:	d402      	bmi.n	80040ba <_printf_i+0x186>
 80040b4:	065f      	lsls	r7, r3, #25
 80040b6:	bf48      	it	mi
 80040b8:	b2ad      	uxthmi	r5, r5
 80040ba:	6031      	str	r1, [r6, #0]
 80040bc:	07d9      	lsls	r1, r3, #31
 80040be:	bf44      	itt	mi
 80040c0:	f043 0320 	orrmi.w	r3, r3, #32
 80040c4:	6023      	strmi	r3, [r4, #0]
 80040c6:	b11d      	cbz	r5, 80040d0 <_printf_i+0x19c>
 80040c8:	2310      	movs	r3, #16
 80040ca:	e7ad      	b.n	8004028 <_printf_i+0xf4>
 80040cc:	4826      	ldr	r0, [pc, #152]	@ (8004168 <_printf_i+0x234>)
 80040ce:	e7e9      	b.n	80040a4 <_printf_i+0x170>
 80040d0:	6823      	ldr	r3, [r4, #0]
 80040d2:	f023 0320 	bic.w	r3, r3, #32
 80040d6:	6023      	str	r3, [r4, #0]
 80040d8:	e7f6      	b.n	80040c8 <_printf_i+0x194>
 80040da:	4616      	mov	r6, r2
 80040dc:	e7bd      	b.n	800405a <_printf_i+0x126>
 80040de:	6833      	ldr	r3, [r6, #0]
 80040e0:	6825      	ldr	r5, [r4, #0]
 80040e2:	1d18      	adds	r0, r3, #4
 80040e4:	6961      	ldr	r1, [r4, #20]
 80040e6:	6030      	str	r0, [r6, #0]
 80040e8:	062e      	lsls	r6, r5, #24
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	d501      	bpl.n	80040f2 <_printf_i+0x1be>
 80040ee:	6019      	str	r1, [r3, #0]
 80040f0:	e002      	b.n	80040f8 <_printf_i+0x1c4>
 80040f2:	0668      	lsls	r0, r5, #25
 80040f4:	d5fb      	bpl.n	80040ee <_printf_i+0x1ba>
 80040f6:	8019      	strh	r1, [r3, #0]
 80040f8:	2300      	movs	r3, #0
 80040fa:	4616      	mov	r6, r2
 80040fc:	6123      	str	r3, [r4, #16]
 80040fe:	e7bc      	b.n	800407a <_printf_i+0x146>
 8004100:	6833      	ldr	r3, [r6, #0]
 8004102:	2100      	movs	r1, #0
 8004104:	1d1a      	adds	r2, r3, #4
 8004106:	6032      	str	r2, [r6, #0]
 8004108:	681e      	ldr	r6, [r3, #0]
 800410a:	6862      	ldr	r2, [r4, #4]
 800410c:	4630      	mov	r0, r6
 800410e:	f000 f9d6 	bl	80044be <memchr>
 8004112:	b108      	cbz	r0, 8004118 <_printf_i+0x1e4>
 8004114:	1b80      	subs	r0, r0, r6
 8004116:	6060      	str	r0, [r4, #4]
 8004118:	6863      	ldr	r3, [r4, #4]
 800411a:	6123      	str	r3, [r4, #16]
 800411c:	2300      	movs	r3, #0
 800411e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004122:	e7aa      	b.n	800407a <_printf_i+0x146>
 8004124:	4632      	mov	r2, r6
 8004126:	4649      	mov	r1, r9
 8004128:	4640      	mov	r0, r8
 800412a:	6923      	ldr	r3, [r4, #16]
 800412c:	47d0      	blx	sl
 800412e:	3001      	adds	r0, #1
 8004130:	d0ad      	beq.n	800408e <_printf_i+0x15a>
 8004132:	6823      	ldr	r3, [r4, #0]
 8004134:	079b      	lsls	r3, r3, #30
 8004136:	d413      	bmi.n	8004160 <_printf_i+0x22c>
 8004138:	68e0      	ldr	r0, [r4, #12]
 800413a:	9b03      	ldr	r3, [sp, #12]
 800413c:	4298      	cmp	r0, r3
 800413e:	bfb8      	it	lt
 8004140:	4618      	movlt	r0, r3
 8004142:	e7a6      	b.n	8004092 <_printf_i+0x15e>
 8004144:	2301      	movs	r3, #1
 8004146:	4632      	mov	r2, r6
 8004148:	4649      	mov	r1, r9
 800414a:	4640      	mov	r0, r8
 800414c:	47d0      	blx	sl
 800414e:	3001      	adds	r0, #1
 8004150:	d09d      	beq.n	800408e <_printf_i+0x15a>
 8004152:	3501      	adds	r5, #1
 8004154:	68e3      	ldr	r3, [r4, #12]
 8004156:	9903      	ldr	r1, [sp, #12]
 8004158:	1a5b      	subs	r3, r3, r1
 800415a:	42ab      	cmp	r3, r5
 800415c:	dcf2      	bgt.n	8004144 <_printf_i+0x210>
 800415e:	e7eb      	b.n	8004138 <_printf_i+0x204>
 8004160:	2500      	movs	r5, #0
 8004162:	f104 0619 	add.w	r6, r4, #25
 8004166:	e7f5      	b.n	8004154 <_printf_i+0x220>
 8004168:	080069d8 	.word	0x080069d8
 800416c:	080069e9 	.word	0x080069e9

08004170 <std>:
 8004170:	2300      	movs	r3, #0
 8004172:	b510      	push	{r4, lr}
 8004174:	4604      	mov	r4, r0
 8004176:	e9c0 3300 	strd	r3, r3, [r0]
 800417a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800417e:	6083      	str	r3, [r0, #8]
 8004180:	8181      	strh	r1, [r0, #12]
 8004182:	6643      	str	r3, [r0, #100]	@ 0x64
 8004184:	81c2      	strh	r2, [r0, #14]
 8004186:	6183      	str	r3, [r0, #24]
 8004188:	4619      	mov	r1, r3
 800418a:	2208      	movs	r2, #8
 800418c:	305c      	adds	r0, #92	@ 0x5c
 800418e:	f000 f916 	bl	80043be <memset>
 8004192:	4b0d      	ldr	r3, [pc, #52]	@ (80041c8 <std+0x58>)
 8004194:	6224      	str	r4, [r4, #32]
 8004196:	6263      	str	r3, [r4, #36]	@ 0x24
 8004198:	4b0c      	ldr	r3, [pc, #48]	@ (80041cc <std+0x5c>)
 800419a:	62a3      	str	r3, [r4, #40]	@ 0x28
 800419c:	4b0c      	ldr	r3, [pc, #48]	@ (80041d0 <std+0x60>)
 800419e:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80041a0:	4b0c      	ldr	r3, [pc, #48]	@ (80041d4 <std+0x64>)
 80041a2:	6323      	str	r3, [r4, #48]	@ 0x30
 80041a4:	4b0c      	ldr	r3, [pc, #48]	@ (80041d8 <std+0x68>)
 80041a6:	429c      	cmp	r4, r3
 80041a8:	d006      	beq.n	80041b8 <std+0x48>
 80041aa:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80041ae:	4294      	cmp	r4, r2
 80041b0:	d002      	beq.n	80041b8 <std+0x48>
 80041b2:	33d0      	adds	r3, #208	@ 0xd0
 80041b4:	429c      	cmp	r4, r3
 80041b6:	d105      	bne.n	80041c4 <std+0x54>
 80041b8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80041bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80041c0:	f000 b97a 	b.w	80044b8 <__retarget_lock_init_recursive>
 80041c4:	bd10      	pop	{r4, pc}
 80041c6:	bf00      	nop
 80041c8:	08004339 	.word	0x08004339
 80041cc:	0800435b 	.word	0x0800435b
 80041d0:	08004393 	.word	0x08004393
 80041d4:	080043b7 	.word	0x080043b7
 80041d8:	200002fc 	.word	0x200002fc

080041dc <stdio_exit_handler>:
 80041dc:	4a02      	ldr	r2, [pc, #8]	@ (80041e8 <stdio_exit_handler+0xc>)
 80041de:	4903      	ldr	r1, [pc, #12]	@ (80041ec <stdio_exit_handler+0x10>)
 80041e0:	4803      	ldr	r0, [pc, #12]	@ (80041f0 <stdio_exit_handler+0x14>)
 80041e2:	f000 b869 	b.w	80042b8 <_fwalk_sglue>
 80041e6:	bf00      	nop
 80041e8:	2000001c 	.word	0x2000001c
 80041ec:	08005e39 	.word	0x08005e39
 80041f0:	2000002c 	.word	0x2000002c

080041f4 <cleanup_stdio>:
 80041f4:	6841      	ldr	r1, [r0, #4]
 80041f6:	4b0c      	ldr	r3, [pc, #48]	@ (8004228 <cleanup_stdio+0x34>)
 80041f8:	b510      	push	{r4, lr}
 80041fa:	4299      	cmp	r1, r3
 80041fc:	4604      	mov	r4, r0
 80041fe:	d001      	beq.n	8004204 <cleanup_stdio+0x10>
 8004200:	f001 fe1a 	bl	8005e38 <_fflush_r>
 8004204:	68a1      	ldr	r1, [r4, #8]
 8004206:	4b09      	ldr	r3, [pc, #36]	@ (800422c <cleanup_stdio+0x38>)
 8004208:	4299      	cmp	r1, r3
 800420a:	d002      	beq.n	8004212 <cleanup_stdio+0x1e>
 800420c:	4620      	mov	r0, r4
 800420e:	f001 fe13 	bl	8005e38 <_fflush_r>
 8004212:	68e1      	ldr	r1, [r4, #12]
 8004214:	4b06      	ldr	r3, [pc, #24]	@ (8004230 <cleanup_stdio+0x3c>)
 8004216:	4299      	cmp	r1, r3
 8004218:	d004      	beq.n	8004224 <cleanup_stdio+0x30>
 800421a:	4620      	mov	r0, r4
 800421c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004220:	f001 be0a 	b.w	8005e38 <_fflush_r>
 8004224:	bd10      	pop	{r4, pc}
 8004226:	bf00      	nop
 8004228:	200002fc 	.word	0x200002fc
 800422c:	20000364 	.word	0x20000364
 8004230:	200003cc 	.word	0x200003cc

08004234 <global_stdio_init.part.0>:
 8004234:	b510      	push	{r4, lr}
 8004236:	4b0b      	ldr	r3, [pc, #44]	@ (8004264 <global_stdio_init.part.0+0x30>)
 8004238:	4c0b      	ldr	r4, [pc, #44]	@ (8004268 <global_stdio_init.part.0+0x34>)
 800423a:	4a0c      	ldr	r2, [pc, #48]	@ (800426c <global_stdio_init.part.0+0x38>)
 800423c:	4620      	mov	r0, r4
 800423e:	601a      	str	r2, [r3, #0]
 8004240:	2104      	movs	r1, #4
 8004242:	2200      	movs	r2, #0
 8004244:	f7ff ff94 	bl	8004170 <std>
 8004248:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800424c:	2201      	movs	r2, #1
 800424e:	2109      	movs	r1, #9
 8004250:	f7ff ff8e 	bl	8004170 <std>
 8004254:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004258:	2202      	movs	r2, #2
 800425a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800425e:	2112      	movs	r1, #18
 8004260:	f7ff bf86 	b.w	8004170 <std>
 8004264:	20000434 	.word	0x20000434
 8004268:	200002fc 	.word	0x200002fc
 800426c:	080041dd 	.word	0x080041dd

08004270 <__sfp_lock_acquire>:
 8004270:	4801      	ldr	r0, [pc, #4]	@ (8004278 <__sfp_lock_acquire+0x8>)
 8004272:	f000 b922 	b.w	80044ba <__retarget_lock_acquire_recursive>
 8004276:	bf00      	nop
 8004278:	2000043d 	.word	0x2000043d

0800427c <__sfp_lock_release>:
 800427c:	4801      	ldr	r0, [pc, #4]	@ (8004284 <__sfp_lock_release+0x8>)
 800427e:	f000 b91d 	b.w	80044bc <__retarget_lock_release_recursive>
 8004282:	bf00      	nop
 8004284:	2000043d 	.word	0x2000043d

08004288 <__sinit>:
 8004288:	b510      	push	{r4, lr}
 800428a:	4604      	mov	r4, r0
 800428c:	f7ff fff0 	bl	8004270 <__sfp_lock_acquire>
 8004290:	6a23      	ldr	r3, [r4, #32]
 8004292:	b11b      	cbz	r3, 800429c <__sinit+0x14>
 8004294:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004298:	f7ff bff0 	b.w	800427c <__sfp_lock_release>
 800429c:	4b04      	ldr	r3, [pc, #16]	@ (80042b0 <__sinit+0x28>)
 800429e:	6223      	str	r3, [r4, #32]
 80042a0:	4b04      	ldr	r3, [pc, #16]	@ (80042b4 <__sinit+0x2c>)
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d1f5      	bne.n	8004294 <__sinit+0xc>
 80042a8:	f7ff ffc4 	bl	8004234 <global_stdio_init.part.0>
 80042ac:	e7f2      	b.n	8004294 <__sinit+0xc>
 80042ae:	bf00      	nop
 80042b0:	080041f5 	.word	0x080041f5
 80042b4:	20000434 	.word	0x20000434

080042b8 <_fwalk_sglue>:
 80042b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80042bc:	4607      	mov	r7, r0
 80042be:	4688      	mov	r8, r1
 80042c0:	4614      	mov	r4, r2
 80042c2:	2600      	movs	r6, #0
 80042c4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80042c8:	f1b9 0901 	subs.w	r9, r9, #1
 80042cc:	d505      	bpl.n	80042da <_fwalk_sglue+0x22>
 80042ce:	6824      	ldr	r4, [r4, #0]
 80042d0:	2c00      	cmp	r4, #0
 80042d2:	d1f7      	bne.n	80042c4 <_fwalk_sglue+0xc>
 80042d4:	4630      	mov	r0, r6
 80042d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80042da:	89ab      	ldrh	r3, [r5, #12]
 80042dc:	2b01      	cmp	r3, #1
 80042de:	d907      	bls.n	80042f0 <_fwalk_sglue+0x38>
 80042e0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80042e4:	3301      	adds	r3, #1
 80042e6:	d003      	beq.n	80042f0 <_fwalk_sglue+0x38>
 80042e8:	4629      	mov	r1, r5
 80042ea:	4638      	mov	r0, r7
 80042ec:	47c0      	blx	r8
 80042ee:	4306      	orrs	r6, r0
 80042f0:	3568      	adds	r5, #104	@ 0x68
 80042f2:	e7e9      	b.n	80042c8 <_fwalk_sglue+0x10>

080042f4 <siprintf>:
 80042f4:	b40e      	push	{r1, r2, r3}
 80042f6:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80042fa:	b510      	push	{r4, lr}
 80042fc:	2400      	movs	r4, #0
 80042fe:	b09d      	sub	sp, #116	@ 0x74
 8004300:	ab1f      	add	r3, sp, #124	@ 0x7c
 8004302:	9002      	str	r0, [sp, #8]
 8004304:	9006      	str	r0, [sp, #24]
 8004306:	9107      	str	r1, [sp, #28]
 8004308:	9104      	str	r1, [sp, #16]
 800430a:	4809      	ldr	r0, [pc, #36]	@ (8004330 <siprintf+0x3c>)
 800430c:	4909      	ldr	r1, [pc, #36]	@ (8004334 <siprintf+0x40>)
 800430e:	f853 2b04 	ldr.w	r2, [r3], #4
 8004312:	9105      	str	r1, [sp, #20]
 8004314:	6800      	ldr	r0, [r0, #0]
 8004316:	a902      	add	r1, sp, #8
 8004318:	9301      	str	r3, [sp, #4]
 800431a:	941b      	str	r4, [sp, #108]	@ 0x6c
 800431c:	f001 fc10 	bl	8005b40 <_svfiprintf_r>
 8004320:	9b02      	ldr	r3, [sp, #8]
 8004322:	701c      	strb	r4, [r3, #0]
 8004324:	b01d      	add	sp, #116	@ 0x74
 8004326:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800432a:	b003      	add	sp, #12
 800432c:	4770      	bx	lr
 800432e:	bf00      	nop
 8004330:	20000028 	.word	0x20000028
 8004334:	ffff0208 	.word	0xffff0208

08004338 <__sread>:
 8004338:	b510      	push	{r4, lr}
 800433a:	460c      	mov	r4, r1
 800433c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004340:	f000 f86c 	bl	800441c <_read_r>
 8004344:	2800      	cmp	r0, #0
 8004346:	bfab      	itete	ge
 8004348:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800434a:	89a3      	ldrhlt	r3, [r4, #12]
 800434c:	181b      	addge	r3, r3, r0
 800434e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004352:	bfac      	ite	ge
 8004354:	6563      	strge	r3, [r4, #84]	@ 0x54
 8004356:	81a3      	strhlt	r3, [r4, #12]
 8004358:	bd10      	pop	{r4, pc}

0800435a <__swrite>:
 800435a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800435e:	461f      	mov	r7, r3
 8004360:	898b      	ldrh	r3, [r1, #12]
 8004362:	4605      	mov	r5, r0
 8004364:	05db      	lsls	r3, r3, #23
 8004366:	460c      	mov	r4, r1
 8004368:	4616      	mov	r6, r2
 800436a:	d505      	bpl.n	8004378 <__swrite+0x1e>
 800436c:	2302      	movs	r3, #2
 800436e:	2200      	movs	r2, #0
 8004370:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004374:	f000 f840 	bl	80043f8 <_lseek_r>
 8004378:	89a3      	ldrh	r3, [r4, #12]
 800437a:	4632      	mov	r2, r6
 800437c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004380:	81a3      	strh	r3, [r4, #12]
 8004382:	4628      	mov	r0, r5
 8004384:	463b      	mov	r3, r7
 8004386:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800438a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800438e:	f000 b857 	b.w	8004440 <_write_r>

08004392 <__sseek>:
 8004392:	b510      	push	{r4, lr}
 8004394:	460c      	mov	r4, r1
 8004396:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800439a:	f000 f82d 	bl	80043f8 <_lseek_r>
 800439e:	1c43      	adds	r3, r0, #1
 80043a0:	89a3      	ldrh	r3, [r4, #12]
 80043a2:	bf15      	itete	ne
 80043a4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80043a6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80043aa:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80043ae:	81a3      	strheq	r3, [r4, #12]
 80043b0:	bf18      	it	ne
 80043b2:	81a3      	strhne	r3, [r4, #12]
 80043b4:	bd10      	pop	{r4, pc}

080043b6 <__sclose>:
 80043b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80043ba:	f000 b80d 	b.w	80043d8 <_close_r>

080043be <memset>:
 80043be:	4603      	mov	r3, r0
 80043c0:	4402      	add	r2, r0
 80043c2:	4293      	cmp	r3, r2
 80043c4:	d100      	bne.n	80043c8 <memset+0xa>
 80043c6:	4770      	bx	lr
 80043c8:	f803 1b01 	strb.w	r1, [r3], #1
 80043cc:	e7f9      	b.n	80043c2 <memset+0x4>
	...

080043d0 <_localeconv_r>:
 80043d0:	4800      	ldr	r0, [pc, #0]	@ (80043d4 <_localeconv_r+0x4>)
 80043d2:	4770      	bx	lr
 80043d4:	20000168 	.word	0x20000168

080043d8 <_close_r>:
 80043d8:	b538      	push	{r3, r4, r5, lr}
 80043da:	2300      	movs	r3, #0
 80043dc:	4d05      	ldr	r5, [pc, #20]	@ (80043f4 <_close_r+0x1c>)
 80043de:	4604      	mov	r4, r0
 80043e0:	4608      	mov	r0, r1
 80043e2:	602b      	str	r3, [r5, #0]
 80043e4:	f7fd faa9 	bl	800193a <_close>
 80043e8:	1c43      	adds	r3, r0, #1
 80043ea:	d102      	bne.n	80043f2 <_close_r+0x1a>
 80043ec:	682b      	ldr	r3, [r5, #0]
 80043ee:	b103      	cbz	r3, 80043f2 <_close_r+0x1a>
 80043f0:	6023      	str	r3, [r4, #0]
 80043f2:	bd38      	pop	{r3, r4, r5, pc}
 80043f4:	20000438 	.word	0x20000438

080043f8 <_lseek_r>:
 80043f8:	b538      	push	{r3, r4, r5, lr}
 80043fa:	4604      	mov	r4, r0
 80043fc:	4608      	mov	r0, r1
 80043fe:	4611      	mov	r1, r2
 8004400:	2200      	movs	r2, #0
 8004402:	4d05      	ldr	r5, [pc, #20]	@ (8004418 <_lseek_r+0x20>)
 8004404:	602a      	str	r2, [r5, #0]
 8004406:	461a      	mov	r2, r3
 8004408:	f7fd fabb 	bl	8001982 <_lseek>
 800440c:	1c43      	adds	r3, r0, #1
 800440e:	d102      	bne.n	8004416 <_lseek_r+0x1e>
 8004410:	682b      	ldr	r3, [r5, #0]
 8004412:	b103      	cbz	r3, 8004416 <_lseek_r+0x1e>
 8004414:	6023      	str	r3, [r4, #0]
 8004416:	bd38      	pop	{r3, r4, r5, pc}
 8004418:	20000438 	.word	0x20000438

0800441c <_read_r>:
 800441c:	b538      	push	{r3, r4, r5, lr}
 800441e:	4604      	mov	r4, r0
 8004420:	4608      	mov	r0, r1
 8004422:	4611      	mov	r1, r2
 8004424:	2200      	movs	r2, #0
 8004426:	4d05      	ldr	r5, [pc, #20]	@ (800443c <_read_r+0x20>)
 8004428:	602a      	str	r2, [r5, #0]
 800442a:	461a      	mov	r2, r3
 800442c:	f7fd fa4c 	bl	80018c8 <_read>
 8004430:	1c43      	adds	r3, r0, #1
 8004432:	d102      	bne.n	800443a <_read_r+0x1e>
 8004434:	682b      	ldr	r3, [r5, #0]
 8004436:	b103      	cbz	r3, 800443a <_read_r+0x1e>
 8004438:	6023      	str	r3, [r4, #0]
 800443a:	bd38      	pop	{r3, r4, r5, pc}
 800443c:	20000438 	.word	0x20000438

08004440 <_write_r>:
 8004440:	b538      	push	{r3, r4, r5, lr}
 8004442:	4604      	mov	r4, r0
 8004444:	4608      	mov	r0, r1
 8004446:	4611      	mov	r1, r2
 8004448:	2200      	movs	r2, #0
 800444a:	4d05      	ldr	r5, [pc, #20]	@ (8004460 <_write_r+0x20>)
 800444c:	602a      	str	r2, [r5, #0]
 800444e:	461a      	mov	r2, r3
 8004450:	f7fd fa57 	bl	8001902 <_write>
 8004454:	1c43      	adds	r3, r0, #1
 8004456:	d102      	bne.n	800445e <_write_r+0x1e>
 8004458:	682b      	ldr	r3, [r5, #0]
 800445a:	b103      	cbz	r3, 800445e <_write_r+0x1e>
 800445c:	6023      	str	r3, [r4, #0]
 800445e:	bd38      	pop	{r3, r4, r5, pc}
 8004460:	20000438 	.word	0x20000438

08004464 <__errno>:
 8004464:	4b01      	ldr	r3, [pc, #4]	@ (800446c <__errno+0x8>)
 8004466:	6818      	ldr	r0, [r3, #0]
 8004468:	4770      	bx	lr
 800446a:	bf00      	nop
 800446c:	20000028 	.word	0x20000028

08004470 <__libc_init_array>:
 8004470:	b570      	push	{r4, r5, r6, lr}
 8004472:	2600      	movs	r6, #0
 8004474:	4d0c      	ldr	r5, [pc, #48]	@ (80044a8 <__libc_init_array+0x38>)
 8004476:	4c0d      	ldr	r4, [pc, #52]	@ (80044ac <__libc_init_array+0x3c>)
 8004478:	1b64      	subs	r4, r4, r5
 800447a:	10a4      	asrs	r4, r4, #2
 800447c:	42a6      	cmp	r6, r4
 800447e:	d109      	bne.n	8004494 <__libc_init_array+0x24>
 8004480:	f002 fa60 	bl	8006944 <_init>
 8004484:	2600      	movs	r6, #0
 8004486:	4d0a      	ldr	r5, [pc, #40]	@ (80044b0 <__libc_init_array+0x40>)
 8004488:	4c0a      	ldr	r4, [pc, #40]	@ (80044b4 <__libc_init_array+0x44>)
 800448a:	1b64      	subs	r4, r4, r5
 800448c:	10a4      	asrs	r4, r4, #2
 800448e:	42a6      	cmp	r6, r4
 8004490:	d105      	bne.n	800449e <__libc_init_array+0x2e>
 8004492:	bd70      	pop	{r4, r5, r6, pc}
 8004494:	f855 3b04 	ldr.w	r3, [r5], #4
 8004498:	4798      	blx	r3
 800449a:	3601      	adds	r6, #1
 800449c:	e7ee      	b.n	800447c <__libc_init_array+0xc>
 800449e:	f855 3b04 	ldr.w	r3, [r5], #4
 80044a2:	4798      	blx	r3
 80044a4:	3601      	adds	r6, #1
 80044a6:	e7f2      	b.n	800448e <__libc_init_array+0x1e>
 80044a8:	08006d44 	.word	0x08006d44
 80044ac:	08006d44 	.word	0x08006d44
 80044b0:	08006d44 	.word	0x08006d44
 80044b4:	08006d48 	.word	0x08006d48

080044b8 <__retarget_lock_init_recursive>:
 80044b8:	4770      	bx	lr

080044ba <__retarget_lock_acquire_recursive>:
 80044ba:	4770      	bx	lr

080044bc <__retarget_lock_release_recursive>:
 80044bc:	4770      	bx	lr

080044be <memchr>:
 80044be:	4603      	mov	r3, r0
 80044c0:	b510      	push	{r4, lr}
 80044c2:	b2c9      	uxtb	r1, r1
 80044c4:	4402      	add	r2, r0
 80044c6:	4293      	cmp	r3, r2
 80044c8:	4618      	mov	r0, r3
 80044ca:	d101      	bne.n	80044d0 <memchr+0x12>
 80044cc:	2000      	movs	r0, #0
 80044ce:	e003      	b.n	80044d8 <memchr+0x1a>
 80044d0:	7804      	ldrb	r4, [r0, #0]
 80044d2:	3301      	adds	r3, #1
 80044d4:	428c      	cmp	r4, r1
 80044d6:	d1f6      	bne.n	80044c6 <memchr+0x8>
 80044d8:	bd10      	pop	{r4, pc}

080044da <quorem>:
 80044da:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80044de:	6903      	ldr	r3, [r0, #16]
 80044e0:	690c      	ldr	r4, [r1, #16]
 80044e2:	4607      	mov	r7, r0
 80044e4:	42a3      	cmp	r3, r4
 80044e6:	db7e      	blt.n	80045e6 <quorem+0x10c>
 80044e8:	3c01      	subs	r4, #1
 80044ea:	00a3      	lsls	r3, r4, #2
 80044ec:	f100 0514 	add.w	r5, r0, #20
 80044f0:	f101 0814 	add.w	r8, r1, #20
 80044f4:	9300      	str	r3, [sp, #0]
 80044f6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80044fa:	9301      	str	r3, [sp, #4]
 80044fc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004500:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004504:	3301      	adds	r3, #1
 8004506:	429a      	cmp	r2, r3
 8004508:	fbb2 f6f3 	udiv	r6, r2, r3
 800450c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004510:	d32e      	bcc.n	8004570 <quorem+0x96>
 8004512:	f04f 0a00 	mov.w	sl, #0
 8004516:	46c4      	mov	ip, r8
 8004518:	46ae      	mov	lr, r5
 800451a:	46d3      	mov	fp, sl
 800451c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8004520:	b298      	uxth	r0, r3
 8004522:	fb06 a000 	mla	r0, r6, r0, sl
 8004526:	0c1b      	lsrs	r3, r3, #16
 8004528:	0c02      	lsrs	r2, r0, #16
 800452a:	fb06 2303 	mla	r3, r6, r3, r2
 800452e:	f8de 2000 	ldr.w	r2, [lr]
 8004532:	b280      	uxth	r0, r0
 8004534:	b292      	uxth	r2, r2
 8004536:	1a12      	subs	r2, r2, r0
 8004538:	445a      	add	r2, fp
 800453a:	f8de 0000 	ldr.w	r0, [lr]
 800453e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004542:	b29b      	uxth	r3, r3
 8004544:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8004548:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800454c:	b292      	uxth	r2, r2
 800454e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8004552:	45e1      	cmp	r9, ip
 8004554:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8004558:	f84e 2b04 	str.w	r2, [lr], #4
 800455c:	d2de      	bcs.n	800451c <quorem+0x42>
 800455e:	9b00      	ldr	r3, [sp, #0]
 8004560:	58eb      	ldr	r3, [r5, r3]
 8004562:	b92b      	cbnz	r3, 8004570 <quorem+0x96>
 8004564:	9b01      	ldr	r3, [sp, #4]
 8004566:	3b04      	subs	r3, #4
 8004568:	429d      	cmp	r5, r3
 800456a:	461a      	mov	r2, r3
 800456c:	d32f      	bcc.n	80045ce <quorem+0xf4>
 800456e:	613c      	str	r4, [r7, #16]
 8004570:	4638      	mov	r0, r7
 8004572:	f001 f981 	bl	8005878 <__mcmp>
 8004576:	2800      	cmp	r0, #0
 8004578:	db25      	blt.n	80045c6 <quorem+0xec>
 800457a:	4629      	mov	r1, r5
 800457c:	2000      	movs	r0, #0
 800457e:	f858 2b04 	ldr.w	r2, [r8], #4
 8004582:	f8d1 c000 	ldr.w	ip, [r1]
 8004586:	fa1f fe82 	uxth.w	lr, r2
 800458a:	fa1f f38c 	uxth.w	r3, ip
 800458e:	eba3 030e 	sub.w	r3, r3, lr
 8004592:	4403      	add	r3, r0
 8004594:	0c12      	lsrs	r2, r2, #16
 8004596:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800459a:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800459e:	b29b      	uxth	r3, r3
 80045a0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80045a4:	45c1      	cmp	r9, r8
 80045a6:	ea4f 4022 	mov.w	r0, r2, asr #16
 80045aa:	f841 3b04 	str.w	r3, [r1], #4
 80045ae:	d2e6      	bcs.n	800457e <quorem+0xa4>
 80045b0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80045b4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80045b8:	b922      	cbnz	r2, 80045c4 <quorem+0xea>
 80045ba:	3b04      	subs	r3, #4
 80045bc:	429d      	cmp	r5, r3
 80045be:	461a      	mov	r2, r3
 80045c0:	d30b      	bcc.n	80045da <quorem+0x100>
 80045c2:	613c      	str	r4, [r7, #16]
 80045c4:	3601      	adds	r6, #1
 80045c6:	4630      	mov	r0, r6
 80045c8:	b003      	add	sp, #12
 80045ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80045ce:	6812      	ldr	r2, [r2, #0]
 80045d0:	3b04      	subs	r3, #4
 80045d2:	2a00      	cmp	r2, #0
 80045d4:	d1cb      	bne.n	800456e <quorem+0x94>
 80045d6:	3c01      	subs	r4, #1
 80045d8:	e7c6      	b.n	8004568 <quorem+0x8e>
 80045da:	6812      	ldr	r2, [r2, #0]
 80045dc:	3b04      	subs	r3, #4
 80045de:	2a00      	cmp	r2, #0
 80045e0:	d1ef      	bne.n	80045c2 <quorem+0xe8>
 80045e2:	3c01      	subs	r4, #1
 80045e4:	e7ea      	b.n	80045bc <quorem+0xe2>
 80045e6:	2000      	movs	r0, #0
 80045e8:	e7ee      	b.n	80045c8 <quorem+0xee>
 80045ea:	0000      	movs	r0, r0
 80045ec:	0000      	movs	r0, r0
	...

080045f0 <_dtoa_r>:
 80045f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80045f4:	4614      	mov	r4, r2
 80045f6:	461d      	mov	r5, r3
 80045f8:	69c7      	ldr	r7, [r0, #28]
 80045fa:	b097      	sub	sp, #92	@ 0x5c
 80045fc:	4681      	mov	r9, r0
 80045fe:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8004602:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 8004604:	b97f      	cbnz	r7, 8004626 <_dtoa_r+0x36>
 8004606:	2010      	movs	r0, #16
 8004608:	f000 fe0e 	bl	8005228 <malloc>
 800460c:	4602      	mov	r2, r0
 800460e:	f8c9 001c 	str.w	r0, [r9, #28]
 8004612:	b920      	cbnz	r0, 800461e <_dtoa_r+0x2e>
 8004614:	21ef      	movs	r1, #239	@ 0xef
 8004616:	4bac      	ldr	r3, [pc, #688]	@ (80048c8 <_dtoa_r+0x2d8>)
 8004618:	48ac      	ldr	r0, [pc, #688]	@ (80048cc <_dtoa_r+0x2dc>)
 800461a:	f001 fc6d 	bl	8005ef8 <__assert_func>
 800461e:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8004622:	6007      	str	r7, [r0, #0]
 8004624:	60c7      	str	r7, [r0, #12]
 8004626:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800462a:	6819      	ldr	r1, [r3, #0]
 800462c:	b159      	cbz	r1, 8004646 <_dtoa_r+0x56>
 800462e:	685a      	ldr	r2, [r3, #4]
 8004630:	2301      	movs	r3, #1
 8004632:	4093      	lsls	r3, r2
 8004634:	604a      	str	r2, [r1, #4]
 8004636:	608b      	str	r3, [r1, #8]
 8004638:	4648      	mov	r0, r9
 800463a:	f000 feeb 	bl	8005414 <_Bfree>
 800463e:	2200      	movs	r2, #0
 8004640:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8004644:	601a      	str	r2, [r3, #0]
 8004646:	1e2b      	subs	r3, r5, #0
 8004648:	bfaf      	iteee	ge
 800464a:	2300      	movge	r3, #0
 800464c:	2201      	movlt	r2, #1
 800464e:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8004652:	9307      	strlt	r3, [sp, #28]
 8004654:	bfa8      	it	ge
 8004656:	6033      	strge	r3, [r6, #0]
 8004658:	f8dd 801c 	ldr.w	r8, [sp, #28]
 800465c:	4b9c      	ldr	r3, [pc, #624]	@ (80048d0 <_dtoa_r+0x2e0>)
 800465e:	bfb8      	it	lt
 8004660:	6032      	strlt	r2, [r6, #0]
 8004662:	ea33 0308 	bics.w	r3, r3, r8
 8004666:	d112      	bne.n	800468e <_dtoa_r+0x9e>
 8004668:	f242 730f 	movw	r3, #9999	@ 0x270f
 800466c:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800466e:	6013      	str	r3, [r2, #0]
 8004670:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8004674:	4323      	orrs	r3, r4
 8004676:	f000 855e 	beq.w	8005136 <_dtoa_r+0xb46>
 800467a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800467c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 80048d4 <_dtoa_r+0x2e4>
 8004680:	2b00      	cmp	r3, #0
 8004682:	f000 8560 	beq.w	8005146 <_dtoa_r+0xb56>
 8004686:	f10a 0303 	add.w	r3, sl, #3
 800468a:	f000 bd5a 	b.w	8005142 <_dtoa_r+0xb52>
 800468e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004692:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8004696:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800469a:	2200      	movs	r2, #0
 800469c:	2300      	movs	r3, #0
 800469e:	f7fc f983 	bl	80009a8 <__aeabi_dcmpeq>
 80046a2:	4607      	mov	r7, r0
 80046a4:	b158      	cbz	r0, 80046be <_dtoa_r+0xce>
 80046a6:	2301      	movs	r3, #1
 80046a8:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80046aa:	6013      	str	r3, [r2, #0]
 80046ac:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80046ae:	b113      	cbz	r3, 80046b6 <_dtoa_r+0xc6>
 80046b0:	4b89      	ldr	r3, [pc, #548]	@ (80048d8 <_dtoa_r+0x2e8>)
 80046b2:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80046b4:	6013      	str	r3, [r2, #0]
 80046b6:	f8df a224 	ldr.w	sl, [pc, #548]	@ 80048dc <_dtoa_r+0x2ec>
 80046ba:	f000 bd44 	b.w	8005146 <_dtoa_r+0xb56>
 80046be:	ab14      	add	r3, sp, #80	@ 0x50
 80046c0:	9301      	str	r3, [sp, #4]
 80046c2:	ab15      	add	r3, sp, #84	@ 0x54
 80046c4:	9300      	str	r3, [sp, #0]
 80046c6:	4648      	mov	r0, r9
 80046c8:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80046cc:	f001 f984 	bl	80059d8 <__d2b>
 80046d0:	f3c8 560a 	ubfx	r6, r8, #20, #11
 80046d4:	9003      	str	r0, [sp, #12]
 80046d6:	2e00      	cmp	r6, #0
 80046d8:	d078      	beq.n	80047cc <_dtoa_r+0x1dc>
 80046da:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80046de:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80046e0:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80046e4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80046e8:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80046ec:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80046f0:	9712      	str	r7, [sp, #72]	@ 0x48
 80046f2:	4619      	mov	r1, r3
 80046f4:	2200      	movs	r2, #0
 80046f6:	4b7a      	ldr	r3, [pc, #488]	@ (80048e0 <_dtoa_r+0x2f0>)
 80046f8:	f7fb fd36 	bl	8000168 <__aeabi_dsub>
 80046fc:	a36c      	add	r3, pc, #432	@ (adr r3, 80048b0 <_dtoa_r+0x2c0>)
 80046fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004702:	f7fb fee9 	bl	80004d8 <__aeabi_dmul>
 8004706:	a36c      	add	r3, pc, #432	@ (adr r3, 80048b8 <_dtoa_r+0x2c8>)
 8004708:	e9d3 2300 	ldrd	r2, r3, [r3]
 800470c:	f7fb fd2e 	bl	800016c <__adddf3>
 8004710:	4604      	mov	r4, r0
 8004712:	4630      	mov	r0, r6
 8004714:	460d      	mov	r5, r1
 8004716:	f7fb fe75 	bl	8000404 <__aeabi_i2d>
 800471a:	a369      	add	r3, pc, #420	@ (adr r3, 80048c0 <_dtoa_r+0x2d0>)
 800471c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004720:	f7fb feda 	bl	80004d8 <__aeabi_dmul>
 8004724:	4602      	mov	r2, r0
 8004726:	460b      	mov	r3, r1
 8004728:	4620      	mov	r0, r4
 800472a:	4629      	mov	r1, r5
 800472c:	f7fb fd1e 	bl	800016c <__adddf3>
 8004730:	4604      	mov	r4, r0
 8004732:	460d      	mov	r5, r1
 8004734:	f7fc f980 	bl	8000a38 <__aeabi_d2iz>
 8004738:	2200      	movs	r2, #0
 800473a:	4607      	mov	r7, r0
 800473c:	2300      	movs	r3, #0
 800473e:	4620      	mov	r0, r4
 8004740:	4629      	mov	r1, r5
 8004742:	f7fc f93b 	bl	80009bc <__aeabi_dcmplt>
 8004746:	b140      	cbz	r0, 800475a <_dtoa_r+0x16a>
 8004748:	4638      	mov	r0, r7
 800474a:	f7fb fe5b 	bl	8000404 <__aeabi_i2d>
 800474e:	4622      	mov	r2, r4
 8004750:	462b      	mov	r3, r5
 8004752:	f7fc f929 	bl	80009a8 <__aeabi_dcmpeq>
 8004756:	b900      	cbnz	r0, 800475a <_dtoa_r+0x16a>
 8004758:	3f01      	subs	r7, #1
 800475a:	2f16      	cmp	r7, #22
 800475c:	d854      	bhi.n	8004808 <_dtoa_r+0x218>
 800475e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004762:	4b60      	ldr	r3, [pc, #384]	@ (80048e4 <_dtoa_r+0x2f4>)
 8004764:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8004768:	e9d3 2300 	ldrd	r2, r3, [r3]
 800476c:	f7fc f926 	bl	80009bc <__aeabi_dcmplt>
 8004770:	2800      	cmp	r0, #0
 8004772:	d04b      	beq.n	800480c <_dtoa_r+0x21c>
 8004774:	2300      	movs	r3, #0
 8004776:	3f01      	subs	r7, #1
 8004778:	930f      	str	r3, [sp, #60]	@ 0x3c
 800477a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800477c:	1b9b      	subs	r3, r3, r6
 800477e:	1e5a      	subs	r2, r3, #1
 8004780:	bf49      	itett	mi
 8004782:	f1c3 0301 	rsbmi	r3, r3, #1
 8004786:	2300      	movpl	r3, #0
 8004788:	9304      	strmi	r3, [sp, #16]
 800478a:	2300      	movmi	r3, #0
 800478c:	9209      	str	r2, [sp, #36]	@ 0x24
 800478e:	bf54      	ite	pl
 8004790:	9304      	strpl	r3, [sp, #16]
 8004792:	9309      	strmi	r3, [sp, #36]	@ 0x24
 8004794:	2f00      	cmp	r7, #0
 8004796:	db3b      	blt.n	8004810 <_dtoa_r+0x220>
 8004798:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800479a:	970e      	str	r7, [sp, #56]	@ 0x38
 800479c:	443b      	add	r3, r7
 800479e:	9309      	str	r3, [sp, #36]	@ 0x24
 80047a0:	2300      	movs	r3, #0
 80047a2:	930a      	str	r3, [sp, #40]	@ 0x28
 80047a4:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80047a6:	2b09      	cmp	r3, #9
 80047a8:	d865      	bhi.n	8004876 <_dtoa_r+0x286>
 80047aa:	2b05      	cmp	r3, #5
 80047ac:	bfc4      	itt	gt
 80047ae:	3b04      	subgt	r3, #4
 80047b0:	9320      	strgt	r3, [sp, #128]	@ 0x80
 80047b2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80047b4:	bfc8      	it	gt
 80047b6:	2400      	movgt	r4, #0
 80047b8:	f1a3 0302 	sub.w	r3, r3, #2
 80047bc:	bfd8      	it	le
 80047be:	2401      	movle	r4, #1
 80047c0:	2b03      	cmp	r3, #3
 80047c2:	d864      	bhi.n	800488e <_dtoa_r+0x29e>
 80047c4:	e8df f003 	tbb	[pc, r3]
 80047c8:	2c385553 	.word	0x2c385553
 80047cc:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 80047d0:	441e      	add	r6, r3
 80047d2:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80047d6:	2b20      	cmp	r3, #32
 80047d8:	bfc1      	itttt	gt
 80047da:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80047de:	fa08 f803 	lslgt.w	r8, r8, r3
 80047e2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80047e6:	fa24 f303 	lsrgt.w	r3, r4, r3
 80047ea:	bfd6      	itet	le
 80047ec:	f1c3 0320 	rsble	r3, r3, #32
 80047f0:	ea48 0003 	orrgt.w	r0, r8, r3
 80047f4:	fa04 f003 	lslle.w	r0, r4, r3
 80047f8:	f7fb fdf4 	bl	80003e4 <__aeabi_ui2d>
 80047fc:	2201      	movs	r2, #1
 80047fe:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8004802:	3e01      	subs	r6, #1
 8004804:	9212      	str	r2, [sp, #72]	@ 0x48
 8004806:	e774      	b.n	80046f2 <_dtoa_r+0x102>
 8004808:	2301      	movs	r3, #1
 800480a:	e7b5      	b.n	8004778 <_dtoa_r+0x188>
 800480c:	900f      	str	r0, [sp, #60]	@ 0x3c
 800480e:	e7b4      	b.n	800477a <_dtoa_r+0x18a>
 8004810:	9b04      	ldr	r3, [sp, #16]
 8004812:	1bdb      	subs	r3, r3, r7
 8004814:	9304      	str	r3, [sp, #16]
 8004816:	427b      	negs	r3, r7
 8004818:	930a      	str	r3, [sp, #40]	@ 0x28
 800481a:	2300      	movs	r3, #0
 800481c:	930e      	str	r3, [sp, #56]	@ 0x38
 800481e:	e7c1      	b.n	80047a4 <_dtoa_r+0x1b4>
 8004820:	2301      	movs	r3, #1
 8004822:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004824:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8004826:	eb07 0b03 	add.w	fp, r7, r3
 800482a:	f10b 0301 	add.w	r3, fp, #1
 800482e:	2b01      	cmp	r3, #1
 8004830:	9308      	str	r3, [sp, #32]
 8004832:	bfb8      	it	lt
 8004834:	2301      	movlt	r3, #1
 8004836:	e006      	b.n	8004846 <_dtoa_r+0x256>
 8004838:	2301      	movs	r3, #1
 800483a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800483c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800483e:	2b00      	cmp	r3, #0
 8004840:	dd28      	ble.n	8004894 <_dtoa_r+0x2a4>
 8004842:	469b      	mov	fp, r3
 8004844:	9308      	str	r3, [sp, #32]
 8004846:	2100      	movs	r1, #0
 8004848:	2204      	movs	r2, #4
 800484a:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800484e:	f102 0514 	add.w	r5, r2, #20
 8004852:	429d      	cmp	r5, r3
 8004854:	d926      	bls.n	80048a4 <_dtoa_r+0x2b4>
 8004856:	6041      	str	r1, [r0, #4]
 8004858:	4648      	mov	r0, r9
 800485a:	f000 fd9b 	bl	8005394 <_Balloc>
 800485e:	4682      	mov	sl, r0
 8004860:	2800      	cmp	r0, #0
 8004862:	d143      	bne.n	80048ec <_dtoa_r+0x2fc>
 8004864:	4602      	mov	r2, r0
 8004866:	f240 11af 	movw	r1, #431	@ 0x1af
 800486a:	4b1f      	ldr	r3, [pc, #124]	@ (80048e8 <_dtoa_r+0x2f8>)
 800486c:	e6d4      	b.n	8004618 <_dtoa_r+0x28>
 800486e:	2300      	movs	r3, #0
 8004870:	e7e3      	b.n	800483a <_dtoa_r+0x24a>
 8004872:	2300      	movs	r3, #0
 8004874:	e7d5      	b.n	8004822 <_dtoa_r+0x232>
 8004876:	2401      	movs	r4, #1
 8004878:	2300      	movs	r3, #0
 800487a:	940b      	str	r4, [sp, #44]	@ 0x2c
 800487c:	9320      	str	r3, [sp, #128]	@ 0x80
 800487e:	f04f 3bff 	mov.w	fp, #4294967295
 8004882:	2200      	movs	r2, #0
 8004884:	2312      	movs	r3, #18
 8004886:	f8cd b020 	str.w	fp, [sp, #32]
 800488a:	9221      	str	r2, [sp, #132]	@ 0x84
 800488c:	e7db      	b.n	8004846 <_dtoa_r+0x256>
 800488e:	2301      	movs	r3, #1
 8004890:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004892:	e7f4      	b.n	800487e <_dtoa_r+0x28e>
 8004894:	f04f 0b01 	mov.w	fp, #1
 8004898:	465b      	mov	r3, fp
 800489a:	f8cd b020 	str.w	fp, [sp, #32]
 800489e:	f8cd b084 	str.w	fp, [sp, #132]	@ 0x84
 80048a2:	e7d0      	b.n	8004846 <_dtoa_r+0x256>
 80048a4:	3101      	adds	r1, #1
 80048a6:	0052      	lsls	r2, r2, #1
 80048a8:	e7d1      	b.n	800484e <_dtoa_r+0x25e>
 80048aa:	bf00      	nop
 80048ac:	f3af 8000 	nop.w
 80048b0:	636f4361 	.word	0x636f4361
 80048b4:	3fd287a7 	.word	0x3fd287a7
 80048b8:	8b60c8b3 	.word	0x8b60c8b3
 80048bc:	3fc68a28 	.word	0x3fc68a28
 80048c0:	509f79fb 	.word	0x509f79fb
 80048c4:	3fd34413 	.word	0x3fd34413
 80048c8:	08006a07 	.word	0x08006a07
 80048cc:	08006a1e 	.word	0x08006a1e
 80048d0:	7ff00000 	.word	0x7ff00000
 80048d4:	08006a03 	.word	0x08006a03
 80048d8:	080069d7 	.word	0x080069d7
 80048dc:	080069d6 	.word	0x080069d6
 80048e0:	3ff80000 	.word	0x3ff80000
 80048e4:	08006b70 	.word	0x08006b70
 80048e8:	08006a76 	.word	0x08006a76
 80048ec:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80048f0:	6018      	str	r0, [r3, #0]
 80048f2:	9b08      	ldr	r3, [sp, #32]
 80048f4:	2b0e      	cmp	r3, #14
 80048f6:	f200 80a1 	bhi.w	8004a3c <_dtoa_r+0x44c>
 80048fa:	2c00      	cmp	r4, #0
 80048fc:	f000 809e 	beq.w	8004a3c <_dtoa_r+0x44c>
 8004900:	2f00      	cmp	r7, #0
 8004902:	dd33      	ble.n	800496c <_dtoa_r+0x37c>
 8004904:	4b9c      	ldr	r3, [pc, #624]	@ (8004b78 <_dtoa_r+0x588>)
 8004906:	f007 020f 	and.w	r2, r7, #15
 800490a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800490e:	05f8      	lsls	r0, r7, #23
 8004910:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004914:	e9cd 3410 	strd	r3, r4, [sp, #64]	@ 0x40
 8004918:	ea4f 1427 	mov.w	r4, r7, asr #4
 800491c:	d516      	bpl.n	800494c <_dtoa_r+0x35c>
 800491e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004922:	4b96      	ldr	r3, [pc, #600]	@ (8004b7c <_dtoa_r+0x58c>)
 8004924:	2603      	movs	r6, #3
 8004926:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800492a:	f7fb feff 	bl	800072c <__aeabi_ddiv>
 800492e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8004932:	f004 040f 	and.w	r4, r4, #15
 8004936:	4d91      	ldr	r5, [pc, #580]	@ (8004b7c <_dtoa_r+0x58c>)
 8004938:	b954      	cbnz	r4, 8004950 <_dtoa_r+0x360>
 800493a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800493e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004942:	f7fb fef3 	bl	800072c <__aeabi_ddiv>
 8004946:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800494a:	e028      	b.n	800499e <_dtoa_r+0x3ae>
 800494c:	2602      	movs	r6, #2
 800494e:	e7f2      	b.n	8004936 <_dtoa_r+0x346>
 8004950:	07e1      	lsls	r1, r4, #31
 8004952:	d508      	bpl.n	8004966 <_dtoa_r+0x376>
 8004954:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8004958:	e9d5 2300 	ldrd	r2, r3, [r5]
 800495c:	f7fb fdbc 	bl	80004d8 <__aeabi_dmul>
 8004960:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8004964:	3601      	adds	r6, #1
 8004966:	1064      	asrs	r4, r4, #1
 8004968:	3508      	adds	r5, #8
 800496a:	e7e5      	b.n	8004938 <_dtoa_r+0x348>
 800496c:	f000 80af 	beq.w	8004ace <_dtoa_r+0x4de>
 8004970:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004974:	427c      	negs	r4, r7
 8004976:	4b80      	ldr	r3, [pc, #512]	@ (8004b78 <_dtoa_r+0x588>)
 8004978:	f004 020f 	and.w	r2, r4, #15
 800497c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004980:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004984:	f7fb fda8 	bl	80004d8 <__aeabi_dmul>
 8004988:	2602      	movs	r6, #2
 800498a:	2300      	movs	r3, #0
 800498c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8004990:	4d7a      	ldr	r5, [pc, #488]	@ (8004b7c <_dtoa_r+0x58c>)
 8004992:	1124      	asrs	r4, r4, #4
 8004994:	2c00      	cmp	r4, #0
 8004996:	f040 808f 	bne.w	8004ab8 <_dtoa_r+0x4c8>
 800499a:	2b00      	cmp	r3, #0
 800499c:	d1d3      	bne.n	8004946 <_dtoa_r+0x356>
 800499e:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 80049a2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	f000 8094 	beq.w	8004ad2 <_dtoa_r+0x4e2>
 80049aa:	2200      	movs	r2, #0
 80049ac:	4620      	mov	r0, r4
 80049ae:	4629      	mov	r1, r5
 80049b0:	4b73      	ldr	r3, [pc, #460]	@ (8004b80 <_dtoa_r+0x590>)
 80049b2:	f7fc f803 	bl	80009bc <__aeabi_dcmplt>
 80049b6:	2800      	cmp	r0, #0
 80049b8:	f000 808b 	beq.w	8004ad2 <_dtoa_r+0x4e2>
 80049bc:	9b08      	ldr	r3, [sp, #32]
 80049be:	2b00      	cmp	r3, #0
 80049c0:	f000 8087 	beq.w	8004ad2 <_dtoa_r+0x4e2>
 80049c4:	f1bb 0f00 	cmp.w	fp, #0
 80049c8:	dd34      	ble.n	8004a34 <_dtoa_r+0x444>
 80049ca:	4620      	mov	r0, r4
 80049cc:	2200      	movs	r2, #0
 80049ce:	4629      	mov	r1, r5
 80049d0:	4b6c      	ldr	r3, [pc, #432]	@ (8004b84 <_dtoa_r+0x594>)
 80049d2:	f7fb fd81 	bl	80004d8 <__aeabi_dmul>
 80049d6:	465c      	mov	r4, fp
 80049d8:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80049dc:	f107 38ff 	add.w	r8, r7, #4294967295
 80049e0:	3601      	adds	r6, #1
 80049e2:	4630      	mov	r0, r6
 80049e4:	f7fb fd0e 	bl	8000404 <__aeabi_i2d>
 80049e8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80049ec:	f7fb fd74 	bl	80004d8 <__aeabi_dmul>
 80049f0:	2200      	movs	r2, #0
 80049f2:	4b65      	ldr	r3, [pc, #404]	@ (8004b88 <_dtoa_r+0x598>)
 80049f4:	f7fb fbba 	bl	800016c <__adddf3>
 80049f8:	4605      	mov	r5, r0
 80049fa:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80049fe:	2c00      	cmp	r4, #0
 8004a00:	d16a      	bne.n	8004ad8 <_dtoa_r+0x4e8>
 8004a02:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004a06:	2200      	movs	r2, #0
 8004a08:	4b60      	ldr	r3, [pc, #384]	@ (8004b8c <_dtoa_r+0x59c>)
 8004a0a:	f7fb fbad 	bl	8000168 <__aeabi_dsub>
 8004a0e:	4602      	mov	r2, r0
 8004a10:	460b      	mov	r3, r1
 8004a12:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8004a16:	462a      	mov	r2, r5
 8004a18:	4633      	mov	r3, r6
 8004a1a:	f7fb ffed 	bl	80009f8 <__aeabi_dcmpgt>
 8004a1e:	2800      	cmp	r0, #0
 8004a20:	f040 8298 	bne.w	8004f54 <_dtoa_r+0x964>
 8004a24:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004a28:	462a      	mov	r2, r5
 8004a2a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8004a2e:	f7fb ffc5 	bl	80009bc <__aeabi_dcmplt>
 8004a32:	bb38      	cbnz	r0, 8004a84 <_dtoa_r+0x494>
 8004a34:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8004a38:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8004a3c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	f2c0 8157 	blt.w	8004cf2 <_dtoa_r+0x702>
 8004a44:	2f0e      	cmp	r7, #14
 8004a46:	f300 8154 	bgt.w	8004cf2 <_dtoa_r+0x702>
 8004a4a:	4b4b      	ldr	r3, [pc, #300]	@ (8004b78 <_dtoa_r+0x588>)
 8004a4c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8004a50:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004a54:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8004a58:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	f280 80e5 	bge.w	8004c2a <_dtoa_r+0x63a>
 8004a60:	9b08      	ldr	r3, [sp, #32]
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	f300 80e1 	bgt.w	8004c2a <_dtoa_r+0x63a>
 8004a68:	d10c      	bne.n	8004a84 <_dtoa_r+0x494>
 8004a6a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004a6e:	2200      	movs	r2, #0
 8004a70:	4b46      	ldr	r3, [pc, #280]	@ (8004b8c <_dtoa_r+0x59c>)
 8004a72:	f7fb fd31 	bl	80004d8 <__aeabi_dmul>
 8004a76:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004a7a:	f7fb ffb3 	bl	80009e4 <__aeabi_dcmpge>
 8004a7e:	2800      	cmp	r0, #0
 8004a80:	f000 8266 	beq.w	8004f50 <_dtoa_r+0x960>
 8004a84:	2400      	movs	r4, #0
 8004a86:	4625      	mov	r5, r4
 8004a88:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8004a8a:	4656      	mov	r6, sl
 8004a8c:	ea6f 0803 	mvn.w	r8, r3
 8004a90:	2700      	movs	r7, #0
 8004a92:	4621      	mov	r1, r4
 8004a94:	4648      	mov	r0, r9
 8004a96:	f000 fcbd 	bl	8005414 <_Bfree>
 8004a9a:	2d00      	cmp	r5, #0
 8004a9c:	f000 80bd 	beq.w	8004c1a <_dtoa_r+0x62a>
 8004aa0:	b12f      	cbz	r7, 8004aae <_dtoa_r+0x4be>
 8004aa2:	42af      	cmp	r7, r5
 8004aa4:	d003      	beq.n	8004aae <_dtoa_r+0x4be>
 8004aa6:	4639      	mov	r1, r7
 8004aa8:	4648      	mov	r0, r9
 8004aaa:	f000 fcb3 	bl	8005414 <_Bfree>
 8004aae:	4629      	mov	r1, r5
 8004ab0:	4648      	mov	r0, r9
 8004ab2:	f000 fcaf 	bl	8005414 <_Bfree>
 8004ab6:	e0b0      	b.n	8004c1a <_dtoa_r+0x62a>
 8004ab8:	07e2      	lsls	r2, r4, #31
 8004aba:	d505      	bpl.n	8004ac8 <_dtoa_r+0x4d8>
 8004abc:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004ac0:	f7fb fd0a 	bl	80004d8 <__aeabi_dmul>
 8004ac4:	2301      	movs	r3, #1
 8004ac6:	3601      	adds	r6, #1
 8004ac8:	1064      	asrs	r4, r4, #1
 8004aca:	3508      	adds	r5, #8
 8004acc:	e762      	b.n	8004994 <_dtoa_r+0x3a4>
 8004ace:	2602      	movs	r6, #2
 8004ad0:	e765      	b.n	800499e <_dtoa_r+0x3ae>
 8004ad2:	46b8      	mov	r8, r7
 8004ad4:	9c08      	ldr	r4, [sp, #32]
 8004ad6:	e784      	b.n	80049e2 <_dtoa_r+0x3f2>
 8004ad8:	4b27      	ldr	r3, [pc, #156]	@ (8004b78 <_dtoa_r+0x588>)
 8004ada:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8004adc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8004ae0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8004ae4:	4454      	add	r4, sl
 8004ae6:	2900      	cmp	r1, #0
 8004ae8:	d054      	beq.n	8004b94 <_dtoa_r+0x5a4>
 8004aea:	2000      	movs	r0, #0
 8004aec:	4928      	ldr	r1, [pc, #160]	@ (8004b90 <_dtoa_r+0x5a0>)
 8004aee:	f7fb fe1d 	bl	800072c <__aeabi_ddiv>
 8004af2:	4633      	mov	r3, r6
 8004af4:	462a      	mov	r2, r5
 8004af6:	f7fb fb37 	bl	8000168 <__aeabi_dsub>
 8004afa:	4656      	mov	r6, sl
 8004afc:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8004b00:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004b04:	f7fb ff98 	bl	8000a38 <__aeabi_d2iz>
 8004b08:	4605      	mov	r5, r0
 8004b0a:	f7fb fc7b 	bl	8000404 <__aeabi_i2d>
 8004b0e:	4602      	mov	r2, r0
 8004b10:	460b      	mov	r3, r1
 8004b12:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004b16:	f7fb fb27 	bl	8000168 <__aeabi_dsub>
 8004b1a:	4602      	mov	r2, r0
 8004b1c:	460b      	mov	r3, r1
 8004b1e:	3530      	adds	r5, #48	@ 0x30
 8004b20:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8004b24:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8004b28:	f806 5b01 	strb.w	r5, [r6], #1
 8004b2c:	f7fb ff46 	bl	80009bc <__aeabi_dcmplt>
 8004b30:	2800      	cmp	r0, #0
 8004b32:	d172      	bne.n	8004c1a <_dtoa_r+0x62a>
 8004b34:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004b38:	2000      	movs	r0, #0
 8004b3a:	4911      	ldr	r1, [pc, #68]	@ (8004b80 <_dtoa_r+0x590>)
 8004b3c:	f7fb fb14 	bl	8000168 <__aeabi_dsub>
 8004b40:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8004b44:	f7fb ff3a 	bl	80009bc <__aeabi_dcmplt>
 8004b48:	2800      	cmp	r0, #0
 8004b4a:	f040 80b4 	bne.w	8004cb6 <_dtoa_r+0x6c6>
 8004b4e:	42a6      	cmp	r6, r4
 8004b50:	f43f af70 	beq.w	8004a34 <_dtoa_r+0x444>
 8004b54:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8004b58:	2200      	movs	r2, #0
 8004b5a:	4b0a      	ldr	r3, [pc, #40]	@ (8004b84 <_dtoa_r+0x594>)
 8004b5c:	f7fb fcbc 	bl	80004d8 <__aeabi_dmul>
 8004b60:	2200      	movs	r2, #0
 8004b62:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8004b66:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004b6a:	4b06      	ldr	r3, [pc, #24]	@ (8004b84 <_dtoa_r+0x594>)
 8004b6c:	f7fb fcb4 	bl	80004d8 <__aeabi_dmul>
 8004b70:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8004b74:	e7c4      	b.n	8004b00 <_dtoa_r+0x510>
 8004b76:	bf00      	nop
 8004b78:	08006b70 	.word	0x08006b70
 8004b7c:	08006b48 	.word	0x08006b48
 8004b80:	3ff00000 	.word	0x3ff00000
 8004b84:	40240000 	.word	0x40240000
 8004b88:	401c0000 	.word	0x401c0000
 8004b8c:	40140000 	.word	0x40140000
 8004b90:	3fe00000 	.word	0x3fe00000
 8004b94:	4631      	mov	r1, r6
 8004b96:	4628      	mov	r0, r5
 8004b98:	f7fb fc9e 	bl	80004d8 <__aeabi_dmul>
 8004b9c:	4656      	mov	r6, sl
 8004b9e:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8004ba2:	9413      	str	r4, [sp, #76]	@ 0x4c
 8004ba4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004ba8:	f7fb ff46 	bl	8000a38 <__aeabi_d2iz>
 8004bac:	4605      	mov	r5, r0
 8004bae:	f7fb fc29 	bl	8000404 <__aeabi_i2d>
 8004bb2:	4602      	mov	r2, r0
 8004bb4:	460b      	mov	r3, r1
 8004bb6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004bba:	f7fb fad5 	bl	8000168 <__aeabi_dsub>
 8004bbe:	4602      	mov	r2, r0
 8004bc0:	460b      	mov	r3, r1
 8004bc2:	3530      	adds	r5, #48	@ 0x30
 8004bc4:	f806 5b01 	strb.w	r5, [r6], #1
 8004bc8:	42a6      	cmp	r6, r4
 8004bca:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8004bce:	f04f 0200 	mov.w	r2, #0
 8004bd2:	d124      	bne.n	8004c1e <_dtoa_r+0x62e>
 8004bd4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8004bd8:	4bae      	ldr	r3, [pc, #696]	@ (8004e94 <_dtoa_r+0x8a4>)
 8004bda:	f7fb fac7 	bl	800016c <__adddf3>
 8004bde:	4602      	mov	r2, r0
 8004be0:	460b      	mov	r3, r1
 8004be2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004be6:	f7fb ff07 	bl	80009f8 <__aeabi_dcmpgt>
 8004bea:	2800      	cmp	r0, #0
 8004bec:	d163      	bne.n	8004cb6 <_dtoa_r+0x6c6>
 8004bee:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8004bf2:	2000      	movs	r0, #0
 8004bf4:	49a7      	ldr	r1, [pc, #668]	@ (8004e94 <_dtoa_r+0x8a4>)
 8004bf6:	f7fb fab7 	bl	8000168 <__aeabi_dsub>
 8004bfa:	4602      	mov	r2, r0
 8004bfc:	460b      	mov	r3, r1
 8004bfe:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004c02:	f7fb fedb 	bl	80009bc <__aeabi_dcmplt>
 8004c06:	2800      	cmp	r0, #0
 8004c08:	f43f af14 	beq.w	8004a34 <_dtoa_r+0x444>
 8004c0c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8004c0e:	1e73      	subs	r3, r6, #1
 8004c10:	9313      	str	r3, [sp, #76]	@ 0x4c
 8004c12:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8004c16:	2b30      	cmp	r3, #48	@ 0x30
 8004c18:	d0f8      	beq.n	8004c0c <_dtoa_r+0x61c>
 8004c1a:	4647      	mov	r7, r8
 8004c1c:	e03b      	b.n	8004c96 <_dtoa_r+0x6a6>
 8004c1e:	4b9e      	ldr	r3, [pc, #632]	@ (8004e98 <_dtoa_r+0x8a8>)
 8004c20:	f7fb fc5a 	bl	80004d8 <__aeabi_dmul>
 8004c24:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8004c28:	e7bc      	b.n	8004ba4 <_dtoa_r+0x5b4>
 8004c2a:	4656      	mov	r6, sl
 8004c2c:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 8004c30:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004c34:	4620      	mov	r0, r4
 8004c36:	4629      	mov	r1, r5
 8004c38:	f7fb fd78 	bl	800072c <__aeabi_ddiv>
 8004c3c:	f7fb fefc 	bl	8000a38 <__aeabi_d2iz>
 8004c40:	4680      	mov	r8, r0
 8004c42:	f7fb fbdf 	bl	8000404 <__aeabi_i2d>
 8004c46:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004c4a:	f7fb fc45 	bl	80004d8 <__aeabi_dmul>
 8004c4e:	4602      	mov	r2, r0
 8004c50:	460b      	mov	r3, r1
 8004c52:	4620      	mov	r0, r4
 8004c54:	4629      	mov	r1, r5
 8004c56:	f7fb fa87 	bl	8000168 <__aeabi_dsub>
 8004c5a:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8004c5e:	9d08      	ldr	r5, [sp, #32]
 8004c60:	f806 4b01 	strb.w	r4, [r6], #1
 8004c64:	eba6 040a 	sub.w	r4, r6, sl
 8004c68:	42a5      	cmp	r5, r4
 8004c6a:	4602      	mov	r2, r0
 8004c6c:	460b      	mov	r3, r1
 8004c6e:	d133      	bne.n	8004cd8 <_dtoa_r+0x6e8>
 8004c70:	f7fb fa7c 	bl	800016c <__adddf3>
 8004c74:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004c78:	4604      	mov	r4, r0
 8004c7a:	460d      	mov	r5, r1
 8004c7c:	f7fb febc 	bl	80009f8 <__aeabi_dcmpgt>
 8004c80:	b9c0      	cbnz	r0, 8004cb4 <_dtoa_r+0x6c4>
 8004c82:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004c86:	4620      	mov	r0, r4
 8004c88:	4629      	mov	r1, r5
 8004c8a:	f7fb fe8d 	bl	80009a8 <__aeabi_dcmpeq>
 8004c8e:	b110      	cbz	r0, 8004c96 <_dtoa_r+0x6a6>
 8004c90:	f018 0f01 	tst.w	r8, #1
 8004c94:	d10e      	bne.n	8004cb4 <_dtoa_r+0x6c4>
 8004c96:	4648      	mov	r0, r9
 8004c98:	9903      	ldr	r1, [sp, #12]
 8004c9a:	f000 fbbb 	bl	8005414 <_Bfree>
 8004c9e:	2300      	movs	r3, #0
 8004ca0:	7033      	strb	r3, [r6, #0]
 8004ca2:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8004ca4:	3701      	adds	r7, #1
 8004ca6:	601f      	str	r7, [r3, #0]
 8004ca8:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	f000 824b 	beq.w	8005146 <_dtoa_r+0xb56>
 8004cb0:	601e      	str	r6, [r3, #0]
 8004cb2:	e248      	b.n	8005146 <_dtoa_r+0xb56>
 8004cb4:	46b8      	mov	r8, r7
 8004cb6:	4633      	mov	r3, r6
 8004cb8:	461e      	mov	r6, r3
 8004cba:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004cbe:	2a39      	cmp	r2, #57	@ 0x39
 8004cc0:	d106      	bne.n	8004cd0 <_dtoa_r+0x6e0>
 8004cc2:	459a      	cmp	sl, r3
 8004cc4:	d1f8      	bne.n	8004cb8 <_dtoa_r+0x6c8>
 8004cc6:	2230      	movs	r2, #48	@ 0x30
 8004cc8:	f108 0801 	add.w	r8, r8, #1
 8004ccc:	f88a 2000 	strb.w	r2, [sl]
 8004cd0:	781a      	ldrb	r2, [r3, #0]
 8004cd2:	3201      	adds	r2, #1
 8004cd4:	701a      	strb	r2, [r3, #0]
 8004cd6:	e7a0      	b.n	8004c1a <_dtoa_r+0x62a>
 8004cd8:	2200      	movs	r2, #0
 8004cda:	4b6f      	ldr	r3, [pc, #444]	@ (8004e98 <_dtoa_r+0x8a8>)
 8004cdc:	f7fb fbfc 	bl	80004d8 <__aeabi_dmul>
 8004ce0:	2200      	movs	r2, #0
 8004ce2:	2300      	movs	r3, #0
 8004ce4:	4604      	mov	r4, r0
 8004ce6:	460d      	mov	r5, r1
 8004ce8:	f7fb fe5e 	bl	80009a8 <__aeabi_dcmpeq>
 8004cec:	2800      	cmp	r0, #0
 8004cee:	d09f      	beq.n	8004c30 <_dtoa_r+0x640>
 8004cf0:	e7d1      	b.n	8004c96 <_dtoa_r+0x6a6>
 8004cf2:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8004cf4:	2a00      	cmp	r2, #0
 8004cf6:	f000 80ea 	beq.w	8004ece <_dtoa_r+0x8de>
 8004cfa:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8004cfc:	2a01      	cmp	r2, #1
 8004cfe:	f300 80cd 	bgt.w	8004e9c <_dtoa_r+0x8ac>
 8004d02:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8004d04:	2a00      	cmp	r2, #0
 8004d06:	f000 80c1 	beq.w	8004e8c <_dtoa_r+0x89c>
 8004d0a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8004d0e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8004d10:	9e04      	ldr	r6, [sp, #16]
 8004d12:	9a04      	ldr	r2, [sp, #16]
 8004d14:	2101      	movs	r1, #1
 8004d16:	441a      	add	r2, r3
 8004d18:	9204      	str	r2, [sp, #16]
 8004d1a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004d1c:	4648      	mov	r0, r9
 8004d1e:	441a      	add	r2, r3
 8004d20:	9209      	str	r2, [sp, #36]	@ 0x24
 8004d22:	f000 fc2b 	bl	800557c <__i2b>
 8004d26:	4605      	mov	r5, r0
 8004d28:	b166      	cbz	r6, 8004d44 <_dtoa_r+0x754>
 8004d2a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	dd09      	ble.n	8004d44 <_dtoa_r+0x754>
 8004d30:	42b3      	cmp	r3, r6
 8004d32:	bfa8      	it	ge
 8004d34:	4633      	movge	r3, r6
 8004d36:	9a04      	ldr	r2, [sp, #16]
 8004d38:	1af6      	subs	r6, r6, r3
 8004d3a:	1ad2      	subs	r2, r2, r3
 8004d3c:	9204      	str	r2, [sp, #16]
 8004d3e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004d40:	1ad3      	subs	r3, r2, r3
 8004d42:	9309      	str	r3, [sp, #36]	@ 0x24
 8004d44:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004d46:	b30b      	cbz	r3, 8004d8c <_dtoa_r+0x79c>
 8004d48:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	f000 80c6 	beq.w	8004edc <_dtoa_r+0x8ec>
 8004d50:	2c00      	cmp	r4, #0
 8004d52:	f000 80c0 	beq.w	8004ed6 <_dtoa_r+0x8e6>
 8004d56:	4629      	mov	r1, r5
 8004d58:	4622      	mov	r2, r4
 8004d5a:	4648      	mov	r0, r9
 8004d5c:	f000 fcc6 	bl	80056ec <__pow5mult>
 8004d60:	9a03      	ldr	r2, [sp, #12]
 8004d62:	4601      	mov	r1, r0
 8004d64:	4605      	mov	r5, r0
 8004d66:	4648      	mov	r0, r9
 8004d68:	f000 fc1e 	bl	80055a8 <__multiply>
 8004d6c:	9903      	ldr	r1, [sp, #12]
 8004d6e:	4680      	mov	r8, r0
 8004d70:	4648      	mov	r0, r9
 8004d72:	f000 fb4f 	bl	8005414 <_Bfree>
 8004d76:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004d78:	1b1b      	subs	r3, r3, r4
 8004d7a:	930a      	str	r3, [sp, #40]	@ 0x28
 8004d7c:	f000 80b1 	beq.w	8004ee2 <_dtoa_r+0x8f2>
 8004d80:	4641      	mov	r1, r8
 8004d82:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004d84:	4648      	mov	r0, r9
 8004d86:	f000 fcb1 	bl	80056ec <__pow5mult>
 8004d8a:	9003      	str	r0, [sp, #12]
 8004d8c:	2101      	movs	r1, #1
 8004d8e:	4648      	mov	r0, r9
 8004d90:	f000 fbf4 	bl	800557c <__i2b>
 8004d94:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004d96:	4604      	mov	r4, r0
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	f000 81d8 	beq.w	800514e <_dtoa_r+0xb5e>
 8004d9e:	461a      	mov	r2, r3
 8004da0:	4601      	mov	r1, r0
 8004da2:	4648      	mov	r0, r9
 8004da4:	f000 fca2 	bl	80056ec <__pow5mult>
 8004da8:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004daa:	4604      	mov	r4, r0
 8004dac:	2b01      	cmp	r3, #1
 8004dae:	f300 809f 	bgt.w	8004ef0 <_dtoa_r+0x900>
 8004db2:	9b06      	ldr	r3, [sp, #24]
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	f040 8097 	bne.w	8004ee8 <_dtoa_r+0x8f8>
 8004dba:	9b07      	ldr	r3, [sp, #28]
 8004dbc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	f040 8093 	bne.w	8004eec <_dtoa_r+0x8fc>
 8004dc6:	9b07      	ldr	r3, [sp, #28]
 8004dc8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004dcc:	0d1b      	lsrs	r3, r3, #20
 8004dce:	051b      	lsls	r3, r3, #20
 8004dd0:	b133      	cbz	r3, 8004de0 <_dtoa_r+0x7f0>
 8004dd2:	9b04      	ldr	r3, [sp, #16]
 8004dd4:	3301      	adds	r3, #1
 8004dd6:	9304      	str	r3, [sp, #16]
 8004dd8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004dda:	3301      	adds	r3, #1
 8004ddc:	9309      	str	r3, [sp, #36]	@ 0x24
 8004dde:	2301      	movs	r3, #1
 8004de0:	930a      	str	r3, [sp, #40]	@ 0x28
 8004de2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	f000 81b8 	beq.w	800515a <_dtoa_r+0xb6a>
 8004dea:	6923      	ldr	r3, [r4, #16]
 8004dec:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8004df0:	6918      	ldr	r0, [r3, #16]
 8004df2:	f000 fb77 	bl	80054e4 <__hi0bits>
 8004df6:	f1c0 0020 	rsb	r0, r0, #32
 8004dfa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004dfc:	4418      	add	r0, r3
 8004dfe:	f010 001f 	ands.w	r0, r0, #31
 8004e02:	f000 8082 	beq.w	8004f0a <_dtoa_r+0x91a>
 8004e06:	f1c0 0320 	rsb	r3, r0, #32
 8004e0a:	2b04      	cmp	r3, #4
 8004e0c:	dd73      	ble.n	8004ef6 <_dtoa_r+0x906>
 8004e0e:	9b04      	ldr	r3, [sp, #16]
 8004e10:	f1c0 001c 	rsb	r0, r0, #28
 8004e14:	4403      	add	r3, r0
 8004e16:	9304      	str	r3, [sp, #16]
 8004e18:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004e1a:	4406      	add	r6, r0
 8004e1c:	4403      	add	r3, r0
 8004e1e:	9309      	str	r3, [sp, #36]	@ 0x24
 8004e20:	9b04      	ldr	r3, [sp, #16]
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	dd05      	ble.n	8004e32 <_dtoa_r+0x842>
 8004e26:	461a      	mov	r2, r3
 8004e28:	4648      	mov	r0, r9
 8004e2a:	9903      	ldr	r1, [sp, #12]
 8004e2c:	f000 fcb8 	bl	80057a0 <__lshift>
 8004e30:	9003      	str	r0, [sp, #12]
 8004e32:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	dd05      	ble.n	8004e44 <_dtoa_r+0x854>
 8004e38:	4621      	mov	r1, r4
 8004e3a:	461a      	mov	r2, r3
 8004e3c:	4648      	mov	r0, r9
 8004e3e:	f000 fcaf 	bl	80057a0 <__lshift>
 8004e42:	4604      	mov	r4, r0
 8004e44:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d061      	beq.n	8004f0e <_dtoa_r+0x91e>
 8004e4a:	4621      	mov	r1, r4
 8004e4c:	9803      	ldr	r0, [sp, #12]
 8004e4e:	f000 fd13 	bl	8005878 <__mcmp>
 8004e52:	2800      	cmp	r0, #0
 8004e54:	da5b      	bge.n	8004f0e <_dtoa_r+0x91e>
 8004e56:	2300      	movs	r3, #0
 8004e58:	220a      	movs	r2, #10
 8004e5a:	4648      	mov	r0, r9
 8004e5c:	9903      	ldr	r1, [sp, #12]
 8004e5e:	f000 fafb 	bl	8005458 <__multadd>
 8004e62:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004e64:	f107 38ff 	add.w	r8, r7, #4294967295
 8004e68:	9003      	str	r0, [sp, #12]
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	f000 8177 	beq.w	800515e <_dtoa_r+0xb6e>
 8004e70:	4629      	mov	r1, r5
 8004e72:	2300      	movs	r3, #0
 8004e74:	220a      	movs	r2, #10
 8004e76:	4648      	mov	r0, r9
 8004e78:	f000 faee 	bl	8005458 <__multadd>
 8004e7c:	f1bb 0f00 	cmp.w	fp, #0
 8004e80:	4605      	mov	r5, r0
 8004e82:	dc6f      	bgt.n	8004f64 <_dtoa_r+0x974>
 8004e84:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004e86:	2b02      	cmp	r3, #2
 8004e88:	dc49      	bgt.n	8004f1e <_dtoa_r+0x92e>
 8004e8a:	e06b      	b.n	8004f64 <_dtoa_r+0x974>
 8004e8c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8004e8e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8004e92:	e73c      	b.n	8004d0e <_dtoa_r+0x71e>
 8004e94:	3fe00000 	.word	0x3fe00000
 8004e98:	40240000 	.word	0x40240000
 8004e9c:	9b08      	ldr	r3, [sp, #32]
 8004e9e:	1e5c      	subs	r4, r3, #1
 8004ea0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004ea2:	42a3      	cmp	r3, r4
 8004ea4:	db09      	blt.n	8004eba <_dtoa_r+0x8ca>
 8004ea6:	1b1c      	subs	r4, r3, r4
 8004ea8:	9b08      	ldr	r3, [sp, #32]
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	f6bf af30 	bge.w	8004d10 <_dtoa_r+0x720>
 8004eb0:	9b04      	ldr	r3, [sp, #16]
 8004eb2:	9a08      	ldr	r2, [sp, #32]
 8004eb4:	1a9e      	subs	r6, r3, r2
 8004eb6:	2300      	movs	r3, #0
 8004eb8:	e72b      	b.n	8004d12 <_dtoa_r+0x722>
 8004eba:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004ebc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8004ebe:	1ae3      	subs	r3, r4, r3
 8004ec0:	441a      	add	r2, r3
 8004ec2:	940a      	str	r4, [sp, #40]	@ 0x28
 8004ec4:	9e04      	ldr	r6, [sp, #16]
 8004ec6:	2400      	movs	r4, #0
 8004ec8:	9b08      	ldr	r3, [sp, #32]
 8004eca:	920e      	str	r2, [sp, #56]	@ 0x38
 8004ecc:	e721      	b.n	8004d12 <_dtoa_r+0x722>
 8004ece:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8004ed0:	9e04      	ldr	r6, [sp, #16]
 8004ed2:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8004ed4:	e728      	b.n	8004d28 <_dtoa_r+0x738>
 8004ed6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8004eda:	e751      	b.n	8004d80 <_dtoa_r+0x790>
 8004edc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004ede:	9903      	ldr	r1, [sp, #12]
 8004ee0:	e750      	b.n	8004d84 <_dtoa_r+0x794>
 8004ee2:	f8cd 800c 	str.w	r8, [sp, #12]
 8004ee6:	e751      	b.n	8004d8c <_dtoa_r+0x79c>
 8004ee8:	2300      	movs	r3, #0
 8004eea:	e779      	b.n	8004de0 <_dtoa_r+0x7f0>
 8004eec:	9b06      	ldr	r3, [sp, #24]
 8004eee:	e777      	b.n	8004de0 <_dtoa_r+0x7f0>
 8004ef0:	2300      	movs	r3, #0
 8004ef2:	930a      	str	r3, [sp, #40]	@ 0x28
 8004ef4:	e779      	b.n	8004dea <_dtoa_r+0x7fa>
 8004ef6:	d093      	beq.n	8004e20 <_dtoa_r+0x830>
 8004ef8:	9a04      	ldr	r2, [sp, #16]
 8004efa:	331c      	adds	r3, #28
 8004efc:	441a      	add	r2, r3
 8004efe:	9204      	str	r2, [sp, #16]
 8004f00:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004f02:	441e      	add	r6, r3
 8004f04:	441a      	add	r2, r3
 8004f06:	9209      	str	r2, [sp, #36]	@ 0x24
 8004f08:	e78a      	b.n	8004e20 <_dtoa_r+0x830>
 8004f0a:	4603      	mov	r3, r0
 8004f0c:	e7f4      	b.n	8004ef8 <_dtoa_r+0x908>
 8004f0e:	9b08      	ldr	r3, [sp, #32]
 8004f10:	46b8      	mov	r8, r7
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	dc20      	bgt.n	8004f58 <_dtoa_r+0x968>
 8004f16:	469b      	mov	fp, r3
 8004f18:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004f1a:	2b02      	cmp	r3, #2
 8004f1c:	dd1e      	ble.n	8004f5c <_dtoa_r+0x96c>
 8004f1e:	f1bb 0f00 	cmp.w	fp, #0
 8004f22:	f47f adb1 	bne.w	8004a88 <_dtoa_r+0x498>
 8004f26:	4621      	mov	r1, r4
 8004f28:	465b      	mov	r3, fp
 8004f2a:	2205      	movs	r2, #5
 8004f2c:	4648      	mov	r0, r9
 8004f2e:	f000 fa93 	bl	8005458 <__multadd>
 8004f32:	4601      	mov	r1, r0
 8004f34:	4604      	mov	r4, r0
 8004f36:	9803      	ldr	r0, [sp, #12]
 8004f38:	f000 fc9e 	bl	8005878 <__mcmp>
 8004f3c:	2800      	cmp	r0, #0
 8004f3e:	f77f ada3 	ble.w	8004a88 <_dtoa_r+0x498>
 8004f42:	4656      	mov	r6, sl
 8004f44:	2331      	movs	r3, #49	@ 0x31
 8004f46:	f108 0801 	add.w	r8, r8, #1
 8004f4a:	f806 3b01 	strb.w	r3, [r6], #1
 8004f4e:	e59f      	b.n	8004a90 <_dtoa_r+0x4a0>
 8004f50:	46b8      	mov	r8, r7
 8004f52:	9c08      	ldr	r4, [sp, #32]
 8004f54:	4625      	mov	r5, r4
 8004f56:	e7f4      	b.n	8004f42 <_dtoa_r+0x952>
 8004f58:	f8dd b020 	ldr.w	fp, [sp, #32]
 8004f5c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	f000 8101 	beq.w	8005166 <_dtoa_r+0xb76>
 8004f64:	2e00      	cmp	r6, #0
 8004f66:	dd05      	ble.n	8004f74 <_dtoa_r+0x984>
 8004f68:	4629      	mov	r1, r5
 8004f6a:	4632      	mov	r2, r6
 8004f6c:	4648      	mov	r0, r9
 8004f6e:	f000 fc17 	bl	80057a0 <__lshift>
 8004f72:	4605      	mov	r5, r0
 8004f74:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d05c      	beq.n	8005034 <_dtoa_r+0xa44>
 8004f7a:	4648      	mov	r0, r9
 8004f7c:	6869      	ldr	r1, [r5, #4]
 8004f7e:	f000 fa09 	bl	8005394 <_Balloc>
 8004f82:	4606      	mov	r6, r0
 8004f84:	b928      	cbnz	r0, 8004f92 <_dtoa_r+0x9a2>
 8004f86:	4602      	mov	r2, r0
 8004f88:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8004f8c:	4b80      	ldr	r3, [pc, #512]	@ (8005190 <_dtoa_r+0xba0>)
 8004f8e:	f7ff bb43 	b.w	8004618 <_dtoa_r+0x28>
 8004f92:	692a      	ldr	r2, [r5, #16]
 8004f94:	f105 010c 	add.w	r1, r5, #12
 8004f98:	3202      	adds	r2, #2
 8004f9a:	0092      	lsls	r2, r2, #2
 8004f9c:	300c      	adds	r0, #12
 8004f9e:	f000 ff9d 	bl	8005edc <memcpy>
 8004fa2:	2201      	movs	r2, #1
 8004fa4:	4631      	mov	r1, r6
 8004fa6:	4648      	mov	r0, r9
 8004fa8:	f000 fbfa 	bl	80057a0 <__lshift>
 8004fac:	462f      	mov	r7, r5
 8004fae:	4605      	mov	r5, r0
 8004fb0:	f10a 0301 	add.w	r3, sl, #1
 8004fb4:	9304      	str	r3, [sp, #16]
 8004fb6:	eb0a 030b 	add.w	r3, sl, fp
 8004fba:	930a      	str	r3, [sp, #40]	@ 0x28
 8004fbc:	9b06      	ldr	r3, [sp, #24]
 8004fbe:	f003 0301 	and.w	r3, r3, #1
 8004fc2:	9309      	str	r3, [sp, #36]	@ 0x24
 8004fc4:	9b04      	ldr	r3, [sp, #16]
 8004fc6:	4621      	mov	r1, r4
 8004fc8:	9803      	ldr	r0, [sp, #12]
 8004fca:	f103 3bff 	add.w	fp, r3, #4294967295
 8004fce:	f7ff fa84 	bl	80044da <quorem>
 8004fd2:	4603      	mov	r3, r0
 8004fd4:	4639      	mov	r1, r7
 8004fd6:	3330      	adds	r3, #48	@ 0x30
 8004fd8:	9006      	str	r0, [sp, #24]
 8004fda:	9803      	ldr	r0, [sp, #12]
 8004fdc:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004fde:	f000 fc4b 	bl	8005878 <__mcmp>
 8004fe2:	462a      	mov	r2, r5
 8004fe4:	9008      	str	r0, [sp, #32]
 8004fe6:	4621      	mov	r1, r4
 8004fe8:	4648      	mov	r0, r9
 8004fea:	f000 fc61 	bl	80058b0 <__mdiff>
 8004fee:	68c2      	ldr	r2, [r0, #12]
 8004ff0:	4606      	mov	r6, r0
 8004ff2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004ff4:	bb02      	cbnz	r2, 8005038 <_dtoa_r+0xa48>
 8004ff6:	4601      	mov	r1, r0
 8004ff8:	9803      	ldr	r0, [sp, #12]
 8004ffa:	f000 fc3d 	bl	8005878 <__mcmp>
 8004ffe:	4602      	mov	r2, r0
 8005000:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005002:	4631      	mov	r1, r6
 8005004:	4648      	mov	r0, r9
 8005006:	e9cd 320b 	strd	r3, r2, [sp, #44]	@ 0x2c
 800500a:	f000 fa03 	bl	8005414 <_Bfree>
 800500e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005010:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8005012:	9e04      	ldr	r6, [sp, #16]
 8005014:	ea42 0103 	orr.w	r1, r2, r3
 8005018:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800501a:	4319      	orrs	r1, r3
 800501c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800501e:	d10d      	bne.n	800503c <_dtoa_r+0xa4c>
 8005020:	2b39      	cmp	r3, #57	@ 0x39
 8005022:	d027      	beq.n	8005074 <_dtoa_r+0xa84>
 8005024:	9a08      	ldr	r2, [sp, #32]
 8005026:	2a00      	cmp	r2, #0
 8005028:	dd01      	ble.n	800502e <_dtoa_r+0xa3e>
 800502a:	9b06      	ldr	r3, [sp, #24]
 800502c:	3331      	adds	r3, #49	@ 0x31
 800502e:	f88b 3000 	strb.w	r3, [fp]
 8005032:	e52e      	b.n	8004a92 <_dtoa_r+0x4a2>
 8005034:	4628      	mov	r0, r5
 8005036:	e7b9      	b.n	8004fac <_dtoa_r+0x9bc>
 8005038:	2201      	movs	r2, #1
 800503a:	e7e2      	b.n	8005002 <_dtoa_r+0xa12>
 800503c:	9908      	ldr	r1, [sp, #32]
 800503e:	2900      	cmp	r1, #0
 8005040:	db04      	blt.n	800504c <_dtoa_r+0xa5c>
 8005042:	9820      	ldr	r0, [sp, #128]	@ 0x80
 8005044:	4301      	orrs	r1, r0
 8005046:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005048:	4301      	orrs	r1, r0
 800504a:	d120      	bne.n	800508e <_dtoa_r+0xa9e>
 800504c:	2a00      	cmp	r2, #0
 800504e:	ddee      	ble.n	800502e <_dtoa_r+0xa3e>
 8005050:	2201      	movs	r2, #1
 8005052:	9903      	ldr	r1, [sp, #12]
 8005054:	4648      	mov	r0, r9
 8005056:	9304      	str	r3, [sp, #16]
 8005058:	f000 fba2 	bl	80057a0 <__lshift>
 800505c:	4621      	mov	r1, r4
 800505e:	9003      	str	r0, [sp, #12]
 8005060:	f000 fc0a 	bl	8005878 <__mcmp>
 8005064:	2800      	cmp	r0, #0
 8005066:	9b04      	ldr	r3, [sp, #16]
 8005068:	dc02      	bgt.n	8005070 <_dtoa_r+0xa80>
 800506a:	d1e0      	bne.n	800502e <_dtoa_r+0xa3e>
 800506c:	07da      	lsls	r2, r3, #31
 800506e:	d5de      	bpl.n	800502e <_dtoa_r+0xa3e>
 8005070:	2b39      	cmp	r3, #57	@ 0x39
 8005072:	d1da      	bne.n	800502a <_dtoa_r+0xa3a>
 8005074:	2339      	movs	r3, #57	@ 0x39
 8005076:	f88b 3000 	strb.w	r3, [fp]
 800507a:	4633      	mov	r3, r6
 800507c:	461e      	mov	r6, r3
 800507e:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8005082:	3b01      	subs	r3, #1
 8005084:	2a39      	cmp	r2, #57	@ 0x39
 8005086:	d04e      	beq.n	8005126 <_dtoa_r+0xb36>
 8005088:	3201      	adds	r2, #1
 800508a:	701a      	strb	r2, [r3, #0]
 800508c:	e501      	b.n	8004a92 <_dtoa_r+0x4a2>
 800508e:	2a00      	cmp	r2, #0
 8005090:	dd03      	ble.n	800509a <_dtoa_r+0xaaa>
 8005092:	2b39      	cmp	r3, #57	@ 0x39
 8005094:	d0ee      	beq.n	8005074 <_dtoa_r+0xa84>
 8005096:	3301      	adds	r3, #1
 8005098:	e7c9      	b.n	800502e <_dtoa_r+0xa3e>
 800509a:	9a04      	ldr	r2, [sp, #16]
 800509c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800509e:	f802 3c01 	strb.w	r3, [r2, #-1]
 80050a2:	428a      	cmp	r2, r1
 80050a4:	d028      	beq.n	80050f8 <_dtoa_r+0xb08>
 80050a6:	2300      	movs	r3, #0
 80050a8:	220a      	movs	r2, #10
 80050aa:	9903      	ldr	r1, [sp, #12]
 80050ac:	4648      	mov	r0, r9
 80050ae:	f000 f9d3 	bl	8005458 <__multadd>
 80050b2:	42af      	cmp	r7, r5
 80050b4:	9003      	str	r0, [sp, #12]
 80050b6:	f04f 0300 	mov.w	r3, #0
 80050ba:	f04f 020a 	mov.w	r2, #10
 80050be:	4639      	mov	r1, r7
 80050c0:	4648      	mov	r0, r9
 80050c2:	d107      	bne.n	80050d4 <_dtoa_r+0xae4>
 80050c4:	f000 f9c8 	bl	8005458 <__multadd>
 80050c8:	4607      	mov	r7, r0
 80050ca:	4605      	mov	r5, r0
 80050cc:	9b04      	ldr	r3, [sp, #16]
 80050ce:	3301      	adds	r3, #1
 80050d0:	9304      	str	r3, [sp, #16]
 80050d2:	e777      	b.n	8004fc4 <_dtoa_r+0x9d4>
 80050d4:	f000 f9c0 	bl	8005458 <__multadd>
 80050d8:	4629      	mov	r1, r5
 80050da:	4607      	mov	r7, r0
 80050dc:	2300      	movs	r3, #0
 80050de:	220a      	movs	r2, #10
 80050e0:	4648      	mov	r0, r9
 80050e2:	f000 f9b9 	bl	8005458 <__multadd>
 80050e6:	4605      	mov	r5, r0
 80050e8:	e7f0      	b.n	80050cc <_dtoa_r+0xadc>
 80050ea:	f1bb 0f00 	cmp.w	fp, #0
 80050ee:	bfcc      	ite	gt
 80050f0:	465e      	movgt	r6, fp
 80050f2:	2601      	movle	r6, #1
 80050f4:	2700      	movs	r7, #0
 80050f6:	4456      	add	r6, sl
 80050f8:	2201      	movs	r2, #1
 80050fa:	9903      	ldr	r1, [sp, #12]
 80050fc:	4648      	mov	r0, r9
 80050fe:	9304      	str	r3, [sp, #16]
 8005100:	f000 fb4e 	bl	80057a0 <__lshift>
 8005104:	4621      	mov	r1, r4
 8005106:	9003      	str	r0, [sp, #12]
 8005108:	f000 fbb6 	bl	8005878 <__mcmp>
 800510c:	2800      	cmp	r0, #0
 800510e:	dcb4      	bgt.n	800507a <_dtoa_r+0xa8a>
 8005110:	d102      	bne.n	8005118 <_dtoa_r+0xb28>
 8005112:	9b04      	ldr	r3, [sp, #16]
 8005114:	07db      	lsls	r3, r3, #31
 8005116:	d4b0      	bmi.n	800507a <_dtoa_r+0xa8a>
 8005118:	4633      	mov	r3, r6
 800511a:	461e      	mov	r6, r3
 800511c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005120:	2a30      	cmp	r2, #48	@ 0x30
 8005122:	d0fa      	beq.n	800511a <_dtoa_r+0xb2a>
 8005124:	e4b5      	b.n	8004a92 <_dtoa_r+0x4a2>
 8005126:	459a      	cmp	sl, r3
 8005128:	d1a8      	bne.n	800507c <_dtoa_r+0xa8c>
 800512a:	2331      	movs	r3, #49	@ 0x31
 800512c:	f108 0801 	add.w	r8, r8, #1
 8005130:	f88a 3000 	strb.w	r3, [sl]
 8005134:	e4ad      	b.n	8004a92 <_dtoa_r+0x4a2>
 8005136:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8005138:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8005194 <_dtoa_r+0xba4>
 800513c:	b11b      	cbz	r3, 8005146 <_dtoa_r+0xb56>
 800513e:	f10a 0308 	add.w	r3, sl, #8
 8005142:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8005144:	6013      	str	r3, [r2, #0]
 8005146:	4650      	mov	r0, sl
 8005148:	b017      	add	sp, #92	@ 0x5c
 800514a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800514e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005150:	2b01      	cmp	r3, #1
 8005152:	f77f ae2e 	ble.w	8004db2 <_dtoa_r+0x7c2>
 8005156:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005158:	930a      	str	r3, [sp, #40]	@ 0x28
 800515a:	2001      	movs	r0, #1
 800515c:	e64d      	b.n	8004dfa <_dtoa_r+0x80a>
 800515e:	f1bb 0f00 	cmp.w	fp, #0
 8005162:	f77f aed9 	ble.w	8004f18 <_dtoa_r+0x928>
 8005166:	4656      	mov	r6, sl
 8005168:	4621      	mov	r1, r4
 800516a:	9803      	ldr	r0, [sp, #12]
 800516c:	f7ff f9b5 	bl	80044da <quorem>
 8005170:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8005174:	f806 3b01 	strb.w	r3, [r6], #1
 8005178:	eba6 020a 	sub.w	r2, r6, sl
 800517c:	4593      	cmp	fp, r2
 800517e:	ddb4      	ble.n	80050ea <_dtoa_r+0xafa>
 8005180:	2300      	movs	r3, #0
 8005182:	220a      	movs	r2, #10
 8005184:	4648      	mov	r0, r9
 8005186:	9903      	ldr	r1, [sp, #12]
 8005188:	f000 f966 	bl	8005458 <__multadd>
 800518c:	9003      	str	r0, [sp, #12]
 800518e:	e7eb      	b.n	8005168 <_dtoa_r+0xb78>
 8005190:	08006a76 	.word	0x08006a76
 8005194:	080069fa 	.word	0x080069fa

08005198 <_free_r>:
 8005198:	b538      	push	{r3, r4, r5, lr}
 800519a:	4605      	mov	r5, r0
 800519c:	2900      	cmp	r1, #0
 800519e:	d040      	beq.n	8005222 <_free_r+0x8a>
 80051a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80051a4:	1f0c      	subs	r4, r1, #4
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	bfb8      	it	lt
 80051aa:	18e4      	addlt	r4, r4, r3
 80051ac:	f000 f8e6 	bl	800537c <__malloc_lock>
 80051b0:	4a1c      	ldr	r2, [pc, #112]	@ (8005224 <_free_r+0x8c>)
 80051b2:	6813      	ldr	r3, [r2, #0]
 80051b4:	b933      	cbnz	r3, 80051c4 <_free_r+0x2c>
 80051b6:	6063      	str	r3, [r4, #4]
 80051b8:	6014      	str	r4, [r2, #0]
 80051ba:	4628      	mov	r0, r5
 80051bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80051c0:	f000 b8e2 	b.w	8005388 <__malloc_unlock>
 80051c4:	42a3      	cmp	r3, r4
 80051c6:	d908      	bls.n	80051da <_free_r+0x42>
 80051c8:	6820      	ldr	r0, [r4, #0]
 80051ca:	1821      	adds	r1, r4, r0
 80051cc:	428b      	cmp	r3, r1
 80051ce:	bf01      	itttt	eq
 80051d0:	6819      	ldreq	r1, [r3, #0]
 80051d2:	685b      	ldreq	r3, [r3, #4]
 80051d4:	1809      	addeq	r1, r1, r0
 80051d6:	6021      	streq	r1, [r4, #0]
 80051d8:	e7ed      	b.n	80051b6 <_free_r+0x1e>
 80051da:	461a      	mov	r2, r3
 80051dc:	685b      	ldr	r3, [r3, #4]
 80051de:	b10b      	cbz	r3, 80051e4 <_free_r+0x4c>
 80051e0:	42a3      	cmp	r3, r4
 80051e2:	d9fa      	bls.n	80051da <_free_r+0x42>
 80051e4:	6811      	ldr	r1, [r2, #0]
 80051e6:	1850      	adds	r0, r2, r1
 80051e8:	42a0      	cmp	r0, r4
 80051ea:	d10b      	bne.n	8005204 <_free_r+0x6c>
 80051ec:	6820      	ldr	r0, [r4, #0]
 80051ee:	4401      	add	r1, r0
 80051f0:	1850      	adds	r0, r2, r1
 80051f2:	4283      	cmp	r3, r0
 80051f4:	6011      	str	r1, [r2, #0]
 80051f6:	d1e0      	bne.n	80051ba <_free_r+0x22>
 80051f8:	6818      	ldr	r0, [r3, #0]
 80051fa:	685b      	ldr	r3, [r3, #4]
 80051fc:	4408      	add	r0, r1
 80051fe:	6010      	str	r0, [r2, #0]
 8005200:	6053      	str	r3, [r2, #4]
 8005202:	e7da      	b.n	80051ba <_free_r+0x22>
 8005204:	d902      	bls.n	800520c <_free_r+0x74>
 8005206:	230c      	movs	r3, #12
 8005208:	602b      	str	r3, [r5, #0]
 800520a:	e7d6      	b.n	80051ba <_free_r+0x22>
 800520c:	6820      	ldr	r0, [r4, #0]
 800520e:	1821      	adds	r1, r4, r0
 8005210:	428b      	cmp	r3, r1
 8005212:	bf01      	itttt	eq
 8005214:	6819      	ldreq	r1, [r3, #0]
 8005216:	685b      	ldreq	r3, [r3, #4]
 8005218:	1809      	addeq	r1, r1, r0
 800521a:	6021      	streq	r1, [r4, #0]
 800521c:	6063      	str	r3, [r4, #4]
 800521e:	6054      	str	r4, [r2, #4]
 8005220:	e7cb      	b.n	80051ba <_free_r+0x22>
 8005222:	bd38      	pop	{r3, r4, r5, pc}
 8005224:	20000444 	.word	0x20000444

08005228 <malloc>:
 8005228:	4b02      	ldr	r3, [pc, #8]	@ (8005234 <malloc+0xc>)
 800522a:	4601      	mov	r1, r0
 800522c:	6818      	ldr	r0, [r3, #0]
 800522e:	f000 b825 	b.w	800527c <_malloc_r>
 8005232:	bf00      	nop
 8005234:	20000028 	.word	0x20000028

08005238 <sbrk_aligned>:
 8005238:	b570      	push	{r4, r5, r6, lr}
 800523a:	4e0f      	ldr	r6, [pc, #60]	@ (8005278 <sbrk_aligned+0x40>)
 800523c:	460c      	mov	r4, r1
 800523e:	6831      	ldr	r1, [r6, #0]
 8005240:	4605      	mov	r5, r0
 8005242:	b911      	cbnz	r1, 800524a <sbrk_aligned+0x12>
 8005244:	f000 fe3a 	bl	8005ebc <_sbrk_r>
 8005248:	6030      	str	r0, [r6, #0]
 800524a:	4621      	mov	r1, r4
 800524c:	4628      	mov	r0, r5
 800524e:	f000 fe35 	bl	8005ebc <_sbrk_r>
 8005252:	1c43      	adds	r3, r0, #1
 8005254:	d103      	bne.n	800525e <sbrk_aligned+0x26>
 8005256:	f04f 34ff 	mov.w	r4, #4294967295
 800525a:	4620      	mov	r0, r4
 800525c:	bd70      	pop	{r4, r5, r6, pc}
 800525e:	1cc4      	adds	r4, r0, #3
 8005260:	f024 0403 	bic.w	r4, r4, #3
 8005264:	42a0      	cmp	r0, r4
 8005266:	d0f8      	beq.n	800525a <sbrk_aligned+0x22>
 8005268:	1a21      	subs	r1, r4, r0
 800526a:	4628      	mov	r0, r5
 800526c:	f000 fe26 	bl	8005ebc <_sbrk_r>
 8005270:	3001      	adds	r0, #1
 8005272:	d1f2      	bne.n	800525a <sbrk_aligned+0x22>
 8005274:	e7ef      	b.n	8005256 <sbrk_aligned+0x1e>
 8005276:	bf00      	nop
 8005278:	20000440 	.word	0x20000440

0800527c <_malloc_r>:
 800527c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005280:	1ccd      	adds	r5, r1, #3
 8005282:	f025 0503 	bic.w	r5, r5, #3
 8005286:	3508      	adds	r5, #8
 8005288:	2d0c      	cmp	r5, #12
 800528a:	bf38      	it	cc
 800528c:	250c      	movcc	r5, #12
 800528e:	2d00      	cmp	r5, #0
 8005290:	4606      	mov	r6, r0
 8005292:	db01      	blt.n	8005298 <_malloc_r+0x1c>
 8005294:	42a9      	cmp	r1, r5
 8005296:	d904      	bls.n	80052a2 <_malloc_r+0x26>
 8005298:	230c      	movs	r3, #12
 800529a:	6033      	str	r3, [r6, #0]
 800529c:	2000      	movs	r0, #0
 800529e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80052a2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005378 <_malloc_r+0xfc>
 80052a6:	f000 f869 	bl	800537c <__malloc_lock>
 80052aa:	f8d8 3000 	ldr.w	r3, [r8]
 80052ae:	461c      	mov	r4, r3
 80052b0:	bb44      	cbnz	r4, 8005304 <_malloc_r+0x88>
 80052b2:	4629      	mov	r1, r5
 80052b4:	4630      	mov	r0, r6
 80052b6:	f7ff ffbf 	bl	8005238 <sbrk_aligned>
 80052ba:	1c43      	adds	r3, r0, #1
 80052bc:	4604      	mov	r4, r0
 80052be:	d158      	bne.n	8005372 <_malloc_r+0xf6>
 80052c0:	f8d8 4000 	ldr.w	r4, [r8]
 80052c4:	4627      	mov	r7, r4
 80052c6:	2f00      	cmp	r7, #0
 80052c8:	d143      	bne.n	8005352 <_malloc_r+0xd6>
 80052ca:	2c00      	cmp	r4, #0
 80052cc:	d04b      	beq.n	8005366 <_malloc_r+0xea>
 80052ce:	6823      	ldr	r3, [r4, #0]
 80052d0:	4639      	mov	r1, r7
 80052d2:	4630      	mov	r0, r6
 80052d4:	eb04 0903 	add.w	r9, r4, r3
 80052d8:	f000 fdf0 	bl	8005ebc <_sbrk_r>
 80052dc:	4581      	cmp	r9, r0
 80052de:	d142      	bne.n	8005366 <_malloc_r+0xea>
 80052e0:	6821      	ldr	r1, [r4, #0]
 80052e2:	4630      	mov	r0, r6
 80052e4:	1a6d      	subs	r5, r5, r1
 80052e6:	4629      	mov	r1, r5
 80052e8:	f7ff ffa6 	bl	8005238 <sbrk_aligned>
 80052ec:	3001      	adds	r0, #1
 80052ee:	d03a      	beq.n	8005366 <_malloc_r+0xea>
 80052f0:	6823      	ldr	r3, [r4, #0]
 80052f2:	442b      	add	r3, r5
 80052f4:	6023      	str	r3, [r4, #0]
 80052f6:	f8d8 3000 	ldr.w	r3, [r8]
 80052fa:	685a      	ldr	r2, [r3, #4]
 80052fc:	bb62      	cbnz	r2, 8005358 <_malloc_r+0xdc>
 80052fe:	f8c8 7000 	str.w	r7, [r8]
 8005302:	e00f      	b.n	8005324 <_malloc_r+0xa8>
 8005304:	6822      	ldr	r2, [r4, #0]
 8005306:	1b52      	subs	r2, r2, r5
 8005308:	d420      	bmi.n	800534c <_malloc_r+0xd0>
 800530a:	2a0b      	cmp	r2, #11
 800530c:	d917      	bls.n	800533e <_malloc_r+0xc2>
 800530e:	1961      	adds	r1, r4, r5
 8005310:	42a3      	cmp	r3, r4
 8005312:	6025      	str	r5, [r4, #0]
 8005314:	bf18      	it	ne
 8005316:	6059      	strne	r1, [r3, #4]
 8005318:	6863      	ldr	r3, [r4, #4]
 800531a:	bf08      	it	eq
 800531c:	f8c8 1000 	streq.w	r1, [r8]
 8005320:	5162      	str	r2, [r4, r5]
 8005322:	604b      	str	r3, [r1, #4]
 8005324:	4630      	mov	r0, r6
 8005326:	f000 f82f 	bl	8005388 <__malloc_unlock>
 800532a:	f104 000b 	add.w	r0, r4, #11
 800532e:	1d23      	adds	r3, r4, #4
 8005330:	f020 0007 	bic.w	r0, r0, #7
 8005334:	1ac2      	subs	r2, r0, r3
 8005336:	bf1c      	itt	ne
 8005338:	1a1b      	subne	r3, r3, r0
 800533a:	50a3      	strne	r3, [r4, r2]
 800533c:	e7af      	b.n	800529e <_malloc_r+0x22>
 800533e:	6862      	ldr	r2, [r4, #4]
 8005340:	42a3      	cmp	r3, r4
 8005342:	bf0c      	ite	eq
 8005344:	f8c8 2000 	streq.w	r2, [r8]
 8005348:	605a      	strne	r2, [r3, #4]
 800534a:	e7eb      	b.n	8005324 <_malloc_r+0xa8>
 800534c:	4623      	mov	r3, r4
 800534e:	6864      	ldr	r4, [r4, #4]
 8005350:	e7ae      	b.n	80052b0 <_malloc_r+0x34>
 8005352:	463c      	mov	r4, r7
 8005354:	687f      	ldr	r7, [r7, #4]
 8005356:	e7b6      	b.n	80052c6 <_malloc_r+0x4a>
 8005358:	461a      	mov	r2, r3
 800535a:	685b      	ldr	r3, [r3, #4]
 800535c:	42a3      	cmp	r3, r4
 800535e:	d1fb      	bne.n	8005358 <_malloc_r+0xdc>
 8005360:	2300      	movs	r3, #0
 8005362:	6053      	str	r3, [r2, #4]
 8005364:	e7de      	b.n	8005324 <_malloc_r+0xa8>
 8005366:	230c      	movs	r3, #12
 8005368:	4630      	mov	r0, r6
 800536a:	6033      	str	r3, [r6, #0]
 800536c:	f000 f80c 	bl	8005388 <__malloc_unlock>
 8005370:	e794      	b.n	800529c <_malloc_r+0x20>
 8005372:	6005      	str	r5, [r0, #0]
 8005374:	e7d6      	b.n	8005324 <_malloc_r+0xa8>
 8005376:	bf00      	nop
 8005378:	20000444 	.word	0x20000444

0800537c <__malloc_lock>:
 800537c:	4801      	ldr	r0, [pc, #4]	@ (8005384 <__malloc_lock+0x8>)
 800537e:	f7ff b89c 	b.w	80044ba <__retarget_lock_acquire_recursive>
 8005382:	bf00      	nop
 8005384:	2000043c 	.word	0x2000043c

08005388 <__malloc_unlock>:
 8005388:	4801      	ldr	r0, [pc, #4]	@ (8005390 <__malloc_unlock+0x8>)
 800538a:	f7ff b897 	b.w	80044bc <__retarget_lock_release_recursive>
 800538e:	bf00      	nop
 8005390:	2000043c 	.word	0x2000043c

08005394 <_Balloc>:
 8005394:	b570      	push	{r4, r5, r6, lr}
 8005396:	69c6      	ldr	r6, [r0, #28]
 8005398:	4604      	mov	r4, r0
 800539a:	460d      	mov	r5, r1
 800539c:	b976      	cbnz	r6, 80053bc <_Balloc+0x28>
 800539e:	2010      	movs	r0, #16
 80053a0:	f7ff ff42 	bl	8005228 <malloc>
 80053a4:	4602      	mov	r2, r0
 80053a6:	61e0      	str	r0, [r4, #28]
 80053a8:	b920      	cbnz	r0, 80053b4 <_Balloc+0x20>
 80053aa:	216b      	movs	r1, #107	@ 0x6b
 80053ac:	4b17      	ldr	r3, [pc, #92]	@ (800540c <_Balloc+0x78>)
 80053ae:	4818      	ldr	r0, [pc, #96]	@ (8005410 <_Balloc+0x7c>)
 80053b0:	f000 fda2 	bl	8005ef8 <__assert_func>
 80053b4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80053b8:	6006      	str	r6, [r0, #0]
 80053ba:	60c6      	str	r6, [r0, #12]
 80053bc:	69e6      	ldr	r6, [r4, #28]
 80053be:	68f3      	ldr	r3, [r6, #12]
 80053c0:	b183      	cbz	r3, 80053e4 <_Balloc+0x50>
 80053c2:	69e3      	ldr	r3, [r4, #28]
 80053c4:	68db      	ldr	r3, [r3, #12]
 80053c6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80053ca:	b9b8      	cbnz	r0, 80053fc <_Balloc+0x68>
 80053cc:	2101      	movs	r1, #1
 80053ce:	fa01 f605 	lsl.w	r6, r1, r5
 80053d2:	1d72      	adds	r2, r6, #5
 80053d4:	4620      	mov	r0, r4
 80053d6:	0092      	lsls	r2, r2, #2
 80053d8:	f000 fdac 	bl	8005f34 <_calloc_r>
 80053dc:	b160      	cbz	r0, 80053f8 <_Balloc+0x64>
 80053de:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80053e2:	e00e      	b.n	8005402 <_Balloc+0x6e>
 80053e4:	2221      	movs	r2, #33	@ 0x21
 80053e6:	2104      	movs	r1, #4
 80053e8:	4620      	mov	r0, r4
 80053ea:	f000 fda3 	bl	8005f34 <_calloc_r>
 80053ee:	69e3      	ldr	r3, [r4, #28]
 80053f0:	60f0      	str	r0, [r6, #12]
 80053f2:	68db      	ldr	r3, [r3, #12]
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d1e4      	bne.n	80053c2 <_Balloc+0x2e>
 80053f8:	2000      	movs	r0, #0
 80053fa:	bd70      	pop	{r4, r5, r6, pc}
 80053fc:	6802      	ldr	r2, [r0, #0]
 80053fe:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005402:	2300      	movs	r3, #0
 8005404:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005408:	e7f7      	b.n	80053fa <_Balloc+0x66>
 800540a:	bf00      	nop
 800540c:	08006a07 	.word	0x08006a07
 8005410:	08006a87 	.word	0x08006a87

08005414 <_Bfree>:
 8005414:	b570      	push	{r4, r5, r6, lr}
 8005416:	69c6      	ldr	r6, [r0, #28]
 8005418:	4605      	mov	r5, r0
 800541a:	460c      	mov	r4, r1
 800541c:	b976      	cbnz	r6, 800543c <_Bfree+0x28>
 800541e:	2010      	movs	r0, #16
 8005420:	f7ff ff02 	bl	8005228 <malloc>
 8005424:	4602      	mov	r2, r0
 8005426:	61e8      	str	r0, [r5, #28]
 8005428:	b920      	cbnz	r0, 8005434 <_Bfree+0x20>
 800542a:	218f      	movs	r1, #143	@ 0x8f
 800542c:	4b08      	ldr	r3, [pc, #32]	@ (8005450 <_Bfree+0x3c>)
 800542e:	4809      	ldr	r0, [pc, #36]	@ (8005454 <_Bfree+0x40>)
 8005430:	f000 fd62 	bl	8005ef8 <__assert_func>
 8005434:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005438:	6006      	str	r6, [r0, #0]
 800543a:	60c6      	str	r6, [r0, #12]
 800543c:	b13c      	cbz	r4, 800544e <_Bfree+0x3a>
 800543e:	69eb      	ldr	r3, [r5, #28]
 8005440:	6862      	ldr	r2, [r4, #4]
 8005442:	68db      	ldr	r3, [r3, #12]
 8005444:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005448:	6021      	str	r1, [r4, #0]
 800544a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800544e:	bd70      	pop	{r4, r5, r6, pc}
 8005450:	08006a07 	.word	0x08006a07
 8005454:	08006a87 	.word	0x08006a87

08005458 <__multadd>:
 8005458:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800545c:	4607      	mov	r7, r0
 800545e:	460c      	mov	r4, r1
 8005460:	461e      	mov	r6, r3
 8005462:	2000      	movs	r0, #0
 8005464:	690d      	ldr	r5, [r1, #16]
 8005466:	f101 0c14 	add.w	ip, r1, #20
 800546a:	f8dc 3000 	ldr.w	r3, [ip]
 800546e:	3001      	adds	r0, #1
 8005470:	b299      	uxth	r1, r3
 8005472:	fb02 6101 	mla	r1, r2, r1, r6
 8005476:	0c1e      	lsrs	r6, r3, #16
 8005478:	0c0b      	lsrs	r3, r1, #16
 800547a:	fb02 3306 	mla	r3, r2, r6, r3
 800547e:	b289      	uxth	r1, r1
 8005480:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005484:	4285      	cmp	r5, r0
 8005486:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800548a:	f84c 1b04 	str.w	r1, [ip], #4
 800548e:	dcec      	bgt.n	800546a <__multadd+0x12>
 8005490:	b30e      	cbz	r6, 80054d6 <__multadd+0x7e>
 8005492:	68a3      	ldr	r3, [r4, #8]
 8005494:	42ab      	cmp	r3, r5
 8005496:	dc19      	bgt.n	80054cc <__multadd+0x74>
 8005498:	6861      	ldr	r1, [r4, #4]
 800549a:	4638      	mov	r0, r7
 800549c:	3101      	adds	r1, #1
 800549e:	f7ff ff79 	bl	8005394 <_Balloc>
 80054a2:	4680      	mov	r8, r0
 80054a4:	b928      	cbnz	r0, 80054b2 <__multadd+0x5a>
 80054a6:	4602      	mov	r2, r0
 80054a8:	21ba      	movs	r1, #186	@ 0xba
 80054aa:	4b0c      	ldr	r3, [pc, #48]	@ (80054dc <__multadd+0x84>)
 80054ac:	480c      	ldr	r0, [pc, #48]	@ (80054e0 <__multadd+0x88>)
 80054ae:	f000 fd23 	bl	8005ef8 <__assert_func>
 80054b2:	6922      	ldr	r2, [r4, #16]
 80054b4:	f104 010c 	add.w	r1, r4, #12
 80054b8:	3202      	adds	r2, #2
 80054ba:	0092      	lsls	r2, r2, #2
 80054bc:	300c      	adds	r0, #12
 80054be:	f000 fd0d 	bl	8005edc <memcpy>
 80054c2:	4621      	mov	r1, r4
 80054c4:	4638      	mov	r0, r7
 80054c6:	f7ff ffa5 	bl	8005414 <_Bfree>
 80054ca:	4644      	mov	r4, r8
 80054cc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80054d0:	3501      	adds	r5, #1
 80054d2:	615e      	str	r6, [r3, #20]
 80054d4:	6125      	str	r5, [r4, #16]
 80054d6:	4620      	mov	r0, r4
 80054d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80054dc:	08006a76 	.word	0x08006a76
 80054e0:	08006a87 	.word	0x08006a87

080054e4 <__hi0bits>:
 80054e4:	4603      	mov	r3, r0
 80054e6:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80054ea:	bf3a      	itte	cc
 80054ec:	0403      	lslcc	r3, r0, #16
 80054ee:	2010      	movcc	r0, #16
 80054f0:	2000      	movcs	r0, #0
 80054f2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80054f6:	bf3c      	itt	cc
 80054f8:	021b      	lslcc	r3, r3, #8
 80054fa:	3008      	addcc	r0, #8
 80054fc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005500:	bf3c      	itt	cc
 8005502:	011b      	lslcc	r3, r3, #4
 8005504:	3004      	addcc	r0, #4
 8005506:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800550a:	bf3c      	itt	cc
 800550c:	009b      	lslcc	r3, r3, #2
 800550e:	3002      	addcc	r0, #2
 8005510:	2b00      	cmp	r3, #0
 8005512:	db05      	blt.n	8005520 <__hi0bits+0x3c>
 8005514:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8005518:	f100 0001 	add.w	r0, r0, #1
 800551c:	bf08      	it	eq
 800551e:	2020      	moveq	r0, #32
 8005520:	4770      	bx	lr

08005522 <__lo0bits>:
 8005522:	6803      	ldr	r3, [r0, #0]
 8005524:	4602      	mov	r2, r0
 8005526:	f013 0007 	ands.w	r0, r3, #7
 800552a:	d00b      	beq.n	8005544 <__lo0bits+0x22>
 800552c:	07d9      	lsls	r1, r3, #31
 800552e:	d421      	bmi.n	8005574 <__lo0bits+0x52>
 8005530:	0798      	lsls	r0, r3, #30
 8005532:	bf49      	itett	mi
 8005534:	085b      	lsrmi	r3, r3, #1
 8005536:	089b      	lsrpl	r3, r3, #2
 8005538:	2001      	movmi	r0, #1
 800553a:	6013      	strmi	r3, [r2, #0]
 800553c:	bf5c      	itt	pl
 800553e:	2002      	movpl	r0, #2
 8005540:	6013      	strpl	r3, [r2, #0]
 8005542:	4770      	bx	lr
 8005544:	b299      	uxth	r1, r3
 8005546:	b909      	cbnz	r1, 800554c <__lo0bits+0x2a>
 8005548:	2010      	movs	r0, #16
 800554a:	0c1b      	lsrs	r3, r3, #16
 800554c:	b2d9      	uxtb	r1, r3
 800554e:	b909      	cbnz	r1, 8005554 <__lo0bits+0x32>
 8005550:	3008      	adds	r0, #8
 8005552:	0a1b      	lsrs	r3, r3, #8
 8005554:	0719      	lsls	r1, r3, #28
 8005556:	bf04      	itt	eq
 8005558:	091b      	lsreq	r3, r3, #4
 800555a:	3004      	addeq	r0, #4
 800555c:	0799      	lsls	r1, r3, #30
 800555e:	bf04      	itt	eq
 8005560:	089b      	lsreq	r3, r3, #2
 8005562:	3002      	addeq	r0, #2
 8005564:	07d9      	lsls	r1, r3, #31
 8005566:	d403      	bmi.n	8005570 <__lo0bits+0x4e>
 8005568:	085b      	lsrs	r3, r3, #1
 800556a:	f100 0001 	add.w	r0, r0, #1
 800556e:	d003      	beq.n	8005578 <__lo0bits+0x56>
 8005570:	6013      	str	r3, [r2, #0]
 8005572:	4770      	bx	lr
 8005574:	2000      	movs	r0, #0
 8005576:	4770      	bx	lr
 8005578:	2020      	movs	r0, #32
 800557a:	4770      	bx	lr

0800557c <__i2b>:
 800557c:	b510      	push	{r4, lr}
 800557e:	460c      	mov	r4, r1
 8005580:	2101      	movs	r1, #1
 8005582:	f7ff ff07 	bl	8005394 <_Balloc>
 8005586:	4602      	mov	r2, r0
 8005588:	b928      	cbnz	r0, 8005596 <__i2b+0x1a>
 800558a:	f240 1145 	movw	r1, #325	@ 0x145
 800558e:	4b04      	ldr	r3, [pc, #16]	@ (80055a0 <__i2b+0x24>)
 8005590:	4804      	ldr	r0, [pc, #16]	@ (80055a4 <__i2b+0x28>)
 8005592:	f000 fcb1 	bl	8005ef8 <__assert_func>
 8005596:	2301      	movs	r3, #1
 8005598:	6144      	str	r4, [r0, #20]
 800559a:	6103      	str	r3, [r0, #16]
 800559c:	bd10      	pop	{r4, pc}
 800559e:	bf00      	nop
 80055a0:	08006a76 	.word	0x08006a76
 80055a4:	08006a87 	.word	0x08006a87

080055a8 <__multiply>:
 80055a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055ac:	4617      	mov	r7, r2
 80055ae:	690a      	ldr	r2, [r1, #16]
 80055b0:	693b      	ldr	r3, [r7, #16]
 80055b2:	4689      	mov	r9, r1
 80055b4:	429a      	cmp	r2, r3
 80055b6:	bfa2      	ittt	ge
 80055b8:	463b      	movge	r3, r7
 80055ba:	460f      	movge	r7, r1
 80055bc:	4699      	movge	r9, r3
 80055be:	693d      	ldr	r5, [r7, #16]
 80055c0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80055c4:	68bb      	ldr	r3, [r7, #8]
 80055c6:	6879      	ldr	r1, [r7, #4]
 80055c8:	eb05 060a 	add.w	r6, r5, sl
 80055cc:	42b3      	cmp	r3, r6
 80055ce:	b085      	sub	sp, #20
 80055d0:	bfb8      	it	lt
 80055d2:	3101      	addlt	r1, #1
 80055d4:	f7ff fede 	bl	8005394 <_Balloc>
 80055d8:	b930      	cbnz	r0, 80055e8 <__multiply+0x40>
 80055da:	4602      	mov	r2, r0
 80055dc:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80055e0:	4b40      	ldr	r3, [pc, #256]	@ (80056e4 <__multiply+0x13c>)
 80055e2:	4841      	ldr	r0, [pc, #260]	@ (80056e8 <__multiply+0x140>)
 80055e4:	f000 fc88 	bl	8005ef8 <__assert_func>
 80055e8:	f100 0414 	add.w	r4, r0, #20
 80055ec:	4623      	mov	r3, r4
 80055ee:	2200      	movs	r2, #0
 80055f0:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 80055f4:	4573      	cmp	r3, lr
 80055f6:	d320      	bcc.n	800563a <__multiply+0x92>
 80055f8:	f107 0814 	add.w	r8, r7, #20
 80055fc:	f109 0114 	add.w	r1, r9, #20
 8005600:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8005604:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8005608:	9302      	str	r3, [sp, #8]
 800560a:	1beb      	subs	r3, r5, r7
 800560c:	3b15      	subs	r3, #21
 800560e:	f023 0303 	bic.w	r3, r3, #3
 8005612:	3304      	adds	r3, #4
 8005614:	3715      	adds	r7, #21
 8005616:	42bd      	cmp	r5, r7
 8005618:	bf38      	it	cc
 800561a:	2304      	movcc	r3, #4
 800561c:	9301      	str	r3, [sp, #4]
 800561e:	9b02      	ldr	r3, [sp, #8]
 8005620:	9103      	str	r1, [sp, #12]
 8005622:	428b      	cmp	r3, r1
 8005624:	d80c      	bhi.n	8005640 <__multiply+0x98>
 8005626:	2e00      	cmp	r6, #0
 8005628:	dd03      	ble.n	8005632 <__multiply+0x8a>
 800562a:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800562e:	2b00      	cmp	r3, #0
 8005630:	d055      	beq.n	80056de <__multiply+0x136>
 8005632:	6106      	str	r6, [r0, #16]
 8005634:	b005      	add	sp, #20
 8005636:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800563a:	f843 2b04 	str.w	r2, [r3], #4
 800563e:	e7d9      	b.n	80055f4 <__multiply+0x4c>
 8005640:	f8b1 a000 	ldrh.w	sl, [r1]
 8005644:	f1ba 0f00 	cmp.w	sl, #0
 8005648:	d01f      	beq.n	800568a <__multiply+0xe2>
 800564a:	46c4      	mov	ip, r8
 800564c:	46a1      	mov	r9, r4
 800564e:	2700      	movs	r7, #0
 8005650:	f85c 2b04 	ldr.w	r2, [ip], #4
 8005654:	f8d9 3000 	ldr.w	r3, [r9]
 8005658:	fa1f fb82 	uxth.w	fp, r2
 800565c:	b29b      	uxth	r3, r3
 800565e:	fb0a 330b 	mla	r3, sl, fp, r3
 8005662:	443b      	add	r3, r7
 8005664:	f8d9 7000 	ldr.w	r7, [r9]
 8005668:	0c12      	lsrs	r2, r2, #16
 800566a:	0c3f      	lsrs	r7, r7, #16
 800566c:	fb0a 7202 	mla	r2, sl, r2, r7
 8005670:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8005674:	b29b      	uxth	r3, r3
 8005676:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800567a:	4565      	cmp	r5, ip
 800567c:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8005680:	f849 3b04 	str.w	r3, [r9], #4
 8005684:	d8e4      	bhi.n	8005650 <__multiply+0xa8>
 8005686:	9b01      	ldr	r3, [sp, #4]
 8005688:	50e7      	str	r7, [r4, r3]
 800568a:	9b03      	ldr	r3, [sp, #12]
 800568c:	3104      	adds	r1, #4
 800568e:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8005692:	f1b9 0f00 	cmp.w	r9, #0
 8005696:	d020      	beq.n	80056da <__multiply+0x132>
 8005698:	4647      	mov	r7, r8
 800569a:	46a4      	mov	ip, r4
 800569c:	f04f 0a00 	mov.w	sl, #0
 80056a0:	6823      	ldr	r3, [r4, #0]
 80056a2:	f8b7 b000 	ldrh.w	fp, [r7]
 80056a6:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 80056aa:	b29b      	uxth	r3, r3
 80056ac:	fb09 220b 	mla	r2, r9, fp, r2
 80056b0:	4452      	add	r2, sl
 80056b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80056b6:	f84c 3b04 	str.w	r3, [ip], #4
 80056ba:	f857 3b04 	ldr.w	r3, [r7], #4
 80056be:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80056c2:	f8bc 3000 	ldrh.w	r3, [ip]
 80056c6:	42bd      	cmp	r5, r7
 80056c8:	fb09 330a 	mla	r3, r9, sl, r3
 80056cc:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 80056d0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80056d4:	d8e5      	bhi.n	80056a2 <__multiply+0xfa>
 80056d6:	9a01      	ldr	r2, [sp, #4]
 80056d8:	50a3      	str	r3, [r4, r2]
 80056da:	3404      	adds	r4, #4
 80056dc:	e79f      	b.n	800561e <__multiply+0x76>
 80056de:	3e01      	subs	r6, #1
 80056e0:	e7a1      	b.n	8005626 <__multiply+0x7e>
 80056e2:	bf00      	nop
 80056e4:	08006a76 	.word	0x08006a76
 80056e8:	08006a87 	.word	0x08006a87

080056ec <__pow5mult>:
 80056ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80056f0:	4615      	mov	r5, r2
 80056f2:	f012 0203 	ands.w	r2, r2, #3
 80056f6:	4607      	mov	r7, r0
 80056f8:	460e      	mov	r6, r1
 80056fa:	d007      	beq.n	800570c <__pow5mult+0x20>
 80056fc:	4c25      	ldr	r4, [pc, #148]	@ (8005794 <__pow5mult+0xa8>)
 80056fe:	3a01      	subs	r2, #1
 8005700:	2300      	movs	r3, #0
 8005702:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005706:	f7ff fea7 	bl	8005458 <__multadd>
 800570a:	4606      	mov	r6, r0
 800570c:	10ad      	asrs	r5, r5, #2
 800570e:	d03d      	beq.n	800578c <__pow5mult+0xa0>
 8005710:	69fc      	ldr	r4, [r7, #28]
 8005712:	b97c      	cbnz	r4, 8005734 <__pow5mult+0x48>
 8005714:	2010      	movs	r0, #16
 8005716:	f7ff fd87 	bl	8005228 <malloc>
 800571a:	4602      	mov	r2, r0
 800571c:	61f8      	str	r0, [r7, #28]
 800571e:	b928      	cbnz	r0, 800572c <__pow5mult+0x40>
 8005720:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8005724:	4b1c      	ldr	r3, [pc, #112]	@ (8005798 <__pow5mult+0xac>)
 8005726:	481d      	ldr	r0, [pc, #116]	@ (800579c <__pow5mult+0xb0>)
 8005728:	f000 fbe6 	bl	8005ef8 <__assert_func>
 800572c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005730:	6004      	str	r4, [r0, #0]
 8005732:	60c4      	str	r4, [r0, #12]
 8005734:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8005738:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800573c:	b94c      	cbnz	r4, 8005752 <__pow5mult+0x66>
 800573e:	f240 2171 	movw	r1, #625	@ 0x271
 8005742:	4638      	mov	r0, r7
 8005744:	f7ff ff1a 	bl	800557c <__i2b>
 8005748:	2300      	movs	r3, #0
 800574a:	4604      	mov	r4, r0
 800574c:	f8c8 0008 	str.w	r0, [r8, #8]
 8005750:	6003      	str	r3, [r0, #0]
 8005752:	f04f 0900 	mov.w	r9, #0
 8005756:	07eb      	lsls	r3, r5, #31
 8005758:	d50a      	bpl.n	8005770 <__pow5mult+0x84>
 800575a:	4631      	mov	r1, r6
 800575c:	4622      	mov	r2, r4
 800575e:	4638      	mov	r0, r7
 8005760:	f7ff ff22 	bl	80055a8 <__multiply>
 8005764:	4680      	mov	r8, r0
 8005766:	4631      	mov	r1, r6
 8005768:	4638      	mov	r0, r7
 800576a:	f7ff fe53 	bl	8005414 <_Bfree>
 800576e:	4646      	mov	r6, r8
 8005770:	106d      	asrs	r5, r5, #1
 8005772:	d00b      	beq.n	800578c <__pow5mult+0xa0>
 8005774:	6820      	ldr	r0, [r4, #0]
 8005776:	b938      	cbnz	r0, 8005788 <__pow5mult+0x9c>
 8005778:	4622      	mov	r2, r4
 800577a:	4621      	mov	r1, r4
 800577c:	4638      	mov	r0, r7
 800577e:	f7ff ff13 	bl	80055a8 <__multiply>
 8005782:	6020      	str	r0, [r4, #0]
 8005784:	f8c0 9000 	str.w	r9, [r0]
 8005788:	4604      	mov	r4, r0
 800578a:	e7e4      	b.n	8005756 <__pow5mult+0x6a>
 800578c:	4630      	mov	r0, r6
 800578e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005792:	bf00      	nop
 8005794:	08006b38 	.word	0x08006b38
 8005798:	08006a07 	.word	0x08006a07
 800579c:	08006a87 	.word	0x08006a87

080057a0 <__lshift>:
 80057a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80057a4:	460c      	mov	r4, r1
 80057a6:	4607      	mov	r7, r0
 80057a8:	4691      	mov	r9, r2
 80057aa:	6923      	ldr	r3, [r4, #16]
 80057ac:	6849      	ldr	r1, [r1, #4]
 80057ae:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80057b2:	68a3      	ldr	r3, [r4, #8]
 80057b4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80057b8:	f108 0601 	add.w	r6, r8, #1
 80057bc:	42b3      	cmp	r3, r6
 80057be:	db0b      	blt.n	80057d8 <__lshift+0x38>
 80057c0:	4638      	mov	r0, r7
 80057c2:	f7ff fde7 	bl	8005394 <_Balloc>
 80057c6:	4605      	mov	r5, r0
 80057c8:	b948      	cbnz	r0, 80057de <__lshift+0x3e>
 80057ca:	4602      	mov	r2, r0
 80057cc:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80057d0:	4b27      	ldr	r3, [pc, #156]	@ (8005870 <__lshift+0xd0>)
 80057d2:	4828      	ldr	r0, [pc, #160]	@ (8005874 <__lshift+0xd4>)
 80057d4:	f000 fb90 	bl	8005ef8 <__assert_func>
 80057d8:	3101      	adds	r1, #1
 80057da:	005b      	lsls	r3, r3, #1
 80057dc:	e7ee      	b.n	80057bc <__lshift+0x1c>
 80057de:	2300      	movs	r3, #0
 80057e0:	f100 0114 	add.w	r1, r0, #20
 80057e4:	f100 0210 	add.w	r2, r0, #16
 80057e8:	4618      	mov	r0, r3
 80057ea:	4553      	cmp	r3, sl
 80057ec:	db33      	blt.n	8005856 <__lshift+0xb6>
 80057ee:	6920      	ldr	r0, [r4, #16]
 80057f0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80057f4:	f104 0314 	add.w	r3, r4, #20
 80057f8:	f019 091f 	ands.w	r9, r9, #31
 80057fc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005800:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8005804:	d02b      	beq.n	800585e <__lshift+0xbe>
 8005806:	468a      	mov	sl, r1
 8005808:	2200      	movs	r2, #0
 800580a:	f1c9 0e20 	rsb	lr, r9, #32
 800580e:	6818      	ldr	r0, [r3, #0]
 8005810:	fa00 f009 	lsl.w	r0, r0, r9
 8005814:	4310      	orrs	r0, r2
 8005816:	f84a 0b04 	str.w	r0, [sl], #4
 800581a:	f853 2b04 	ldr.w	r2, [r3], #4
 800581e:	459c      	cmp	ip, r3
 8005820:	fa22 f20e 	lsr.w	r2, r2, lr
 8005824:	d8f3      	bhi.n	800580e <__lshift+0x6e>
 8005826:	ebac 0304 	sub.w	r3, ip, r4
 800582a:	3b15      	subs	r3, #21
 800582c:	f023 0303 	bic.w	r3, r3, #3
 8005830:	3304      	adds	r3, #4
 8005832:	f104 0015 	add.w	r0, r4, #21
 8005836:	4560      	cmp	r0, ip
 8005838:	bf88      	it	hi
 800583a:	2304      	movhi	r3, #4
 800583c:	50ca      	str	r2, [r1, r3]
 800583e:	b10a      	cbz	r2, 8005844 <__lshift+0xa4>
 8005840:	f108 0602 	add.w	r6, r8, #2
 8005844:	3e01      	subs	r6, #1
 8005846:	4638      	mov	r0, r7
 8005848:	4621      	mov	r1, r4
 800584a:	612e      	str	r6, [r5, #16]
 800584c:	f7ff fde2 	bl	8005414 <_Bfree>
 8005850:	4628      	mov	r0, r5
 8005852:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005856:	f842 0f04 	str.w	r0, [r2, #4]!
 800585a:	3301      	adds	r3, #1
 800585c:	e7c5      	b.n	80057ea <__lshift+0x4a>
 800585e:	3904      	subs	r1, #4
 8005860:	f853 2b04 	ldr.w	r2, [r3], #4
 8005864:	459c      	cmp	ip, r3
 8005866:	f841 2f04 	str.w	r2, [r1, #4]!
 800586a:	d8f9      	bhi.n	8005860 <__lshift+0xc0>
 800586c:	e7ea      	b.n	8005844 <__lshift+0xa4>
 800586e:	bf00      	nop
 8005870:	08006a76 	.word	0x08006a76
 8005874:	08006a87 	.word	0x08006a87

08005878 <__mcmp>:
 8005878:	4603      	mov	r3, r0
 800587a:	690a      	ldr	r2, [r1, #16]
 800587c:	6900      	ldr	r0, [r0, #16]
 800587e:	b530      	push	{r4, r5, lr}
 8005880:	1a80      	subs	r0, r0, r2
 8005882:	d10e      	bne.n	80058a2 <__mcmp+0x2a>
 8005884:	3314      	adds	r3, #20
 8005886:	3114      	adds	r1, #20
 8005888:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800588c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8005890:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005894:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8005898:	4295      	cmp	r5, r2
 800589a:	d003      	beq.n	80058a4 <__mcmp+0x2c>
 800589c:	d205      	bcs.n	80058aa <__mcmp+0x32>
 800589e:	f04f 30ff 	mov.w	r0, #4294967295
 80058a2:	bd30      	pop	{r4, r5, pc}
 80058a4:	42a3      	cmp	r3, r4
 80058a6:	d3f3      	bcc.n	8005890 <__mcmp+0x18>
 80058a8:	e7fb      	b.n	80058a2 <__mcmp+0x2a>
 80058aa:	2001      	movs	r0, #1
 80058ac:	e7f9      	b.n	80058a2 <__mcmp+0x2a>
	...

080058b0 <__mdiff>:
 80058b0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058b4:	4689      	mov	r9, r1
 80058b6:	4606      	mov	r6, r0
 80058b8:	4611      	mov	r1, r2
 80058ba:	4648      	mov	r0, r9
 80058bc:	4614      	mov	r4, r2
 80058be:	f7ff ffdb 	bl	8005878 <__mcmp>
 80058c2:	1e05      	subs	r5, r0, #0
 80058c4:	d112      	bne.n	80058ec <__mdiff+0x3c>
 80058c6:	4629      	mov	r1, r5
 80058c8:	4630      	mov	r0, r6
 80058ca:	f7ff fd63 	bl	8005394 <_Balloc>
 80058ce:	4602      	mov	r2, r0
 80058d0:	b928      	cbnz	r0, 80058de <__mdiff+0x2e>
 80058d2:	f240 2137 	movw	r1, #567	@ 0x237
 80058d6:	4b3e      	ldr	r3, [pc, #248]	@ (80059d0 <__mdiff+0x120>)
 80058d8:	483e      	ldr	r0, [pc, #248]	@ (80059d4 <__mdiff+0x124>)
 80058da:	f000 fb0d 	bl	8005ef8 <__assert_func>
 80058de:	2301      	movs	r3, #1
 80058e0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80058e4:	4610      	mov	r0, r2
 80058e6:	b003      	add	sp, #12
 80058e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80058ec:	bfbc      	itt	lt
 80058ee:	464b      	movlt	r3, r9
 80058f0:	46a1      	movlt	r9, r4
 80058f2:	4630      	mov	r0, r6
 80058f4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80058f8:	bfba      	itte	lt
 80058fa:	461c      	movlt	r4, r3
 80058fc:	2501      	movlt	r5, #1
 80058fe:	2500      	movge	r5, #0
 8005900:	f7ff fd48 	bl	8005394 <_Balloc>
 8005904:	4602      	mov	r2, r0
 8005906:	b918      	cbnz	r0, 8005910 <__mdiff+0x60>
 8005908:	f240 2145 	movw	r1, #581	@ 0x245
 800590c:	4b30      	ldr	r3, [pc, #192]	@ (80059d0 <__mdiff+0x120>)
 800590e:	e7e3      	b.n	80058d8 <__mdiff+0x28>
 8005910:	f100 0b14 	add.w	fp, r0, #20
 8005914:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8005918:	f109 0310 	add.w	r3, r9, #16
 800591c:	60c5      	str	r5, [r0, #12]
 800591e:	f04f 0c00 	mov.w	ip, #0
 8005922:	f109 0514 	add.w	r5, r9, #20
 8005926:	46d9      	mov	r9, fp
 8005928:	6926      	ldr	r6, [r4, #16]
 800592a:	f104 0e14 	add.w	lr, r4, #20
 800592e:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8005932:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8005936:	9301      	str	r3, [sp, #4]
 8005938:	9b01      	ldr	r3, [sp, #4]
 800593a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800593e:	f853 af04 	ldr.w	sl, [r3, #4]!
 8005942:	b281      	uxth	r1, r0
 8005944:	9301      	str	r3, [sp, #4]
 8005946:	fa1f f38a 	uxth.w	r3, sl
 800594a:	1a5b      	subs	r3, r3, r1
 800594c:	0c00      	lsrs	r0, r0, #16
 800594e:	4463      	add	r3, ip
 8005950:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8005954:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8005958:	b29b      	uxth	r3, r3
 800595a:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800595e:	4576      	cmp	r6, lr
 8005960:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8005964:	f849 3b04 	str.w	r3, [r9], #4
 8005968:	d8e6      	bhi.n	8005938 <__mdiff+0x88>
 800596a:	1b33      	subs	r3, r6, r4
 800596c:	3b15      	subs	r3, #21
 800596e:	f023 0303 	bic.w	r3, r3, #3
 8005972:	3415      	adds	r4, #21
 8005974:	3304      	adds	r3, #4
 8005976:	42a6      	cmp	r6, r4
 8005978:	bf38      	it	cc
 800597a:	2304      	movcc	r3, #4
 800597c:	441d      	add	r5, r3
 800597e:	445b      	add	r3, fp
 8005980:	461e      	mov	r6, r3
 8005982:	462c      	mov	r4, r5
 8005984:	4544      	cmp	r4, r8
 8005986:	d30e      	bcc.n	80059a6 <__mdiff+0xf6>
 8005988:	f108 0103 	add.w	r1, r8, #3
 800598c:	1b49      	subs	r1, r1, r5
 800598e:	f021 0103 	bic.w	r1, r1, #3
 8005992:	3d03      	subs	r5, #3
 8005994:	45a8      	cmp	r8, r5
 8005996:	bf38      	it	cc
 8005998:	2100      	movcc	r1, #0
 800599a:	440b      	add	r3, r1
 800599c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80059a0:	b199      	cbz	r1, 80059ca <__mdiff+0x11a>
 80059a2:	6117      	str	r7, [r2, #16]
 80059a4:	e79e      	b.n	80058e4 <__mdiff+0x34>
 80059a6:	46e6      	mov	lr, ip
 80059a8:	f854 1b04 	ldr.w	r1, [r4], #4
 80059ac:	fa1f fc81 	uxth.w	ip, r1
 80059b0:	44f4      	add	ip, lr
 80059b2:	0c08      	lsrs	r0, r1, #16
 80059b4:	4471      	add	r1, lr
 80059b6:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80059ba:	b289      	uxth	r1, r1
 80059bc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80059c0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80059c4:	f846 1b04 	str.w	r1, [r6], #4
 80059c8:	e7dc      	b.n	8005984 <__mdiff+0xd4>
 80059ca:	3f01      	subs	r7, #1
 80059cc:	e7e6      	b.n	800599c <__mdiff+0xec>
 80059ce:	bf00      	nop
 80059d0:	08006a76 	.word	0x08006a76
 80059d4:	08006a87 	.word	0x08006a87

080059d8 <__d2b>:
 80059d8:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 80059dc:	2101      	movs	r1, #1
 80059de:	4690      	mov	r8, r2
 80059e0:	4699      	mov	r9, r3
 80059e2:	9e08      	ldr	r6, [sp, #32]
 80059e4:	f7ff fcd6 	bl	8005394 <_Balloc>
 80059e8:	4604      	mov	r4, r0
 80059ea:	b930      	cbnz	r0, 80059fa <__d2b+0x22>
 80059ec:	4602      	mov	r2, r0
 80059ee:	f240 310f 	movw	r1, #783	@ 0x30f
 80059f2:	4b23      	ldr	r3, [pc, #140]	@ (8005a80 <__d2b+0xa8>)
 80059f4:	4823      	ldr	r0, [pc, #140]	@ (8005a84 <__d2b+0xac>)
 80059f6:	f000 fa7f 	bl	8005ef8 <__assert_func>
 80059fa:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80059fe:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005a02:	b10d      	cbz	r5, 8005a08 <__d2b+0x30>
 8005a04:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005a08:	9301      	str	r3, [sp, #4]
 8005a0a:	f1b8 0300 	subs.w	r3, r8, #0
 8005a0e:	d024      	beq.n	8005a5a <__d2b+0x82>
 8005a10:	4668      	mov	r0, sp
 8005a12:	9300      	str	r3, [sp, #0]
 8005a14:	f7ff fd85 	bl	8005522 <__lo0bits>
 8005a18:	e9dd 1200 	ldrd	r1, r2, [sp]
 8005a1c:	b1d8      	cbz	r0, 8005a56 <__d2b+0x7e>
 8005a1e:	f1c0 0320 	rsb	r3, r0, #32
 8005a22:	fa02 f303 	lsl.w	r3, r2, r3
 8005a26:	430b      	orrs	r3, r1
 8005a28:	40c2      	lsrs	r2, r0
 8005a2a:	6163      	str	r3, [r4, #20]
 8005a2c:	9201      	str	r2, [sp, #4]
 8005a2e:	9b01      	ldr	r3, [sp, #4]
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	bf0c      	ite	eq
 8005a34:	2201      	moveq	r2, #1
 8005a36:	2202      	movne	r2, #2
 8005a38:	61a3      	str	r3, [r4, #24]
 8005a3a:	6122      	str	r2, [r4, #16]
 8005a3c:	b1ad      	cbz	r5, 8005a6a <__d2b+0x92>
 8005a3e:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8005a42:	4405      	add	r5, r0
 8005a44:	6035      	str	r5, [r6, #0]
 8005a46:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8005a4a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005a4c:	6018      	str	r0, [r3, #0]
 8005a4e:	4620      	mov	r0, r4
 8005a50:	b002      	add	sp, #8
 8005a52:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8005a56:	6161      	str	r1, [r4, #20]
 8005a58:	e7e9      	b.n	8005a2e <__d2b+0x56>
 8005a5a:	a801      	add	r0, sp, #4
 8005a5c:	f7ff fd61 	bl	8005522 <__lo0bits>
 8005a60:	9b01      	ldr	r3, [sp, #4]
 8005a62:	2201      	movs	r2, #1
 8005a64:	6163      	str	r3, [r4, #20]
 8005a66:	3020      	adds	r0, #32
 8005a68:	e7e7      	b.n	8005a3a <__d2b+0x62>
 8005a6a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8005a6e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8005a72:	6030      	str	r0, [r6, #0]
 8005a74:	6918      	ldr	r0, [r3, #16]
 8005a76:	f7ff fd35 	bl	80054e4 <__hi0bits>
 8005a7a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8005a7e:	e7e4      	b.n	8005a4a <__d2b+0x72>
 8005a80:	08006a76 	.word	0x08006a76
 8005a84:	08006a87 	.word	0x08006a87

08005a88 <__ssputs_r>:
 8005a88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005a8c:	461f      	mov	r7, r3
 8005a8e:	688e      	ldr	r6, [r1, #8]
 8005a90:	4682      	mov	sl, r0
 8005a92:	42be      	cmp	r6, r7
 8005a94:	460c      	mov	r4, r1
 8005a96:	4690      	mov	r8, r2
 8005a98:	680b      	ldr	r3, [r1, #0]
 8005a9a:	d82d      	bhi.n	8005af8 <__ssputs_r+0x70>
 8005a9c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005aa0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005aa4:	d026      	beq.n	8005af4 <__ssputs_r+0x6c>
 8005aa6:	6965      	ldr	r5, [r4, #20]
 8005aa8:	6909      	ldr	r1, [r1, #16]
 8005aaa:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005aae:	eba3 0901 	sub.w	r9, r3, r1
 8005ab2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005ab6:	1c7b      	adds	r3, r7, #1
 8005ab8:	444b      	add	r3, r9
 8005aba:	106d      	asrs	r5, r5, #1
 8005abc:	429d      	cmp	r5, r3
 8005abe:	bf38      	it	cc
 8005ac0:	461d      	movcc	r5, r3
 8005ac2:	0553      	lsls	r3, r2, #21
 8005ac4:	d527      	bpl.n	8005b16 <__ssputs_r+0x8e>
 8005ac6:	4629      	mov	r1, r5
 8005ac8:	f7ff fbd8 	bl	800527c <_malloc_r>
 8005acc:	4606      	mov	r6, r0
 8005ace:	b360      	cbz	r0, 8005b2a <__ssputs_r+0xa2>
 8005ad0:	464a      	mov	r2, r9
 8005ad2:	6921      	ldr	r1, [r4, #16]
 8005ad4:	f000 fa02 	bl	8005edc <memcpy>
 8005ad8:	89a3      	ldrh	r3, [r4, #12]
 8005ada:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8005ade:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005ae2:	81a3      	strh	r3, [r4, #12]
 8005ae4:	6126      	str	r6, [r4, #16]
 8005ae6:	444e      	add	r6, r9
 8005ae8:	6026      	str	r6, [r4, #0]
 8005aea:	463e      	mov	r6, r7
 8005aec:	6165      	str	r5, [r4, #20]
 8005aee:	eba5 0509 	sub.w	r5, r5, r9
 8005af2:	60a5      	str	r5, [r4, #8]
 8005af4:	42be      	cmp	r6, r7
 8005af6:	d900      	bls.n	8005afa <__ssputs_r+0x72>
 8005af8:	463e      	mov	r6, r7
 8005afa:	4632      	mov	r2, r6
 8005afc:	4641      	mov	r1, r8
 8005afe:	6820      	ldr	r0, [r4, #0]
 8005b00:	f000 f9c2 	bl	8005e88 <memmove>
 8005b04:	2000      	movs	r0, #0
 8005b06:	68a3      	ldr	r3, [r4, #8]
 8005b08:	1b9b      	subs	r3, r3, r6
 8005b0a:	60a3      	str	r3, [r4, #8]
 8005b0c:	6823      	ldr	r3, [r4, #0]
 8005b0e:	4433      	add	r3, r6
 8005b10:	6023      	str	r3, [r4, #0]
 8005b12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b16:	462a      	mov	r2, r5
 8005b18:	f000 fa32 	bl	8005f80 <_realloc_r>
 8005b1c:	4606      	mov	r6, r0
 8005b1e:	2800      	cmp	r0, #0
 8005b20:	d1e0      	bne.n	8005ae4 <__ssputs_r+0x5c>
 8005b22:	4650      	mov	r0, sl
 8005b24:	6921      	ldr	r1, [r4, #16]
 8005b26:	f7ff fb37 	bl	8005198 <_free_r>
 8005b2a:	230c      	movs	r3, #12
 8005b2c:	f8ca 3000 	str.w	r3, [sl]
 8005b30:	89a3      	ldrh	r3, [r4, #12]
 8005b32:	f04f 30ff 	mov.w	r0, #4294967295
 8005b36:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005b3a:	81a3      	strh	r3, [r4, #12]
 8005b3c:	e7e9      	b.n	8005b12 <__ssputs_r+0x8a>
	...

08005b40 <_svfiprintf_r>:
 8005b40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b44:	4698      	mov	r8, r3
 8005b46:	898b      	ldrh	r3, [r1, #12]
 8005b48:	4607      	mov	r7, r0
 8005b4a:	061b      	lsls	r3, r3, #24
 8005b4c:	460d      	mov	r5, r1
 8005b4e:	4614      	mov	r4, r2
 8005b50:	b09d      	sub	sp, #116	@ 0x74
 8005b52:	d510      	bpl.n	8005b76 <_svfiprintf_r+0x36>
 8005b54:	690b      	ldr	r3, [r1, #16]
 8005b56:	b973      	cbnz	r3, 8005b76 <_svfiprintf_r+0x36>
 8005b58:	2140      	movs	r1, #64	@ 0x40
 8005b5a:	f7ff fb8f 	bl	800527c <_malloc_r>
 8005b5e:	6028      	str	r0, [r5, #0]
 8005b60:	6128      	str	r0, [r5, #16]
 8005b62:	b930      	cbnz	r0, 8005b72 <_svfiprintf_r+0x32>
 8005b64:	230c      	movs	r3, #12
 8005b66:	603b      	str	r3, [r7, #0]
 8005b68:	f04f 30ff 	mov.w	r0, #4294967295
 8005b6c:	b01d      	add	sp, #116	@ 0x74
 8005b6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b72:	2340      	movs	r3, #64	@ 0x40
 8005b74:	616b      	str	r3, [r5, #20]
 8005b76:	2300      	movs	r3, #0
 8005b78:	9309      	str	r3, [sp, #36]	@ 0x24
 8005b7a:	2320      	movs	r3, #32
 8005b7c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005b80:	2330      	movs	r3, #48	@ 0x30
 8005b82:	f04f 0901 	mov.w	r9, #1
 8005b86:	f8cd 800c 	str.w	r8, [sp, #12]
 8005b8a:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8005d24 <_svfiprintf_r+0x1e4>
 8005b8e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005b92:	4623      	mov	r3, r4
 8005b94:	469a      	mov	sl, r3
 8005b96:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005b9a:	b10a      	cbz	r2, 8005ba0 <_svfiprintf_r+0x60>
 8005b9c:	2a25      	cmp	r2, #37	@ 0x25
 8005b9e:	d1f9      	bne.n	8005b94 <_svfiprintf_r+0x54>
 8005ba0:	ebba 0b04 	subs.w	fp, sl, r4
 8005ba4:	d00b      	beq.n	8005bbe <_svfiprintf_r+0x7e>
 8005ba6:	465b      	mov	r3, fp
 8005ba8:	4622      	mov	r2, r4
 8005baa:	4629      	mov	r1, r5
 8005bac:	4638      	mov	r0, r7
 8005bae:	f7ff ff6b 	bl	8005a88 <__ssputs_r>
 8005bb2:	3001      	adds	r0, #1
 8005bb4:	f000 80a7 	beq.w	8005d06 <_svfiprintf_r+0x1c6>
 8005bb8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005bba:	445a      	add	r2, fp
 8005bbc:	9209      	str	r2, [sp, #36]	@ 0x24
 8005bbe:	f89a 3000 	ldrb.w	r3, [sl]
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	f000 809f 	beq.w	8005d06 <_svfiprintf_r+0x1c6>
 8005bc8:	2300      	movs	r3, #0
 8005bca:	f04f 32ff 	mov.w	r2, #4294967295
 8005bce:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005bd2:	f10a 0a01 	add.w	sl, sl, #1
 8005bd6:	9304      	str	r3, [sp, #16]
 8005bd8:	9307      	str	r3, [sp, #28]
 8005bda:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005bde:	931a      	str	r3, [sp, #104]	@ 0x68
 8005be0:	4654      	mov	r4, sl
 8005be2:	2205      	movs	r2, #5
 8005be4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005be8:	484e      	ldr	r0, [pc, #312]	@ (8005d24 <_svfiprintf_r+0x1e4>)
 8005bea:	f7fe fc68 	bl	80044be <memchr>
 8005bee:	9a04      	ldr	r2, [sp, #16]
 8005bf0:	b9d8      	cbnz	r0, 8005c2a <_svfiprintf_r+0xea>
 8005bf2:	06d0      	lsls	r0, r2, #27
 8005bf4:	bf44      	itt	mi
 8005bf6:	2320      	movmi	r3, #32
 8005bf8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005bfc:	0711      	lsls	r1, r2, #28
 8005bfe:	bf44      	itt	mi
 8005c00:	232b      	movmi	r3, #43	@ 0x2b
 8005c02:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005c06:	f89a 3000 	ldrb.w	r3, [sl]
 8005c0a:	2b2a      	cmp	r3, #42	@ 0x2a
 8005c0c:	d015      	beq.n	8005c3a <_svfiprintf_r+0xfa>
 8005c0e:	4654      	mov	r4, sl
 8005c10:	2000      	movs	r0, #0
 8005c12:	f04f 0c0a 	mov.w	ip, #10
 8005c16:	9a07      	ldr	r2, [sp, #28]
 8005c18:	4621      	mov	r1, r4
 8005c1a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005c1e:	3b30      	subs	r3, #48	@ 0x30
 8005c20:	2b09      	cmp	r3, #9
 8005c22:	d94b      	bls.n	8005cbc <_svfiprintf_r+0x17c>
 8005c24:	b1b0      	cbz	r0, 8005c54 <_svfiprintf_r+0x114>
 8005c26:	9207      	str	r2, [sp, #28]
 8005c28:	e014      	b.n	8005c54 <_svfiprintf_r+0x114>
 8005c2a:	eba0 0308 	sub.w	r3, r0, r8
 8005c2e:	fa09 f303 	lsl.w	r3, r9, r3
 8005c32:	4313      	orrs	r3, r2
 8005c34:	46a2      	mov	sl, r4
 8005c36:	9304      	str	r3, [sp, #16]
 8005c38:	e7d2      	b.n	8005be0 <_svfiprintf_r+0xa0>
 8005c3a:	9b03      	ldr	r3, [sp, #12]
 8005c3c:	1d19      	adds	r1, r3, #4
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	9103      	str	r1, [sp, #12]
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	bfbb      	ittet	lt
 8005c46:	425b      	neglt	r3, r3
 8005c48:	f042 0202 	orrlt.w	r2, r2, #2
 8005c4c:	9307      	strge	r3, [sp, #28]
 8005c4e:	9307      	strlt	r3, [sp, #28]
 8005c50:	bfb8      	it	lt
 8005c52:	9204      	strlt	r2, [sp, #16]
 8005c54:	7823      	ldrb	r3, [r4, #0]
 8005c56:	2b2e      	cmp	r3, #46	@ 0x2e
 8005c58:	d10a      	bne.n	8005c70 <_svfiprintf_r+0x130>
 8005c5a:	7863      	ldrb	r3, [r4, #1]
 8005c5c:	2b2a      	cmp	r3, #42	@ 0x2a
 8005c5e:	d132      	bne.n	8005cc6 <_svfiprintf_r+0x186>
 8005c60:	9b03      	ldr	r3, [sp, #12]
 8005c62:	3402      	adds	r4, #2
 8005c64:	1d1a      	adds	r2, r3, #4
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	9203      	str	r2, [sp, #12]
 8005c6a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005c6e:	9305      	str	r3, [sp, #20]
 8005c70:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8005d28 <_svfiprintf_r+0x1e8>
 8005c74:	2203      	movs	r2, #3
 8005c76:	4650      	mov	r0, sl
 8005c78:	7821      	ldrb	r1, [r4, #0]
 8005c7a:	f7fe fc20 	bl	80044be <memchr>
 8005c7e:	b138      	cbz	r0, 8005c90 <_svfiprintf_r+0x150>
 8005c80:	2240      	movs	r2, #64	@ 0x40
 8005c82:	9b04      	ldr	r3, [sp, #16]
 8005c84:	eba0 000a 	sub.w	r0, r0, sl
 8005c88:	4082      	lsls	r2, r0
 8005c8a:	4313      	orrs	r3, r2
 8005c8c:	3401      	adds	r4, #1
 8005c8e:	9304      	str	r3, [sp, #16]
 8005c90:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005c94:	2206      	movs	r2, #6
 8005c96:	4825      	ldr	r0, [pc, #148]	@ (8005d2c <_svfiprintf_r+0x1ec>)
 8005c98:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005c9c:	f7fe fc0f 	bl	80044be <memchr>
 8005ca0:	2800      	cmp	r0, #0
 8005ca2:	d036      	beq.n	8005d12 <_svfiprintf_r+0x1d2>
 8005ca4:	4b22      	ldr	r3, [pc, #136]	@ (8005d30 <_svfiprintf_r+0x1f0>)
 8005ca6:	bb1b      	cbnz	r3, 8005cf0 <_svfiprintf_r+0x1b0>
 8005ca8:	9b03      	ldr	r3, [sp, #12]
 8005caa:	3307      	adds	r3, #7
 8005cac:	f023 0307 	bic.w	r3, r3, #7
 8005cb0:	3308      	adds	r3, #8
 8005cb2:	9303      	str	r3, [sp, #12]
 8005cb4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005cb6:	4433      	add	r3, r6
 8005cb8:	9309      	str	r3, [sp, #36]	@ 0x24
 8005cba:	e76a      	b.n	8005b92 <_svfiprintf_r+0x52>
 8005cbc:	460c      	mov	r4, r1
 8005cbe:	2001      	movs	r0, #1
 8005cc0:	fb0c 3202 	mla	r2, ip, r2, r3
 8005cc4:	e7a8      	b.n	8005c18 <_svfiprintf_r+0xd8>
 8005cc6:	2300      	movs	r3, #0
 8005cc8:	f04f 0c0a 	mov.w	ip, #10
 8005ccc:	4619      	mov	r1, r3
 8005cce:	3401      	adds	r4, #1
 8005cd0:	9305      	str	r3, [sp, #20]
 8005cd2:	4620      	mov	r0, r4
 8005cd4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005cd8:	3a30      	subs	r2, #48	@ 0x30
 8005cda:	2a09      	cmp	r2, #9
 8005cdc:	d903      	bls.n	8005ce6 <_svfiprintf_r+0x1a6>
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d0c6      	beq.n	8005c70 <_svfiprintf_r+0x130>
 8005ce2:	9105      	str	r1, [sp, #20]
 8005ce4:	e7c4      	b.n	8005c70 <_svfiprintf_r+0x130>
 8005ce6:	4604      	mov	r4, r0
 8005ce8:	2301      	movs	r3, #1
 8005cea:	fb0c 2101 	mla	r1, ip, r1, r2
 8005cee:	e7f0      	b.n	8005cd2 <_svfiprintf_r+0x192>
 8005cf0:	ab03      	add	r3, sp, #12
 8005cf2:	9300      	str	r3, [sp, #0]
 8005cf4:	462a      	mov	r2, r5
 8005cf6:	4638      	mov	r0, r7
 8005cf8:	4b0e      	ldr	r3, [pc, #56]	@ (8005d34 <_svfiprintf_r+0x1f4>)
 8005cfa:	a904      	add	r1, sp, #16
 8005cfc:	f7fd fe7c 	bl	80039f8 <_printf_float>
 8005d00:	1c42      	adds	r2, r0, #1
 8005d02:	4606      	mov	r6, r0
 8005d04:	d1d6      	bne.n	8005cb4 <_svfiprintf_r+0x174>
 8005d06:	89ab      	ldrh	r3, [r5, #12]
 8005d08:	065b      	lsls	r3, r3, #25
 8005d0a:	f53f af2d 	bmi.w	8005b68 <_svfiprintf_r+0x28>
 8005d0e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005d10:	e72c      	b.n	8005b6c <_svfiprintf_r+0x2c>
 8005d12:	ab03      	add	r3, sp, #12
 8005d14:	9300      	str	r3, [sp, #0]
 8005d16:	462a      	mov	r2, r5
 8005d18:	4638      	mov	r0, r7
 8005d1a:	4b06      	ldr	r3, [pc, #24]	@ (8005d34 <_svfiprintf_r+0x1f4>)
 8005d1c:	a904      	add	r1, sp, #16
 8005d1e:	f7fe f909 	bl	8003f34 <_printf_i>
 8005d22:	e7ed      	b.n	8005d00 <_svfiprintf_r+0x1c0>
 8005d24:	08006ae0 	.word	0x08006ae0
 8005d28:	08006ae6 	.word	0x08006ae6
 8005d2c:	08006aea 	.word	0x08006aea
 8005d30:	080039f9 	.word	0x080039f9
 8005d34:	08005a89 	.word	0x08005a89

08005d38 <__sflush_r>:
 8005d38:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005d3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d3e:	0716      	lsls	r6, r2, #28
 8005d40:	4605      	mov	r5, r0
 8005d42:	460c      	mov	r4, r1
 8005d44:	d454      	bmi.n	8005df0 <__sflush_r+0xb8>
 8005d46:	684b      	ldr	r3, [r1, #4]
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	dc02      	bgt.n	8005d52 <__sflush_r+0x1a>
 8005d4c:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	dd48      	ble.n	8005de4 <__sflush_r+0xac>
 8005d52:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005d54:	2e00      	cmp	r6, #0
 8005d56:	d045      	beq.n	8005de4 <__sflush_r+0xac>
 8005d58:	2300      	movs	r3, #0
 8005d5a:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8005d5e:	682f      	ldr	r7, [r5, #0]
 8005d60:	6a21      	ldr	r1, [r4, #32]
 8005d62:	602b      	str	r3, [r5, #0]
 8005d64:	d030      	beq.n	8005dc8 <__sflush_r+0x90>
 8005d66:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005d68:	89a3      	ldrh	r3, [r4, #12]
 8005d6a:	0759      	lsls	r1, r3, #29
 8005d6c:	d505      	bpl.n	8005d7a <__sflush_r+0x42>
 8005d6e:	6863      	ldr	r3, [r4, #4]
 8005d70:	1ad2      	subs	r2, r2, r3
 8005d72:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005d74:	b10b      	cbz	r3, 8005d7a <__sflush_r+0x42>
 8005d76:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005d78:	1ad2      	subs	r2, r2, r3
 8005d7a:	2300      	movs	r3, #0
 8005d7c:	4628      	mov	r0, r5
 8005d7e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005d80:	6a21      	ldr	r1, [r4, #32]
 8005d82:	47b0      	blx	r6
 8005d84:	1c43      	adds	r3, r0, #1
 8005d86:	89a3      	ldrh	r3, [r4, #12]
 8005d88:	d106      	bne.n	8005d98 <__sflush_r+0x60>
 8005d8a:	6829      	ldr	r1, [r5, #0]
 8005d8c:	291d      	cmp	r1, #29
 8005d8e:	d82b      	bhi.n	8005de8 <__sflush_r+0xb0>
 8005d90:	4a28      	ldr	r2, [pc, #160]	@ (8005e34 <__sflush_r+0xfc>)
 8005d92:	40ca      	lsrs	r2, r1
 8005d94:	07d6      	lsls	r6, r2, #31
 8005d96:	d527      	bpl.n	8005de8 <__sflush_r+0xb0>
 8005d98:	2200      	movs	r2, #0
 8005d9a:	6062      	str	r2, [r4, #4]
 8005d9c:	6922      	ldr	r2, [r4, #16]
 8005d9e:	04d9      	lsls	r1, r3, #19
 8005da0:	6022      	str	r2, [r4, #0]
 8005da2:	d504      	bpl.n	8005dae <__sflush_r+0x76>
 8005da4:	1c42      	adds	r2, r0, #1
 8005da6:	d101      	bne.n	8005dac <__sflush_r+0x74>
 8005da8:	682b      	ldr	r3, [r5, #0]
 8005daa:	b903      	cbnz	r3, 8005dae <__sflush_r+0x76>
 8005dac:	6560      	str	r0, [r4, #84]	@ 0x54
 8005dae:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005db0:	602f      	str	r7, [r5, #0]
 8005db2:	b1b9      	cbz	r1, 8005de4 <__sflush_r+0xac>
 8005db4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005db8:	4299      	cmp	r1, r3
 8005dba:	d002      	beq.n	8005dc2 <__sflush_r+0x8a>
 8005dbc:	4628      	mov	r0, r5
 8005dbe:	f7ff f9eb 	bl	8005198 <_free_r>
 8005dc2:	2300      	movs	r3, #0
 8005dc4:	6363      	str	r3, [r4, #52]	@ 0x34
 8005dc6:	e00d      	b.n	8005de4 <__sflush_r+0xac>
 8005dc8:	2301      	movs	r3, #1
 8005dca:	4628      	mov	r0, r5
 8005dcc:	47b0      	blx	r6
 8005dce:	4602      	mov	r2, r0
 8005dd0:	1c50      	adds	r0, r2, #1
 8005dd2:	d1c9      	bne.n	8005d68 <__sflush_r+0x30>
 8005dd4:	682b      	ldr	r3, [r5, #0]
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d0c6      	beq.n	8005d68 <__sflush_r+0x30>
 8005dda:	2b1d      	cmp	r3, #29
 8005ddc:	d001      	beq.n	8005de2 <__sflush_r+0xaa>
 8005dde:	2b16      	cmp	r3, #22
 8005de0:	d11d      	bne.n	8005e1e <__sflush_r+0xe6>
 8005de2:	602f      	str	r7, [r5, #0]
 8005de4:	2000      	movs	r0, #0
 8005de6:	e021      	b.n	8005e2c <__sflush_r+0xf4>
 8005de8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005dec:	b21b      	sxth	r3, r3
 8005dee:	e01a      	b.n	8005e26 <__sflush_r+0xee>
 8005df0:	690f      	ldr	r7, [r1, #16]
 8005df2:	2f00      	cmp	r7, #0
 8005df4:	d0f6      	beq.n	8005de4 <__sflush_r+0xac>
 8005df6:	0793      	lsls	r3, r2, #30
 8005df8:	bf18      	it	ne
 8005dfa:	2300      	movne	r3, #0
 8005dfc:	680e      	ldr	r6, [r1, #0]
 8005dfe:	bf08      	it	eq
 8005e00:	694b      	ldreq	r3, [r1, #20]
 8005e02:	1bf6      	subs	r6, r6, r7
 8005e04:	600f      	str	r7, [r1, #0]
 8005e06:	608b      	str	r3, [r1, #8]
 8005e08:	2e00      	cmp	r6, #0
 8005e0a:	ddeb      	ble.n	8005de4 <__sflush_r+0xac>
 8005e0c:	4633      	mov	r3, r6
 8005e0e:	463a      	mov	r2, r7
 8005e10:	4628      	mov	r0, r5
 8005e12:	6a21      	ldr	r1, [r4, #32]
 8005e14:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8005e18:	47e0      	blx	ip
 8005e1a:	2800      	cmp	r0, #0
 8005e1c:	dc07      	bgt.n	8005e2e <__sflush_r+0xf6>
 8005e1e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005e22:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005e26:	f04f 30ff 	mov.w	r0, #4294967295
 8005e2a:	81a3      	strh	r3, [r4, #12]
 8005e2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005e2e:	4407      	add	r7, r0
 8005e30:	1a36      	subs	r6, r6, r0
 8005e32:	e7e9      	b.n	8005e08 <__sflush_r+0xd0>
 8005e34:	20400001 	.word	0x20400001

08005e38 <_fflush_r>:
 8005e38:	b538      	push	{r3, r4, r5, lr}
 8005e3a:	690b      	ldr	r3, [r1, #16]
 8005e3c:	4605      	mov	r5, r0
 8005e3e:	460c      	mov	r4, r1
 8005e40:	b913      	cbnz	r3, 8005e48 <_fflush_r+0x10>
 8005e42:	2500      	movs	r5, #0
 8005e44:	4628      	mov	r0, r5
 8005e46:	bd38      	pop	{r3, r4, r5, pc}
 8005e48:	b118      	cbz	r0, 8005e52 <_fflush_r+0x1a>
 8005e4a:	6a03      	ldr	r3, [r0, #32]
 8005e4c:	b90b      	cbnz	r3, 8005e52 <_fflush_r+0x1a>
 8005e4e:	f7fe fa1b 	bl	8004288 <__sinit>
 8005e52:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d0f3      	beq.n	8005e42 <_fflush_r+0xa>
 8005e5a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005e5c:	07d0      	lsls	r0, r2, #31
 8005e5e:	d404      	bmi.n	8005e6a <_fflush_r+0x32>
 8005e60:	0599      	lsls	r1, r3, #22
 8005e62:	d402      	bmi.n	8005e6a <_fflush_r+0x32>
 8005e64:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005e66:	f7fe fb28 	bl	80044ba <__retarget_lock_acquire_recursive>
 8005e6a:	4628      	mov	r0, r5
 8005e6c:	4621      	mov	r1, r4
 8005e6e:	f7ff ff63 	bl	8005d38 <__sflush_r>
 8005e72:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005e74:	4605      	mov	r5, r0
 8005e76:	07da      	lsls	r2, r3, #31
 8005e78:	d4e4      	bmi.n	8005e44 <_fflush_r+0xc>
 8005e7a:	89a3      	ldrh	r3, [r4, #12]
 8005e7c:	059b      	lsls	r3, r3, #22
 8005e7e:	d4e1      	bmi.n	8005e44 <_fflush_r+0xc>
 8005e80:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005e82:	f7fe fb1b 	bl	80044bc <__retarget_lock_release_recursive>
 8005e86:	e7dd      	b.n	8005e44 <_fflush_r+0xc>

08005e88 <memmove>:
 8005e88:	4288      	cmp	r0, r1
 8005e8a:	b510      	push	{r4, lr}
 8005e8c:	eb01 0402 	add.w	r4, r1, r2
 8005e90:	d902      	bls.n	8005e98 <memmove+0x10>
 8005e92:	4284      	cmp	r4, r0
 8005e94:	4623      	mov	r3, r4
 8005e96:	d807      	bhi.n	8005ea8 <memmove+0x20>
 8005e98:	1e43      	subs	r3, r0, #1
 8005e9a:	42a1      	cmp	r1, r4
 8005e9c:	d008      	beq.n	8005eb0 <memmove+0x28>
 8005e9e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005ea2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005ea6:	e7f8      	b.n	8005e9a <memmove+0x12>
 8005ea8:	4601      	mov	r1, r0
 8005eaa:	4402      	add	r2, r0
 8005eac:	428a      	cmp	r2, r1
 8005eae:	d100      	bne.n	8005eb2 <memmove+0x2a>
 8005eb0:	bd10      	pop	{r4, pc}
 8005eb2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005eb6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005eba:	e7f7      	b.n	8005eac <memmove+0x24>

08005ebc <_sbrk_r>:
 8005ebc:	b538      	push	{r3, r4, r5, lr}
 8005ebe:	2300      	movs	r3, #0
 8005ec0:	4d05      	ldr	r5, [pc, #20]	@ (8005ed8 <_sbrk_r+0x1c>)
 8005ec2:	4604      	mov	r4, r0
 8005ec4:	4608      	mov	r0, r1
 8005ec6:	602b      	str	r3, [r5, #0]
 8005ec8:	f7fb fd68 	bl	800199c <_sbrk>
 8005ecc:	1c43      	adds	r3, r0, #1
 8005ece:	d102      	bne.n	8005ed6 <_sbrk_r+0x1a>
 8005ed0:	682b      	ldr	r3, [r5, #0]
 8005ed2:	b103      	cbz	r3, 8005ed6 <_sbrk_r+0x1a>
 8005ed4:	6023      	str	r3, [r4, #0]
 8005ed6:	bd38      	pop	{r3, r4, r5, pc}
 8005ed8:	20000438 	.word	0x20000438

08005edc <memcpy>:
 8005edc:	440a      	add	r2, r1
 8005ede:	4291      	cmp	r1, r2
 8005ee0:	f100 33ff 	add.w	r3, r0, #4294967295
 8005ee4:	d100      	bne.n	8005ee8 <memcpy+0xc>
 8005ee6:	4770      	bx	lr
 8005ee8:	b510      	push	{r4, lr}
 8005eea:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005eee:	4291      	cmp	r1, r2
 8005ef0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005ef4:	d1f9      	bne.n	8005eea <memcpy+0xe>
 8005ef6:	bd10      	pop	{r4, pc}

08005ef8 <__assert_func>:
 8005ef8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005efa:	4614      	mov	r4, r2
 8005efc:	461a      	mov	r2, r3
 8005efe:	4b09      	ldr	r3, [pc, #36]	@ (8005f24 <__assert_func+0x2c>)
 8005f00:	4605      	mov	r5, r0
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	68d8      	ldr	r0, [r3, #12]
 8005f06:	b14c      	cbz	r4, 8005f1c <__assert_func+0x24>
 8005f08:	4b07      	ldr	r3, [pc, #28]	@ (8005f28 <__assert_func+0x30>)
 8005f0a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005f0e:	9100      	str	r1, [sp, #0]
 8005f10:	462b      	mov	r3, r5
 8005f12:	4906      	ldr	r1, [pc, #24]	@ (8005f2c <__assert_func+0x34>)
 8005f14:	f000 f870 	bl	8005ff8 <fiprintf>
 8005f18:	f000 f880 	bl	800601c <abort>
 8005f1c:	4b04      	ldr	r3, [pc, #16]	@ (8005f30 <__assert_func+0x38>)
 8005f1e:	461c      	mov	r4, r3
 8005f20:	e7f3      	b.n	8005f0a <__assert_func+0x12>
 8005f22:	bf00      	nop
 8005f24:	20000028 	.word	0x20000028
 8005f28:	08006afb 	.word	0x08006afb
 8005f2c:	08006b08 	.word	0x08006b08
 8005f30:	08006b36 	.word	0x08006b36

08005f34 <_calloc_r>:
 8005f34:	b570      	push	{r4, r5, r6, lr}
 8005f36:	fba1 5402 	umull	r5, r4, r1, r2
 8005f3a:	b934      	cbnz	r4, 8005f4a <_calloc_r+0x16>
 8005f3c:	4629      	mov	r1, r5
 8005f3e:	f7ff f99d 	bl	800527c <_malloc_r>
 8005f42:	4606      	mov	r6, r0
 8005f44:	b928      	cbnz	r0, 8005f52 <_calloc_r+0x1e>
 8005f46:	4630      	mov	r0, r6
 8005f48:	bd70      	pop	{r4, r5, r6, pc}
 8005f4a:	220c      	movs	r2, #12
 8005f4c:	2600      	movs	r6, #0
 8005f4e:	6002      	str	r2, [r0, #0]
 8005f50:	e7f9      	b.n	8005f46 <_calloc_r+0x12>
 8005f52:	462a      	mov	r2, r5
 8005f54:	4621      	mov	r1, r4
 8005f56:	f7fe fa32 	bl	80043be <memset>
 8005f5a:	e7f4      	b.n	8005f46 <_calloc_r+0x12>

08005f5c <__ascii_mbtowc>:
 8005f5c:	b082      	sub	sp, #8
 8005f5e:	b901      	cbnz	r1, 8005f62 <__ascii_mbtowc+0x6>
 8005f60:	a901      	add	r1, sp, #4
 8005f62:	b142      	cbz	r2, 8005f76 <__ascii_mbtowc+0x1a>
 8005f64:	b14b      	cbz	r3, 8005f7a <__ascii_mbtowc+0x1e>
 8005f66:	7813      	ldrb	r3, [r2, #0]
 8005f68:	600b      	str	r3, [r1, #0]
 8005f6a:	7812      	ldrb	r2, [r2, #0]
 8005f6c:	1e10      	subs	r0, r2, #0
 8005f6e:	bf18      	it	ne
 8005f70:	2001      	movne	r0, #1
 8005f72:	b002      	add	sp, #8
 8005f74:	4770      	bx	lr
 8005f76:	4610      	mov	r0, r2
 8005f78:	e7fb      	b.n	8005f72 <__ascii_mbtowc+0x16>
 8005f7a:	f06f 0001 	mvn.w	r0, #1
 8005f7e:	e7f8      	b.n	8005f72 <__ascii_mbtowc+0x16>

08005f80 <_realloc_r>:
 8005f80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f84:	4607      	mov	r7, r0
 8005f86:	4614      	mov	r4, r2
 8005f88:	460d      	mov	r5, r1
 8005f8a:	b921      	cbnz	r1, 8005f96 <_realloc_r+0x16>
 8005f8c:	4611      	mov	r1, r2
 8005f8e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005f92:	f7ff b973 	b.w	800527c <_malloc_r>
 8005f96:	b92a      	cbnz	r2, 8005fa4 <_realloc_r+0x24>
 8005f98:	f7ff f8fe 	bl	8005198 <_free_r>
 8005f9c:	4625      	mov	r5, r4
 8005f9e:	4628      	mov	r0, r5
 8005fa0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005fa4:	f000 f841 	bl	800602a <_malloc_usable_size_r>
 8005fa8:	4284      	cmp	r4, r0
 8005faa:	4606      	mov	r6, r0
 8005fac:	d802      	bhi.n	8005fb4 <_realloc_r+0x34>
 8005fae:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005fb2:	d8f4      	bhi.n	8005f9e <_realloc_r+0x1e>
 8005fb4:	4621      	mov	r1, r4
 8005fb6:	4638      	mov	r0, r7
 8005fb8:	f7ff f960 	bl	800527c <_malloc_r>
 8005fbc:	4680      	mov	r8, r0
 8005fbe:	b908      	cbnz	r0, 8005fc4 <_realloc_r+0x44>
 8005fc0:	4645      	mov	r5, r8
 8005fc2:	e7ec      	b.n	8005f9e <_realloc_r+0x1e>
 8005fc4:	42b4      	cmp	r4, r6
 8005fc6:	4622      	mov	r2, r4
 8005fc8:	4629      	mov	r1, r5
 8005fca:	bf28      	it	cs
 8005fcc:	4632      	movcs	r2, r6
 8005fce:	f7ff ff85 	bl	8005edc <memcpy>
 8005fd2:	4629      	mov	r1, r5
 8005fd4:	4638      	mov	r0, r7
 8005fd6:	f7ff f8df 	bl	8005198 <_free_r>
 8005fda:	e7f1      	b.n	8005fc0 <_realloc_r+0x40>

08005fdc <__ascii_wctomb>:
 8005fdc:	4603      	mov	r3, r0
 8005fde:	4608      	mov	r0, r1
 8005fe0:	b141      	cbz	r1, 8005ff4 <__ascii_wctomb+0x18>
 8005fe2:	2aff      	cmp	r2, #255	@ 0xff
 8005fe4:	d904      	bls.n	8005ff0 <__ascii_wctomb+0x14>
 8005fe6:	228a      	movs	r2, #138	@ 0x8a
 8005fe8:	f04f 30ff 	mov.w	r0, #4294967295
 8005fec:	601a      	str	r2, [r3, #0]
 8005fee:	4770      	bx	lr
 8005ff0:	2001      	movs	r0, #1
 8005ff2:	700a      	strb	r2, [r1, #0]
 8005ff4:	4770      	bx	lr
	...

08005ff8 <fiprintf>:
 8005ff8:	b40e      	push	{r1, r2, r3}
 8005ffa:	b503      	push	{r0, r1, lr}
 8005ffc:	4601      	mov	r1, r0
 8005ffe:	ab03      	add	r3, sp, #12
 8006000:	4805      	ldr	r0, [pc, #20]	@ (8006018 <fiprintf+0x20>)
 8006002:	f853 2b04 	ldr.w	r2, [r3], #4
 8006006:	6800      	ldr	r0, [r0, #0]
 8006008:	9301      	str	r3, [sp, #4]
 800600a:	f000 f83d 	bl	8006088 <_vfiprintf_r>
 800600e:	b002      	add	sp, #8
 8006010:	f85d eb04 	ldr.w	lr, [sp], #4
 8006014:	b003      	add	sp, #12
 8006016:	4770      	bx	lr
 8006018:	20000028 	.word	0x20000028

0800601c <abort>:
 800601c:	2006      	movs	r0, #6
 800601e:	b508      	push	{r3, lr}
 8006020:	f000 fa06 	bl	8006430 <raise>
 8006024:	2001      	movs	r0, #1
 8006026:	f7fb fc44 	bl	80018b2 <_exit>

0800602a <_malloc_usable_size_r>:
 800602a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800602e:	1f18      	subs	r0, r3, #4
 8006030:	2b00      	cmp	r3, #0
 8006032:	bfbc      	itt	lt
 8006034:	580b      	ldrlt	r3, [r1, r0]
 8006036:	18c0      	addlt	r0, r0, r3
 8006038:	4770      	bx	lr

0800603a <__sfputc_r>:
 800603a:	6893      	ldr	r3, [r2, #8]
 800603c:	b410      	push	{r4}
 800603e:	3b01      	subs	r3, #1
 8006040:	2b00      	cmp	r3, #0
 8006042:	6093      	str	r3, [r2, #8]
 8006044:	da07      	bge.n	8006056 <__sfputc_r+0x1c>
 8006046:	6994      	ldr	r4, [r2, #24]
 8006048:	42a3      	cmp	r3, r4
 800604a:	db01      	blt.n	8006050 <__sfputc_r+0x16>
 800604c:	290a      	cmp	r1, #10
 800604e:	d102      	bne.n	8006056 <__sfputc_r+0x1c>
 8006050:	bc10      	pop	{r4}
 8006052:	f000 b931 	b.w	80062b8 <__swbuf_r>
 8006056:	6813      	ldr	r3, [r2, #0]
 8006058:	1c58      	adds	r0, r3, #1
 800605a:	6010      	str	r0, [r2, #0]
 800605c:	7019      	strb	r1, [r3, #0]
 800605e:	4608      	mov	r0, r1
 8006060:	bc10      	pop	{r4}
 8006062:	4770      	bx	lr

08006064 <__sfputs_r>:
 8006064:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006066:	4606      	mov	r6, r0
 8006068:	460f      	mov	r7, r1
 800606a:	4614      	mov	r4, r2
 800606c:	18d5      	adds	r5, r2, r3
 800606e:	42ac      	cmp	r4, r5
 8006070:	d101      	bne.n	8006076 <__sfputs_r+0x12>
 8006072:	2000      	movs	r0, #0
 8006074:	e007      	b.n	8006086 <__sfputs_r+0x22>
 8006076:	463a      	mov	r2, r7
 8006078:	4630      	mov	r0, r6
 800607a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800607e:	f7ff ffdc 	bl	800603a <__sfputc_r>
 8006082:	1c43      	adds	r3, r0, #1
 8006084:	d1f3      	bne.n	800606e <__sfputs_r+0xa>
 8006086:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006088 <_vfiprintf_r>:
 8006088:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800608c:	460d      	mov	r5, r1
 800608e:	4614      	mov	r4, r2
 8006090:	4698      	mov	r8, r3
 8006092:	4606      	mov	r6, r0
 8006094:	b09d      	sub	sp, #116	@ 0x74
 8006096:	b118      	cbz	r0, 80060a0 <_vfiprintf_r+0x18>
 8006098:	6a03      	ldr	r3, [r0, #32]
 800609a:	b90b      	cbnz	r3, 80060a0 <_vfiprintf_r+0x18>
 800609c:	f7fe f8f4 	bl	8004288 <__sinit>
 80060a0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80060a2:	07d9      	lsls	r1, r3, #31
 80060a4:	d405      	bmi.n	80060b2 <_vfiprintf_r+0x2a>
 80060a6:	89ab      	ldrh	r3, [r5, #12]
 80060a8:	059a      	lsls	r2, r3, #22
 80060aa:	d402      	bmi.n	80060b2 <_vfiprintf_r+0x2a>
 80060ac:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80060ae:	f7fe fa04 	bl	80044ba <__retarget_lock_acquire_recursive>
 80060b2:	89ab      	ldrh	r3, [r5, #12]
 80060b4:	071b      	lsls	r3, r3, #28
 80060b6:	d501      	bpl.n	80060bc <_vfiprintf_r+0x34>
 80060b8:	692b      	ldr	r3, [r5, #16]
 80060ba:	b99b      	cbnz	r3, 80060e4 <_vfiprintf_r+0x5c>
 80060bc:	4629      	mov	r1, r5
 80060be:	4630      	mov	r0, r6
 80060c0:	f000 f938 	bl	8006334 <__swsetup_r>
 80060c4:	b170      	cbz	r0, 80060e4 <_vfiprintf_r+0x5c>
 80060c6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80060c8:	07dc      	lsls	r4, r3, #31
 80060ca:	d504      	bpl.n	80060d6 <_vfiprintf_r+0x4e>
 80060cc:	f04f 30ff 	mov.w	r0, #4294967295
 80060d0:	b01d      	add	sp, #116	@ 0x74
 80060d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80060d6:	89ab      	ldrh	r3, [r5, #12]
 80060d8:	0598      	lsls	r0, r3, #22
 80060da:	d4f7      	bmi.n	80060cc <_vfiprintf_r+0x44>
 80060dc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80060de:	f7fe f9ed 	bl	80044bc <__retarget_lock_release_recursive>
 80060e2:	e7f3      	b.n	80060cc <_vfiprintf_r+0x44>
 80060e4:	2300      	movs	r3, #0
 80060e6:	9309      	str	r3, [sp, #36]	@ 0x24
 80060e8:	2320      	movs	r3, #32
 80060ea:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80060ee:	2330      	movs	r3, #48	@ 0x30
 80060f0:	f04f 0901 	mov.w	r9, #1
 80060f4:	f8cd 800c 	str.w	r8, [sp, #12]
 80060f8:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 80062a4 <_vfiprintf_r+0x21c>
 80060fc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006100:	4623      	mov	r3, r4
 8006102:	469a      	mov	sl, r3
 8006104:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006108:	b10a      	cbz	r2, 800610e <_vfiprintf_r+0x86>
 800610a:	2a25      	cmp	r2, #37	@ 0x25
 800610c:	d1f9      	bne.n	8006102 <_vfiprintf_r+0x7a>
 800610e:	ebba 0b04 	subs.w	fp, sl, r4
 8006112:	d00b      	beq.n	800612c <_vfiprintf_r+0xa4>
 8006114:	465b      	mov	r3, fp
 8006116:	4622      	mov	r2, r4
 8006118:	4629      	mov	r1, r5
 800611a:	4630      	mov	r0, r6
 800611c:	f7ff ffa2 	bl	8006064 <__sfputs_r>
 8006120:	3001      	adds	r0, #1
 8006122:	f000 80a7 	beq.w	8006274 <_vfiprintf_r+0x1ec>
 8006126:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006128:	445a      	add	r2, fp
 800612a:	9209      	str	r2, [sp, #36]	@ 0x24
 800612c:	f89a 3000 	ldrb.w	r3, [sl]
 8006130:	2b00      	cmp	r3, #0
 8006132:	f000 809f 	beq.w	8006274 <_vfiprintf_r+0x1ec>
 8006136:	2300      	movs	r3, #0
 8006138:	f04f 32ff 	mov.w	r2, #4294967295
 800613c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006140:	f10a 0a01 	add.w	sl, sl, #1
 8006144:	9304      	str	r3, [sp, #16]
 8006146:	9307      	str	r3, [sp, #28]
 8006148:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800614c:	931a      	str	r3, [sp, #104]	@ 0x68
 800614e:	4654      	mov	r4, sl
 8006150:	2205      	movs	r2, #5
 8006152:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006156:	4853      	ldr	r0, [pc, #332]	@ (80062a4 <_vfiprintf_r+0x21c>)
 8006158:	f7fe f9b1 	bl	80044be <memchr>
 800615c:	9a04      	ldr	r2, [sp, #16]
 800615e:	b9d8      	cbnz	r0, 8006198 <_vfiprintf_r+0x110>
 8006160:	06d1      	lsls	r1, r2, #27
 8006162:	bf44      	itt	mi
 8006164:	2320      	movmi	r3, #32
 8006166:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800616a:	0713      	lsls	r3, r2, #28
 800616c:	bf44      	itt	mi
 800616e:	232b      	movmi	r3, #43	@ 0x2b
 8006170:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006174:	f89a 3000 	ldrb.w	r3, [sl]
 8006178:	2b2a      	cmp	r3, #42	@ 0x2a
 800617a:	d015      	beq.n	80061a8 <_vfiprintf_r+0x120>
 800617c:	4654      	mov	r4, sl
 800617e:	2000      	movs	r0, #0
 8006180:	f04f 0c0a 	mov.w	ip, #10
 8006184:	9a07      	ldr	r2, [sp, #28]
 8006186:	4621      	mov	r1, r4
 8006188:	f811 3b01 	ldrb.w	r3, [r1], #1
 800618c:	3b30      	subs	r3, #48	@ 0x30
 800618e:	2b09      	cmp	r3, #9
 8006190:	d94b      	bls.n	800622a <_vfiprintf_r+0x1a2>
 8006192:	b1b0      	cbz	r0, 80061c2 <_vfiprintf_r+0x13a>
 8006194:	9207      	str	r2, [sp, #28]
 8006196:	e014      	b.n	80061c2 <_vfiprintf_r+0x13a>
 8006198:	eba0 0308 	sub.w	r3, r0, r8
 800619c:	fa09 f303 	lsl.w	r3, r9, r3
 80061a0:	4313      	orrs	r3, r2
 80061a2:	46a2      	mov	sl, r4
 80061a4:	9304      	str	r3, [sp, #16]
 80061a6:	e7d2      	b.n	800614e <_vfiprintf_r+0xc6>
 80061a8:	9b03      	ldr	r3, [sp, #12]
 80061aa:	1d19      	adds	r1, r3, #4
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	9103      	str	r1, [sp, #12]
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	bfbb      	ittet	lt
 80061b4:	425b      	neglt	r3, r3
 80061b6:	f042 0202 	orrlt.w	r2, r2, #2
 80061ba:	9307      	strge	r3, [sp, #28]
 80061bc:	9307      	strlt	r3, [sp, #28]
 80061be:	bfb8      	it	lt
 80061c0:	9204      	strlt	r2, [sp, #16]
 80061c2:	7823      	ldrb	r3, [r4, #0]
 80061c4:	2b2e      	cmp	r3, #46	@ 0x2e
 80061c6:	d10a      	bne.n	80061de <_vfiprintf_r+0x156>
 80061c8:	7863      	ldrb	r3, [r4, #1]
 80061ca:	2b2a      	cmp	r3, #42	@ 0x2a
 80061cc:	d132      	bne.n	8006234 <_vfiprintf_r+0x1ac>
 80061ce:	9b03      	ldr	r3, [sp, #12]
 80061d0:	3402      	adds	r4, #2
 80061d2:	1d1a      	adds	r2, r3, #4
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	9203      	str	r2, [sp, #12]
 80061d8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80061dc:	9305      	str	r3, [sp, #20]
 80061de:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 80062a8 <_vfiprintf_r+0x220>
 80061e2:	2203      	movs	r2, #3
 80061e4:	4650      	mov	r0, sl
 80061e6:	7821      	ldrb	r1, [r4, #0]
 80061e8:	f7fe f969 	bl	80044be <memchr>
 80061ec:	b138      	cbz	r0, 80061fe <_vfiprintf_r+0x176>
 80061ee:	2240      	movs	r2, #64	@ 0x40
 80061f0:	9b04      	ldr	r3, [sp, #16]
 80061f2:	eba0 000a 	sub.w	r0, r0, sl
 80061f6:	4082      	lsls	r2, r0
 80061f8:	4313      	orrs	r3, r2
 80061fa:	3401      	adds	r4, #1
 80061fc:	9304      	str	r3, [sp, #16]
 80061fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006202:	2206      	movs	r2, #6
 8006204:	4829      	ldr	r0, [pc, #164]	@ (80062ac <_vfiprintf_r+0x224>)
 8006206:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800620a:	f7fe f958 	bl	80044be <memchr>
 800620e:	2800      	cmp	r0, #0
 8006210:	d03f      	beq.n	8006292 <_vfiprintf_r+0x20a>
 8006212:	4b27      	ldr	r3, [pc, #156]	@ (80062b0 <_vfiprintf_r+0x228>)
 8006214:	bb1b      	cbnz	r3, 800625e <_vfiprintf_r+0x1d6>
 8006216:	9b03      	ldr	r3, [sp, #12]
 8006218:	3307      	adds	r3, #7
 800621a:	f023 0307 	bic.w	r3, r3, #7
 800621e:	3308      	adds	r3, #8
 8006220:	9303      	str	r3, [sp, #12]
 8006222:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006224:	443b      	add	r3, r7
 8006226:	9309      	str	r3, [sp, #36]	@ 0x24
 8006228:	e76a      	b.n	8006100 <_vfiprintf_r+0x78>
 800622a:	460c      	mov	r4, r1
 800622c:	2001      	movs	r0, #1
 800622e:	fb0c 3202 	mla	r2, ip, r2, r3
 8006232:	e7a8      	b.n	8006186 <_vfiprintf_r+0xfe>
 8006234:	2300      	movs	r3, #0
 8006236:	f04f 0c0a 	mov.w	ip, #10
 800623a:	4619      	mov	r1, r3
 800623c:	3401      	adds	r4, #1
 800623e:	9305      	str	r3, [sp, #20]
 8006240:	4620      	mov	r0, r4
 8006242:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006246:	3a30      	subs	r2, #48	@ 0x30
 8006248:	2a09      	cmp	r2, #9
 800624a:	d903      	bls.n	8006254 <_vfiprintf_r+0x1cc>
 800624c:	2b00      	cmp	r3, #0
 800624e:	d0c6      	beq.n	80061de <_vfiprintf_r+0x156>
 8006250:	9105      	str	r1, [sp, #20]
 8006252:	e7c4      	b.n	80061de <_vfiprintf_r+0x156>
 8006254:	4604      	mov	r4, r0
 8006256:	2301      	movs	r3, #1
 8006258:	fb0c 2101 	mla	r1, ip, r1, r2
 800625c:	e7f0      	b.n	8006240 <_vfiprintf_r+0x1b8>
 800625e:	ab03      	add	r3, sp, #12
 8006260:	9300      	str	r3, [sp, #0]
 8006262:	462a      	mov	r2, r5
 8006264:	4630      	mov	r0, r6
 8006266:	4b13      	ldr	r3, [pc, #76]	@ (80062b4 <_vfiprintf_r+0x22c>)
 8006268:	a904      	add	r1, sp, #16
 800626a:	f7fd fbc5 	bl	80039f8 <_printf_float>
 800626e:	4607      	mov	r7, r0
 8006270:	1c78      	adds	r0, r7, #1
 8006272:	d1d6      	bne.n	8006222 <_vfiprintf_r+0x19a>
 8006274:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006276:	07d9      	lsls	r1, r3, #31
 8006278:	d405      	bmi.n	8006286 <_vfiprintf_r+0x1fe>
 800627a:	89ab      	ldrh	r3, [r5, #12]
 800627c:	059a      	lsls	r2, r3, #22
 800627e:	d402      	bmi.n	8006286 <_vfiprintf_r+0x1fe>
 8006280:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006282:	f7fe f91b 	bl	80044bc <__retarget_lock_release_recursive>
 8006286:	89ab      	ldrh	r3, [r5, #12]
 8006288:	065b      	lsls	r3, r3, #25
 800628a:	f53f af1f 	bmi.w	80060cc <_vfiprintf_r+0x44>
 800628e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006290:	e71e      	b.n	80060d0 <_vfiprintf_r+0x48>
 8006292:	ab03      	add	r3, sp, #12
 8006294:	9300      	str	r3, [sp, #0]
 8006296:	462a      	mov	r2, r5
 8006298:	4630      	mov	r0, r6
 800629a:	4b06      	ldr	r3, [pc, #24]	@ (80062b4 <_vfiprintf_r+0x22c>)
 800629c:	a904      	add	r1, sp, #16
 800629e:	f7fd fe49 	bl	8003f34 <_printf_i>
 80062a2:	e7e4      	b.n	800626e <_vfiprintf_r+0x1e6>
 80062a4:	08006ae0 	.word	0x08006ae0
 80062a8:	08006ae6 	.word	0x08006ae6
 80062ac:	08006aea 	.word	0x08006aea
 80062b0:	080039f9 	.word	0x080039f9
 80062b4:	08006065 	.word	0x08006065

080062b8 <__swbuf_r>:
 80062b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062ba:	460e      	mov	r6, r1
 80062bc:	4614      	mov	r4, r2
 80062be:	4605      	mov	r5, r0
 80062c0:	b118      	cbz	r0, 80062ca <__swbuf_r+0x12>
 80062c2:	6a03      	ldr	r3, [r0, #32]
 80062c4:	b90b      	cbnz	r3, 80062ca <__swbuf_r+0x12>
 80062c6:	f7fd ffdf 	bl	8004288 <__sinit>
 80062ca:	69a3      	ldr	r3, [r4, #24]
 80062cc:	60a3      	str	r3, [r4, #8]
 80062ce:	89a3      	ldrh	r3, [r4, #12]
 80062d0:	071a      	lsls	r2, r3, #28
 80062d2:	d501      	bpl.n	80062d8 <__swbuf_r+0x20>
 80062d4:	6923      	ldr	r3, [r4, #16]
 80062d6:	b943      	cbnz	r3, 80062ea <__swbuf_r+0x32>
 80062d8:	4621      	mov	r1, r4
 80062da:	4628      	mov	r0, r5
 80062dc:	f000 f82a 	bl	8006334 <__swsetup_r>
 80062e0:	b118      	cbz	r0, 80062ea <__swbuf_r+0x32>
 80062e2:	f04f 37ff 	mov.w	r7, #4294967295
 80062e6:	4638      	mov	r0, r7
 80062e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80062ea:	6823      	ldr	r3, [r4, #0]
 80062ec:	6922      	ldr	r2, [r4, #16]
 80062ee:	b2f6      	uxtb	r6, r6
 80062f0:	1a98      	subs	r0, r3, r2
 80062f2:	6963      	ldr	r3, [r4, #20]
 80062f4:	4637      	mov	r7, r6
 80062f6:	4283      	cmp	r3, r0
 80062f8:	dc05      	bgt.n	8006306 <__swbuf_r+0x4e>
 80062fa:	4621      	mov	r1, r4
 80062fc:	4628      	mov	r0, r5
 80062fe:	f7ff fd9b 	bl	8005e38 <_fflush_r>
 8006302:	2800      	cmp	r0, #0
 8006304:	d1ed      	bne.n	80062e2 <__swbuf_r+0x2a>
 8006306:	68a3      	ldr	r3, [r4, #8]
 8006308:	3b01      	subs	r3, #1
 800630a:	60a3      	str	r3, [r4, #8]
 800630c:	6823      	ldr	r3, [r4, #0]
 800630e:	1c5a      	adds	r2, r3, #1
 8006310:	6022      	str	r2, [r4, #0]
 8006312:	701e      	strb	r6, [r3, #0]
 8006314:	6962      	ldr	r2, [r4, #20]
 8006316:	1c43      	adds	r3, r0, #1
 8006318:	429a      	cmp	r2, r3
 800631a:	d004      	beq.n	8006326 <__swbuf_r+0x6e>
 800631c:	89a3      	ldrh	r3, [r4, #12]
 800631e:	07db      	lsls	r3, r3, #31
 8006320:	d5e1      	bpl.n	80062e6 <__swbuf_r+0x2e>
 8006322:	2e0a      	cmp	r6, #10
 8006324:	d1df      	bne.n	80062e6 <__swbuf_r+0x2e>
 8006326:	4621      	mov	r1, r4
 8006328:	4628      	mov	r0, r5
 800632a:	f7ff fd85 	bl	8005e38 <_fflush_r>
 800632e:	2800      	cmp	r0, #0
 8006330:	d0d9      	beq.n	80062e6 <__swbuf_r+0x2e>
 8006332:	e7d6      	b.n	80062e2 <__swbuf_r+0x2a>

08006334 <__swsetup_r>:
 8006334:	b538      	push	{r3, r4, r5, lr}
 8006336:	4b29      	ldr	r3, [pc, #164]	@ (80063dc <__swsetup_r+0xa8>)
 8006338:	4605      	mov	r5, r0
 800633a:	6818      	ldr	r0, [r3, #0]
 800633c:	460c      	mov	r4, r1
 800633e:	b118      	cbz	r0, 8006348 <__swsetup_r+0x14>
 8006340:	6a03      	ldr	r3, [r0, #32]
 8006342:	b90b      	cbnz	r3, 8006348 <__swsetup_r+0x14>
 8006344:	f7fd ffa0 	bl	8004288 <__sinit>
 8006348:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800634c:	0719      	lsls	r1, r3, #28
 800634e:	d422      	bmi.n	8006396 <__swsetup_r+0x62>
 8006350:	06da      	lsls	r2, r3, #27
 8006352:	d407      	bmi.n	8006364 <__swsetup_r+0x30>
 8006354:	2209      	movs	r2, #9
 8006356:	602a      	str	r2, [r5, #0]
 8006358:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800635c:	f04f 30ff 	mov.w	r0, #4294967295
 8006360:	81a3      	strh	r3, [r4, #12]
 8006362:	e033      	b.n	80063cc <__swsetup_r+0x98>
 8006364:	0758      	lsls	r0, r3, #29
 8006366:	d512      	bpl.n	800638e <__swsetup_r+0x5a>
 8006368:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800636a:	b141      	cbz	r1, 800637e <__swsetup_r+0x4a>
 800636c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006370:	4299      	cmp	r1, r3
 8006372:	d002      	beq.n	800637a <__swsetup_r+0x46>
 8006374:	4628      	mov	r0, r5
 8006376:	f7fe ff0f 	bl	8005198 <_free_r>
 800637a:	2300      	movs	r3, #0
 800637c:	6363      	str	r3, [r4, #52]	@ 0x34
 800637e:	89a3      	ldrh	r3, [r4, #12]
 8006380:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006384:	81a3      	strh	r3, [r4, #12]
 8006386:	2300      	movs	r3, #0
 8006388:	6063      	str	r3, [r4, #4]
 800638a:	6923      	ldr	r3, [r4, #16]
 800638c:	6023      	str	r3, [r4, #0]
 800638e:	89a3      	ldrh	r3, [r4, #12]
 8006390:	f043 0308 	orr.w	r3, r3, #8
 8006394:	81a3      	strh	r3, [r4, #12]
 8006396:	6923      	ldr	r3, [r4, #16]
 8006398:	b94b      	cbnz	r3, 80063ae <__swsetup_r+0x7a>
 800639a:	89a3      	ldrh	r3, [r4, #12]
 800639c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80063a0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80063a4:	d003      	beq.n	80063ae <__swsetup_r+0x7a>
 80063a6:	4621      	mov	r1, r4
 80063a8:	4628      	mov	r0, r5
 80063aa:	f000 f882 	bl	80064b2 <__smakebuf_r>
 80063ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80063b2:	f013 0201 	ands.w	r2, r3, #1
 80063b6:	d00a      	beq.n	80063ce <__swsetup_r+0x9a>
 80063b8:	2200      	movs	r2, #0
 80063ba:	60a2      	str	r2, [r4, #8]
 80063bc:	6962      	ldr	r2, [r4, #20]
 80063be:	4252      	negs	r2, r2
 80063c0:	61a2      	str	r2, [r4, #24]
 80063c2:	6922      	ldr	r2, [r4, #16]
 80063c4:	b942      	cbnz	r2, 80063d8 <__swsetup_r+0xa4>
 80063c6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80063ca:	d1c5      	bne.n	8006358 <__swsetup_r+0x24>
 80063cc:	bd38      	pop	{r3, r4, r5, pc}
 80063ce:	0799      	lsls	r1, r3, #30
 80063d0:	bf58      	it	pl
 80063d2:	6962      	ldrpl	r2, [r4, #20]
 80063d4:	60a2      	str	r2, [r4, #8]
 80063d6:	e7f4      	b.n	80063c2 <__swsetup_r+0x8e>
 80063d8:	2000      	movs	r0, #0
 80063da:	e7f7      	b.n	80063cc <__swsetup_r+0x98>
 80063dc:	20000028 	.word	0x20000028

080063e0 <_raise_r>:
 80063e0:	291f      	cmp	r1, #31
 80063e2:	b538      	push	{r3, r4, r5, lr}
 80063e4:	4605      	mov	r5, r0
 80063e6:	460c      	mov	r4, r1
 80063e8:	d904      	bls.n	80063f4 <_raise_r+0x14>
 80063ea:	2316      	movs	r3, #22
 80063ec:	6003      	str	r3, [r0, #0]
 80063ee:	f04f 30ff 	mov.w	r0, #4294967295
 80063f2:	bd38      	pop	{r3, r4, r5, pc}
 80063f4:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80063f6:	b112      	cbz	r2, 80063fe <_raise_r+0x1e>
 80063f8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80063fc:	b94b      	cbnz	r3, 8006412 <_raise_r+0x32>
 80063fe:	4628      	mov	r0, r5
 8006400:	f000 f830 	bl	8006464 <_getpid_r>
 8006404:	4622      	mov	r2, r4
 8006406:	4601      	mov	r1, r0
 8006408:	4628      	mov	r0, r5
 800640a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800640e:	f000 b817 	b.w	8006440 <_kill_r>
 8006412:	2b01      	cmp	r3, #1
 8006414:	d00a      	beq.n	800642c <_raise_r+0x4c>
 8006416:	1c59      	adds	r1, r3, #1
 8006418:	d103      	bne.n	8006422 <_raise_r+0x42>
 800641a:	2316      	movs	r3, #22
 800641c:	6003      	str	r3, [r0, #0]
 800641e:	2001      	movs	r0, #1
 8006420:	e7e7      	b.n	80063f2 <_raise_r+0x12>
 8006422:	2100      	movs	r1, #0
 8006424:	4620      	mov	r0, r4
 8006426:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800642a:	4798      	blx	r3
 800642c:	2000      	movs	r0, #0
 800642e:	e7e0      	b.n	80063f2 <_raise_r+0x12>

08006430 <raise>:
 8006430:	4b02      	ldr	r3, [pc, #8]	@ (800643c <raise+0xc>)
 8006432:	4601      	mov	r1, r0
 8006434:	6818      	ldr	r0, [r3, #0]
 8006436:	f7ff bfd3 	b.w	80063e0 <_raise_r>
 800643a:	bf00      	nop
 800643c:	20000028 	.word	0x20000028

08006440 <_kill_r>:
 8006440:	b538      	push	{r3, r4, r5, lr}
 8006442:	2300      	movs	r3, #0
 8006444:	4d06      	ldr	r5, [pc, #24]	@ (8006460 <_kill_r+0x20>)
 8006446:	4604      	mov	r4, r0
 8006448:	4608      	mov	r0, r1
 800644a:	4611      	mov	r1, r2
 800644c:	602b      	str	r3, [r5, #0]
 800644e:	f7fb fa20 	bl	8001892 <_kill>
 8006452:	1c43      	adds	r3, r0, #1
 8006454:	d102      	bne.n	800645c <_kill_r+0x1c>
 8006456:	682b      	ldr	r3, [r5, #0]
 8006458:	b103      	cbz	r3, 800645c <_kill_r+0x1c>
 800645a:	6023      	str	r3, [r4, #0]
 800645c:	bd38      	pop	{r3, r4, r5, pc}
 800645e:	bf00      	nop
 8006460:	20000438 	.word	0x20000438

08006464 <_getpid_r>:
 8006464:	f7fb ba0e 	b.w	8001884 <_getpid>

08006468 <__swhatbuf_r>:
 8006468:	b570      	push	{r4, r5, r6, lr}
 800646a:	460c      	mov	r4, r1
 800646c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006470:	4615      	mov	r5, r2
 8006472:	2900      	cmp	r1, #0
 8006474:	461e      	mov	r6, r3
 8006476:	b096      	sub	sp, #88	@ 0x58
 8006478:	da0c      	bge.n	8006494 <__swhatbuf_r+0x2c>
 800647a:	89a3      	ldrh	r3, [r4, #12]
 800647c:	2100      	movs	r1, #0
 800647e:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006482:	bf14      	ite	ne
 8006484:	2340      	movne	r3, #64	@ 0x40
 8006486:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800648a:	2000      	movs	r0, #0
 800648c:	6031      	str	r1, [r6, #0]
 800648e:	602b      	str	r3, [r5, #0]
 8006490:	b016      	add	sp, #88	@ 0x58
 8006492:	bd70      	pop	{r4, r5, r6, pc}
 8006494:	466a      	mov	r2, sp
 8006496:	f000 f849 	bl	800652c <_fstat_r>
 800649a:	2800      	cmp	r0, #0
 800649c:	dbed      	blt.n	800647a <__swhatbuf_r+0x12>
 800649e:	9901      	ldr	r1, [sp, #4]
 80064a0:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80064a4:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80064a8:	4259      	negs	r1, r3
 80064aa:	4159      	adcs	r1, r3
 80064ac:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80064b0:	e7eb      	b.n	800648a <__swhatbuf_r+0x22>

080064b2 <__smakebuf_r>:
 80064b2:	898b      	ldrh	r3, [r1, #12]
 80064b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80064b6:	079d      	lsls	r5, r3, #30
 80064b8:	4606      	mov	r6, r0
 80064ba:	460c      	mov	r4, r1
 80064bc:	d507      	bpl.n	80064ce <__smakebuf_r+0x1c>
 80064be:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80064c2:	6023      	str	r3, [r4, #0]
 80064c4:	6123      	str	r3, [r4, #16]
 80064c6:	2301      	movs	r3, #1
 80064c8:	6163      	str	r3, [r4, #20]
 80064ca:	b003      	add	sp, #12
 80064cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80064ce:	466a      	mov	r2, sp
 80064d0:	ab01      	add	r3, sp, #4
 80064d2:	f7ff ffc9 	bl	8006468 <__swhatbuf_r>
 80064d6:	9f00      	ldr	r7, [sp, #0]
 80064d8:	4605      	mov	r5, r0
 80064da:	4639      	mov	r1, r7
 80064dc:	4630      	mov	r0, r6
 80064de:	f7fe fecd 	bl	800527c <_malloc_r>
 80064e2:	b948      	cbnz	r0, 80064f8 <__smakebuf_r+0x46>
 80064e4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80064e8:	059a      	lsls	r2, r3, #22
 80064ea:	d4ee      	bmi.n	80064ca <__smakebuf_r+0x18>
 80064ec:	f023 0303 	bic.w	r3, r3, #3
 80064f0:	f043 0302 	orr.w	r3, r3, #2
 80064f4:	81a3      	strh	r3, [r4, #12]
 80064f6:	e7e2      	b.n	80064be <__smakebuf_r+0xc>
 80064f8:	89a3      	ldrh	r3, [r4, #12]
 80064fa:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80064fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006502:	81a3      	strh	r3, [r4, #12]
 8006504:	9b01      	ldr	r3, [sp, #4]
 8006506:	6020      	str	r0, [r4, #0]
 8006508:	b15b      	cbz	r3, 8006522 <__smakebuf_r+0x70>
 800650a:	4630      	mov	r0, r6
 800650c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006510:	f000 f81e 	bl	8006550 <_isatty_r>
 8006514:	b128      	cbz	r0, 8006522 <__smakebuf_r+0x70>
 8006516:	89a3      	ldrh	r3, [r4, #12]
 8006518:	f023 0303 	bic.w	r3, r3, #3
 800651c:	f043 0301 	orr.w	r3, r3, #1
 8006520:	81a3      	strh	r3, [r4, #12]
 8006522:	89a3      	ldrh	r3, [r4, #12]
 8006524:	431d      	orrs	r5, r3
 8006526:	81a5      	strh	r5, [r4, #12]
 8006528:	e7cf      	b.n	80064ca <__smakebuf_r+0x18>
	...

0800652c <_fstat_r>:
 800652c:	b538      	push	{r3, r4, r5, lr}
 800652e:	2300      	movs	r3, #0
 8006530:	4d06      	ldr	r5, [pc, #24]	@ (800654c <_fstat_r+0x20>)
 8006532:	4604      	mov	r4, r0
 8006534:	4608      	mov	r0, r1
 8006536:	4611      	mov	r1, r2
 8006538:	602b      	str	r3, [r5, #0]
 800653a:	f7fb fa09 	bl	8001950 <_fstat>
 800653e:	1c43      	adds	r3, r0, #1
 8006540:	d102      	bne.n	8006548 <_fstat_r+0x1c>
 8006542:	682b      	ldr	r3, [r5, #0]
 8006544:	b103      	cbz	r3, 8006548 <_fstat_r+0x1c>
 8006546:	6023      	str	r3, [r4, #0]
 8006548:	bd38      	pop	{r3, r4, r5, pc}
 800654a:	bf00      	nop
 800654c:	20000438 	.word	0x20000438

08006550 <_isatty_r>:
 8006550:	b538      	push	{r3, r4, r5, lr}
 8006552:	2300      	movs	r3, #0
 8006554:	4d05      	ldr	r5, [pc, #20]	@ (800656c <_isatty_r+0x1c>)
 8006556:	4604      	mov	r4, r0
 8006558:	4608      	mov	r0, r1
 800655a:	602b      	str	r3, [r5, #0]
 800655c:	f7fb fa07 	bl	800196e <_isatty>
 8006560:	1c43      	adds	r3, r0, #1
 8006562:	d102      	bne.n	800656a <_isatty_r+0x1a>
 8006564:	682b      	ldr	r3, [r5, #0]
 8006566:	b103      	cbz	r3, 800656a <_isatty_r+0x1a>
 8006568:	6023      	str	r3, [r4, #0]
 800656a:	bd38      	pop	{r3, r4, r5, pc}
 800656c:	20000438 	.word	0x20000438

08006570 <log>:
 8006570:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006572:	4604      	mov	r4, r0
 8006574:	460d      	mov	r5, r1
 8006576:	f000 f833 	bl	80065e0 <__ieee754_log>
 800657a:	4622      	mov	r2, r4
 800657c:	4606      	mov	r6, r0
 800657e:	460f      	mov	r7, r1
 8006580:	462b      	mov	r3, r5
 8006582:	4620      	mov	r0, r4
 8006584:	4629      	mov	r1, r5
 8006586:	f7fa fa41 	bl	8000a0c <__aeabi_dcmpun>
 800658a:	b998      	cbnz	r0, 80065b4 <log+0x44>
 800658c:	2200      	movs	r2, #0
 800658e:	2300      	movs	r3, #0
 8006590:	4620      	mov	r0, r4
 8006592:	4629      	mov	r1, r5
 8006594:	f7fa fa30 	bl	80009f8 <__aeabi_dcmpgt>
 8006598:	b960      	cbnz	r0, 80065b4 <log+0x44>
 800659a:	2200      	movs	r2, #0
 800659c:	2300      	movs	r3, #0
 800659e:	4620      	mov	r0, r4
 80065a0:	4629      	mov	r1, r5
 80065a2:	f7fa fa01 	bl	80009a8 <__aeabi_dcmpeq>
 80065a6:	b140      	cbz	r0, 80065ba <log+0x4a>
 80065a8:	f7fd ff5c 	bl	8004464 <__errno>
 80065ac:	2322      	movs	r3, #34	@ 0x22
 80065ae:	2600      	movs	r6, #0
 80065b0:	4f06      	ldr	r7, [pc, #24]	@ (80065cc <log+0x5c>)
 80065b2:	6003      	str	r3, [r0, #0]
 80065b4:	4630      	mov	r0, r6
 80065b6:	4639      	mov	r1, r7
 80065b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80065ba:	f7fd ff53 	bl	8004464 <__errno>
 80065be:	2321      	movs	r3, #33	@ 0x21
 80065c0:	6003      	str	r3, [r0, #0]
 80065c2:	4803      	ldr	r0, [pc, #12]	@ (80065d0 <log+0x60>)
 80065c4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80065c8:	f000 b804 	b.w	80065d4 <nan>
 80065cc:	fff00000 	.word	0xfff00000
 80065d0:	08006b36 	.word	0x08006b36

080065d4 <nan>:
 80065d4:	2000      	movs	r0, #0
 80065d6:	4901      	ldr	r1, [pc, #4]	@ (80065dc <nan+0x8>)
 80065d8:	4770      	bx	lr
 80065da:	bf00      	nop
 80065dc:	7ff80000 	.word	0x7ff80000

080065e0 <__ieee754_log>:
 80065e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065e4:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80065e8:	4602      	mov	r2, r0
 80065ea:	460b      	mov	r3, r1
 80065ec:	460d      	mov	r5, r1
 80065ee:	b087      	sub	sp, #28
 80065f0:	da24      	bge.n	800663c <__ieee754_log+0x5c>
 80065f2:	f021 4400 	bic.w	r4, r1, #2147483648	@ 0x80000000
 80065f6:	4304      	orrs	r4, r0
 80065f8:	d108      	bne.n	800660c <__ieee754_log+0x2c>
 80065fa:	2200      	movs	r2, #0
 80065fc:	2300      	movs	r3, #0
 80065fe:	2000      	movs	r0, #0
 8006600:	49cb      	ldr	r1, [pc, #812]	@ (8006930 <__ieee754_log+0x350>)
 8006602:	f7fa f893 	bl	800072c <__aeabi_ddiv>
 8006606:	b007      	add	sp, #28
 8006608:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800660c:	2900      	cmp	r1, #0
 800660e:	da04      	bge.n	800661a <__ieee754_log+0x3a>
 8006610:	f7f9 fdaa 	bl	8000168 <__aeabi_dsub>
 8006614:	2200      	movs	r2, #0
 8006616:	2300      	movs	r3, #0
 8006618:	e7f3      	b.n	8006602 <__ieee754_log+0x22>
 800661a:	2200      	movs	r2, #0
 800661c:	4bc5      	ldr	r3, [pc, #788]	@ (8006934 <__ieee754_log+0x354>)
 800661e:	f7f9 ff5b 	bl	80004d8 <__aeabi_dmul>
 8006622:	460b      	mov	r3, r1
 8006624:	460d      	mov	r5, r1
 8006626:	4602      	mov	r2, r0
 8006628:	f06f 0135 	mvn.w	r1, #53	@ 0x35
 800662c:	48c2      	ldr	r0, [pc, #776]	@ (8006938 <__ieee754_log+0x358>)
 800662e:	4285      	cmp	r5, r0
 8006630:	dd06      	ble.n	8006640 <__ieee754_log+0x60>
 8006632:	4610      	mov	r0, r2
 8006634:	4619      	mov	r1, r3
 8006636:	f7f9 fd99 	bl	800016c <__adddf3>
 800663a:	e7e4      	b.n	8006606 <__ieee754_log+0x26>
 800663c:	2100      	movs	r1, #0
 800663e:	e7f5      	b.n	800662c <__ieee754_log+0x4c>
 8006640:	152c      	asrs	r4, r5, #20
 8006642:	f2a4 34ff 	subw	r4, r4, #1023	@ 0x3ff
 8006646:	f3c5 0513 	ubfx	r5, r5, #0, #20
 800664a:	440c      	add	r4, r1
 800664c:	f505 2115 	add.w	r1, r5, #610304	@ 0x95000
 8006650:	f601 7164 	addw	r1, r1, #3940	@ 0xf64
 8006654:	f401 1680 	and.w	r6, r1, #1048576	@ 0x100000
 8006658:	f086 517f 	eor.w	r1, r6, #1069547520	@ 0x3fc00000
 800665c:	f481 1140 	eor.w	r1, r1, #3145728	@ 0x300000
 8006660:	ea41 0305 	orr.w	r3, r1, r5
 8006664:	4610      	mov	r0, r2
 8006666:	4619      	mov	r1, r3
 8006668:	2200      	movs	r2, #0
 800666a:	4bb4      	ldr	r3, [pc, #720]	@ (800693c <__ieee754_log+0x35c>)
 800666c:	f7f9 fd7c 	bl	8000168 <__aeabi_dsub>
 8006670:	1cab      	adds	r3, r5, #2
 8006672:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006676:	2b02      	cmp	r3, #2
 8006678:	4682      	mov	sl, r0
 800667a:	468b      	mov	fp, r1
 800667c:	f04f 0200 	mov.w	r2, #0
 8006680:	eb04 5416 	add.w	r4, r4, r6, lsr #20
 8006684:	dc53      	bgt.n	800672e <__ieee754_log+0x14e>
 8006686:	2300      	movs	r3, #0
 8006688:	f7fa f98e 	bl	80009a8 <__aeabi_dcmpeq>
 800668c:	b1d0      	cbz	r0, 80066c4 <__ieee754_log+0xe4>
 800668e:	2c00      	cmp	r4, #0
 8006690:	f000 8120 	beq.w	80068d4 <__ieee754_log+0x2f4>
 8006694:	4620      	mov	r0, r4
 8006696:	f7f9 feb5 	bl	8000404 <__aeabi_i2d>
 800669a:	a391      	add	r3, pc, #580	@ (adr r3, 80068e0 <__ieee754_log+0x300>)
 800669c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066a0:	4606      	mov	r6, r0
 80066a2:	460f      	mov	r7, r1
 80066a4:	f7f9 ff18 	bl	80004d8 <__aeabi_dmul>
 80066a8:	a38f      	add	r3, pc, #572	@ (adr r3, 80068e8 <__ieee754_log+0x308>)
 80066aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066ae:	4604      	mov	r4, r0
 80066b0:	460d      	mov	r5, r1
 80066b2:	4630      	mov	r0, r6
 80066b4:	4639      	mov	r1, r7
 80066b6:	f7f9 ff0f 	bl	80004d8 <__aeabi_dmul>
 80066ba:	4602      	mov	r2, r0
 80066bc:	460b      	mov	r3, r1
 80066be:	4620      	mov	r0, r4
 80066c0:	4629      	mov	r1, r5
 80066c2:	e7b8      	b.n	8006636 <__ieee754_log+0x56>
 80066c4:	a38a      	add	r3, pc, #552	@ (adr r3, 80068f0 <__ieee754_log+0x310>)
 80066c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066ca:	4650      	mov	r0, sl
 80066cc:	4659      	mov	r1, fp
 80066ce:	f7f9 ff03 	bl	80004d8 <__aeabi_dmul>
 80066d2:	4602      	mov	r2, r0
 80066d4:	460b      	mov	r3, r1
 80066d6:	2000      	movs	r0, #0
 80066d8:	4999      	ldr	r1, [pc, #612]	@ (8006940 <__ieee754_log+0x360>)
 80066da:	f7f9 fd45 	bl	8000168 <__aeabi_dsub>
 80066de:	4652      	mov	r2, sl
 80066e0:	4606      	mov	r6, r0
 80066e2:	460f      	mov	r7, r1
 80066e4:	465b      	mov	r3, fp
 80066e6:	4650      	mov	r0, sl
 80066e8:	4659      	mov	r1, fp
 80066ea:	f7f9 fef5 	bl	80004d8 <__aeabi_dmul>
 80066ee:	4602      	mov	r2, r0
 80066f0:	460b      	mov	r3, r1
 80066f2:	4630      	mov	r0, r6
 80066f4:	4639      	mov	r1, r7
 80066f6:	f7f9 feef 	bl	80004d8 <__aeabi_dmul>
 80066fa:	4606      	mov	r6, r0
 80066fc:	460f      	mov	r7, r1
 80066fe:	b914      	cbnz	r4, 8006706 <__ieee754_log+0x126>
 8006700:	4632      	mov	r2, r6
 8006702:	463b      	mov	r3, r7
 8006704:	e0a0      	b.n	8006848 <__ieee754_log+0x268>
 8006706:	4620      	mov	r0, r4
 8006708:	f7f9 fe7c 	bl	8000404 <__aeabi_i2d>
 800670c:	a374      	add	r3, pc, #464	@ (adr r3, 80068e0 <__ieee754_log+0x300>)
 800670e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006712:	4680      	mov	r8, r0
 8006714:	4689      	mov	r9, r1
 8006716:	f7f9 fedf 	bl	80004d8 <__aeabi_dmul>
 800671a:	a373      	add	r3, pc, #460	@ (adr r3, 80068e8 <__ieee754_log+0x308>)
 800671c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006720:	4604      	mov	r4, r0
 8006722:	460d      	mov	r5, r1
 8006724:	4640      	mov	r0, r8
 8006726:	4649      	mov	r1, r9
 8006728:	f7f9 fed6 	bl	80004d8 <__aeabi_dmul>
 800672c:	e0a5      	b.n	800687a <__ieee754_log+0x29a>
 800672e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8006732:	f7f9 fd1b 	bl	800016c <__adddf3>
 8006736:	4602      	mov	r2, r0
 8006738:	460b      	mov	r3, r1
 800673a:	4650      	mov	r0, sl
 800673c:	4659      	mov	r1, fp
 800673e:	f7f9 fff5 	bl	800072c <__aeabi_ddiv>
 8006742:	e9cd 0100 	strd	r0, r1, [sp]
 8006746:	4620      	mov	r0, r4
 8006748:	f7f9 fe5c 	bl	8000404 <__aeabi_i2d>
 800674c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006750:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006754:	4610      	mov	r0, r2
 8006756:	4619      	mov	r1, r3
 8006758:	f7f9 febe 	bl	80004d8 <__aeabi_dmul>
 800675c:	4602      	mov	r2, r0
 800675e:	460b      	mov	r3, r1
 8006760:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006764:	f7f9 feb8 	bl	80004d8 <__aeabi_dmul>
 8006768:	a363      	add	r3, pc, #396	@ (adr r3, 80068f8 <__ieee754_log+0x318>)
 800676a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800676e:	4680      	mov	r8, r0
 8006770:	4689      	mov	r9, r1
 8006772:	f7f9 feb1 	bl	80004d8 <__aeabi_dmul>
 8006776:	a362      	add	r3, pc, #392	@ (adr r3, 8006900 <__ieee754_log+0x320>)
 8006778:	e9d3 2300 	ldrd	r2, r3, [r3]
 800677c:	f7f9 fcf6 	bl	800016c <__adddf3>
 8006780:	4642      	mov	r2, r8
 8006782:	464b      	mov	r3, r9
 8006784:	f7f9 fea8 	bl	80004d8 <__aeabi_dmul>
 8006788:	a35f      	add	r3, pc, #380	@ (adr r3, 8006908 <__ieee754_log+0x328>)
 800678a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800678e:	f7f9 fced 	bl	800016c <__adddf3>
 8006792:	4642      	mov	r2, r8
 8006794:	464b      	mov	r3, r9
 8006796:	f7f9 fe9f 	bl	80004d8 <__aeabi_dmul>
 800679a:	a35d      	add	r3, pc, #372	@ (adr r3, 8006910 <__ieee754_log+0x330>)
 800679c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067a0:	f7f9 fce4 	bl	800016c <__adddf3>
 80067a4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80067a8:	f7f9 fe96 	bl	80004d8 <__aeabi_dmul>
 80067ac:	a35a      	add	r3, pc, #360	@ (adr r3, 8006918 <__ieee754_log+0x338>)
 80067ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067b2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80067b6:	4640      	mov	r0, r8
 80067b8:	4649      	mov	r1, r9
 80067ba:	f7f9 fe8d 	bl	80004d8 <__aeabi_dmul>
 80067be:	a358      	add	r3, pc, #352	@ (adr r3, 8006920 <__ieee754_log+0x340>)
 80067c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067c4:	f7f9 fcd2 	bl	800016c <__adddf3>
 80067c8:	4642      	mov	r2, r8
 80067ca:	464b      	mov	r3, r9
 80067cc:	f7f9 fe84 	bl	80004d8 <__aeabi_dmul>
 80067d0:	a355      	add	r3, pc, #340	@ (adr r3, 8006928 <__ieee754_log+0x348>)
 80067d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067d6:	f7f9 fcc9 	bl	800016c <__adddf3>
 80067da:	4642      	mov	r2, r8
 80067dc:	464b      	mov	r3, r9
 80067de:	f7f9 fe7b 	bl	80004d8 <__aeabi_dmul>
 80067e2:	4602      	mov	r2, r0
 80067e4:	460b      	mov	r3, r1
 80067e6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80067ea:	f7f9 fcbf 	bl	800016c <__adddf3>
 80067ee:	f5a5 26c2 	sub.w	r6, r5, #397312	@ 0x61000
 80067f2:	f5c5 25d7 	rsb	r5, r5, #440320	@ 0x6b800
 80067f6:	f2a6 467a 	subw	r6, r6, #1146	@ 0x47a
 80067fa:	3551      	adds	r5, #81	@ 0x51
 80067fc:	4335      	orrs	r5, r6
 80067fe:	2d00      	cmp	r5, #0
 8006800:	4680      	mov	r8, r0
 8006802:	4689      	mov	r9, r1
 8006804:	dd48      	ble.n	8006898 <__ieee754_log+0x2b8>
 8006806:	2200      	movs	r2, #0
 8006808:	4b4d      	ldr	r3, [pc, #308]	@ (8006940 <__ieee754_log+0x360>)
 800680a:	4650      	mov	r0, sl
 800680c:	4659      	mov	r1, fp
 800680e:	f7f9 fe63 	bl	80004d8 <__aeabi_dmul>
 8006812:	4652      	mov	r2, sl
 8006814:	465b      	mov	r3, fp
 8006816:	f7f9 fe5f 	bl	80004d8 <__aeabi_dmul>
 800681a:	4602      	mov	r2, r0
 800681c:	460b      	mov	r3, r1
 800681e:	4606      	mov	r6, r0
 8006820:	460f      	mov	r7, r1
 8006822:	4640      	mov	r0, r8
 8006824:	4649      	mov	r1, r9
 8006826:	f7f9 fca1 	bl	800016c <__adddf3>
 800682a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800682e:	f7f9 fe53 	bl	80004d8 <__aeabi_dmul>
 8006832:	4680      	mov	r8, r0
 8006834:	4689      	mov	r9, r1
 8006836:	b964      	cbnz	r4, 8006852 <__ieee754_log+0x272>
 8006838:	4602      	mov	r2, r0
 800683a:	460b      	mov	r3, r1
 800683c:	4630      	mov	r0, r6
 800683e:	4639      	mov	r1, r7
 8006840:	f7f9 fc92 	bl	8000168 <__aeabi_dsub>
 8006844:	4602      	mov	r2, r0
 8006846:	460b      	mov	r3, r1
 8006848:	4650      	mov	r0, sl
 800684a:	4659      	mov	r1, fp
 800684c:	f7f9 fc8c 	bl	8000168 <__aeabi_dsub>
 8006850:	e6d9      	b.n	8006606 <__ieee754_log+0x26>
 8006852:	a323      	add	r3, pc, #140	@ (adr r3, 80068e0 <__ieee754_log+0x300>)
 8006854:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006858:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800685c:	f7f9 fe3c 	bl	80004d8 <__aeabi_dmul>
 8006860:	a321      	add	r3, pc, #132	@ (adr r3, 80068e8 <__ieee754_log+0x308>)
 8006862:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006866:	4604      	mov	r4, r0
 8006868:	460d      	mov	r5, r1
 800686a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800686e:	f7f9 fe33 	bl	80004d8 <__aeabi_dmul>
 8006872:	4642      	mov	r2, r8
 8006874:	464b      	mov	r3, r9
 8006876:	f7f9 fc79 	bl	800016c <__adddf3>
 800687a:	4602      	mov	r2, r0
 800687c:	460b      	mov	r3, r1
 800687e:	4630      	mov	r0, r6
 8006880:	4639      	mov	r1, r7
 8006882:	f7f9 fc71 	bl	8000168 <__aeabi_dsub>
 8006886:	4652      	mov	r2, sl
 8006888:	465b      	mov	r3, fp
 800688a:	f7f9 fc6d 	bl	8000168 <__aeabi_dsub>
 800688e:	4602      	mov	r2, r0
 8006890:	460b      	mov	r3, r1
 8006892:	4620      	mov	r0, r4
 8006894:	4629      	mov	r1, r5
 8006896:	e7d9      	b.n	800684c <__ieee754_log+0x26c>
 8006898:	4602      	mov	r2, r0
 800689a:	460b      	mov	r3, r1
 800689c:	4650      	mov	r0, sl
 800689e:	4659      	mov	r1, fp
 80068a0:	f7f9 fc62 	bl	8000168 <__aeabi_dsub>
 80068a4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80068a8:	f7f9 fe16 	bl	80004d8 <__aeabi_dmul>
 80068ac:	4606      	mov	r6, r0
 80068ae:	460f      	mov	r7, r1
 80068b0:	2c00      	cmp	r4, #0
 80068b2:	f43f af25 	beq.w	8006700 <__ieee754_log+0x120>
 80068b6:	a30a      	add	r3, pc, #40	@ (adr r3, 80068e0 <__ieee754_log+0x300>)
 80068b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068bc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80068c0:	f7f9 fe0a 	bl	80004d8 <__aeabi_dmul>
 80068c4:	a308      	add	r3, pc, #32	@ (adr r3, 80068e8 <__ieee754_log+0x308>)
 80068c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068ca:	4604      	mov	r4, r0
 80068cc:	460d      	mov	r5, r1
 80068ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80068d2:	e729      	b.n	8006728 <__ieee754_log+0x148>
 80068d4:	2000      	movs	r0, #0
 80068d6:	2100      	movs	r1, #0
 80068d8:	e695      	b.n	8006606 <__ieee754_log+0x26>
 80068da:	bf00      	nop
 80068dc:	f3af 8000 	nop.w
 80068e0:	fee00000 	.word	0xfee00000
 80068e4:	3fe62e42 	.word	0x3fe62e42
 80068e8:	35793c76 	.word	0x35793c76
 80068ec:	3dea39ef 	.word	0x3dea39ef
 80068f0:	55555555 	.word	0x55555555
 80068f4:	3fd55555 	.word	0x3fd55555
 80068f8:	df3e5244 	.word	0xdf3e5244
 80068fc:	3fc2f112 	.word	0x3fc2f112
 8006900:	96cb03de 	.word	0x96cb03de
 8006904:	3fc74664 	.word	0x3fc74664
 8006908:	94229359 	.word	0x94229359
 800690c:	3fd24924 	.word	0x3fd24924
 8006910:	55555593 	.word	0x55555593
 8006914:	3fe55555 	.word	0x3fe55555
 8006918:	d078c69f 	.word	0xd078c69f
 800691c:	3fc39a09 	.word	0x3fc39a09
 8006920:	1d8e78af 	.word	0x1d8e78af
 8006924:	3fcc71c5 	.word	0x3fcc71c5
 8006928:	9997fa04 	.word	0x9997fa04
 800692c:	3fd99999 	.word	0x3fd99999
 8006930:	c3500000 	.word	0xc3500000
 8006934:	43500000 	.word	0x43500000
 8006938:	7fefffff 	.word	0x7fefffff
 800693c:	3ff00000 	.word	0x3ff00000
 8006940:	3fe00000 	.word	0x3fe00000

08006944 <_init>:
 8006944:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006946:	bf00      	nop
 8006948:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800694a:	bc08      	pop	{r3}
 800694c:	469e      	mov	lr, r3
 800694e:	4770      	bx	lr

08006950 <_fini>:
 8006950:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006952:	bf00      	nop
 8006954:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006956:	bc08      	pop	{r3}
 8006958:	469e      	mov	lr, r3
 800695a:	4770      	bx	lr
