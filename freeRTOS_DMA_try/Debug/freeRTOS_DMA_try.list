
freeRTOS_DMA_try.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000102ec  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000510  080104d0  080104d0  000114d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080109e0  080109e0  000121d8  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080109e0  080109e0  000119e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080109e8  080109e8  000121d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080109e8  080109e8  000119e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080109ec  080109ec  000119ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  080109f0  00012000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001d6c  200001d8  08010bc8  000121d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001f44  08010bc8  00012f44  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000121d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a2b4  00000000  00000000  00012208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000398d  00000000  00000000  0002c4bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000016e0  00000000  00000000  0002fe50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000119f  00000000  00000000  00031530  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00004e0c  00000000  00000000  000326cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019c7a  00000000  00000000  000374db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010d5f1  00000000  00000000  00051155  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0015e746  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007610  00000000  00000000  0015e78c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004f  00000000  00000000  00165d9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001d8 	.word	0x200001d8
 80001fc:	00000000 	.word	0x00000000
 8000200:	080104b4 	.word	0x080104b4

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001dc 	.word	0x200001dc
 800021c:	080104b4 	.word	0x080104b4

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	@ 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_uldivmod>:
 8000cd8:	b953      	cbnz	r3, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cda:	b94a      	cbnz	r2, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	bf08      	it	eq
 8000ce0:	2800      	cmpeq	r0, #0
 8000ce2:	bf1c      	itt	ne
 8000ce4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ce8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cec:	f000 b9be 	b.w	800106c <__aeabi_idiv0>
 8000cf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf8:	f000 f83c 	bl	8000d74 <__udivmoddi4>
 8000cfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d04:	b004      	add	sp, #16
 8000d06:	4770      	bx	lr

08000d08 <__aeabi_d2lz>:
 8000d08:	b538      	push	{r3, r4, r5, lr}
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	4604      	mov	r4, r0
 8000d10:	460d      	mov	r5, r1
 8000d12:	f7ff ff0b 	bl	8000b2c <__aeabi_dcmplt>
 8000d16:	b928      	cbnz	r0, 8000d24 <__aeabi_d2lz+0x1c>
 8000d18:	4620      	mov	r0, r4
 8000d1a:	4629      	mov	r1, r5
 8000d1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d20:	f000 b80a 	b.w	8000d38 <__aeabi_d2ulz>
 8000d24:	4620      	mov	r0, r4
 8000d26:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d2a:	f000 f805 	bl	8000d38 <__aeabi_d2ulz>
 8000d2e:	4240      	negs	r0, r0
 8000d30:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d34:	bd38      	pop	{r3, r4, r5, pc}
 8000d36:	bf00      	nop

08000d38 <__aeabi_d2ulz>:
 8000d38:	b5d0      	push	{r4, r6, r7, lr}
 8000d3a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d6c <__aeabi_d2ulz+0x34>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	4606      	mov	r6, r0
 8000d40:	460f      	mov	r7, r1
 8000d42:	f7ff fc81 	bl	8000648 <__aeabi_dmul>
 8000d46:	f7ff ff57 	bl	8000bf8 <__aeabi_d2uiz>
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	f7ff fc02 	bl	8000554 <__aeabi_ui2d>
 8000d50:	4b07      	ldr	r3, [pc, #28]	@ (8000d70 <__aeabi_d2ulz+0x38>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	f7ff fc78 	bl	8000648 <__aeabi_dmul>
 8000d58:	4602      	mov	r2, r0
 8000d5a:	460b      	mov	r3, r1
 8000d5c:	4630      	mov	r0, r6
 8000d5e:	4639      	mov	r1, r7
 8000d60:	f7ff faba 	bl	80002d8 <__aeabi_dsub>
 8000d64:	f7ff ff48 	bl	8000bf8 <__aeabi_d2uiz>
 8000d68:	4621      	mov	r1, r4
 8000d6a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d6c:	3df00000 	.word	0x3df00000
 8000d70:	41f00000 	.word	0x41f00000

08000d74 <__udivmoddi4>:
 8000d74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d78:	9d08      	ldr	r5, [sp, #32]
 8000d7a:	468e      	mov	lr, r1
 8000d7c:	4604      	mov	r4, r0
 8000d7e:	4688      	mov	r8, r1
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d14a      	bne.n	8000e1a <__udivmoddi4+0xa6>
 8000d84:	428a      	cmp	r2, r1
 8000d86:	4617      	mov	r7, r2
 8000d88:	d962      	bls.n	8000e50 <__udivmoddi4+0xdc>
 8000d8a:	fab2 f682 	clz	r6, r2
 8000d8e:	b14e      	cbz	r6, 8000da4 <__udivmoddi4+0x30>
 8000d90:	f1c6 0320 	rsb	r3, r6, #32
 8000d94:	fa01 f806 	lsl.w	r8, r1, r6
 8000d98:	fa20 f303 	lsr.w	r3, r0, r3
 8000d9c:	40b7      	lsls	r7, r6
 8000d9e:	ea43 0808 	orr.w	r8, r3, r8
 8000da2:	40b4      	lsls	r4, r6
 8000da4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000da8:	fa1f fc87 	uxth.w	ip, r7
 8000dac:	fbb8 f1fe 	udiv	r1, r8, lr
 8000db0:	0c23      	lsrs	r3, r4, #16
 8000db2:	fb0e 8811 	mls	r8, lr, r1, r8
 8000db6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000dba:	fb01 f20c 	mul.w	r2, r1, ip
 8000dbe:	429a      	cmp	r2, r3
 8000dc0:	d909      	bls.n	8000dd6 <__udivmoddi4+0x62>
 8000dc2:	18fb      	adds	r3, r7, r3
 8000dc4:	f101 30ff 	add.w	r0, r1, #4294967295
 8000dc8:	f080 80ea 	bcs.w	8000fa0 <__udivmoddi4+0x22c>
 8000dcc:	429a      	cmp	r2, r3
 8000dce:	f240 80e7 	bls.w	8000fa0 <__udivmoddi4+0x22c>
 8000dd2:	3902      	subs	r1, #2
 8000dd4:	443b      	add	r3, r7
 8000dd6:	1a9a      	subs	r2, r3, r2
 8000dd8:	b2a3      	uxth	r3, r4
 8000dda:	fbb2 f0fe 	udiv	r0, r2, lr
 8000dde:	fb0e 2210 	mls	r2, lr, r0, r2
 8000de2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000de6:	fb00 fc0c 	mul.w	ip, r0, ip
 8000dea:	459c      	cmp	ip, r3
 8000dec:	d909      	bls.n	8000e02 <__udivmoddi4+0x8e>
 8000dee:	18fb      	adds	r3, r7, r3
 8000df0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000df4:	f080 80d6 	bcs.w	8000fa4 <__udivmoddi4+0x230>
 8000df8:	459c      	cmp	ip, r3
 8000dfa:	f240 80d3 	bls.w	8000fa4 <__udivmoddi4+0x230>
 8000dfe:	443b      	add	r3, r7
 8000e00:	3802      	subs	r0, #2
 8000e02:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000e06:	eba3 030c 	sub.w	r3, r3, ip
 8000e0a:	2100      	movs	r1, #0
 8000e0c:	b11d      	cbz	r5, 8000e16 <__udivmoddi4+0xa2>
 8000e0e:	40f3      	lsrs	r3, r6
 8000e10:	2200      	movs	r2, #0
 8000e12:	e9c5 3200 	strd	r3, r2, [r5]
 8000e16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1a:	428b      	cmp	r3, r1
 8000e1c:	d905      	bls.n	8000e2a <__udivmoddi4+0xb6>
 8000e1e:	b10d      	cbz	r5, 8000e24 <__udivmoddi4+0xb0>
 8000e20:	e9c5 0100 	strd	r0, r1, [r5]
 8000e24:	2100      	movs	r1, #0
 8000e26:	4608      	mov	r0, r1
 8000e28:	e7f5      	b.n	8000e16 <__udivmoddi4+0xa2>
 8000e2a:	fab3 f183 	clz	r1, r3
 8000e2e:	2900      	cmp	r1, #0
 8000e30:	d146      	bne.n	8000ec0 <__udivmoddi4+0x14c>
 8000e32:	4573      	cmp	r3, lr
 8000e34:	d302      	bcc.n	8000e3c <__udivmoddi4+0xc8>
 8000e36:	4282      	cmp	r2, r0
 8000e38:	f200 8105 	bhi.w	8001046 <__udivmoddi4+0x2d2>
 8000e3c:	1a84      	subs	r4, r0, r2
 8000e3e:	eb6e 0203 	sbc.w	r2, lr, r3
 8000e42:	2001      	movs	r0, #1
 8000e44:	4690      	mov	r8, r2
 8000e46:	2d00      	cmp	r5, #0
 8000e48:	d0e5      	beq.n	8000e16 <__udivmoddi4+0xa2>
 8000e4a:	e9c5 4800 	strd	r4, r8, [r5]
 8000e4e:	e7e2      	b.n	8000e16 <__udivmoddi4+0xa2>
 8000e50:	2a00      	cmp	r2, #0
 8000e52:	f000 8090 	beq.w	8000f76 <__udivmoddi4+0x202>
 8000e56:	fab2 f682 	clz	r6, r2
 8000e5a:	2e00      	cmp	r6, #0
 8000e5c:	f040 80a4 	bne.w	8000fa8 <__udivmoddi4+0x234>
 8000e60:	1a8a      	subs	r2, r1, r2
 8000e62:	0c03      	lsrs	r3, r0, #16
 8000e64:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e68:	b280      	uxth	r0, r0
 8000e6a:	b2bc      	uxth	r4, r7
 8000e6c:	2101      	movs	r1, #1
 8000e6e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000e72:	fb0e 221c 	mls	r2, lr, ip, r2
 8000e76:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e7a:	fb04 f20c 	mul.w	r2, r4, ip
 8000e7e:	429a      	cmp	r2, r3
 8000e80:	d907      	bls.n	8000e92 <__udivmoddi4+0x11e>
 8000e82:	18fb      	adds	r3, r7, r3
 8000e84:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000e88:	d202      	bcs.n	8000e90 <__udivmoddi4+0x11c>
 8000e8a:	429a      	cmp	r2, r3
 8000e8c:	f200 80e0 	bhi.w	8001050 <__udivmoddi4+0x2dc>
 8000e90:	46c4      	mov	ip, r8
 8000e92:	1a9b      	subs	r3, r3, r2
 8000e94:	fbb3 f2fe 	udiv	r2, r3, lr
 8000e98:	fb0e 3312 	mls	r3, lr, r2, r3
 8000e9c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000ea0:	fb02 f404 	mul.w	r4, r2, r4
 8000ea4:	429c      	cmp	r4, r3
 8000ea6:	d907      	bls.n	8000eb8 <__udivmoddi4+0x144>
 8000ea8:	18fb      	adds	r3, r7, r3
 8000eaa:	f102 30ff 	add.w	r0, r2, #4294967295
 8000eae:	d202      	bcs.n	8000eb6 <__udivmoddi4+0x142>
 8000eb0:	429c      	cmp	r4, r3
 8000eb2:	f200 80ca 	bhi.w	800104a <__udivmoddi4+0x2d6>
 8000eb6:	4602      	mov	r2, r0
 8000eb8:	1b1b      	subs	r3, r3, r4
 8000eba:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000ebe:	e7a5      	b.n	8000e0c <__udivmoddi4+0x98>
 8000ec0:	f1c1 0620 	rsb	r6, r1, #32
 8000ec4:	408b      	lsls	r3, r1
 8000ec6:	fa22 f706 	lsr.w	r7, r2, r6
 8000eca:	431f      	orrs	r7, r3
 8000ecc:	fa0e f401 	lsl.w	r4, lr, r1
 8000ed0:	fa20 f306 	lsr.w	r3, r0, r6
 8000ed4:	fa2e fe06 	lsr.w	lr, lr, r6
 8000ed8:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000edc:	4323      	orrs	r3, r4
 8000ede:	fa00 f801 	lsl.w	r8, r0, r1
 8000ee2:	fa1f fc87 	uxth.w	ip, r7
 8000ee6:	fbbe f0f9 	udiv	r0, lr, r9
 8000eea:	0c1c      	lsrs	r4, r3, #16
 8000eec:	fb09 ee10 	mls	lr, r9, r0, lr
 8000ef0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000ef4:	fb00 fe0c 	mul.w	lr, r0, ip
 8000ef8:	45a6      	cmp	lr, r4
 8000efa:	fa02 f201 	lsl.w	r2, r2, r1
 8000efe:	d909      	bls.n	8000f14 <__udivmoddi4+0x1a0>
 8000f00:	193c      	adds	r4, r7, r4
 8000f02:	f100 3aff 	add.w	sl, r0, #4294967295
 8000f06:	f080 809c 	bcs.w	8001042 <__udivmoddi4+0x2ce>
 8000f0a:	45a6      	cmp	lr, r4
 8000f0c:	f240 8099 	bls.w	8001042 <__udivmoddi4+0x2ce>
 8000f10:	3802      	subs	r0, #2
 8000f12:	443c      	add	r4, r7
 8000f14:	eba4 040e 	sub.w	r4, r4, lr
 8000f18:	fa1f fe83 	uxth.w	lr, r3
 8000f1c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000f20:	fb09 4413 	mls	r4, r9, r3, r4
 8000f24:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000f28:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f2c:	45a4      	cmp	ip, r4
 8000f2e:	d908      	bls.n	8000f42 <__udivmoddi4+0x1ce>
 8000f30:	193c      	adds	r4, r7, r4
 8000f32:	f103 3eff 	add.w	lr, r3, #4294967295
 8000f36:	f080 8082 	bcs.w	800103e <__udivmoddi4+0x2ca>
 8000f3a:	45a4      	cmp	ip, r4
 8000f3c:	d97f      	bls.n	800103e <__udivmoddi4+0x2ca>
 8000f3e:	3b02      	subs	r3, #2
 8000f40:	443c      	add	r4, r7
 8000f42:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000f46:	eba4 040c 	sub.w	r4, r4, ip
 8000f4a:	fba0 ec02 	umull	lr, ip, r0, r2
 8000f4e:	4564      	cmp	r4, ip
 8000f50:	4673      	mov	r3, lr
 8000f52:	46e1      	mov	r9, ip
 8000f54:	d362      	bcc.n	800101c <__udivmoddi4+0x2a8>
 8000f56:	d05f      	beq.n	8001018 <__udivmoddi4+0x2a4>
 8000f58:	b15d      	cbz	r5, 8000f72 <__udivmoddi4+0x1fe>
 8000f5a:	ebb8 0203 	subs.w	r2, r8, r3
 8000f5e:	eb64 0409 	sbc.w	r4, r4, r9
 8000f62:	fa04 f606 	lsl.w	r6, r4, r6
 8000f66:	fa22 f301 	lsr.w	r3, r2, r1
 8000f6a:	431e      	orrs	r6, r3
 8000f6c:	40cc      	lsrs	r4, r1
 8000f6e:	e9c5 6400 	strd	r6, r4, [r5]
 8000f72:	2100      	movs	r1, #0
 8000f74:	e74f      	b.n	8000e16 <__udivmoddi4+0xa2>
 8000f76:	fbb1 fcf2 	udiv	ip, r1, r2
 8000f7a:	0c01      	lsrs	r1, r0, #16
 8000f7c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000f80:	b280      	uxth	r0, r0
 8000f82:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000f86:	463b      	mov	r3, r7
 8000f88:	4638      	mov	r0, r7
 8000f8a:	463c      	mov	r4, r7
 8000f8c:	46b8      	mov	r8, r7
 8000f8e:	46be      	mov	lr, r7
 8000f90:	2620      	movs	r6, #32
 8000f92:	fbb1 f1f7 	udiv	r1, r1, r7
 8000f96:	eba2 0208 	sub.w	r2, r2, r8
 8000f9a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000f9e:	e766      	b.n	8000e6e <__udivmoddi4+0xfa>
 8000fa0:	4601      	mov	r1, r0
 8000fa2:	e718      	b.n	8000dd6 <__udivmoddi4+0x62>
 8000fa4:	4610      	mov	r0, r2
 8000fa6:	e72c      	b.n	8000e02 <__udivmoddi4+0x8e>
 8000fa8:	f1c6 0220 	rsb	r2, r6, #32
 8000fac:	fa2e f302 	lsr.w	r3, lr, r2
 8000fb0:	40b7      	lsls	r7, r6
 8000fb2:	40b1      	lsls	r1, r6
 8000fb4:	fa20 f202 	lsr.w	r2, r0, r2
 8000fb8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000fbc:	430a      	orrs	r2, r1
 8000fbe:	fbb3 f8fe 	udiv	r8, r3, lr
 8000fc2:	b2bc      	uxth	r4, r7
 8000fc4:	fb0e 3318 	mls	r3, lr, r8, r3
 8000fc8:	0c11      	lsrs	r1, r2, #16
 8000fca:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fce:	fb08 f904 	mul.w	r9, r8, r4
 8000fd2:	40b0      	lsls	r0, r6
 8000fd4:	4589      	cmp	r9, r1
 8000fd6:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000fda:	b280      	uxth	r0, r0
 8000fdc:	d93e      	bls.n	800105c <__udivmoddi4+0x2e8>
 8000fde:	1879      	adds	r1, r7, r1
 8000fe0:	f108 3cff 	add.w	ip, r8, #4294967295
 8000fe4:	d201      	bcs.n	8000fea <__udivmoddi4+0x276>
 8000fe6:	4589      	cmp	r9, r1
 8000fe8:	d81f      	bhi.n	800102a <__udivmoddi4+0x2b6>
 8000fea:	eba1 0109 	sub.w	r1, r1, r9
 8000fee:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ff2:	fb09 f804 	mul.w	r8, r9, r4
 8000ff6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000ffa:	b292      	uxth	r2, r2
 8000ffc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001000:	4542      	cmp	r2, r8
 8001002:	d229      	bcs.n	8001058 <__udivmoddi4+0x2e4>
 8001004:	18ba      	adds	r2, r7, r2
 8001006:	f109 31ff 	add.w	r1, r9, #4294967295
 800100a:	d2c4      	bcs.n	8000f96 <__udivmoddi4+0x222>
 800100c:	4542      	cmp	r2, r8
 800100e:	d2c2      	bcs.n	8000f96 <__udivmoddi4+0x222>
 8001010:	f1a9 0102 	sub.w	r1, r9, #2
 8001014:	443a      	add	r2, r7
 8001016:	e7be      	b.n	8000f96 <__udivmoddi4+0x222>
 8001018:	45f0      	cmp	r8, lr
 800101a:	d29d      	bcs.n	8000f58 <__udivmoddi4+0x1e4>
 800101c:	ebbe 0302 	subs.w	r3, lr, r2
 8001020:	eb6c 0c07 	sbc.w	ip, ip, r7
 8001024:	3801      	subs	r0, #1
 8001026:	46e1      	mov	r9, ip
 8001028:	e796      	b.n	8000f58 <__udivmoddi4+0x1e4>
 800102a:	eba7 0909 	sub.w	r9, r7, r9
 800102e:	4449      	add	r1, r9
 8001030:	f1a8 0c02 	sub.w	ip, r8, #2
 8001034:	fbb1 f9fe 	udiv	r9, r1, lr
 8001038:	fb09 f804 	mul.w	r8, r9, r4
 800103c:	e7db      	b.n	8000ff6 <__udivmoddi4+0x282>
 800103e:	4673      	mov	r3, lr
 8001040:	e77f      	b.n	8000f42 <__udivmoddi4+0x1ce>
 8001042:	4650      	mov	r0, sl
 8001044:	e766      	b.n	8000f14 <__udivmoddi4+0x1a0>
 8001046:	4608      	mov	r0, r1
 8001048:	e6fd      	b.n	8000e46 <__udivmoddi4+0xd2>
 800104a:	443b      	add	r3, r7
 800104c:	3a02      	subs	r2, #2
 800104e:	e733      	b.n	8000eb8 <__udivmoddi4+0x144>
 8001050:	f1ac 0c02 	sub.w	ip, ip, #2
 8001054:	443b      	add	r3, r7
 8001056:	e71c      	b.n	8000e92 <__udivmoddi4+0x11e>
 8001058:	4649      	mov	r1, r9
 800105a:	e79c      	b.n	8000f96 <__udivmoddi4+0x222>
 800105c:	eba1 0109 	sub.w	r1, r1, r9
 8001060:	46c4      	mov	ip, r8
 8001062:	fbb1 f9fe 	udiv	r9, r1, lr
 8001066:	fb09 f804 	mul.w	r8, r9, r4
 800106a:	e7c4      	b.n	8000ff6 <__udivmoddi4+0x282>

0800106c <__aeabi_idiv0>:
 800106c:	4770      	bx	lr
 800106e:	bf00      	nop

08001070 <HAL_UART_RxCpltCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8001070:	b590      	push	{r4, r7, lr}
 8001072:	b08d      	sub	sp, #52	@ 0x34
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]

	if (huart->Instance == USART1) {
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	4a71      	ldr	r2, [pc, #452]	@ (8001244 <HAL_UART_RxCpltCallback+0x1d4>)
 800107e:	4293      	cmp	r3, r2
 8001080:	f040 80d1 	bne.w	8001226 <HAL_UART_RxCpltCallback+0x1b6>
		        int b = 0, coma = 0, loop = 1;
 8001084:	2300      	movs	r3, #0
 8001086:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001088:	2300      	movs	r3, #0
 800108a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800108c:	2301      	movs	r3, #1
 800108e:	627b      	str	r3, [r7, #36]	@ 0x24
		        char temp[10] = {'\0'};
 8001090:	f107 030c 	add.w	r3, r7, #12
 8001094:	2200      	movs	r2, #0
 8001096:	601a      	str	r2, [r3, #0]
 8001098:	605a      	str	r2, [r3, #4]
 800109a:	811a      	strh	r2, [r3, #8]
		        int temp_index = 0;
 800109c:	2300      	movs	r3, #0
 800109e:	623b      	str	r3, [r7, #32]
		        int LV_Cell_Index = 0;
 80010a0:	2300      	movs	r3, #0
 80010a2:	61fb      	str	r3, [r7, #28]
		        int LV_Temp_Index = 0;
 80010a4:	2300      	movs	r3, #0
 80010a6:	61bb      	str	r3, [r7, #24]

		        while (loop) {
 80010a8:	e0a5      	b.n	80011f6 <HAL_UART_RxCpltCallback+0x186>
		            char ch = LV_Rxdata[b];
 80010aa:	4a67      	ldr	r2, [pc, #412]	@ (8001248 <HAL_UART_RxCpltCallback+0x1d8>)
 80010ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80010ae:	4413      	add	r3, r2
 80010b0:	781b      	ldrb	r3, [r3, #0]
 80010b2:	75fb      	strb	r3, [r7, #23]

		            if (ch == ',') {
 80010b4:	7dfb      	ldrb	r3, [r7, #23]
 80010b6:	2b2c      	cmp	r3, #44	@ 0x2c
 80010b8:	d174      	bne.n	80011a4 <HAL_UART_RxCpltCallback+0x134>
		                temp[temp_index] = '\0';
 80010ba:	f107 020c 	add.w	r2, r7, #12
 80010be:	6a3b      	ldr	r3, [r7, #32]
 80010c0:	4413      	add	r3, r2
 80010c2:	2200      	movs	r2, #0
 80010c4:	701a      	strb	r2, [r3, #0]

		                switch (coma) {
 80010c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80010c8:	2b0d      	cmp	r3, #13
 80010ca:	d85b      	bhi.n	8001184 <HAL_UART_RxCpltCallback+0x114>
 80010cc:	a201      	add	r2, pc, #4	@ (adr r2, 80010d4 <HAL_UART_RxCpltCallback+0x64>)
 80010ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010d2:	bf00      	nop
 80010d4:	0800110d 	.word	0x0800110d
 80010d8:	0800112d 	.word	0x0800112d
 80010dc:	0800112d 	.word	0x0800112d
 80010e0:	0800112d 	.word	0x0800112d
 80010e4:	0800112d 	.word	0x0800112d
 80010e8:	0800112d 	.word	0x0800112d
 80010ec:	0800112d 	.word	0x0800112d
 80010f0:	0800114f 	.word	0x0800114f
 80010f4:	08001163 	.word	0x08001163
 80010f8:	08001163 	.word	0x08001163
 80010fc:	08001163 	.word	0x08001163
 8001100:	08001163 	.word	0x08001163
 8001104:	08001163 	.word	0x08001163
 8001108:	08001163 	.word	0x08001163
		                    case 0:
		                        LV_Total_Voltage = atof(temp);
 800110c:	f107 030c 	add.w	r3, r7, #12
 8001110:	4618      	mov	r0, r3
 8001112:	f00a fe59 	bl	800bdc8 <atof>
 8001116:	ec53 2b10 	vmov	r2, r3, d0
 800111a:	4610      	mov	r0, r2
 800111c:	4619      	mov	r1, r3
 800111e:	f7ff fd6b 	bl	8000bf8 <__aeabi_d2uiz>
 8001122:	4603      	mov	r3, r0
 8001124:	b2da      	uxtb	r2, r3
 8001126:	4b49      	ldr	r3, [pc, #292]	@ (800124c <HAL_UART_RxCpltCallback+0x1dc>)
 8001128:	701a      	strb	r2, [r3, #0]
		                        break;
 800112a:	e02b      	b.n	8001184 <HAL_UART_RxCpltCallback+0x114>
		                    case 1: case 2: case 3: case 4: case 5: case 6:
		                        LV_Each_Cell_Voltage[LV_Cell_Index++] = atof(temp);
 800112c:	f107 030c 	add.w	r3, r7, #12
 8001130:	4618      	mov	r0, r3
 8001132:	f00a fe49 	bl	800bdc8 <atof>
 8001136:	ec51 0b10 	vmov	r0, r1, d0
 800113a:	69fc      	ldr	r4, [r7, #28]
 800113c:	1c63      	adds	r3, r4, #1
 800113e:	61fb      	str	r3, [r7, #28]
 8001140:	f7ff fd5a 	bl	8000bf8 <__aeabi_d2uiz>
 8001144:	4603      	mov	r3, r0
 8001146:	b2da      	uxtb	r2, r3
 8001148:	4b41      	ldr	r3, [pc, #260]	@ (8001250 <HAL_UART_RxCpltCallback+0x1e0>)
 800114a:	551a      	strb	r2, [r3, r4]
		                        break;
 800114c:	e01a      	b.n	8001184 <HAL_UART_RxCpltCallback+0x114>
		                    case 7:
		                        LV_State_of_change = atoi(temp);
 800114e:	f107 030c 	add.w	r3, r7, #12
 8001152:	4618      	mov	r0, r3
 8001154:	f00a fe3b 	bl	800bdce <atoi>
 8001158:	4603      	mov	r3, r0
 800115a:	b2da      	uxtb	r2, r3
 800115c:	4b3d      	ldr	r3, [pc, #244]	@ (8001254 <HAL_UART_RxCpltCallback+0x1e4>)
 800115e:	701a      	strb	r2, [r3, #0]
		                        break;
 8001160:	e010      	b.n	8001184 <HAL_UART_RxCpltCallback+0x114>
		                    case 8: case 9: case 10: case 11: case 12: case 13:
		                        LV_temp[LV_Temp_Index++] = atof(temp);
 8001162:	f107 030c 	add.w	r3, r7, #12
 8001166:	4618      	mov	r0, r3
 8001168:	f00a fe2e 	bl	800bdc8 <atof>
 800116c:	ec51 0b10 	vmov	r0, r1, d0
 8001170:	69bc      	ldr	r4, [r7, #24]
 8001172:	1c63      	adds	r3, r4, #1
 8001174:	61bb      	str	r3, [r7, #24]
 8001176:	f7ff fd3f 	bl	8000bf8 <__aeabi_d2uiz>
 800117a:	4603      	mov	r3, r0
 800117c:	b2da      	uxtb	r2, r3
 800117e:	4b36      	ldr	r3, [pc, #216]	@ (8001258 <HAL_UART_RxCpltCallback+0x1e8>)
 8001180:	551a      	strb	r2, [r3, r4]
		                        break;
 8001182:	bf00      	nop
		                }

		                coma++;
 8001184:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001186:	3301      	adds	r3, #1
 8001188:	62bb      	str	r3, [r7, #40]	@ 0x28
		                temp_index = 0;
 800118a:	2300      	movs	r3, #0
 800118c:	623b      	str	r3, [r7, #32]
		                memset(temp, 0, sizeof(temp));
 800118e:	f107 030c 	add.w	r3, r7, #12
 8001192:	220a      	movs	r2, #10
 8001194:	2100      	movs	r1, #0
 8001196:	4618      	mov	r0, r3
 8001198:	f00c fa2f 	bl	800d5fa <memset>
		                b++;
 800119c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800119e:	3301      	adds	r3, #1
 80011a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80011a2:	e028      	b.n	80011f6 <HAL_UART_RxCpltCallback+0x186>

		            } else if (ch == '\n') {
 80011a4:	7dfb      	ldrb	r3, [r7, #23]
 80011a6:	2b0a      	cmp	r3, #10
 80011a8:	d117      	bne.n	80011da <HAL_UART_RxCpltCallback+0x16a>
		                temp[temp_index] = '\0';
 80011aa:	f107 020c 	add.w	r2, r7, #12
 80011ae:	6a3b      	ldr	r3, [r7, #32]
 80011b0:	4413      	add	r3, r2
 80011b2:	2200      	movs	r2, #0
 80011b4:	701a      	strb	r2, [r3, #0]
		                LV_current = atof(temp);
 80011b6:	f107 030c 	add.w	r3, r7, #12
 80011ba:	4618      	mov	r0, r3
 80011bc:	f00a fe04 	bl	800bdc8 <atof>
 80011c0:	ec53 2b10 	vmov	r2, r3, d0
 80011c4:	4610      	mov	r0, r2
 80011c6:	4619      	mov	r1, r3
 80011c8:	f7ff fd16 	bl	8000bf8 <__aeabi_d2uiz>
 80011cc:	4603      	mov	r3, r0
 80011ce:	b2da      	uxtb	r2, r3
 80011d0:	4b22      	ldr	r3, [pc, #136]	@ (800125c <HAL_UART_RxCpltCallback+0x1ec>)
 80011d2:	701a      	strb	r2, [r3, #0]
		                loop = 0;
 80011d4:	2300      	movs	r3, #0
 80011d6:	627b      	str	r3, [r7, #36]	@ 0x24
 80011d8:	e00d      	b.n	80011f6 <HAL_UART_RxCpltCallback+0x186>

		            } else {
		                if (temp_index < sizeof(temp) - 1) {
 80011da:	6a3b      	ldr	r3, [r7, #32]
 80011dc:	2b08      	cmp	r3, #8
 80011de:	d807      	bhi.n	80011f0 <HAL_UART_RxCpltCallback+0x180>
		                    temp[temp_index++] = ch;
 80011e0:	6a3b      	ldr	r3, [r7, #32]
 80011e2:	1c5a      	adds	r2, r3, #1
 80011e4:	623a      	str	r2, [r7, #32]
 80011e6:	3330      	adds	r3, #48	@ 0x30
 80011e8:	443b      	add	r3, r7
 80011ea:	7dfa      	ldrb	r2, [r7, #23]
 80011ec:	f803 2c24 	strb.w	r2, [r3, #-36]
		                }
		                b++;
 80011f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80011f2:	3301      	adds	r3, #1
 80011f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
		        while (loop) {
 80011f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	f47f af56 	bne.w	80010aa <HAL_UART_RxCpltCallback+0x3a>
		            }
		        }
	    	uart_rx_done = 1;
 80011fe:	4b18      	ldr	r3, [pc, #96]	@ (8001260 <HAL_UART_RxCpltCallback+0x1f0>)
 8001200:	2201      	movs	r2, #1
 8001202:	701a      	strb	r2, [r3, #0]

		if (!uart_tx_busy) {
 8001204:	4b17      	ldr	r3, [pc, #92]	@ (8001264 <HAL_UART_RxCpltCallback+0x1f4>)
 8001206:	781b      	ldrb	r3, [r3, #0]
 8001208:	2b00      	cmp	r3, #0
 800120a:	d107      	bne.n	800121c <HAL_UART_RxCpltCallback+0x1ac>
		            uart_tx_busy = 1;
 800120c:	4b15      	ldr	r3, [pc, #84]	@ (8001264 <HAL_UART_RxCpltCallback+0x1f4>)
 800120e:	2201      	movs	r2, #1
 8001210:	701a      	strb	r2, [r3, #0]
		            HAL_UART_Transmit_IT(&huart3, LV_Rxdata, sizeof(LV_Rxdata));
 8001212:	2234      	movs	r2, #52	@ 0x34
 8001214:	490c      	ldr	r1, [pc, #48]	@ (8001248 <HAL_UART_RxCpltCallback+0x1d8>)
 8001216:	4814      	ldr	r0, [pc, #80]	@ (8001268 <HAL_UART_RxCpltCallback+0x1f8>)
 8001218:	f005 fe90 	bl	8006f3c <HAL_UART_Transmit_IT>
		        }

	    	HAL_UART_Receive_DMA(&huart1, LV_Rxdata, sizeof(LV_Rxdata));
 800121c:	2234      	movs	r2, #52	@ 0x34
 800121e:	490a      	ldr	r1, [pc, #40]	@ (8001248 <HAL_UART_RxCpltCallback+0x1d8>)
 8001220:	4812      	ldr	r0, [pc, #72]	@ (800126c <HAL_UART_RxCpltCallback+0x1fc>)
 8001222:	f005 ff6b 	bl	80070fc <HAL_UART_Receive_DMA>
	   }
	j++;
 8001226:	4b12      	ldr	r3, [pc, #72]	@ (8001270 <HAL_UART_RxCpltCallback+0x200>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	3301      	adds	r3, #1
 800122c:	4a10      	ldr	r2, [pc, #64]	@ (8001270 <HAL_UART_RxCpltCallback+0x200>)
 800122e:	6013      	str	r3, [r2, #0]

	HAL_UART_Receive_IT(&huart3, &rx_byte, 8);
 8001230:	2208      	movs	r2, #8
 8001232:	4910      	ldr	r1, [pc, #64]	@ (8001274 <HAL_UART_RxCpltCallback+0x204>)
 8001234:	480c      	ldr	r0, [pc, #48]	@ (8001268 <HAL_UART_RxCpltCallback+0x1f8>)
 8001236:	f005 ff15 	bl	8007064 <HAL_UART_Receive_IT>
}
 800123a:	bf00      	nop
 800123c:	3734      	adds	r7, #52	@ 0x34
 800123e:	46bd      	mov	sp, r7
 8001240:	bd90      	pop	{r4, r7, pc}
 8001242:	bf00      	nop
 8001244:	40013800 	.word	0x40013800
 8001248:	20000724 	.word	0x20000724
 800124c:	200008f8 	.word	0x200008f8
 8001250:	200008fc 	.word	0x200008fc
 8001254:	20000902 	.word	0x20000902
 8001258:	20000904 	.word	0x20000904
 800125c:	2000090a 	.word	0x2000090a
 8001260:	2000082c 	.word	0x2000082c
 8001264:	2000090b 	.word	0x2000090b
 8001268:	2000055c 	.word	0x2000055c
 800126c:	200004c8 	.word	0x200004c8
 8001270:	200006c8 	.word	0x200006c8
 8001274:	200006d4 	.word	0x200006d4

08001278 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b082      	sub	sp, #8
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]

	if (hadc->Instance == ADC3)
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	4a0f      	ldr	r2, [pc, #60]	@ (80012c4 <HAL_ADC_ConvCpltCallback+0x4c>)
 8001286:	4293      	cmp	r3, r2
 8001288:	d109      	bne.n	800129e <HAL_ADC_ConvCpltCallback+0x26>
    {
        adc_val3 = HAL_ADC_GetValue(hadc);
 800128a:	6878      	ldr	r0, [r7, #4]
 800128c:	f002 fa92 	bl	80037b4 <HAL_ADC_GetValue>
 8001290:	4603      	mov	r3, r0
 8001292:	b29a      	uxth	r2, r3
 8001294:	4b0c      	ldr	r3, [pc, #48]	@ (80012c8 <HAL_ADC_ConvCpltCallback+0x50>)
 8001296:	801a      	strh	r2, [r3, #0]


        HAL_ADC_Start_IT(hadc);
 8001298:	6878      	ldr	r0, [r7, #4]
 800129a:	f002 f85f 	bl	800335c <HAL_ADC_Start_IT>
    }

	if (hadc->Instance == ADC5)
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	4a0a      	ldr	r2, [pc, #40]	@ (80012cc <HAL_ADC_ConvCpltCallback+0x54>)
 80012a4:	4293      	cmp	r3, r2
 80012a6:	d109      	bne.n	80012bc <HAL_ADC_ConvCpltCallback+0x44>
        {
            adc_val5 = HAL_ADC_GetValue(hadc);
 80012a8:	6878      	ldr	r0, [r7, #4]
 80012aa:	f002 fa83 	bl	80037b4 <HAL_ADC_GetValue>
 80012ae:	4603      	mov	r3, r0
 80012b0:	b29a      	uxth	r2, r3
 80012b2:	4b07      	ldr	r3, [pc, #28]	@ (80012d0 <HAL_ADC_ConvCpltCallback+0x58>)
 80012b4:	801a      	strh	r2, [r3, #0]

            HAL_ADC_Start_IT(hadc);
 80012b6:	6878      	ldr	r0, [r7, #4]
 80012b8:	f002 f850 	bl	800335c <HAL_ADC_Start_IT>
        }
}
 80012bc:	bf00      	nop
 80012be:	3708      	adds	r7, #8
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bd80      	pop	{r7, pc}
 80012c4:	50000400 	.word	0x50000400
 80012c8:	200006f8 	.word	0x200006f8
 80012cc:	50000600 	.word	0x50000600
 80012d0:	200006fa 	.word	0x200006fa

080012d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012d4:	b5b0      	push	{r4, r5, r7, lr}
 80012d6:	b090      	sub	sp, #64	@ 0x40
 80012d8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012da:	f001 fbd2 	bl	8002a82 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012de:	f000 f873 	bl	80013c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012e2:	f000 fc0f 	bl	8001b04 <MX_GPIO_Init>
  MX_DMA_Init();
 80012e6:	f000 fbcb 	bl	8001a80 <MX_DMA_Init>
  MX_ADC1_Init();
 80012ea:	f000 f8b7 	bl	800145c <MX_ADC1_Init>
  MX_ADC2_Init();
 80012ee:	f000 f9a1 	bl	8001634 <MX_ADC2_Init>
  MX_USART3_UART_Init();
 80012f2:	f000 fb79 	bl	80019e8 <MX_USART3_UART_Init>
  MX_ADC3_Init();
 80012f6:	f000 fa13 	bl	8001720 <MX_ADC3_Init>
  MX_ADC5_Init();
 80012fa:	f000 fa89 	bl	8001810 <MX_ADC5_Init>
  MX_USART1_UART_Init();
 80012fe:	f000 fb27 	bl	8001950 <MX_USART1_UART_Init>
  MX_SPI1_Init();
 8001302:	f000 faeb 	bl	80018dc <MX_SPI1_Init>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of myBinarySem01 */
  osSemaphoreDef(myBinarySem01);
 8001306:	2300      	movs	r3, #0
 8001308:	63fb      	str	r3, [r7, #60]	@ 0x3c
  myBinarySem01Handle = osSemaphoreCreate(osSemaphore(myBinarySem01), 1);
 800130a:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800130e:	2101      	movs	r1, #1
 8001310:	4618      	mov	r0, r3
 8001312:	f008 fb53 	bl	80099bc <osSemaphoreCreate>
 8001316:	4603      	mov	r3, r0
 8001318:	4a20      	ldr	r2, [pc, #128]	@ (800139c <main+0xc8>)
 800131a:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 256);
 800131c:	4b20      	ldr	r3, [pc, #128]	@ (80013a0 <main+0xcc>)
 800131e:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 8001322:	461d      	mov	r5, r3
 8001324:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001326:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001328:	682b      	ldr	r3, [r5, #0]
 800132a:	6023      	str	r3, [r4, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800132c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001330:	2100      	movs	r1, #0
 8001332:	4618      	mov	r0, r3
 8001334:	f008 fb07 	bl	8009946 <osThreadCreate>
 8001338:	4603      	mov	r3, r0
 800133a:	4a1a      	ldr	r2, [pc, #104]	@ (80013a4 <main+0xd0>)
 800133c:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask02 */
  osThreadDef(myTask02, StartTask02, osPriorityNormal, 0, 256);
 800133e:	4b1a      	ldr	r3, [pc, #104]	@ (80013a8 <main+0xd4>)
 8001340:	f107 0414 	add.w	r4, r7, #20
 8001344:	461d      	mov	r5, r3
 8001346:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001348:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800134a:	682b      	ldr	r3, [r5, #0]
 800134c:	6023      	str	r3, [r4, #0]
  myTask02Handle = osThreadCreate(osThread(myTask02), NULL);
 800134e:	f107 0314 	add.w	r3, r7, #20
 8001352:	2100      	movs	r1, #0
 8001354:	4618      	mov	r0, r3
 8001356:	f008 faf6 	bl	8009946 <osThreadCreate>
 800135a:	4603      	mov	r3, r0
 800135c:	4a13      	ldr	r2, [pc, #76]	@ (80013ac <main+0xd8>)
 800135e:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask03 */
  osThreadDef(myTask03, StartTask03, osPriorityNormal, 0, 256);
 8001360:	4b13      	ldr	r3, [pc, #76]	@ (80013b0 <main+0xdc>)
 8001362:	463c      	mov	r4, r7
 8001364:	461d      	mov	r5, r3
 8001366:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001368:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800136a:	682b      	ldr	r3, [r5, #0]
 800136c:	6023      	str	r3, [r4, #0]
  myTask03Handle = osThreadCreate(osThread(myTask03), NULL);
 800136e:	463b      	mov	r3, r7
 8001370:	2100      	movs	r1, #0
 8001372:	4618      	mov	r0, r3
 8001374:	f008 fae7 	bl	8009946 <osThreadCreate>
 8001378:	4603      	mov	r3, r0
 800137a:	4a0e      	ldr	r2, [pc, #56]	@ (80013b4 <main+0xe0>)
 800137c:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */

  HAL_UART_Receive_IT(&huart3, &rx_byte, 8);
 800137e:	2208      	movs	r2, #8
 8001380:	490d      	ldr	r1, [pc, #52]	@ (80013b8 <main+0xe4>)
 8001382:	480e      	ldr	r0, [pc, #56]	@ (80013bc <main+0xe8>)
 8001384:	f005 fe6e 	bl	8007064 <HAL_UART_Receive_IT>
  HAL_UART_Receive_DMA(&huart1, LV_Rxdata, sizeof(LV_Rxdata));
 8001388:	2234      	movs	r2, #52	@ 0x34
 800138a:	490d      	ldr	r1, [pc, #52]	@ (80013c0 <main+0xec>)
 800138c:	480d      	ldr	r0, [pc, #52]	@ (80013c4 <main+0xf0>)
 800138e:	f005 feb5 	bl	80070fc <HAL_UART_Receive_DMA>
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8001392:	f008 fad1 	bl	8009938 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001396:	bf00      	nop
 8001398:	e7fd      	b.n	8001396 <main+0xc2>
 800139a:	bf00      	nop
 800139c:	200006bc 	.word	0x200006bc
 80013a0:	080104dc 	.word	0x080104dc
 80013a4:	200006b0 	.word	0x200006b0
 80013a8:	080104fc 	.word	0x080104fc
 80013ac:	200006b4 	.word	0x200006b4
 80013b0:	0801051c 	.word	0x0801051c
 80013b4:	200006b8 	.word	0x200006b8
 80013b8:	200006d4 	.word	0x200006d4
 80013bc:	2000055c 	.word	0x2000055c
 80013c0:	20000724 	.word	0x20000724
 80013c4:	200004c8 	.word	0x200004c8

080013c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b094      	sub	sp, #80	@ 0x50
 80013cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013ce:	f107 0318 	add.w	r3, r7, #24
 80013d2:	2238      	movs	r2, #56	@ 0x38
 80013d4:	2100      	movs	r1, #0
 80013d6:	4618      	mov	r0, r3
 80013d8:	f00c f90f 	bl	800d5fa <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013dc:	1d3b      	adds	r3, r7, #4
 80013de:	2200      	movs	r2, #0
 80013e0:	601a      	str	r2, [r3, #0]
 80013e2:	605a      	str	r2, [r3, #4]
 80013e4:	609a      	str	r2, [r3, #8]
 80013e6:	60da      	str	r2, [r3, #12]
 80013e8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80013ea:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80013ee:	f004 f8fb 	bl	80055e8 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80013f2:	2301      	movs	r3, #1
 80013f4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80013f6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80013fa:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013fc:	2302      	movs	r3, #2
 80013fe:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001400:	2303      	movs	r3, #3
 8001402:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8001404:	2301      	movs	r3, #1
 8001406:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 15;
 8001408:	230f      	movs	r3, #15
 800140a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800140c:	2302      	movs	r3, #2
 800140e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001410:	2302      	movs	r3, #2
 8001412:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001414:	2302      	movs	r3, #2
 8001416:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001418:	f107 0318 	add.w	r3, r7, #24
 800141c:	4618      	mov	r0, r3
 800141e:	f004 f997 	bl	8005750 <HAL_RCC_OscConfig>
 8001422:	4603      	mov	r3, r0
 8001424:	2b00      	cmp	r3, #0
 8001426:	d001      	beq.n	800142c <SystemClock_Config+0x64>
  {
    Error_Handler();
 8001428:	f000 fe40 	bl	80020ac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800142c:	230f      	movs	r3, #15
 800142e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001430:	2303      	movs	r3, #3
 8001432:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001434:	2300      	movs	r3, #0
 8001436:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001438:	2300      	movs	r3, #0
 800143a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800143c:	2300      	movs	r3, #0
 800143e:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001440:	1d3b      	adds	r3, r7, #4
 8001442:	2103      	movs	r1, #3
 8001444:	4618      	mov	r0, r3
 8001446:	f004 fc95 	bl	8005d74 <HAL_RCC_ClockConfig>
 800144a:	4603      	mov	r3, r0
 800144c:	2b00      	cmp	r3, #0
 800144e:	d001      	beq.n	8001454 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8001450:	f000 fe2c 	bl	80020ac <Error_Handler>
  }
}
 8001454:	bf00      	nop
 8001456:	3750      	adds	r7, #80	@ 0x50
 8001458:	46bd      	mov	sp, r7
 800145a:	bd80      	pop	{r7, pc}

0800145c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b08c      	sub	sp, #48	@ 0x30
 8001460:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001462:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001466:	2200      	movs	r2, #0
 8001468:	601a      	str	r2, [r3, #0]
 800146a:	605a      	str	r2, [r3, #4]
 800146c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800146e:	1d3b      	adds	r3, r7, #4
 8001470:	2220      	movs	r2, #32
 8001472:	2100      	movs	r1, #0
 8001474:	4618      	mov	r0, r3
 8001476:	f00c f8c0 	bl	800d5fa <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800147a:	4b65      	ldr	r3, [pc, #404]	@ (8001610 <MX_ADC1_Init+0x1b4>)
 800147c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8001480:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001482:	4b63      	ldr	r3, [pc, #396]	@ (8001610 <MX_ADC1_Init+0x1b4>)
 8001484:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001488:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800148a:	4b61      	ldr	r3, [pc, #388]	@ (8001610 <MX_ADC1_Init+0x1b4>)
 800148c:	2200      	movs	r2, #0
 800148e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001490:	4b5f      	ldr	r3, [pc, #380]	@ (8001610 <MX_ADC1_Init+0x1b4>)
 8001492:	2200      	movs	r2, #0
 8001494:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8001496:	4b5e      	ldr	r3, [pc, #376]	@ (8001610 <MX_ADC1_Init+0x1b4>)
 8001498:	2200      	movs	r2, #0
 800149a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800149c:	4b5c      	ldr	r3, [pc, #368]	@ (8001610 <MX_ADC1_Init+0x1b4>)
 800149e:	2201      	movs	r2, #1
 80014a0:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80014a2:	4b5b      	ldr	r3, [pc, #364]	@ (8001610 <MX_ADC1_Init+0x1b4>)
 80014a4:	2208      	movs	r2, #8
 80014a6:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80014a8:	4b59      	ldr	r3, [pc, #356]	@ (8001610 <MX_ADC1_Init+0x1b4>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80014ae:	4b58      	ldr	r3, [pc, #352]	@ (8001610 <MX_ADC1_Init+0x1b4>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 8;
 80014b4:	4b56      	ldr	r3, [pc, #344]	@ (8001610 <MX_ADC1_Init+0x1b4>)
 80014b6:	2208      	movs	r2, #8
 80014b8:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80014ba:	4b55      	ldr	r3, [pc, #340]	@ (8001610 <MX_ADC1_Init+0x1b4>)
 80014bc:	2200      	movs	r2, #0
 80014be:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80014c2:	4b53      	ldr	r3, [pc, #332]	@ (8001610 <MX_ADC1_Init+0x1b4>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80014c8:	4b51      	ldr	r3, [pc, #324]	@ (8001610 <MX_ADC1_Init+0x1b4>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80014ce:	4b50      	ldr	r3, [pc, #320]	@ (8001610 <MX_ADC1_Init+0x1b4>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80014d6:	4b4e      	ldr	r3, [pc, #312]	@ (8001610 <MX_ADC1_Init+0x1b4>)
 80014d8:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80014dc:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80014de:	4b4c      	ldr	r3, [pc, #304]	@ (8001610 <MX_ADC1_Init+0x1b4>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80014e6:	484a      	ldr	r0, [pc, #296]	@ (8001610 <MX_ADC1_Init+0x1b4>)
 80014e8:	f001 fd7c 	bl	8002fe4 <HAL_ADC_Init>
 80014ec:	4603      	mov	r3, r0
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d001      	beq.n	80014f6 <MX_ADC1_Init+0x9a>
  {
    Error_Handler();
 80014f2:	f000 fddb 	bl	80020ac <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80014f6:	2300      	movs	r3, #0
 80014f8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80014fa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80014fe:	4619      	mov	r1, r3
 8001500:	4843      	ldr	r0, [pc, #268]	@ (8001610 <MX_ADC1_Init+0x1b4>)
 8001502:	f003 f9a5 	bl	8004850 <HAL_ADCEx_MultiModeConfigChannel>
 8001506:	4603      	mov	r3, r0
 8001508:	2b00      	cmp	r3, #0
 800150a:	d001      	beq.n	8001510 <MX_ADC1_Init+0xb4>
  {
    Error_Handler();
 800150c:	f000 fdce 	bl	80020ac <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001510:	4b40      	ldr	r3, [pc, #256]	@ (8001614 <MX_ADC1_Init+0x1b8>)
 8001512:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001514:	2306      	movs	r3, #6
 8001516:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001518:	2300      	movs	r3, #0
 800151a:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800151c:	237f      	movs	r3, #127	@ 0x7f
 800151e:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001520:	2304      	movs	r3, #4
 8001522:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001524:	2300      	movs	r3, #0
 8001526:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001528:	1d3b      	adds	r3, r7, #4
 800152a:	4619      	mov	r1, r3
 800152c:	4838      	ldr	r0, [pc, #224]	@ (8001610 <MX_ADC1_Init+0x1b4>)
 800152e:	f002 fbcd 	bl	8003ccc <HAL_ADC_ConfigChannel>
 8001532:	4603      	mov	r3, r0
 8001534:	2b00      	cmp	r3, #0
 8001536:	d001      	beq.n	800153c <MX_ADC1_Init+0xe0>
  {
    Error_Handler();
 8001538:	f000 fdb8 	bl	80020ac <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800153c:	4b36      	ldr	r3, [pc, #216]	@ (8001618 <MX_ADC1_Init+0x1bc>)
 800153e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001540:	230c      	movs	r3, #12
 8001542:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001544:	1d3b      	adds	r3, r7, #4
 8001546:	4619      	mov	r1, r3
 8001548:	4831      	ldr	r0, [pc, #196]	@ (8001610 <MX_ADC1_Init+0x1b4>)
 800154a:	f002 fbbf 	bl	8003ccc <HAL_ADC_ConfigChannel>
 800154e:	4603      	mov	r3, r0
 8001550:	2b00      	cmp	r3, #0
 8001552:	d001      	beq.n	8001558 <MX_ADC1_Init+0xfc>
  {
    Error_Handler();
 8001554:	f000 fdaa 	bl	80020ac <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001558:	4b30      	ldr	r3, [pc, #192]	@ (800161c <MX_ADC1_Init+0x1c0>)
 800155a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800155c:	2312      	movs	r3, #18
 800155e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001560:	1d3b      	adds	r3, r7, #4
 8001562:	4619      	mov	r1, r3
 8001564:	482a      	ldr	r0, [pc, #168]	@ (8001610 <MX_ADC1_Init+0x1b4>)
 8001566:	f002 fbb1 	bl	8003ccc <HAL_ADC_ConfigChannel>
 800156a:	4603      	mov	r3, r0
 800156c:	2b00      	cmp	r3, #0
 800156e:	d001      	beq.n	8001574 <MX_ADC1_Init+0x118>
  {
    Error_Handler();
 8001570:	f000 fd9c 	bl	80020ac <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001574:	4b2a      	ldr	r3, [pc, #168]	@ (8001620 <MX_ADC1_Init+0x1c4>)
 8001576:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8001578:	2318      	movs	r3, #24
 800157a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800157c:	1d3b      	adds	r3, r7, #4
 800157e:	4619      	mov	r1, r3
 8001580:	4823      	ldr	r0, [pc, #140]	@ (8001610 <MX_ADC1_Init+0x1b4>)
 8001582:	f002 fba3 	bl	8003ccc <HAL_ADC_ConfigChannel>
 8001586:	4603      	mov	r3, r0
 8001588:	2b00      	cmp	r3, #0
 800158a:	d001      	beq.n	8001590 <MX_ADC1_Init+0x134>
  {
    Error_Handler();
 800158c:	f000 fd8e 	bl	80020ac <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8001590:	4b24      	ldr	r3, [pc, #144]	@ (8001624 <MX_ADC1_Init+0x1c8>)
 8001592:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8001594:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001598:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800159a:	1d3b      	adds	r3, r7, #4
 800159c:	4619      	mov	r1, r3
 800159e:	481c      	ldr	r0, [pc, #112]	@ (8001610 <MX_ADC1_Init+0x1b4>)
 80015a0:	f002 fb94 	bl	8003ccc <HAL_ADC_ConfigChannel>
 80015a4:	4603      	mov	r3, r0
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d001      	beq.n	80015ae <MX_ADC1_Init+0x152>
  {
    Error_Handler();
 80015aa:	f000 fd7f 	bl	80020ac <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80015ae:	4b1e      	ldr	r3, [pc, #120]	@ (8001628 <MX_ADC1_Init+0x1cc>)
 80015b0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 80015b2:	f44f 7383 	mov.w	r3, #262	@ 0x106
 80015b6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80015b8:	1d3b      	adds	r3, r7, #4
 80015ba:	4619      	mov	r1, r3
 80015bc:	4814      	ldr	r0, [pc, #80]	@ (8001610 <MX_ADC1_Init+0x1b4>)
 80015be:	f002 fb85 	bl	8003ccc <HAL_ADC_ConfigChannel>
 80015c2:	4603      	mov	r3, r0
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d001      	beq.n	80015cc <MX_ADC1_Init+0x170>
  {
    Error_Handler();
 80015c8:	f000 fd70 	bl	80020ac <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80015cc:	4b17      	ldr	r3, [pc, #92]	@ (800162c <MX_ADC1_Init+0x1d0>)
 80015ce:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 80015d0:	f44f 7386 	mov.w	r3, #268	@ 0x10c
 80015d4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80015d6:	1d3b      	adds	r3, r7, #4
 80015d8:	4619      	mov	r1, r3
 80015da:	480d      	ldr	r0, [pc, #52]	@ (8001610 <MX_ADC1_Init+0x1b4>)
 80015dc:	f002 fb76 	bl	8003ccc <HAL_ADC_ConfigChannel>
 80015e0:	4603      	mov	r3, r0
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d001      	beq.n	80015ea <MX_ADC1_Init+0x18e>
  {
    Error_Handler();
 80015e6:	f000 fd61 	bl	80020ac <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80015ea:	4b11      	ldr	r3, [pc, #68]	@ (8001630 <MX_ADC1_Init+0x1d4>)
 80015ec:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 80015ee:	f44f 7389 	mov.w	r3, #274	@ 0x112
 80015f2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80015f4:	1d3b      	adds	r3, r7, #4
 80015f6:	4619      	mov	r1, r3
 80015f8:	4805      	ldr	r0, [pc, #20]	@ (8001610 <MX_ADC1_Init+0x1b4>)
 80015fa:	f002 fb67 	bl	8003ccc <HAL_ADC_ConfigChannel>
 80015fe:	4603      	mov	r3, r0
 8001600:	2b00      	cmp	r3, #0
 8001602:	d001      	beq.n	8001608 <MX_ADC1_Init+0x1ac>
  {
    Error_Handler();
 8001604:	f000 fd52 	bl	80020ac <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001608:	bf00      	nop
 800160a:	3730      	adds	r7, #48	@ 0x30
 800160c:	46bd      	mov	sp, r7
 800160e:	bd80      	pop	{r7, pc}
 8001610:	200001f4 	.word	0x200001f4
 8001614:	04300002 	.word	0x04300002
 8001618:	08600004 	.word	0x08600004
 800161c:	14f00020 	.word	0x14f00020
 8001620:	19200040 	.word	0x19200040
 8001624:	1d500080 	.word	0x1d500080
 8001628:	21800100 	.word	0x21800100
 800162c:	25b00200 	.word	0x25b00200
 8001630:	2e300800 	.word	0x2e300800

08001634 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b088      	sub	sp, #32
 8001638:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800163a:	463b      	mov	r3, r7
 800163c:	2220      	movs	r2, #32
 800163e:	2100      	movs	r1, #0
 8001640:	4618      	mov	r0, r3
 8001642:	f00b ffda 	bl	800d5fa <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8001646:	4b32      	ldr	r3, [pc, #200]	@ (8001710 <MX_ADC2_Init+0xdc>)
 8001648:	4a32      	ldr	r2, [pc, #200]	@ (8001714 <MX_ADC2_Init+0xe0>)
 800164a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800164c:	4b30      	ldr	r3, [pc, #192]	@ (8001710 <MX_ADC2_Init+0xdc>)
 800164e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001652:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001654:	4b2e      	ldr	r3, [pc, #184]	@ (8001710 <MX_ADC2_Init+0xdc>)
 8001656:	2200      	movs	r2, #0
 8001658:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800165a:	4b2d      	ldr	r3, [pc, #180]	@ (8001710 <MX_ADC2_Init+0xdc>)
 800165c:	2200      	movs	r2, #0
 800165e:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8001660:	4b2b      	ldr	r3, [pc, #172]	@ (8001710 <MX_ADC2_Init+0xdc>)
 8001662:	2200      	movs	r2, #0
 8001664:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001666:	4b2a      	ldr	r3, [pc, #168]	@ (8001710 <MX_ADC2_Init+0xdc>)
 8001668:	2201      	movs	r2, #1
 800166a:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800166c:	4b28      	ldr	r3, [pc, #160]	@ (8001710 <MX_ADC2_Init+0xdc>)
 800166e:	2208      	movs	r2, #8
 8001670:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8001672:	4b27      	ldr	r3, [pc, #156]	@ (8001710 <MX_ADC2_Init+0xdc>)
 8001674:	2200      	movs	r2, #0
 8001676:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001678:	4b25      	ldr	r3, [pc, #148]	@ (8001710 <MX_ADC2_Init+0xdc>)
 800167a:	2200      	movs	r2, #0
 800167c:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 2;
 800167e:	4b24      	ldr	r3, [pc, #144]	@ (8001710 <MX_ADC2_Init+0xdc>)
 8001680:	2202      	movs	r2, #2
 8001682:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001684:	4b22      	ldr	r3, [pc, #136]	@ (8001710 <MX_ADC2_Init+0xdc>)
 8001686:	2200      	movs	r2, #0
 8001688:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800168c:	4b20      	ldr	r3, [pc, #128]	@ (8001710 <MX_ADC2_Init+0xdc>)
 800168e:	2200      	movs	r2, #0
 8001690:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001692:	4b1f      	ldr	r3, [pc, #124]	@ (8001710 <MX_ADC2_Init+0xdc>)
 8001694:	2200      	movs	r2, #0
 8001696:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8001698:	4b1d      	ldr	r3, [pc, #116]	@ (8001710 <MX_ADC2_Init+0xdc>)
 800169a:	2200      	movs	r2, #0
 800169c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80016a0:	4b1b      	ldr	r3, [pc, #108]	@ (8001710 <MX_ADC2_Init+0xdc>)
 80016a2:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80016a6:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 80016a8:	4b19      	ldr	r3, [pc, #100]	@ (8001710 <MX_ADC2_Init+0xdc>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80016b0:	4817      	ldr	r0, [pc, #92]	@ (8001710 <MX_ADC2_Init+0xdc>)
 80016b2:	f001 fc97 	bl	8002fe4 <HAL_ADC_Init>
 80016b6:	4603      	mov	r3, r0
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d001      	beq.n	80016c0 <MX_ADC2_Init+0x8c>
  {
    Error_Handler();
 80016bc:	f000 fcf6 	bl	80020ac <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80016c0:	4b15      	ldr	r3, [pc, #84]	@ (8001718 <MX_ADC2_Init+0xe4>)
 80016c2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80016c4:	2306      	movs	r3, #6
 80016c6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80016c8:	2300      	movs	r3, #0
 80016ca:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80016cc:	237f      	movs	r3, #127	@ 0x7f
 80016ce:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80016d0:	2304      	movs	r3, #4
 80016d2:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80016d4:	2300      	movs	r3, #0
 80016d6:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80016d8:	463b      	mov	r3, r7
 80016da:	4619      	mov	r1, r3
 80016dc:	480c      	ldr	r0, [pc, #48]	@ (8001710 <MX_ADC2_Init+0xdc>)
 80016de:	f002 faf5 	bl	8003ccc <HAL_ADC_ConfigChannel>
 80016e2:	4603      	mov	r3, r0
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d001      	beq.n	80016ec <MX_ADC2_Init+0xb8>
  {
    Error_Handler();
 80016e8:	f000 fce0 	bl	80020ac <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 80016ec:	4b0b      	ldr	r3, [pc, #44]	@ (800171c <MX_ADC2_Init+0xe8>)
 80016ee:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80016f0:	230c      	movs	r3, #12
 80016f2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80016f4:	463b      	mov	r3, r7
 80016f6:	4619      	mov	r1, r3
 80016f8:	4805      	ldr	r0, [pc, #20]	@ (8001710 <MX_ADC2_Init+0xdc>)
 80016fa:	f002 fae7 	bl	8003ccc <HAL_ADC_ConfigChannel>
 80016fe:	4603      	mov	r3, r0
 8001700:	2b00      	cmp	r3, #0
 8001702:	d001      	beq.n	8001708 <MX_ADC2_Init+0xd4>
  {
    Error_Handler();
 8001704:	f000 fcd2 	bl	80020ac <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001708:	bf00      	nop
 800170a:	3720      	adds	r7, #32
 800170c:	46bd      	mov	sp, r7
 800170e:	bd80      	pop	{r7, pc}
 8001710:	20000260 	.word	0x20000260
 8001714:	50000100 	.word	0x50000100
 8001718:	0c900008 	.word	0x0c900008
 800171c:	3ef08000 	.word	0x3ef08000

08001720 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b08c      	sub	sp, #48	@ 0x30
 8001724:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001726:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800172a:	2200      	movs	r2, #0
 800172c:	601a      	str	r2, [r3, #0]
 800172e:	605a      	str	r2, [r3, #4]
 8001730:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001732:	1d3b      	adds	r3, r7, #4
 8001734:	2220      	movs	r2, #32
 8001736:	2100      	movs	r1, #0
 8001738:	4618      	mov	r0, r3
 800173a:	f00b ff5e 	bl	800d5fa <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 800173e:	4b31      	ldr	r3, [pc, #196]	@ (8001804 <MX_ADC3_Init+0xe4>)
 8001740:	4a31      	ldr	r2, [pc, #196]	@ (8001808 <MX_ADC3_Init+0xe8>)
 8001742:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001744:	4b2f      	ldr	r3, [pc, #188]	@ (8001804 <MX_ADC3_Init+0xe4>)
 8001746:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800174a:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 800174c:	4b2d      	ldr	r3, [pc, #180]	@ (8001804 <MX_ADC3_Init+0xe4>)
 800174e:	2200      	movs	r2, #0
 8001750:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001752:	4b2c      	ldr	r3, [pc, #176]	@ (8001804 <MX_ADC3_Init+0xe4>)
 8001754:	2200      	movs	r2, #0
 8001756:	60da      	str	r2, [r3, #12]
  hadc3.Init.GainCompensation = 0;
 8001758:	4b2a      	ldr	r3, [pc, #168]	@ (8001804 <MX_ADC3_Init+0xe4>)
 800175a:	2200      	movs	r2, #0
 800175c:	611a      	str	r2, [r3, #16]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800175e:	4b29      	ldr	r3, [pc, #164]	@ (8001804 <MX_ADC3_Init+0xe4>)
 8001760:	2200      	movs	r2, #0
 8001762:	615a      	str	r2, [r3, #20]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001764:	4b27      	ldr	r3, [pc, #156]	@ (8001804 <MX_ADC3_Init+0xe4>)
 8001766:	2204      	movs	r2, #4
 8001768:	619a      	str	r2, [r3, #24]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 800176a:	4b26      	ldr	r3, [pc, #152]	@ (8001804 <MX_ADC3_Init+0xe4>)
 800176c:	2200      	movs	r2, #0
 800176e:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8001770:	4b24      	ldr	r3, [pc, #144]	@ (8001804 <MX_ADC3_Init+0xe4>)
 8001772:	2200      	movs	r2, #0
 8001774:	775a      	strb	r2, [r3, #29]
  hadc3.Init.NbrOfConversion = 1;
 8001776:	4b23      	ldr	r3, [pc, #140]	@ (8001804 <MX_ADC3_Init+0xe4>)
 8001778:	2201      	movs	r2, #1
 800177a:	621a      	str	r2, [r3, #32]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800177c:	4b21      	ldr	r3, [pc, #132]	@ (8001804 <MX_ADC3_Init+0xe4>)
 800177e:	2200      	movs	r2, #0
 8001780:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001784:	4b1f      	ldr	r3, [pc, #124]	@ (8001804 <MX_ADC3_Init+0xe4>)
 8001786:	2200      	movs	r2, #0
 8001788:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800178a:	4b1e      	ldr	r3, [pc, #120]	@ (8001804 <MX_ADC3_Init+0xe4>)
 800178c:	2200      	movs	r2, #0
 800178e:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8001790:	4b1c      	ldr	r3, [pc, #112]	@ (8001804 <MX_ADC3_Init+0xe4>)
 8001792:	2200      	movs	r2, #0
 8001794:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001798:	4b1a      	ldr	r3, [pc, #104]	@ (8001804 <MX_ADC3_Init+0xe4>)
 800179a:	2200      	movs	r2, #0
 800179c:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc3.Init.OversamplingMode = DISABLE;
 800179e:	4b19      	ldr	r3, [pc, #100]	@ (8001804 <MX_ADC3_Init+0xe4>)
 80017a0:	2200      	movs	r2, #0
 80017a2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80017a6:	4817      	ldr	r0, [pc, #92]	@ (8001804 <MX_ADC3_Init+0xe4>)
 80017a8:	f001 fc1c 	bl	8002fe4 <HAL_ADC_Init>
 80017ac:	4603      	mov	r3, r0
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d001      	beq.n	80017b6 <MX_ADC3_Init+0x96>
  {
    Error_Handler();
 80017b2:	f000 fc7b 	bl	80020ac <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80017b6:	2300      	movs	r3, #0
 80017b8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 80017ba:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80017be:	4619      	mov	r1, r3
 80017c0:	4810      	ldr	r0, [pc, #64]	@ (8001804 <MX_ADC3_Init+0xe4>)
 80017c2:	f003 f845 	bl	8004850 <HAL_ADCEx_MultiModeConfigChannel>
 80017c6:	4603      	mov	r3, r0
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d001      	beq.n	80017d0 <MX_ADC3_Init+0xb0>
  {
    Error_Handler();
 80017cc:	f000 fc6e 	bl	80020ac <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80017d0:	4b0e      	ldr	r3, [pc, #56]	@ (800180c <MX_ADC3_Init+0xec>)
 80017d2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80017d4:	2306      	movs	r3, #6
 80017d6:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80017d8:	2300      	movs	r3, #0
 80017da:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80017dc:	237f      	movs	r3, #127	@ 0x7f
 80017de:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80017e0:	2304      	movs	r3, #4
 80017e2:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80017e4:	2300      	movs	r3, #0
 80017e6:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80017e8:	1d3b      	adds	r3, r7, #4
 80017ea:	4619      	mov	r1, r3
 80017ec:	4805      	ldr	r0, [pc, #20]	@ (8001804 <MX_ADC3_Init+0xe4>)
 80017ee:	f002 fa6d 	bl	8003ccc <HAL_ADC_ConfigChannel>
 80017f2:	4603      	mov	r3, r0
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d001      	beq.n	80017fc <MX_ADC3_Init+0xdc>
  {
    Error_Handler();
 80017f8:	f000 fc58 	bl	80020ac <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80017fc:	bf00      	nop
 80017fe:	3730      	adds	r7, #48	@ 0x30
 8001800:	46bd      	mov	sp, r7
 8001802:	bd80      	pop	{r7, pc}
 8001804:	200002cc 	.word	0x200002cc
 8001808:	50000400 	.word	0x50000400
 800180c:	14f00020 	.word	0x14f00020

08001810 <MX_ADC5_Init>:
  * @brief ADC5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC5_Init(void)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b088      	sub	sp, #32
 8001814:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC5_Init 0 */

  /* USER CODE END ADC5_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001816:	463b      	mov	r3, r7
 8001818:	2220      	movs	r2, #32
 800181a:	2100      	movs	r1, #0
 800181c:	4618      	mov	r0, r3
 800181e:	f00b feec 	bl	800d5fa <memset>

  /* USER CODE END ADC5_Init 1 */

  /** Common config
  */
  hadc5.Instance = ADC5;
 8001822:	4b2b      	ldr	r3, [pc, #172]	@ (80018d0 <MX_ADC5_Init+0xc0>)
 8001824:	4a2b      	ldr	r2, [pc, #172]	@ (80018d4 <MX_ADC5_Init+0xc4>)
 8001826:	601a      	str	r2, [r3, #0]
  hadc5.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001828:	4b29      	ldr	r3, [pc, #164]	@ (80018d0 <MX_ADC5_Init+0xc0>)
 800182a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800182e:	605a      	str	r2, [r3, #4]
  hadc5.Init.Resolution = ADC_RESOLUTION_12B;
 8001830:	4b27      	ldr	r3, [pc, #156]	@ (80018d0 <MX_ADC5_Init+0xc0>)
 8001832:	2200      	movs	r2, #0
 8001834:	609a      	str	r2, [r3, #8]
  hadc5.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001836:	4b26      	ldr	r3, [pc, #152]	@ (80018d0 <MX_ADC5_Init+0xc0>)
 8001838:	2200      	movs	r2, #0
 800183a:	60da      	str	r2, [r3, #12]
  hadc5.Init.GainCompensation = 0;
 800183c:	4b24      	ldr	r3, [pc, #144]	@ (80018d0 <MX_ADC5_Init+0xc0>)
 800183e:	2200      	movs	r2, #0
 8001840:	611a      	str	r2, [r3, #16]
  hadc5.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001842:	4b23      	ldr	r3, [pc, #140]	@ (80018d0 <MX_ADC5_Init+0xc0>)
 8001844:	2200      	movs	r2, #0
 8001846:	615a      	str	r2, [r3, #20]
  hadc5.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001848:	4b21      	ldr	r3, [pc, #132]	@ (80018d0 <MX_ADC5_Init+0xc0>)
 800184a:	2204      	movs	r2, #4
 800184c:	619a      	str	r2, [r3, #24]
  hadc5.Init.LowPowerAutoWait = DISABLE;
 800184e:	4b20      	ldr	r3, [pc, #128]	@ (80018d0 <MX_ADC5_Init+0xc0>)
 8001850:	2200      	movs	r2, #0
 8001852:	771a      	strb	r2, [r3, #28]
  hadc5.Init.ContinuousConvMode = DISABLE;
 8001854:	4b1e      	ldr	r3, [pc, #120]	@ (80018d0 <MX_ADC5_Init+0xc0>)
 8001856:	2200      	movs	r2, #0
 8001858:	775a      	strb	r2, [r3, #29]
  hadc5.Init.NbrOfConversion = 1;
 800185a:	4b1d      	ldr	r3, [pc, #116]	@ (80018d0 <MX_ADC5_Init+0xc0>)
 800185c:	2201      	movs	r2, #1
 800185e:	621a      	str	r2, [r3, #32]
  hadc5.Init.DiscontinuousConvMode = DISABLE;
 8001860:	4b1b      	ldr	r3, [pc, #108]	@ (80018d0 <MX_ADC5_Init+0xc0>)
 8001862:	2200      	movs	r2, #0
 8001864:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc5.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001868:	4b19      	ldr	r3, [pc, #100]	@ (80018d0 <MX_ADC5_Init+0xc0>)
 800186a:	2200      	movs	r2, #0
 800186c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc5.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800186e:	4b18      	ldr	r3, [pc, #96]	@ (80018d0 <MX_ADC5_Init+0xc0>)
 8001870:	2200      	movs	r2, #0
 8001872:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc5.Init.DMAContinuousRequests = DISABLE;
 8001874:	4b16      	ldr	r3, [pc, #88]	@ (80018d0 <MX_ADC5_Init+0xc0>)
 8001876:	2200      	movs	r2, #0
 8001878:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc5.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800187c:	4b14      	ldr	r3, [pc, #80]	@ (80018d0 <MX_ADC5_Init+0xc0>)
 800187e:	2200      	movs	r2, #0
 8001880:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc5.Init.OversamplingMode = DISABLE;
 8001882:	4b13      	ldr	r3, [pc, #76]	@ (80018d0 <MX_ADC5_Init+0xc0>)
 8001884:	2200      	movs	r2, #0
 8001886:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc5) != HAL_OK)
 800188a:	4811      	ldr	r0, [pc, #68]	@ (80018d0 <MX_ADC5_Init+0xc0>)
 800188c:	f001 fbaa 	bl	8002fe4 <HAL_ADC_Init>
 8001890:	4603      	mov	r3, r0
 8001892:	2b00      	cmp	r3, #0
 8001894:	d001      	beq.n	800189a <MX_ADC5_Init+0x8a>
  {
    Error_Handler();
 8001896:	f000 fc09 	bl	80020ac <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800189a:	4b0f      	ldr	r3, [pc, #60]	@ (80018d8 <MX_ADC5_Init+0xc8>)
 800189c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800189e:	2306      	movs	r3, #6
 80018a0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80018a2:	2300      	movs	r3, #0
 80018a4:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80018a6:	237f      	movs	r3, #127	@ 0x7f
 80018a8:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80018aa:	2304      	movs	r3, #4
 80018ac:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80018ae:	2300      	movs	r3, #0
 80018b0:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc5, &sConfig) != HAL_OK)
 80018b2:	463b      	mov	r3, r7
 80018b4:	4619      	mov	r1, r3
 80018b6:	4806      	ldr	r0, [pc, #24]	@ (80018d0 <MX_ADC5_Init+0xc0>)
 80018b8:	f002 fa08 	bl	8003ccc <HAL_ADC_ConfigChannel>
 80018bc:	4603      	mov	r3, r0
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d001      	beq.n	80018c6 <MX_ADC5_Init+0xb6>
  {
    Error_Handler();
 80018c2:	f000 fbf3 	bl	80020ac <Error_Handler>
  }
  /* USER CODE BEGIN ADC5_Init 2 */

  /* USER CODE END ADC5_Init 2 */

}
 80018c6:	bf00      	nop
 80018c8:	3720      	adds	r7, #32
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd80      	pop	{r7, pc}
 80018ce:	bf00      	nop
 80018d0:	20000338 	.word	0x20000338
 80018d4:	50000600 	.word	0x50000600
 80018d8:	08600004 	.word	0x08600004

080018dc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80018e0:	4b19      	ldr	r3, [pc, #100]	@ (8001948 <MX_SPI1_Init+0x6c>)
 80018e2:	4a1a      	ldr	r2, [pc, #104]	@ (800194c <MX_SPI1_Init+0x70>)
 80018e4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 80018e6:	4b18      	ldr	r3, [pc, #96]	@ (8001948 <MX_SPI1_Init+0x6c>)
 80018e8:	2200      	movs	r2, #0
 80018ea:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 80018ec:	4b16      	ldr	r3, [pc, #88]	@ (8001948 <MX_SPI1_Init+0x6c>)
 80018ee:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80018f2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80018f4:	4b14      	ldr	r3, [pc, #80]	@ (8001948 <MX_SPI1_Init+0x6c>)
 80018f6:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80018fa:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80018fc:	4b12      	ldr	r3, [pc, #72]	@ (8001948 <MX_SPI1_Init+0x6c>)
 80018fe:	2200      	movs	r2, #0
 8001900:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001902:	4b11      	ldr	r3, [pc, #68]	@ (8001948 <MX_SPI1_Init+0x6c>)
 8001904:	2200      	movs	r2, #0
 8001906:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001908:	4b0f      	ldr	r3, [pc, #60]	@ (8001948 <MX_SPI1_Init+0x6c>)
 800190a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800190e:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001910:	4b0d      	ldr	r3, [pc, #52]	@ (8001948 <MX_SPI1_Init+0x6c>)
 8001912:	2200      	movs	r2, #0
 8001914:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001916:	4b0c      	ldr	r3, [pc, #48]	@ (8001948 <MX_SPI1_Init+0x6c>)
 8001918:	2200      	movs	r2, #0
 800191a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800191c:	4b0a      	ldr	r3, [pc, #40]	@ (8001948 <MX_SPI1_Init+0x6c>)
 800191e:	2200      	movs	r2, #0
 8001920:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001922:	4b09      	ldr	r3, [pc, #36]	@ (8001948 <MX_SPI1_Init+0x6c>)
 8001924:	2207      	movs	r2, #7
 8001926:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001928:	4b07      	ldr	r3, [pc, #28]	@ (8001948 <MX_SPI1_Init+0x6c>)
 800192a:	2200      	movs	r2, #0
 800192c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800192e:	4b06      	ldr	r3, [pc, #24]	@ (8001948 <MX_SPI1_Init+0x6c>)
 8001930:	2200      	movs	r2, #0
 8001932:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001934:	4804      	ldr	r0, [pc, #16]	@ (8001948 <MX_SPI1_Init+0x6c>)
 8001936:	f004 fe83 	bl	8006640 <HAL_SPI_Init>
 800193a:	4603      	mov	r3, r0
 800193c:	2b00      	cmp	r3, #0
 800193e:	d001      	beq.n	8001944 <MX_SPI1_Init+0x68>
  {
    Error_Handler();
 8001940:	f000 fbb4 	bl	80020ac <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001944:	bf00      	nop
 8001946:	bd80      	pop	{r7, pc}
 8001948:	20000464 	.word	0x20000464
 800194c:	40013000 	.word	0x40013000

08001950 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001954:	4b22      	ldr	r3, [pc, #136]	@ (80019e0 <MX_USART1_UART_Init+0x90>)
 8001956:	4a23      	ldr	r2, [pc, #140]	@ (80019e4 <MX_USART1_UART_Init+0x94>)
 8001958:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800195a:	4b21      	ldr	r3, [pc, #132]	@ (80019e0 <MX_USART1_UART_Init+0x90>)
 800195c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001960:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001962:	4b1f      	ldr	r3, [pc, #124]	@ (80019e0 <MX_USART1_UART_Init+0x90>)
 8001964:	2200      	movs	r2, #0
 8001966:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001968:	4b1d      	ldr	r3, [pc, #116]	@ (80019e0 <MX_USART1_UART_Init+0x90>)
 800196a:	2200      	movs	r2, #0
 800196c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800196e:	4b1c      	ldr	r3, [pc, #112]	@ (80019e0 <MX_USART1_UART_Init+0x90>)
 8001970:	2200      	movs	r2, #0
 8001972:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001974:	4b1a      	ldr	r3, [pc, #104]	@ (80019e0 <MX_USART1_UART_Init+0x90>)
 8001976:	220c      	movs	r2, #12
 8001978:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800197a:	4b19      	ldr	r3, [pc, #100]	@ (80019e0 <MX_USART1_UART_Init+0x90>)
 800197c:	2200      	movs	r2, #0
 800197e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001980:	4b17      	ldr	r3, [pc, #92]	@ (80019e0 <MX_USART1_UART_Init+0x90>)
 8001982:	2200      	movs	r2, #0
 8001984:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001986:	4b16      	ldr	r3, [pc, #88]	@ (80019e0 <MX_USART1_UART_Init+0x90>)
 8001988:	2200      	movs	r2, #0
 800198a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800198c:	4b14      	ldr	r3, [pc, #80]	@ (80019e0 <MX_USART1_UART_Init+0x90>)
 800198e:	2200      	movs	r2, #0
 8001990:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001992:	4b13      	ldr	r3, [pc, #76]	@ (80019e0 <MX_USART1_UART_Init+0x90>)
 8001994:	2200      	movs	r2, #0
 8001996:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001998:	4811      	ldr	r0, [pc, #68]	@ (80019e0 <MX_USART1_UART_Init+0x90>)
 800199a:	f005 fa7f 	bl	8006e9c <HAL_UART_Init>
 800199e:	4603      	mov	r3, r0
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d001      	beq.n	80019a8 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80019a4:	f000 fb82 	bl	80020ac <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80019a8:	2100      	movs	r1, #0
 80019aa:	480d      	ldr	r0, [pc, #52]	@ (80019e0 <MX_USART1_UART_Init+0x90>)
 80019ac:	f007 fecf 	bl	800974e <HAL_UARTEx_SetTxFifoThreshold>
 80019b0:	4603      	mov	r3, r0
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d001      	beq.n	80019ba <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80019b6:	f000 fb79 	bl	80020ac <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80019ba:	2100      	movs	r1, #0
 80019bc:	4808      	ldr	r0, [pc, #32]	@ (80019e0 <MX_USART1_UART_Init+0x90>)
 80019be:	f007 ff04 	bl	80097ca <HAL_UARTEx_SetRxFifoThreshold>
 80019c2:	4603      	mov	r3, r0
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d001      	beq.n	80019cc <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80019c8:	f000 fb70 	bl	80020ac <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80019cc:	4804      	ldr	r0, [pc, #16]	@ (80019e0 <MX_USART1_UART_Init+0x90>)
 80019ce:	f007 fe85 	bl	80096dc <HAL_UARTEx_DisableFifoMode>
 80019d2:	4603      	mov	r3, r0
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d001      	beq.n	80019dc <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80019d8:	f000 fb68 	bl	80020ac <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80019dc:	bf00      	nop
 80019de:	bd80      	pop	{r7, pc}
 80019e0:	200004c8 	.word	0x200004c8
 80019e4:	40013800 	.word	0x40013800

080019e8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80019ec:	4b22      	ldr	r3, [pc, #136]	@ (8001a78 <MX_USART3_UART_Init+0x90>)
 80019ee:	4a23      	ldr	r2, [pc, #140]	@ (8001a7c <MX_USART3_UART_Init+0x94>)
 80019f0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80019f2:	4b21      	ldr	r3, [pc, #132]	@ (8001a78 <MX_USART3_UART_Init+0x90>)
 80019f4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80019f8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80019fa:	4b1f      	ldr	r3, [pc, #124]	@ (8001a78 <MX_USART3_UART_Init+0x90>)
 80019fc:	2200      	movs	r2, #0
 80019fe:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001a00:	4b1d      	ldr	r3, [pc, #116]	@ (8001a78 <MX_USART3_UART_Init+0x90>)
 8001a02:	2200      	movs	r2, #0
 8001a04:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001a06:	4b1c      	ldr	r3, [pc, #112]	@ (8001a78 <MX_USART3_UART_Init+0x90>)
 8001a08:	2200      	movs	r2, #0
 8001a0a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001a0c:	4b1a      	ldr	r3, [pc, #104]	@ (8001a78 <MX_USART3_UART_Init+0x90>)
 8001a0e:	220c      	movs	r2, #12
 8001a10:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a12:	4b19      	ldr	r3, [pc, #100]	@ (8001a78 <MX_USART3_UART_Init+0x90>)
 8001a14:	2200      	movs	r2, #0
 8001a16:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a18:	4b17      	ldr	r3, [pc, #92]	@ (8001a78 <MX_USART3_UART_Init+0x90>)
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001a1e:	4b16      	ldr	r3, [pc, #88]	@ (8001a78 <MX_USART3_UART_Init+0x90>)
 8001a20:	2200      	movs	r2, #0
 8001a22:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001a24:	4b14      	ldr	r3, [pc, #80]	@ (8001a78 <MX_USART3_UART_Init+0x90>)
 8001a26:	2200      	movs	r2, #0
 8001a28:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001a2a:	4b13      	ldr	r3, [pc, #76]	@ (8001a78 <MX_USART3_UART_Init+0x90>)
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001a30:	4811      	ldr	r0, [pc, #68]	@ (8001a78 <MX_USART3_UART_Init+0x90>)
 8001a32:	f005 fa33 	bl	8006e9c <HAL_UART_Init>
 8001a36:	4603      	mov	r3, r0
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d001      	beq.n	8001a40 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001a3c:	f000 fb36 	bl	80020ac <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001a40:	2100      	movs	r1, #0
 8001a42:	480d      	ldr	r0, [pc, #52]	@ (8001a78 <MX_USART3_UART_Init+0x90>)
 8001a44:	f007 fe83 	bl	800974e <HAL_UARTEx_SetTxFifoThreshold>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d001      	beq.n	8001a52 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001a4e:	f000 fb2d 	bl	80020ac <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001a52:	2100      	movs	r1, #0
 8001a54:	4808      	ldr	r0, [pc, #32]	@ (8001a78 <MX_USART3_UART_Init+0x90>)
 8001a56:	f007 feb8 	bl	80097ca <HAL_UARTEx_SetRxFifoThreshold>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d001      	beq.n	8001a64 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001a60:	f000 fb24 	bl	80020ac <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001a64:	4804      	ldr	r0, [pc, #16]	@ (8001a78 <MX_USART3_UART_Init+0x90>)
 8001a66:	f007 fe39 	bl	80096dc <HAL_UARTEx_DisableFifoMode>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d001      	beq.n	8001a74 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001a70:	f000 fb1c 	bl	80020ac <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001a74:	bf00      	nop
 8001a76:	bd80      	pop	{r7, pc}
 8001a78:	2000055c 	.word	0x2000055c
 8001a7c:	40004800 	.word	0x40004800

08001a80 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b082      	sub	sp, #8
 8001a84:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001a86:	4b1e      	ldr	r3, [pc, #120]	@ (8001b00 <MX_DMA_Init+0x80>)
 8001a88:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001a8a:	4a1d      	ldr	r2, [pc, #116]	@ (8001b00 <MX_DMA_Init+0x80>)
 8001a8c:	f043 0304 	orr.w	r3, r3, #4
 8001a90:	6493      	str	r3, [r2, #72]	@ 0x48
 8001a92:	4b1b      	ldr	r3, [pc, #108]	@ (8001b00 <MX_DMA_Init+0x80>)
 8001a94:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001a96:	f003 0304 	and.w	r3, r3, #4
 8001a9a:	607b      	str	r3, [r7, #4]
 8001a9c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001a9e:	4b18      	ldr	r3, [pc, #96]	@ (8001b00 <MX_DMA_Init+0x80>)
 8001aa0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001aa2:	4a17      	ldr	r2, [pc, #92]	@ (8001b00 <MX_DMA_Init+0x80>)
 8001aa4:	f043 0301 	orr.w	r3, r3, #1
 8001aa8:	6493      	str	r3, [r2, #72]	@ 0x48
 8001aaa:	4b15      	ldr	r3, [pc, #84]	@ (8001b00 <MX_DMA_Init+0x80>)
 8001aac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001aae:	f003 0301 	and.w	r3, r3, #1
 8001ab2:	603b      	str	r3, [r7, #0]
 8001ab4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	2105      	movs	r1, #5
 8001aba:	200b      	movs	r0, #11
 8001abc:	f003 f8ab 	bl	8004c16 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001ac0:	200b      	movs	r0, #11
 8001ac2:	f003 f8c2 	bl	8004c4a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 5, 0);
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	2105      	movs	r1, #5
 8001aca:	200c      	movs	r0, #12
 8001acc:	f003 f8a3 	bl	8004c16 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001ad0:	200c      	movs	r0, #12
 8001ad2:	f003 f8ba 	bl	8004c4a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 5, 0);
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	2105      	movs	r1, #5
 8001ada:	200d      	movs	r0, #13
 8001adc:	f003 f89b 	bl	8004c16 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8001ae0:	200d      	movs	r0, #13
 8001ae2:	f003 f8b2 	bl	8004c4a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 5, 0);
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	2105      	movs	r1, #5
 8001aea:	200e      	movs	r0, #14
 8001aec:	f003 f893 	bl	8004c16 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8001af0:	200e      	movs	r0, #14
 8001af2:	f003 f8aa 	bl	8004c4a <HAL_NVIC_EnableIRQ>

}
 8001af6:	bf00      	nop
 8001af8:	3708      	adds	r7, #8
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd80      	pop	{r7, pc}
 8001afe:	bf00      	nop
 8001b00:	40021000 	.word	0x40021000

08001b04 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001b04:	b480      	push	{r7}
 8001b06:	b085      	sub	sp, #20
 8001b08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001b0a:	4b1b      	ldr	r3, [pc, #108]	@ (8001b78 <MX_GPIO_Init+0x74>)
 8001b0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b0e:	4a1a      	ldr	r2, [pc, #104]	@ (8001b78 <MX_GPIO_Init+0x74>)
 8001b10:	f043 0320 	orr.w	r3, r3, #32
 8001b14:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b16:	4b18      	ldr	r3, [pc, #96]	@ (8001b78 <MX_GPIO_Init+0x74>)
 8001b18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b1a:	f003 0320 	and.w	r3, r3, #32
 8001b1e:	60fb      	str	r3, [r7, #12]
 8001b20:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b22:	4b15      	ldr	r3, [pc, #84]	@ (8001b78 <MX_GPIO_Init+0x74>)
 8001b24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b26:	4a14      	ldr	r2, [pc, #80]	@ (8001b78 <MX_GPIO_Init+0x74>)
 8001b28:	f043 0304 	orr.w	r3, r3, #4
 8001b2c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b2e:	4b12      	ldr	r3, [pc, #72]	@ (8001b78 <MX_GPIO_Init+0x74>)
 8001b30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b32:	f003 0304 	and.w	r3, r3, #4
 8001b36:	60bb      	str	r3, [r7, #8]
 8001b38:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b3a:	4b0f      	ldr	r3, [pc, #60]	@ (8001b78 <MX_GPIO_Init+0x74>)
 8001b3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b3e:	4a0e      	ldr	r2, [pc, #56]	@ (8001b78 <MX_GPIO_Init+0x74>)
 8001b40:	f043 0301 	orr.w	r3, r3, #1
 8001b44:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b46:	4b0c      	ldr	r3, [pc, #48]	@ (8001b78 <MX_GPIO_Init+0x74>)
 8001b48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b4a:	f003 0301 	and.w	r3, r3, #1
 8001b4e:	607b      	str	r3, [r7, #4]
 8001b50:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b52:	4b09      	ldr	r3, [pc, #36]	@ (8001b78 <MX_GPIO_Init+0x74>)
 8001b54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b56:	4a08      	ldr	r2, [pc, #32]	@ (8001b78 <MX_GPIO_Init+0x74>)
 8001b58:	f043 0302 	orr.w	r3, r3, #2
 8001b5c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b5e:	4b06      	ldr	r3, [pc, #24]	@ (8001b78 <MX_GPIO_Init+0x74>)
 8001b60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b62:	f003 0302 	and.w	r3, r3, #2
 8001b66:	603b      	str	r3, [r7, #0]
 8001b68:	683b      	ldr	r3, [r7, #0]

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001b6a:	bf00      	nop
 8001b6c:	3714      	adds	r7, #20
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b74:	4770      	bx	lr
 8001b76:	bf00      	nop
 8001b78:	40021000 	.word	0x40021000
 8001b7c:	00000000 	.word	0x00000000

08001b80 <getTemp>:

/* USER CODE BEGIN 4 */

float getTemp(uint8_t a, uint8_t b){
 8001b80:	b5b0      	push	{r4, r5, r7, lr}
 8001b82:	b08c      	sub	sp, #48	@ 0x30
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	4603      	mov	r3, r0
 8001b88:	460a      	mov	r2, r1
 8001b8a:	71fb      	strb	r3, [r7, #7]
 8001b8c:	4613      	mov	r3, r2
 8001b8e:	71bb      	strb	r3, [r7, #6]
	float adc_val;
	b = b-1;
 8001b90:	79bb      	ldrb	r3, [r7, #6]
 8001b92:	3b01      	subs	r3, #1
 8001b94:	71bb      	strb	r3, [r7, #6]
 	float beta_val=4304.05;
 8001b96:	4b68      	ldr	r3, [pc, #416]	@ (8001d38 <getTemp+0x1b8>)
 8001b98:	62fb      	str	r3, [r7, #44]	@ 0x2c
	float Vin= 5.00;
 8001b9a:	4b68      	ldr	r3, [pc, #416]	@ (8001d3c <getTemp+0x1bc>)
 8001b9c:	62bb      	str	r3, [r7, #40]	@ 0x28
	float Rs=20000.00;
 8001b9e:	4b68      	ldr	r3, [pc, #416]	@ (8001d40 <getTemp+0x1c0>)
 8001ba0:	627b      	str	r3, [r7, #36]	@ 0x24
	float R25=32762.00;
 8001ba2:	4b68      	ldr	r3, [pc, #416]	@ (8001d44 <getTemp+0x1c4>)
 8001ba4:	623b      	str	r3, [r7, #32]

	  adc_val = a; // GET THE ADC VALUE
 8001ba6:	79fb      	ldrb	r3, [r7, #7]
 8001ba8:	ee07 3a90 	vmov	s15, r3
 8001bac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001bb0:	edc7 7a07 	vstr	s15, [r7, #28]
	  float Vout = adc_val * (Vin/4095.00);     //4095 = 12 BIT RESOLUTION
 8001bb4:	69f8      	ldr	r0, [r7, #28]
 8001bb6:	f7fe fcef 	bl	8000598 <__aeabi_f2d>
 8001bba:	4604      	mov	r4, r0
 8001bbc:	460d      	mov	r5, r1
 8001bbe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8001bc0:	f7fe fcea 	bl	8000598 <__aeabi_f2d>
 8001bc4:	a356      	add	r3, pc, #344	@ (adr r3, 8001d20 <getTemp+0x1a0>)
 8001bc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bca:	f7fe fe67 	bl	800089c <__aeabi_ddiv>
 8001bce:	4602      	mov	r2, r0
 8001bd0:	460b      	mov	r3, r1
 8001bd2:	4620      	mov	r0, r4
 8001bd4:	4629      	mov	r1, r5
 8001bd6:	f7fe fd37 	bl	8000648 <__aeabi_dmul>
 8001bda:	4602      	mov	r2, r0
 8001bdc:	460b      	mov	r3, r1
 8001bde:	4610      	mov	r0, r2
 8001be0:	4619      	mov	r1, r3
 8001be2:	f7ff f829 	bl	8000c38 <__aeabi_d2f>
 8001be6:	4603      	mov	r3, r0
 8001be8:	61bb      	str	r3, [r7, #24]
	  float Rt = (Vout * Rs) / (Vin - Vout);
 8001bea:	ed97 7a06 	vldr	s14, [r7, #24]
 8001bee:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001bf2:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001bf6:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8001bfa:	edd7 7a06 	vldr	s15, [r7, #24]
 8001bfe:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001c02:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001c06:	edc7 7a05 	vstr	s15, [r7, #20]
	  float temperature = (1/((1/298.15)+(log(Rt/R25)/beta_val))-272.5);
 8001c0a:	ed97 7a05 	vldr	s14, [r7, #20]
 8001c0e:	edd7 7a08 	vldr	s15, [r7, #32]
 8001c12:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001c16:	ee16 0a90 	vmov	r0, s13
 8001c1a:	f7fe fcbd 	bl	8000598 <__aeabi_f2d>
 8001c1e:	4602      	mov	r2, r0
 8001c20:	460b      	mov	r3, r1
 8001c22:	ec43 2b10 	vmov	d0, r2, r3
 8001c26:	f00e fa4f 	bl	80100c8 <log>
 8001c2a:	ec55 4b10 	vmov	r4, r5, d0
 8001c2e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8001c30:	f7fe fcb2 	bl	8000598 <__aeabi_f2d>
 8001c34:	4602      	mov	r2, r0
 8001c36:	460b      	mov	r3, r1
 8001c38:	4620      	mov	r0, r4
 8001c3a:	4629      	mov	r1, r5
 8001c3c:	f7fe fe2e 	bl	800089c <__aeabi_ddiv>
 8001c40:	4602      	mov	r2, r0
 8001c42:	460b      	mov	r3, r1
 8001c44:	4610      	mov	r0, r2
 8001c46:	4619      	mov	r1, r3
 8001c48:	a337      	add	r3, pc, #220	@ (adr r3, 8001d28 <getTemp+0x1a8>)
 8001c4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c4e:	f7fe fb45 	bl	80002dc <__adddf3>
 8001c52:	4602      	mov	r2, r0
 8001c54:	460b      	mov	r3, r1
 8001c56:	f04f 0000 	mov.w	r0, #0
 8001c5a:	493b      	ldr	r1, [pc, #236]	@ (8001d48 <getTemp+0x1c8>)
 8001c5c:	f7fe fe1e 	bl	800089c <__aeabi_ddiv>
 8001c60:	4602      	mov	r2, r0
 8001c62:	460b      	mov	r3, r1
 8001c64:	4610      	mov	r0, r2
 8001c66:	4619      	mov	r1, r3
 8001c68:	a331      	add	r3, pc, #196	@ (adr r3, 8001d30 <getTemp+0x1b0>)
 8001c6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c6e:	f7fe fb33 	bl	80002d8 <__aeabi_dsub>
 8001c72:	4602      	mov	r2, r0
 8001c74:	460b      	mov	r3, r1
 8001c76:	4610      	mov	r0, r2
 8001c78:	4619      	mov	r1, r3
 8001c7a:	f7fe ffdd 	bl	8000c38 <__aeabi_d2f>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	613b      	str	r3, [r7, #16]

	//if(a == 1){
		//uint8_t temp1 = 28;
	    uint8_t temp1 = temperature;
 8001c82:	edd7 7a04 	vldr	s15, [r7, #16]
 8001c86:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001c8a:	edc7 7a00 	vstr	s15, [r7]
 8001c8e:	783b      	ldrb	r3, [r7, #0]
 8001c90:	73fb      	strb	r3, [r7, #15]
		if(temp1>40){
		    //state = TEMPERATURE_ERROR;
		    //ERROR_FUNCTION(state);
		}
		temp1_arr[1] = temp1%10; 				//FIRST DIGIT(tens place)
 8001c92:	7bfa      	ldrb	r2, [r7, #15]
 8001c94:	4b2d      	ldr	r3, [pc, #180]	@ (8001d4c <getTemp+0x1cc>)
 8001c96:	fba3 1302 	umull	r1, r3, r3, r2
 8001c9a:	08d9      	lsrs	r1, r3, #3
 8001c9c:	460b      	mov	r3, r1
 8001c9e:	009b      	lsls	r3, r3, #2
 8001ca0:	440b      	add	r3, r1
 8001ca2:	005b      	lsls	r3, r3, #1
 8001ca4:	1ad3      	subs	r3, r2, r3
 8001ca6:	b2db      	uxtb	r3, r3
 8001ca8:	ee07 3a90 	vmov	s15, r3
 8001cac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001cb0:	4b27      	ldr	r3, [pc, #156]	@ (8001d50 <getTemp+0x1d0>)
 8001cb2:	edc3 7a01 	vstr	s15, [r3, #4]
 		temp1_arr[0] = temp1 - temp1_arr[1];	//SECOND DIGIT (one's place)
 8001cb6:	7bfb      	ldrb	r3, [r7, #15]
 8001cb8:	ee07 3a90 	vmov	s15, r3
 8001cbc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001cc0:	4b23      	ldr	r3, [pc, #140]	@ (8001d50 <getTemp+0x1d0>)
 8001cc2:	edd3 7a01 	vldr	s15, [r3, #4]
 8001cc6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001cca:	4b21      	ldr	r3, [pc, #132]	@ (8001d50 <getTemp+0x1d0>)
 8001ccc:	edc3 7a00 	vstr	s15, [r3]
		temp1_arr[0] = temp1_arr[0]/10;
 8001cd0:	4b1f      	ldr	r3, [pc, #124]	@ (8001d50 <getTemp+0x1d0>)
 8001cd2:	ed93 7a00 	vldr	s14, [r3]
 8001cd6:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8001cda:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001cde:	4b1c      	ldr	r3, [pc, #112]	@ (8001d50 <getTemp+0x1d0>)
 8001ce0:	edc3 7a00 	vstr	s15, [r3]

		temp1_arr[1] = temp1_arr[1] + '0';		//ASCII VALUE OF RESP DEC VALUE TAKEN
 8001ce4:	4b1a      	ldr	r3, [pc, #104]	@ (8001d50 <getTemp+0x1d0>)
 8001ce6:	edd3 7a01 	vldr	s15, [r3, #4]
 8001cea:	ed9f 7a1a 	vldr	s14, [pc, #104]	@ 8001d54 <getTemp+0x1d4>
 8001cee:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001cf2:	4b17      	ldr	r3, [pc, #92]	@ (8001d50 <getTemp+0x1d0>)
 8001cf4:	edc3 7a01 	vstr	s15, [r3, #4]
		temp1_arr[0] = temp1_arr[0] + '0';
 8001cf8:	4b15      	ldr	r3, [pc, #84]	@ (8001d50 <getTemp+0x1d0>)
 8001cfa:	edd3 7a00 	vldr	s15, [r3]
 8001cfe:	ed9f 7a15 	vldr	s14, [pc, #84]	@ 8001d54 <getTemp+0x1d4>
 8001d02:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001d06:	4b12      	ldr	r3, [pc, #72]	@ (8001d50 <getTemp+0x1d0>)
 8001d08:	edc3 7a00 	vstr	s15, [r3]
//			case 9:state[b] = TEMPERATURE_ERROR10;break;
//			case 10:state[b] = TEMPERATURE_ERROR11;break;
//			case 11:state[b] = TEMPERATURE_ERROR12;break;
//			}
//		}else{state[b] = ALL_GOOD;}
		return temp1;
 8001d0c:	7bfb      	ldrb	r3, [r7, #15]
 8001d0e:	ee07 3a90 	vmov	s15, r3
 8001d12:	eef8 7a67 	vcvt.f32.u32	s15, s15

}
 8001d16:	eeb0 0a67 	vmov.f32	s0, s15
 8001d1a:	3730      	adds	r7, #48	@ 0x30
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bdb0      	pop	{r4, r5, r7, pc}
 8001d20:	00000000 	.word	0x00000000
 8001d24:	40affe00 	.word	0x40affe00
 8001d28:	dcb5db83 	.word	0xdcb5db83
 8001d2c:	3f6b79e1 	.word	0x3f6b79e1
 8001d30:	00000000 	.word	0x00000000
 8001d34:	40710800 	.word	0x40710800
 8001d38:	45868066 	.word	0x45868066
 8001d3c:	40a00000 	.word	0x40a00000
 8001d40:	469c4000 	.word	0x469c4000
 8001d44:	46fff400 	.word	0x46fff400
 8001d48:	3ff00000 	.word	0x3ff00000
 8001d4c:	cccccccd 	.word	0xcccccccd
 8001d50:	20000824 	.word	0x20000824
 8001d54:	42400000 	.word	0x42400000

08001d58 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b084      	sub	sp, #16
 8001d5c:	af02      	add	r7, sp, #8
 8001d5e:	6078      	str	r0, [r7, #4]

  /* Infinite loop */
  for(;;)
  {

	  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_val, 8);
 8001d60:	2208      	movs	r2, #8
 8001d62:	4913      	ldr	r1, [pc, #76]	@ (8001db0 <StartDefaultTask+0x58>)
 8001d64:	4813      	ldr	r0, [pc, #76]	@ (8001db4 <StartDefaultTask+0x5c>)
 8001d66:	f001 fc51 	bl	800360c <HAL_ADC_Start_DMA>
	  	HAL_ADC_Start_DMA(&hadc2, (uint32_t*)adc_val2, 2);
 8001d6a:	2202      	movs	r2, #2
 8001d6c:	4912      	ldr	r1, [pc, #72]	@ (8001db8 <StartDefaultTask+0x60>)
 8001d6e:	4813      	ldr	r0, [pc, #76]	@ (8001dbc <StartDefaultTask+0x64>)
 8001d70:	f001 fc4c 	bl	800360c <HAL_ADC_Start_DMA>
	  	HAL_ADC_Start_IT(&hadc3);
 8001d74:	4812      	ldr	r0, [pc, #72]	@ (8001dc0 <StartDefaultTask+0x68>)
 8001d76:	f001 faf1 	bl	800335c <HAL_ADC_Start_IT>
	  	HAL_ADC_Start_IT(&hadc5);
 8001d7a:	4812      	ldr	r0, [pc, #72]	@ (8001dc4 <StartDefaultTask+0x6c>)
 8001d7c:	f001 faee 	bl	800335c <HAL_ADC_Start_IT>

	  	if (HAL_SPI_TransmitReceive(&hspi1, txDummy, HV_Rxdata, sizeof(HV_Rxdata), HAL_MAX_DELAY) == HAL_OK)
 8001d80:	f04f 33ff 	mov.w	r3, #4294967295
 8001d84:	9300      	str	r3, [sp, #0]
 8001d86:	2334      	movs	r3, #52	@ 0x34
 8001d88:	4a0f      	ldr	r2, [pc, #60]	@ (8001dc8 <StartDefaultTask+0x70>)
 8001d8a:	4910      	ldr	r1, [pc, #64]	@ (8001dcc <StartDefaultTask+0x74>)
 8001d8c:	4810      	ldr	r0, [pc, #64]	@ (8001dd0 <StartDefaultTask+0x78>)
 8001d8e:	f004 fd02 	bl	8006796 <HAL_SPI_TransmitReceive>
 8001d92:	4603      	mov	r3, r0
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d104      	bne.n	8001da2 <StartDefaultTask+0x4a>
	  	{
	  		l++;
 8001d98:	4b0e      	ldr	r3, [pc, #56]	@ (8001dd4 <StartDefaultTask+0x7c>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	3301      	adds	r3, #1
 8001d9e:	4a0d      	ldr	r2, [pc, #52]	@ (8001dd4 <StartDefaultTask+0x7c>)
 8001da0:	6013      	str	r3, [r2, #0]
	  	}
	  a++;
 8001da2:	4b0d      	ldr	r3, [pc, #52]	@ (8001dd8 <StartDefaultTask+0x80>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	3301      	adds	r3, #1
 8001da8:	4a0b      	ldr	r2, [pc, #44]	@ (8001dd8 <StartDefaultTask+0x80>)
 8001daa:	6013      	str	r3, [r2, #0]
	  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_val, 8);
 8001dac:	e7d8      	b.n	8001d60 <StartDefaultTask+0x8>
 8001dae:	bf00      	nop
 8001db0:	200006e4 	.word	0x200006e4
 8001db4:	200001f4 	.word	0x200001f4
 8001db8:	200006f4 	.word	0x200006f4
 8001dbc:	20000260 	.word	0x20000260
 8001dc0:	200002cc 	.word	0x200002cc
 8001dc4:	20000338 	.word	0x20000338
 8001dc8:	20000758 	.word	0x20000758
 8001dcc:	2000078c 	.word	0x2000078c
 8001dd0:	20000464 	.word	0x20000464
 8001dd4:	200006d0 	.word	0x200006d0
 8001dd8:	200006c0 	.word	0x200006c0

08001ddc <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void const * argument)
{
 8001ddc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001de0:	b0a8      	sub	sp, #160	@ 0xa0
 8001de2:	af16      	add	r7, sp, #88	@ 0x58
 8001de4:	6478      	str	r0, [r7, #68]	@ 0x44
  /* USER CODE BEGIN StartTask02 */

  /* Infinite loop */
  for(;;)
  {
	      Temp[0] = getTemp(adc_val[0],1);
 8001de6:	4b94      	ldr	r3, [pc, #592]	@ (8002038 <StartTask02+0x25c>)
 8001de8:	881b      	ldrh	r3, [r3, #0]
 8001dea:	b2db      	uxtb	r3, r3
 8001dec:	2101      	movs	r1, #1
 8001dee:	4618      	mov	r0, r3
 8001df0:	f7ff fec6 	bl	8001b80 <getTemp>
 8001df4:	eef0 7a40 	vmov.f32	s15, s0
 8001df8:	4b90      	ldr	r3, [pc, #576]	@ (800203c <StartTask02+0x260>)
 8001dfa:	edc3 7a00 	vstr	s15, [r3]
	  	  Temp[1] = getTemp(adc_val[1],2);
 8001dfe:	4b8e      	ldr	r3, [pc, #568]	@ (8002038 <StartTask02+0x25c>)
 8001e00:	885b      	ldrh	r3, [r3, #2]
 8001e02:	b2db      	uxtb	r3, r3
 8001e04:	2102      	movs	r1, #2
 8001e06:	4618      	mov	r0, r3
 8001e08:	f7ff feba 	bl	8001b80 <getTemp>
 8001e0c:	eef0 7a40 	vmov.f32	s15, s0
 8001e10:	4b8a      	ldr	r3, [pc, #552]	@ (800203c <StartTask02+0x260>)
 8001e12:	edc3 7a01 	vstr	s15, [r3, #4]
	  	  Temp[2] = getTemp(adc_val[2],3);
 8001e16:	4b88      	ldr	r3, [pc, #544]	@ (8002038 <StartTask02+0x25c>)
 8001e18:	889b      	ldrh	r3, [r3, #4]
 8001e1a:	b2db      	uxtb	r3, r3
 8001e1c:	2103      	movs	r1, #3
 8001e1e:	4618      	mov	r0, r3
 8001e20:	f7ff feae 	bl	8001b80 <getTemp>
 8001e24:	eef0 7a40 	vmov.f32	s15, s0
 8001e28:	4b84      	ldr	r3, [pc, #528]	@ (800203c <StartTask02+0x260>)
 8001e2a:	edc3 7a02 	vstr	s15, [r3, #8]
	  	  Temp[3] = getTemp(adc_val[3],4);
 8001e2e:	4b82      	ldr	r3, [pc, #520]	@ (8002038 <StartTask02+0x25c>)
 8001e30:	88db      	ldrh	r3, [r3, #6]
 8001e32:	b2db      	uxtb	r3, r3
 8001e34:	2104      	movs	r1, #4
 8001e36:	4618      	mov	r0, r3
 8001e38:	f7ff fea2 	bl	8001b80 <getTemp>
 8001e3c:	eef0 7a40 	vmov.f32	s15, s0
 8001e40:	4b7e      	ldr	r3, [pc, #504]	@ (800203c <StartTask02+0x260>)
 8001e42:	edc3 7a03 	vstr	s15, [r3, #12]
	  	  Temp[4] = getTemp(adc_val[4],5);
 8001e46:	4b7c      	ldr	r3, [pc, #496]	@ (8002038 <StartTask02+0x25c>)
 8001e48:	891b      	ldrh	r3, [r3, #8]
 8001e4a:	b2db      	uxtb	r3, r3
 8001e4c:	2105      	movs	r1, #5
 8001e4e:	4618      	mov	r0, r3
 8001e50:	f7ff fe96 	bl	8001b80 <getTemp>
 8001e54:	eef0 7a40 	vmov.f32	s15, s0
 8001e58:	4b78      	ldr	r3, [pc, #480]	@ (800203c <StartTask02+0x260>)
 8001e5a:	edc3 7a04 	vstr	s15, [r3, #16]
	  	  Temp[5] = getTemp(adc_val[5],6);
 8001e5e:	4b76      	ldr	r3, [pc, #472]	@ (8002038 <StartTask02+0x25c>)
 8001e60:	895b      	ldrh	r3, [r3, #10]
 8001e62:	b2db      	uxtb	r3, r3
 8001e64:	2106      	movs	r1, #6
 8001e66:	4618      	mov	r0, r3
 8001e68:	f7ff fe8a 	bl	8001b80 <getTemp>
 8001e6c:	eef0 7a40 	vmov.f32	s15, s0
 8001e70:	4b72      	ldr	r3, [pc, #456]	@ (800203c <StartTask02+0x260>)
 8001e72:	edc3 7a05 	vstr	s15, [r3, #20]
	  	  Temp[6] = getTemp(adc_val[6],7);
 8001e76:	4b70      	ldr	r3, [pc, #448]	@ (8002038 <StartTask02+0x25c>)
 8001e78:	899b      	ldrh	r3, [r3, #12]
 8001e7a:	b2db      	uxtb	r3, r3
 8001e7c:	2107      	movs	r1, #7
 8001e7e:	4618      	mov	r0, r3
 8001e80:	f7ff fe7e 	bl	8001b80 <getTemp>
 8001e84:	eef0 7a40 	vmov.f32	s15, s0
 8001e88:	4b6c      	ldr	r3, [pc, #432]	@ (800203c <StartTask02+0x260>)
 8001e8a:	edc3 7a06 	vstr	s15, [r3, #24]
	  	  Temp[7] = getTemp(adc_val[7],8);
 8001e8e:	4b6a      	ldr	r3, [pc, #424]	@ (8002038 <StartTask02+0x25c>)
 8001e90:	89db      	ldrh	r3, [r3, #14]
 8001e92:	b2db      	uxtb	r3, r3
 8001e94:	2108      	movs	r1, #8
 8001e96:	4618      	mov	r0, r3
 8001e98:	f7ff fe72 	bl	8001b80 <getTemp>
 8001e9c:	eef0 7a40 	vmov.f32	s15, s0
 8001ea0:	4b66      	ldr	r3, [pc, #408]	@ (800203c <StartTask02+0x260>)
 8001ea2:	edc3 7a07 	vstr	s15, [r3, #28]
	  	  Temp[8] = getTemp(adc_val2[0],9);
 8001ea6:	4b66      	ldr	r3, [pc, #408]	@ (8002040 <StartTask02+0x264>)
 8001ea8:	881b      	ldrh	r3, [r3, #0]
 8001eaa:	b2db      	uxtb	r3, r3
 8001eac:	2109      	movs	r1, #9
 8001eae:	4618      	mov	r0, r3
 8001eb0:	f7ff fe66 	bl	8001b80 <getTemp>
 8001eb4:	eef0 7a40 	vmov.f32	s15, s0
 8001eb8:	4b60      	ldr	r3, [pc, #384]	@ (800203c <StartTask02+0x260>)
 8001eba:	edc3 7a08 	vstr	s15, [r3, #32]
	  	  Temp[9] = getTemp(adc_val2[1],10);
 8001ebe:	4b60      	ldr	r3, [pc, #384]	@ (8002040 <StartTask02+0x264>)
 8001ec0:	885b      	ldrh	r3, [r3, #2]
 8001ec2:	b2db      	uxtb	r3, r3
 8001ec4:	210a      	movs	r1, #10
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	f7ff fe5a 	bl	8001b80 <getTemp>
 8001ecc:	eef0 7a40 	vmov.f32	s15, s0
 8001ed0:	4b5a      	ldr	r3, [pc, #360]	@ (800203c <StartTask02+0x260>)
 8001ed2:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
	  	  Temp[10] = getTemp(adc_val3,11);
 8001ed6:	4b5b      	ldr	r3, [pc, #364]	@ (8002044 <StartTask02+0x268>)
 8001ed8:	881b      	ldrh	r3, [r3, #0]
 8001eda:	b2db      	uxtb	r3, r3
 8001edc:	210b      	movs	r1, #11
 8001ede:	4618      	mov	r0, r3
 8001ee0:	f7ff fe4e 	bl	8001b80 <getTemp>
 8001ee4:	eef0 7a40 	vmov.f32	s15, s0
 8001ee8:	4b54      	ldr	r3, [pc, #336]	@ (800203c <StartTask02+0x260>)
 8001eea:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
	  	  Temp[11] = getTemp(adc_val5,12);
 8001eee:	4b56      	ldr	r3, [pc, #344]	@ (8002048 <StartTask02+0x26c>)
 8001ef0:	881b      	ldrh	r3, [r3, #0]
 8001ef2:	b2db      	uxtb	r3, r3
 8001ef4:	210c      	movs	r1, #12
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	f7ff fe42 	bl	8001b80 <getTemp>
 8001efc:	eef0 7a40 	vmov.f32	s15, s0
 8001f00:	4b4e      	ldr	r3, [pc, #312]	@ (800203c <StartTask02+0x260>)
 8001f02:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c


	  	sprintf(txdata,"{%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f}", Temp[0],Temp[1],Temp[2],Temp[3], Temp[4],Temp[5],Temp[6],Temp[7], Temp[8],Temp[9],Temp[10],Temp[11]);
 8001f06:	4b4d      	ldr	r3, [pc, #308]	@ (800203c <StartTask02+0x260>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	f7fe fb44 	bl	8000598 <__aeabi_f2d>
 8001f10:	e9c7 010e 	strd	r0, r1, [r7, #56]	@ 0x38
 8001f14:	4b49      	ldr	r3, [pc, #292]	@ (800203c <StartTask02+0x260>)
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	4618      	mov	r0, r3
 8001f1a:	f7fe fb3d 	bl	8000598 <__aeabi_f2d>
 8001f1e:	e9c7 010c 	strd	r0, r1, [r7, #48]	@ 0x30
 8001f22:	4b46      	ldr	r3, [pc, #280]	@ (800203c <StartTask02+0x260>)
 8001f24:	689b      	ldr	r3, [r3, #8]
 8001f26:	4618      	mov	r0, r3
 8001f28:	f7fe fb36 	bl	8000598 <__aeabi_f2d>
 8001f2c:	e9c7 010a 	strd	r0, r1, [r7, #40]	@ 0x28
 8001f30:	4b42      	ldr	r3, [pc, #264]	@ (800203c <StartTask02+0x260>)
 8001f32:	68db      	ldr	r3, [r3, #12]
 8001f34:	4618      	mov	r0, r3
 8001f36:	f7fe fb2f 	bl	8000598 <__aeabi_f2d>
 8001f3a:	e9c7 0108 	strd	r0, r1, [r7, #32]
 8001f3e:	4b3f      	ldr	r3, [pc, #252]	@ (800203c <StartTask02+0x260>)
 8001f40:	691b      	ldr	r3, [r3, #16]
 8001f42:	4618      	mov	r0, r3
 8001f44:	f7fe fb28 	bl	8000598 <__aeabi_f2d>
 8001f48:	e9c7 0106 	strd	r0, r1, [r7, #24]
 8001f4c:	4b3b      	ldr	r3, [pc, #236]	@ (800203c <StartTask02+0x260>)
 8001f4e:	695b      	ldr	r3, [r3, #20]
 8001f50:	4618      	mov	r0, r3
 8001f52:	f7fe fb21 	bl	8000598 <__aeabi_f2d>
 8001f56:	e9c7 0104 	strd	r0, r1, [r7, #16]
 8001f5a:	4b38      	ldr	r3, [pc, #224]	@ (800203c <StartTask02+0x260>)
 8001f5c:	699b      	ldr	r3, [r3, #24]
 8001f5e:	4618      	mov	r0, r3
 8001f60:	f7fe fb1a 	bl	8000598 <__aeabi_f2d>
 8001f64:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8001f68:	4b34      	ldr	r3, [pc, #208]	@ (800203c <StartTask02+0x260>)
 8001f6a:	69db      	ldr	r3, [r3, #28]
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	f7fe fb13 	bl	8000598 <__aeabi_f2d>
 8001f72:	e9c7 0100 	strd	r0, r1, [r7]
 8001f76:	4b31      	ldr	r3, [pc, #196]	@ (800203c <StartTask02+0x260>)
 8001f78:	6a1b      	ldr	r3, [r3, #32]
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	f7fe fb0c 	bl	8000598 <__aeabi_f2d>
 8001f80:	4682      	mov	sl, r0
 8001f82:	468b      	mov	fp, r1
 8001f84:	4b2d      	ldr	r3, [pc, #180]	@ (800203c <StartTask02+0x260>)
 8001f86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f88:	4618      	mov	r0, r3
 8001f8a:	f7fe fb05 	bl	8000598 <__aeabi_f2d>
 8001f8e:	4680      	mov	r8, r0
 8001f90:	4689      	mov	r9, r1
 8001f92:	4b2a      	ldr	r3, [pc, #168]	@ (800203c <StartTask02+0x260>)
 8001f94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f96:	4618      	mov	r0, r3
 8001f98:	f7fe fafe 	bl	8000598 <__aeabi_f2d>
 8001f9c:	4604      	mov	r4, r0
 8001f9e:	460d      	mov	r5, r1
 8001fa0:	4b26      	ldr	r3, [pc, #152]	@ (800203c <StartTask02+0x260>)
 8001fa2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	f7fe faf7 	bl	8000598 <__aeabi_f2d>
 8001faa:	4602      	mov	r2, r0
 8001fac:	460b      	mov	r3, r1
 8001fae:	e9cd 2314 	strd	r2, r3, [sp, #80]	@ 0x50
 8001fb2:	e9cd 4512 	strd	r4, r5, [sp, #72]	@ 0x48
 8001fb6:	e9cd 8910 	strd	r8, r9, [sp, #64]	@ 0x40
 8001fba:	e9cd ab0e 	strd	sl, fp, [sp, #56]	@ 0x38
 8001fbe:	ed97 7b00 	vldr	d7, [r7]
 8001fc2:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8001fc6:	ed97 7b02 	vldr	d7, [r7, #8]
 8001fca:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8001fce:	ed97 7b04 	vldr	d7, [r7, #16]
 8001fd2:	ed8d 7b08 	vstr	d7, [sp, #32]
 8001fd6:	ed97 7b06 	vldr	d7, [r7, #24]
 8001fda:	ed8d 7b06 	vstr	d7, [sp, #24]
 8001fde:	ed97 7b08 	vldr	d7, [r7, #32]
 8001fe2:	ed8d 7b04 	vstr	d7, [sp, #16]
 8001fe6:	ed97 7b0a 	vldr	d7, [r7, #40]	@ 0x28
 8001fea:	ed8d 7b02 	vstr	d7, [sp, #8]
 8001fee:	ed97 7b0c 	vldr	d7, [r7, #48]	@ 0x30
 8001ff2:	ed8d 7b00 	vstr	d7, [sp]
 8001ff6:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8001ffa:	4914      	ldr	r1, [pc, #80]	@ (800204c <StartTask02+0x270>)
 8001ffc:	4814      	ldr	r0, [pc, #80]	@ (8002050 <StartTask02+0x274>)
 8001ffe:	f00b fa97 	bl	800d530 <siprintf>
	  e++;
 8002002:	4b14      	ldr	r3, [pc, #80]	@ (8002054 <StartTask02+0x278>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	3301      	adds	r3, #1
 8002008:	4a12      	ldr	r2, [pc, #72]	@ (8002054 <StartTask02+0x278>)
 800200a:	6013      	str	r3, [r2, #0]
	  strcpy(fin_tx, HV_Rxdata);
 800200c:	4912      	ldr	r1, [pc, #72]	@ (8002058 <StartTask02+0x27c>)
 800200e:	4813      	ldr	r0, [pc, #76]	@ (800205c <StartTask02+0x280>)
 8002010:	f00b fb93 	bl	800d73a <strcpy>
	  strcat(fin_tx, LV_Rxdata);
 8002014:	4912      	ldr	r1, [pc, #72]	@ (8002060 <StartTask02+0x284>)
 8002016:	4811      	ldr	r0, [pc, #68]	@ (800205c <StartTask02+0x280>)
 8002018:	f00b faf7 	bl	800d60a <strcat>
	  strcat(fin_tx, txdata);
 800201c:	490c      	ldr	r1, [pc, #48]	@ (8002050 <StartTask02+0x274>)
 800201e:	480f      	ldr	r0, [pc, #60]	@ (800205c <StartTask02+0x280>)
 8002020:	f00b faf3 	bl	800d60a <strcat>
	  osSemaphoreRelease(myBinarySem01Handle);
 8002024:	4b0f      	ldr	r3, [pc, #60]	@ (8002064 <StartTask02+0x288>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	4618      	mov	r0, r3
 800202a:	f007 fd33 	bl	8009a94 <osSemaphoreRelease>

    osDelay(1);
 800202e:	2001      	movs	r0, #1
 8002030:	f007 fcb0 	bl	8009994 <osDelay>
  {
 8002034:	bf00      	nop
 8002036:	e6d6      	b.n	8001de6 <StartTask02+0xa>
 8002038:	200006e4 	.word	0x200006e4
 800203c:	200007f4 	.word	0x200007f4
 8002040:	200006f4 	.word	0x200006f4
 8002044:	200006f8 	.word	0x200006f8
 8002048:	200006fa 	.word	0x200006fa
 800204c:	08010530 	.word	0x08010530
 8002050:	200006fc 	.word	0x200006fc
 8002054:	200006c4 	.word	0x200006c4
 8002058:	20000758 	.word	0x20000758
 800205c:	20000830 	.word	0x20000830
 8002060:	20000724 	.word	0x20000724
 8002064:	200006bc 	.word	0x200006bc

08002068 <StartTask03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask03 */
void StartTask03(void const * argument)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b082      	sub	sp, #8
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask03 */
  /* Infinite loop */
  for(;;)
  {
	  if (osSemaphoreWait(myBinarySem01Handle, osWaitForever) == osOK){
 8002070:	4b0a      	ldr	r3, [pc, #40]	@ (800209c <StartTask03+0x34>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f04f 31ff 	mov.w	r1, #4294967295
 8002078:	4618      	mov	r0, r3
 800207a:	f007 fcbd 	bl	80099f8 <osSemaphoreWait>
 800207e:	4603      	mov	r3, r0
 8002080:	2b00      	cmp	r3, #0
 8002082:	d1f5      	bne.n	8002070 <StartTask03+0x8>
	  HAL_UART_Transmit_IT(&huart3, fin_tx, sizeof(fin_tx));
 8002084:	22c8      	movs	r2, #200	@ 0xc8
 8002086:	4906      	ldr	r1, [pc, #24]	@ (80020a0 <StartTask03+0x38>)
 8002088:	4806      	ldr	r0, [pc, #24]	@ (80020a4 <StartTask03+0x3c>)
 800208a:	f004 ff57 	bl	8006f3c <HAL_UART_Transmit_IT>
	  k++;
 800208e:	4b06      	ldr	r3, [pc, #24]	@ (80020a8 <StartTask03+0x40>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	3301      	adds	r3, #1
 8002094:	4a04      	ldr	r2, [pc, #16]	@ (80020a8 <StartTask03+0x40>)
 8002096:	6013      	str	r3, [r2, #0]
	  if (osSemaphoreWait(myBinarySem01Handle, osWaitForever) == osOK){
 8002098:	e7ea      	b.n	8002070 <StartTask03+0x8>
 800209a:	bf00      	nop
 800209c:	200006bc 	.word	0x200006bc
 80020a0:	20000830 	.word	0x20000830
 80020a4:	2000055c 	.word	0x2000055c
 80020a8:	200006cc 	.word	0x200006cc

080020ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80020ac:	b480      	push	{r7}
 80020ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80020b0:	b672      	cpsid	i
}
 80020b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80020b4:	bf00      	nop
 80020b6:	e7fd      	b.n	80020b4 <Error_Handler+0x8>

080020b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b082      	sub	sp, #8
 80020bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020be:	4b12      	ldr	r3, [pc, #72]	@ (8002108 <HAL_MspInit+0x50>)
 80020c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80020c2:	4a11      	ldr	r2, [pc, #68]	@ (8002108 <HAL_MspInit+0x50>)
 80020c4:	f043 0301 	orr.w	r3, r3, #1
 80020c8:	6613      	str	r3, [r2, #96]	@ 0x60
 80020ca:	4b0f      	ldr	r3, [pc, #60]	@ (8002108 <HAL_MspInit+0x50>)
 80020cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80020ce:	f003 0301 	and.w	r3, r3, #1
 80020d2:	607b      	str	r3, [r7, #4]
 80020d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80020d6:	4b0c      	ldr	r3, [pc, #48]	@ (8002108 <HAL_MspInit+0x50>)
 80020d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020da:	4a0b      	ldr	r2, [pc, #44]	@ (8002108 <HAL_MspInit+0x50>)
 80020dc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80020e0:	6593      	str	r3, [r2, #88]	@ 0x58
 80020e2:	4b09      	ldr	r3, [pc, #36]	@ (8002108 <HAL_MspInit+0x50>)
 80020e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020ea:	603b      	str	r3, [r7, #0]
 80020ec:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80020ee:	2200      	movs	r2, #0
 80020f0:	210f      	movs	r1, #15
 80020f2:	f06f 0001 	mvn.w	r0, #1
 80020f6:	f002 fd8e 	bl	8004c16 <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80020fa:	f003 fb19 	bl	8005730 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80020fe:	bf00      	nop
 8002100:	3708      	adds	r7, #8
 8002102:	46bd      	mov	sp, r7
 8002104:	bd80      	pop	{r7, pc}
 8002106:	bf00      	nop
 8002108:	40021000 	.word	0x40021000

0800210c <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b0a8      	sub	sp, #160	@ 0xa0
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002114:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8002118:	2200      	movs	r2, #0
 800211a:	601a      	str	r2, [r3, #0]
 800211c:	605a      	str	r2, [r3, #4]
 800211e:	609a      	str	r2, [r3, #8]
 8002120:	60da      	str	r2, [r3, #12]
 8002122:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002124:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002128:	2254      	movs	r2, #84	@ 0x54
 800212a:	2100      	movs	r1, #0
 800212c:	4618      	mov	r0, r3
 800212e:	f00b fa64 	bl	800d5fa <memset>
  if(hadc->Instance==ADC1)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800213a:	f040 80a4 	bne.w	8002286 <HAL_ADC_MspInit+0x17a>

    /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 800213e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002142:	63bb      	str	r3, [r7, #56]	@ 0x38
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8002144:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8002148:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800214a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800214e:	4618      	mov	r0, r3
 8002150:	f004 f828 	bl	80061a4 <HAL_RCCEx_PeriphCLKConfig>
 8002154:	4603      	mov	r3, r0
 8002156:	2b00      	cmp	r3, #0
 8002158:	d001      	beq.n	800215e <HAL_ADC_MspInit+0x52>
    {
      Error_Handler();
 800215a:	f7ff ffa7 	bl	80020ac <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 800215e:	4b91      	ldr	r3, [pc, #580]	@ (80023a4 <HAL_ADC_MspInit+0x298>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	3301      	adds	r3, #1
 8002164:	4a8f      	ldr	r2, [pc, #572]	@ (80023a4 <HAL_ADC_MspInit+0x298>)
 8002166:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8002168:	4b8e      	ldr	r3, [pc, #568]	@ (80023a4 <HAL_ADC_MspInit+0x298>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	2b01      	cmp	r3, #1
 800216e:	d10b      	bne.n	8002188 <HAL_ADC_MspInit+0x7c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8002170:	4b8d      	ldr	r3, [pc, #564]	@ (80023a8 <HAL_ADC_MspInit+0x29c>)
 8002172:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002174:	4a8c      	ldr	r2, [pc, #560]	@ (80023a8 <HAL_ADC_MspInit+0x29c>)
 8002176:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800217a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800217c:	4b8a      	ldr	r3, [pc, #552]	@ (80023a8 <HAL_ADC_MspInit+0x29c>)
 800217e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002180:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002184:	637b      	str	r3, [r7, #52]	@ 0x34
 8002186:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002188:	4b87      	ldr	r3, [pc, #540]	@ (80023a8 <HAL_ADC_MspInit+0x29c>)
 800218a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800218c:	4a86      	ldr	r2, [pc, #536]	@ (80023a8 <HAL_ADC_MspInit+0x29c>)
 800218e:	f043 0304 	orr.w	r3, r3, #4
 8002192:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002194:	4b84      	ldr	r3, [pc, #528]	@ (80023a8 <HAL_ADC_MspInit+0x29c>)
 8002196:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002198:	f003 0304 	and.w	r3, r3, #4
 800219c:	633b      	str	r3, [r7, #48]	@ 0x30
 800219e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021a0:	4b81      	ldr	r3, [pc, #516]	@ (80023a8 <HAL_ADC_MspInit+0x29c>)
 80021a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021a4:	4a80      	ldr	r2, [pc, #512]	@ (80023a8 <HAL_ADC_MspInit+0x29c>)
 80021a6:	f043 0301 	orr.w	r3, r3, #1
 80021aa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80021ac:	4b7e      	ldr	r3, [pc, #504]	@ (80023a8 <HAL_ADC_MspInit+0x29c>)
 80021ae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021b0:	f003 0301 	and.w	r3, r3, #1
 80021b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80021b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021b8:	4b7b      	ldr	r3, [pc, #492]	@ (80023a8 <HAL_ADC_MspInit+0x29c>)
 80021ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021bc:	4a7a      	ldr	r2, [pc, #488]	@ (80023a8 <HAL_ADC_MspInit+0x29c>)
 80021be:	f043 0302 	orr.w	r3, r3, #2
 80021c2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80021c4:	4b78      	ldr	r3, [pc, #480]	@ (80023a8 <HAL_ADC_MspInit+0x29c>)
 80021c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021c8:	f003 0302 	and.w	r3, r3, #2
 80021cc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80021ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    PB12     ------> ADC1_IN11
    PB14     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80021d0:	230f      	movs	r3, #15
 80021d2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80021d6:	2303      	movs	r3, #3
 80021d8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021dc:	2300      	movs	r3, #0
 80021de:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80021e2:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 80021e6:	4619      	mov	r1, r3
 80021e8:	4870      	ldr	r0, [pc, #448]	@ (80023ac <HAL_ADC_MspInit+0x2a0>)
 80021ea:	f003 f87b 	bl	80052e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80021ee:	2303      	movs	r3, #3
 80021f0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80021f4:	2303      	movs	r3, #3
 80021f6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021fa:	2300      	movs	r3, #0
 80021fc:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002200:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8002204:	4619      	mov	r1, r3
 8002206:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800220a:	f003 f86b 	bl	80052e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_14;
 800220e:	f44f 43a0 	mov.w	r3, #20480	@ 0x5000
 8002212:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002216:	2303      	movs	r3, #3
 8002218:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800221c:	2300      	movs	r3, #0
 800221e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002222:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8002226:	4619      	mov	r1, r3
 8002228:	4861      	ldr	r0, [pc, #388]	@ (80023b0 <HAL_ADC_MspInit+0x2a4>)
 800222a:	f003 f85b 	bl	80052e4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800222e:	4b61      	ldr	r3, [pc, #388]	@ (80023b4 <HAL_ADC_MspInit+0x2a8>)
 8002230:	4a61      	ldr	r2, [pc, #388]	@ (80023b8 <HAL_ADC_MspInit+0x2ac>)
 8002232:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8002234:	4b5f      	ldr	r3, [pc, #380]	@ (80023b4 <HAL_ADC_MspInit+0x2a8>)
 8002236:	2205      	movs	r2, #5
 8002238:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800223a:	4b5e      	ldr	r3, [pc, #376]	@ (80023b4 <HAL_ADC_MspInit+0x2a8>)
 800223c:	2200      	movs	r2, #0
 800223e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002240:	4b5c      	ldr	r3, [pc, #368]	@ (80023b4 <HAL_ADC_MspInit+0x2a8>)
 8002242:	2200      	movs	r2, #0
 8002244:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002246:	4b5b      	ldr	r3, [pc, #364]	@ (80023b4 <HAL_ADC_MspInit+0x2a8>)
 8002248:	2280      	movs	r2, #128	@ 0x80
 800224a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800224c:	4b59      	ldr	r3, [pc, #356]	@ (80023b4 <HAL_ADC_MspInit+0x2a8>)
 800224e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002252:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002254:	4b57      	ldr	r3, [pc, #348]	@ (80023b4 <HAL_ADC_MspInit+0x2a8>)
 8002256:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800225a:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 800225c:	4b55      	ldr	r3, [pc, #340]	@ (80023b4 <HAL_ADC_MspInit+0x2a8>)
 800225e:	2200      	movs	r2, #0
 8002260:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002262:	4b54      	ldr	r3, [pc, #336]	@ (80023b4 <HAL_ADC_MspInit+0x2a8>)
 8002264:	2200      	movs	r2, #0
 8002266:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002268:	4852      	ldr	r0, [pc, #328]	@ (80023b4 <HAL_ADC_MspInit+0x2a8>)
 800226a:	f002 fd09 	bl	8004c80 <HAL_DMA_Init>
 800226e:	4603      	mov	r3, r0
 8002270:	2b00      	cmp	r3, #0
 8002272:	d001      	beq.n	8002278 <HAL_ADC_MspInit+0x16c>
    {
      Error_Handler();
 8002274:	f7ff ff1a 	bl	80020ac <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	4a4e      	ldr	r2, [pc, #312]	@ (80023b4 <HAL_ADC_MspInit+0x2a8>)
 800227c:	655a      	str	r2, [r3, #84]	@ 0x54
 800227e:	4a4d      	ldr	r2, [pc, #308]	@ (80023b4 <HAL_ADC_MspInit+0x2a8>)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	6293      	str	r3, [r2, #40]	@ 0x28
    /* USER CODE BEGIN ADC5_MspInit 1 */

    /* USER CODE END ADC5_MspInit 1 */
  }

}
 8002284:	e140      	b.n	8002508 <HAL_ADC_MspInit+0x3fc>
  else if(hadc->Instance==ADC2)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	4a4c      	ldr	r2, [pc, #304]	@ (80023bc <HAL_ADC_MspInit+0x2b0>)
 800228c:	4293      	cmp	r3, r2
 800228e:	f040 809b 	bne.w	80023c8 <HAL_ADC_MspInit+0x2bc>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8002292:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002296:	63bb      	str	r3, [r7, #56]	@ 0x38
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8002298:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800229c:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800229e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80022a2:	4618      	mov	r0, r3
 80022a4:	f003 ff7e 	bl	80061a4 <HAL_RCCEx_PeriphCLKConfig>
 80022a8:	4603      	mov	r3, r0
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d001      	beq.n	80022b2 <HAL_ADC_MspInit+0x1a6>
      Error_Handler();
 80022ae:	f7ff fefd 	bl	80020ac <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 80022b2:	4b3c      	ldr	r3, [pc, #240]	@ (80023a4 <HAL_ADC_MspInit+0x298>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	3301      	adds	r3, #1
 80022b8:	4a3a      	ldr	r2, [pc, #232]	@ (80023a4 <HAL_ADC_MspInit+0x298>)
 80022ba:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80022bc:	4b39      	ldr	r3, [pc, #228]	@ (80023a4 <HAL_ADC_MspInit+0x298>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	2b01      	cmp	r3, #1
 80022c2:	d10b      	bne.n	80022dc <HAL_ADC_MspInit+0x1d0>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80022c4:	4b38      	ldr	r3, [pc, #224]	@ (80023a8 <HAL_ADC_MspInit+0x29c>)
 80022c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022c8:	4a37      	ldr	r2, [pc, #220]	@ (80023a8 <HAL_ADC_MspInit+0x29c>)
 80022ca:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80022ce:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80022d0:	4b35      	ldr	r3, [pc, #212]	@ (80023a8 <HAL_ADC_MspInit+0x29c>)
 80022d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022d4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80022d8:	627b      	str	r3, [r7, #36]	@ 0x24
 80022da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022dc:	4b32      	ldr	r3, [pc, #200]	@ (80023a8 <HAL_ADC_MspInit+0x29c>)
 80022de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022e0:	4a31      	ldr	r2, [pc, #196]	@ (80023a8 <HAL_ADC_MspInit+0x29c>)
 80022e2:	f043 0301 	orr.w	r3, r3, #1
 80022e6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80022e8:	4b2f      	ldr	r3, [pc, #188]	@ (80023a8 <HAL_ADC_MspInit+0x29c>)
 80022ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022ec:	f003 0301 	and.w	r3, r3, #1
 80022f0:	623b      	str	r3, [r7, #32]
 80022f2:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022f4:	4b2c      	ldr	r3, [pc, #176]	@ (80023a8 <HAL_ADC_MspInit+0x29c>)
 80022f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022f8:	4a2b      	ldr	r2, [pc, #172]	@ (80023a8 <HAL_ADC_MspInit+0x29c>)
 80022fa:	f043 0302 	orr.w	r3, r3, #2
 80022fe:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002300:	4b29      	ldr	r3, [pc, #164]	@ (80023a8 <HAL_ADC_MspInit+0x29c>)
 8002302:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002304:	f003 0302 	and.w	r3, r3, #2
 8002308:	61fb      	str	r3, [r7, #28]
 800230a:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800230c:	2340      	movs	r3, #64	@ 0x40
 800230e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002312:	2303      	movs	r3, #3
 8002314:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002318:	2300      	movs	r3, #0
 800231a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800231e:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8002322:	4619      	mov	r1, r3
 8002324:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002328:	f002 ffdc 	bl	80052e4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800232c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002330:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002334:	2303      	movs	r3, #3
 8002336:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800233a:	2300      	movs	r3, #0
 800233c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002340:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8002344:	4619      	mov	r1, r3
 8002346:	481a      	ldr	r0, [pc, #104]	@ (80023b0 <HAL_ADC_MspInit+0x2a4>)
 8002348:	f002 ffcc 	bl	80052e4 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA1_Channel2;
 800234c:	4b1c      	ldr	r3, [pc, #112]	@ (80023c0 <HAL_ADC_MspInit+0x2b4>)
 800234e:	4a1d      	ldr	r2, [pc, #116]	@ (80023c4 <HAL_ADC_MspInit+0x2b8>)
 8002350:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 8002352:	4b1b      	ldr	r3, [pc, #108]	@ (80023c0 <HAL_ADC_MspInit+0x2b4>)
 8002354:	2224      	movs	r2, #36	@ 0x24
 8002356:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002358:	4b19      	ldr	r3, [pc, #100]	@ (80023c0 <HAL_ADC_MspInit+0x2b4>)
 800235a:	2200      	movs	r2, #0
 800235c:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 800235e:	4b18      	ldr	r3, [pc, #96]	@ (80023c0 <HAL_ADC_MspInit+0x2b4>)
 8002360:	2200      	movs	r2, #0
 8002362:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8002364:	4b16      	ldr	r3, [pc, #88]	@ (80023c0 <HAL_ADC_MspInit+0x2b4>)
 8002366:	2280      	movs	r2, #128	@ 0x80
 8002368:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800236a:	4b15      	ldr	r3, [pc, #84]	@ (80023c0 <HAL_ADC_MspInit+0x2b4>)
 800236c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002370:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002372:	4b13      	ldr	r3, [pc, #76]	@ (80023c0 <HAL_ADC_MspInit+0x2b4>)
 8002374:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002378:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 800237a:	4b11      	ldr	r3, [pc, #68]	@ (80023c0 <HAL_ADC_MspInit+0x2b4>)
 800237c:	2220      	movs	r2, #32
 800237e:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8002380:	4b0f      	ldr	r3, [pc, #60]	@ (80023c0 <HAL_ADC_MspInit+0x2b4>)
 8002382:	2200      	movs	r2, #0
 8002384:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8002386:	480e      	ldr	r0, [pc, #56]	@ (80023c0 <HAL_ADC_MspInit+0x2b4>)
 8002388:	f002 fc7a 	bl	8004c80 <HAL_DMA_Init>
 800238c:	4603      	mov	r3, r0
 800238e:	2b00      	cmp	r3, #0
 8002390:	d001      	beq.n	8002396 <HAL_ADC_MspInit+0x28a>
      Error_Handler();
 8002392:	f7ff fe8b 	bl	80020ac <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	4a09      	ldr	r2, [pc, #36]	@ (80023c0 <HAL_ADC_MspInit+0x2b4>)
 800239a:	655a      	str	r2, [r3, #84]	@ 0x54
 800239c:	4a08      	ldr	r2, [pc, #32]	@ (80023c0 <HAL_ADC_MspInit+0x2b4>)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6293      	str	r3, [r2, #40]	@ 0x28
}
 80023a2:	e0b1      	b.n	8002508 <HAL_ADC_MspInit+0x3fc>
 80023a4:	2000090c 	.word	0x2000090c
 80023a8:	40021000 	.word	0x40021000
 80023ac:	48000800 	.word	0x48000800
 80023b0:	48000400 	.word	0x48000400
 80023b4:	200003a4 	.word	0x200003a4
 80023b8:	40020008 	.word	0x40020008
 80023bc:	50000100 	.word	0x50000100
 80023c0:	20000404 	.word	0x20000404
 80023c4:	4002001c 	.word	0x4002001c
  else if(hadc->Instance==ADC3)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	4a50      	ldr	r2, [pc, #320]	@ (8002510 <HAL_ADC_MspInit+0x404>)
 80023ce:	4293      	cmp	r3, r2
 80023d0:	d14a      	bne.n	8002468 <HAL_ADC_MspInit+0x35c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 80023d2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80023d6:	63bb      	str	r3, [r7, #56]	@ 0x38
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 80023d8:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80023dc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80023e0:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80023e4:	4618      	mov	r0, r3
 80023e6:	f003 fedd 	bl	80061a4 <HAL_RCCEx_PeriphCLKConfig>
 80023ea:	4603      	mov	r3, r0
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d001      	beq.n	80023f4 <HAL_ADC_MspInit+0x2e8>
      Error_Handler();
 80023f0:	f7ff fe5c 	bl	80020ac <Error_Handler>
    HAL_RCC_ADC345_CLK_ENABLED++;
 80023f4:	4b47      	ldr	r3, [pc, #284]	@ (8002514 <HAL_ADC_MspInit+0x408>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	3301      	adds	r3, #1
 80023fa:	4a46      	ldr	r2, [pc, #280]	@ (8002514 <HAL_ADC_MspInit+0x408>)
 80023fc:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 80023fe:	4b45      	ldr	r3, [pc, #276]	@ (8002514 <HAL_ADC_MspInit+0x408>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	2b01      	cmp	r3, #1
 8002404:	d10b      	bne.n	800241e <HAL_ADC_MspInit+0x312>
      __HAL_RCC_ADC345_CLK_ENABLE();
 8002406:	4b44      	ldr	r3, [pc, #272]	@ (8002518 <HAL_ADC_MspInit+0x40c>)
 8002408:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800240a:	4a43      	ldr	r2, [pc, #268]	@ (8002518 <HAL_ADC_MspInit+0x40c>)
 800240c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002410:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002412:	4b41      	ldr	r3, [pc, #260]	@ (8002518 <HAL_ADC_MspInit+0x40c>)
 8002414:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002416:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800241a:	61bb      	str	r3, [r7, #24]
 800241c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800241e:	4b3e      	ldr	r3, [pc, #248]	@ (8002518 <HAL_ADC_MspInit+0x40c>)
 8002420:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002422:	4a3d      	ldr	r2, [pc, #244]	@ (8002518 <HAL_ADC_MspInit+0x40c>)
 8002424:	f043 0302 	orr.w	r3, r3, #2
 8002428:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800242a:	4b3b      	ldr	r3, [pc, #236]	@ (8002518 <HAL_ADC_MspInit+0x40c>)
 800242c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800242e:	f003 0302 	and.w	r3, r3, #2
 8002432:	617b      	str	r3, [r7, #20]
 8002434:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002436:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800243a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800243e:	2303      	movs	r3, #3
 8002440:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002444:	2300      	movs	r3, #0
 8002446:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800244a:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 800244e:	4619      	mov	r1, r3
 8002450:	4832      	ldr	r0, [pc, #200]	@ (800251c <HAL_ADC_MspInit+0x410>)
 8002452:	f002 ff47 	bl	80052e4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC3_IRQn, 5, 0);
 8002456:	2200      	movs	r2, #0
 8002458:	2105      	movs	r1, #5
 800245a:	202f      	movs	r0, #47	@ 0x2f
 800245c:	f002 fbdb 	bl	8004c16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC3_IRQn);
 8002460:	202f      	movs	r0, #47	@ 0x2f
 8002462:	f002 fbf2 	bl	8004c4a <HAL_NVIC_EnableIRQ>
}
 8002466:	e04f      	b.n	8002508 <HAL_ADC_MspInit+0x3fc>
  else if(hadc->Instance==ADC5)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	4a2c      	ldr	r2, [pc, #176]	@ (8002520 <HAL_ADC_MspInit+0x414>)
 800246e:	4293      	cmp	r3, r2
 8002470:	d14a      	bne.n	8002508 <HAL_ADC_MspInit+0x3fc>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 8002472:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002476:	63bb      	str	r3, [r7, #56]	@ 0x38
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 8002478:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800247c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002480:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002484:	4618      	mov	r0, r3
 8002486:	f003 fe8d 	bl	80061a4 <HAL_RCCEx_PeriphCLKConfig>
 800248a:	4603      	mov	r3, r0
 800248c:	2b00      	cmp	r3, #0
 800248e:	d001      	beq.n	8002494 <HAL_ADC_MspInit+0x388>
      Error_Handler();
 8002490:	f7ff fe0c 	bl	80020ac <Error_Handler>
    HAL_RCC_ADC345_CLK_ENABLED++;
 8002494:	4b1f      	ldr	r3, [pc, #124]	@ (8002514 <HAL_ADC_MspInit+0x408>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	3301      	adds	r3, #1
 800249a:	4a1e      	ldr	r2, [pc, #120]	@ (8002514 <HAL_ADC_MspInit+0x408>)
 800249c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 800249e:	4b1d      	ldr	r3, [pc, #116]	@ (8002514 <HAL_ADC_MspInit+0x408>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	2b01      	cmp	r3, #1
 80024a4:	d10b      	bne.n	80024be <HAL_ADC_MspInit+0x3b2>
      __HAL_RCC_ADC345_CLK_ENABLE();
 80024a6:	4b1c      	ldr	r3, [pc, #112]	@ (8002518 <HAL_ADC_MspInit+0x40c>)
 80024a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024aa:	4a1b      	ldr	r2, [pc, #108]	@ (8002518 <HAL_ADC_MspInit+0x40c>)
 80024ac:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80024b0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80024b2:	4b19      	ldr	r3, [pc, #100]	@ (8002518 <HAL_ADC_MspInit+0x40c>)
 80024b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024b6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80024ba:	613b      	str	r3, [r7, #16]
 80024bc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024be:	4b16      	ldr	r3, [pc, #88]	@ (8002518 <HAL_ADC_MspInit+0x40c>)
 80024c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024c2:	4a15      	ldr	r2, [pc, #84]	@ (8002518 <HAL_ADC_MspInit+0x40c>)
 80024c4:	f043 0301 	orr.w	r3, r3, #1
 80024c8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80024ca:	4b13      	ldr	r3, [pc, #76]	@ (8002518 <HAL_ADC_MspInit+0x40c>)
 80024cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024ce:	f003 0301 	and.w	r3, r3, #1
 80024d2:	60fb      	str	r3, [r7, #12]
 80024d4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80024d6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80024da:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80024de:	2303      	movs	r3, #3
 80024e0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024e4:	2300      	movs	r3, #0
 80024e6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024ea:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 80024ee:	4619      	mov	r1, r3
 80024f0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80024f4:	f002 fef6 	bl	80052e4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC5_IRQn, 5, 0);
 80024f8:	2200      	movs	r2, #0
 80024fa:	2105      	movs	r1, #5
 80024fc:	203e      	movs	r0, #62	@ 0x3e
 80024fe:	f002 fb8a 	bl	8004c16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC5_IRQn);
 8002502:	203e      	movs	r0, #62	@ 0x3e
 8002504:	f002 fba1 	bl	8004c4a <HAL_NVIC_EnableIRQ>
}
 8002508:	bf00      	nop
 800250a:	37a0      	adds	r7, #160	@ 0xa0
 800250c:	46bd      	mov	sp, r7
 800250e:	bd80      	pop	{r7, pc}
 8002510:	50000400 	.word	0x50000400
 8002514:	20000910 	.word	0x20000910
 8002518:	40021000 	.word	0x40021000
 800251c:	48000400 	.word	0x48000400
 8002520:	50000600 	.word	0x50000600

08002524 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b08a      	sub	sp, #40	@ 0x28
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800252c:	f107 0314 	add.w	r3, r7, #20
 8002530:	2200      	movs	r2, #0
 8002532:	601a      	str	r2, [r3, #0]
 8002534:	605a      	str	r2, [r3, #4]
 8002536:	609a      	str	r2, [r3, #8]
 8002538:	60da      	str	r2, [r3, #12]
 800253a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	4a17      	ldr	r2, [pc, #92]	@ (80025a0 <HAL_SPI_MspInit+0x7c>)
 8002542:	4293      	cmp	r3, r2
 8002544:	d128      	bne.n	8002598 <HAL_SPI_MspInit+0x74>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002546:	4b17      	ldr	r3, [pc, #92]	@ (80025a4 <HAL_SPI_MspInit+0x80>)
 8002548:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800254a:	4a16      	ldr	r2, [pc, #88]	@ (80025a4 <HAL_SPI_MspInit+0x80>)
 800254c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002550:	6613      	str	r3, [r2, #96]	@ 0x60
 8002552:	4b14      	ldr	r3, [pc, #80]	@ (80025a4 <HAL_SPI_MspInit+0x80>)
 8002554:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002556:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800255a:	613b      	str	r3, [r7, #16]
 800255c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800255e:	4b11      	ldr	r3, [pc, #68]	@ (80025a4 <HAL_SPI_MspInit+0x80>)
 8002560:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002562:	4a10      	ldr	r2, [pc, #64]	@ (80025a4 <HAL_SPI_MspInit+0x80>)
 8002564:	f043 0301 	orr.w	r3, r3, #1
 8002568:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800256a:	4b0e      	ldr	r3, [pc, #56]	@ (80025a4 <HAL_SPI_MspInit+0x80>)
 800256c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800256e:	f003 0301 	and.w	r3, r3, #1
 8002572:	60fb      	str	r3, [r7, #12]
 8002574:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8002576:	23a0      	movs	r3, #160	@ 0xa0
 8002578:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800257a:	2302      	movs	r3, #2
 800257c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800257e:	2300      	movs	r3, #0
 8002580:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002582:	2300      	movs	r3, #0
 8002584:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002586:	2305      	movs	r3, #5
 8002588:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800258a:	f107 0314 	add.w	r3, r7, #20
 800258e:	4619      	mov	r1, r3
 8002590:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002594:	f002 fea6 	bl	80052e4 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8002598:	bf00      	nop
 800259a:	3728      	adds	r7, #40	@ 0x28
 800259c:	46bd      	mov	sp, r7
 800259e:	bd80      	pop	{r7, pc}
 80025a0:	40013000 	.word	0x40013000
 80025a4:	40021000 	.word	0x40021000

080025a8 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b0a0      	sub	sp, #128	@ 0x80
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025b0:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80025b4:	2200      	movs	r2, #0
 80025b6:	601a      	str	r2, [r3, #0]
 80025b8:	605a      	str	r2, [r3, #4]
 80025ba:	609a      	str	r2, [r3, #8]
 80025bc:	60da      	str	r2, [r3, #12]
 80025be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80025c0:	f107 0318 	add.w	r3, r7, #24
 80025c4:	2254      	movs	r2, #84	@ 0x54
 80025c6:	2100      	movs	r1, #0
 80025c8:	4618      	mov	r0, r3
 80025ca:	f00b f816 	bl	800d5fa <memset>
  if(huart->Instance==USART1)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	4a6c      	ldr	r2, [pc, #432]	@ (8002784 <HAL_UART_MspInit+0x1dc>)
 80025d4:	4293      	cmp	r3, r2
 80025d6:	d161      	bne.n	800269c <HAL_UART_MspInit+0xf4>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80025d8:	2301      	movs	r3, #1
 80025da:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80025dc:	2300      	movs	r3, #0
 80025de:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80025e0:	f107 0318 	add.w	r3, r7, #24
 80025e4:	4618      	mov	r0, r3
 80025e6:	f003 fddd 	bl	80061a4 <HAL_RCCEx_PeriphCLKConfig>
 80025ea:	4603      	mov	r3, r0
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d001      	beq.n	80025f4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80025f0:	f7ff fd5c 	bl	80020ac <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80025f4:	4b64      	ldr	r3, [pc, #400]	@ (8002788 <HAL_UART_MspInit+0x1e0>)
 80025f6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80025f8:	4a63      	ldr	r2, [pc, #396]	@ (8002788 <HAL_UART_MspInit+0x1e0>)
 80025fa:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80025fe:	6613      	str	r3, [r2, #96]	@ 0x60
 8002600:	4b61      	ldr	r3, [pc, #388]	@ (8002788 <HAL_UART_MspInit+0x1e0>)
 8002602:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002604:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002608:	617b      	str	r3, [r7, #20]
 800260a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800260c:	4b5e      	ldr	r3, [pc, #376]	@ (8002788 <HAL_UART_MspInit+0x1e0>)
 800260e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002610:	4a5d      	ldr	r2, [pc, #372]	@ (8002788 <HAL_UART_MspInit+0x1e0>)
 8002612:	f043 0304 	orr.w	r3, r3, #4
 8002616:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002618:	4b5b      	ldr	r3, [pc, #364]	@ (8002788 <HAL_UART_MspInit+0x1e0>)
 800261a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800261c:	f003 0304 	and.w	r3, r3, #4
 8002620:	613b      	str	r3, [r7, #16]
 8002622:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8002624:	2330      	movs	r3, #48	@ 0x30
 8002626:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002628:	2302      	movs	r3, #2
 800262a:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800262c:	2300      	movs	r3, #0
 800262e:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002630:	2300      	movs	r3, #0
 8002632:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002634:	2307      	movs	r3, #7
 8002636:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002638:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800263c:	4619      	mov	r1, r3
 800263e:	4853      	ldr	r0, [pc, #332]	@ (800278c <HAL_UART_MspInit+0x1e4>)
 8002640:	f002 fe50 	bl	80052e4 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel4;
 8002644:	4b52      	ldr	r3, [pc, #328]	@ (8002790 <HAL_UART_MspInit+0x1e8>)
 8002646:	4a53      	ldr	r2, [pc, #332]	@ (8002794 <HAL_UART_MspInit+0x1ec>)
 8002648:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 800264a:	4b51      	ldr	r3, [pc, #324]	@ (8002790 <HAL_UART_MspInit+0x1e8>)
 800264c:	2218      	movs	r2, #24
 800264e:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002650:	4b4f      	ldr	r3, [pc, #316]	@ (8002790 <HAL_UART_MspInit+0x1e8>)
 8002652:	2200      	movs	r2, #0
 8002654:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002656:	4b4e      	ldr	r3, [pc, #312]	@ (8002790 <HAL_UART_MspInit+0x1e8>)
 8002658:	2200      	movs	r2, #0
 800265a:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800265c:	4b4c      	ldr	r3, [pc, #304]	@ (8002790 <HAL_UART_MspInit+0x1e8>)
 800265e:	2280      	movs	r2, #128	@ 0x80
 8002660:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002662:	4b4b      	ldr	r3, [pc, #300]	@ (8002790 <HAL_UART_MspInit+0x1e8>)
 8002664:	2200      	movs	r2, #0
 8002666:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002668:	4b49      	ldr	r3, [pc, #292]	@ (8002790 <HAL_UART_MspInit+0x1e8>)
 800266a:	2200      	movs	r2, #0
 800266c:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 800266e:	4b48      	ldr	r3, [pc, #288]	@ (8002790 <HAL_UART_MspInit+0x1e8>)
 8002670:	2200      	movs	r2, #0
 8002672:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8002674:	4b46      	ldr	r3, [pc, #280]	@ (8002790 <HAL_UART_MspInit+0x1e8>)
 8002676:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800267a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800267c:	4844      	ldr	r0, [pc, #272]	@ (8002790 <HAL_UART_MspInit+0x1e8>)
 800267e:	f002 faff 	bl	8004c80 <HAL_DMA_Init>
 8002682:	4603      	mov	r3, r0
 8002684:	2b00      	cmp	r3, #0
 8002686:	d001      	beq.n	800268c <HAL_UART_MspInit+0xe4>
    {
      Error_Handler();
 8002688:	f7ff fd10 	bl	80020ac <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	4a40      	ldr	r2, [pc, #256]	@ (8002790 <HAL_UART_MspInit+0x1e8>)
 8002690:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8002694:	4a3e      	ldr	r2, [pc, #248]	@ (8002790 <HAL_UART_MspInit+0x1e8>)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6293      	str	r3, [r2, #40]	@ 0x28
    /* USER CODE BEGIN USART3_MspInit 1 */

    /* USER CODE END USART3_MspInit 1 */
  }

}
 800269a:	e06e      	b.n	800277a <HAL_UART_MspInit+0x1d2>
  else if(huart->Instance==USART3)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	4a3d      	ldr	r2, [pc, #244]	@ (8002798 <HAL_UART_MspInit+0x1f0>)
 80026a2:	4293      	cmp	r3, r2
 80026a4:	d169      	bne.n	800277a <HAL_UART_MspInit+0x1d2>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80026a6:	2304      	movs	r3, #4
 80026a8:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80026aa:	2300      	movs	r3, #0
 80026ac:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80026ae:	f107 0318 	add.w	r3, r7, #24
 80026b2:	4618      	mov	r0, r3
 80026b4:	f003 fd76 	bl	80061a4 <HAL_RCCEx_PeriphCLKConfig>
 80026b8:	4603      	mov	r3, r0
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d001      	beq.n	80026c2 <HAL_UART_MspInit+0x11a>
      Error_Handler();
 80026be:	f7ff fcf5 	bl	80020ac <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80026c2:	4b31      	ldr	r3, [pc, #196]	@ (8002788 <HAL_UART_MspInit+0x1e0>)
 80026c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026c6:	4a30      	ldr	r2, [pc, #192]	@ (8002788 <HAL_UART_MspInit+0x1e0>)
 80026c8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80026cc:	6593      	str	r3, [r2, #88]	@ 0x58
 80026ce:	4b2e      	ldr	r3, [pc, #184]	@ (8002788 <HAL_UART_MspInit+0x1e0>)
 80026d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026d2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80026d6:	60fb      	str	r3, [r7, #12]
 80026d8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80026da:	4b2b      	ldr	r3, [pc, #172]	@ (8002788 <HAL_UART_MspInit+0x1e0>)
 80026dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026de:	4a2a      	ldr	r2, [pc, #168]	@ (8002788 <HAL_UART_MspInit+0x1e0>)
 80026e0:	f043 0304 	orr.w	r3, r3, #4
 80026e4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80026e6:	4b28      	ldr	r3, [pc, #160]	@ (8002788 <HAL_UART_MspInit+0x1e0>)
 80026e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026ea:	f003 0304 	and.w	r3, r3, #4
 80026ee:	60bb      	str	r3, [r7, #8]
 80026f0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80026f2:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80026f6:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026f8:	2302      	movs	r3, #2
 80026fa:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026fc:	2300      	movs	r3, #0
 80026fe:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002700:	2300      	movs	r3, #0
 8002702:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002704:	2307      	movs	r3, #7
 8002706:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002708:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800270c:	4619      	mov	r1, r3
 800270e:	481f      	ldr	r0, [pc, #124]	@ (800278c <HAL_UART_MspInit+0x1e4>)
 8002710:	f002 fde8 	bl	80052e4 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Channel3;
 8002714:	4b21      	ldr	r3, [pc, #132]	@ (800279c <HAL_UART_MspInit+0x1f4>)
 8002716:	4a22      	ldr	r2, [pc, #136]	@ (80027a0 <HAL_UART_MspInit+0x1f8>)
 8002718:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 800271a:	4b20      	ldr	r3, [pc, #128]	@ (800279c <HAL_UART_MspInit+0x1f4>)
 800271c:	221c      	movs	r2, #28
 800271e:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002720:	4b1e      	ldr	r3, [pc, #120]	@ (800279c <HAL_UART_MspInit+0x1f4>)
 8002722:	2200      	movs	r2, #0
 8002724:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002726:	4b1d      	ldr	r3, [pc, #116]	@ (800279c <HAL_UART_MspInit+0x1f4>)
 8002728:	2200      	movs	r2, #0
 800272a:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 800272c:	4b1b      	ldr	r3, [pc, #108]	@ (800279c <HAL_UART_MspInit+0x1f4>)
 800272e:	2280      	movs	r2, #128	@ 0x80
 8002730:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002732:	4b1a      	ldr	r3, [pc, #104]	@ (800279c <HAL_UART_MspInit+0x1f4>)
 8002734:	2200      	movs	r2, #0
 8002736:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002738:	4b18      	ldr	r3, [pc, #96]	@ (800279c <HAL_UART_MspInit+0x1f4>)
 800273a:	2200      	movs	r2, #0
 800273c:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 800273e:	4b17      	ldr	r3, [pc, #92]	@ (800279c <HAL_UART_MspInit+0x1f4>)
 8002740:	2200      	movs	r2, #0
 8002742:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8002744:	4b15      	ldr	r3, [pc, #84]	@ (800279c <HAL_UART_MspInit+0x1f4>)
 8002746:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800274a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 800274c:	4813      	ldr	r0, [pc, #76]	@ (800279c <HAL_UART_MspInit+0x1f4>)
 800274e:	f002 fa97 	bl	8004c80 <HAL_DMA_Init>
 8002752:	4603      	mov	r3, r0
 8002754:	2b00      	cmp	r3, #0
 8002756:	d001      	beq.n	800275c <HAL_UART_MspInit+0x1b4>
      Error_Handler();
 8002758:	f7ff fca8 	bl	80020ac <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	4a0f      	ldr	r2, [pc, #60]	@ (800279c <HAL_UART_MspInit+0x1f4>)
 8002760:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8002764:	4a0d      	ldr	r2, [pc, #52]	@ (800279c <HAL_UART_MspInit+0x1f4>)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6293      	str	r3, [r2, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 800276a:	2200      	movs	r2, #0
 800276c:	2105      	movs	r1, #5
 800276e:	2027      	movs	r0, #39	@ 0x27
 8002770:	f002 fa51 	bl	8004c16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002774:	2027      	movs	r0, #39	@ 0x27
 8002776:	f002 fa68 	bl	8004c4a <HAL_NVIC_EnableIRQ>
}
 800277a:	bf00      	nop
 800277c:	3780      	adds	r7, #128	@ 0x80
 800277e:	46bd      	mov	sp, r7
 8002780:	bd80      	pop	{r7, pc}
 8002782:	bf00      	nop
 8002784:	40013800 	.word	0x40013800
 8002788:	40021000 	.word	0x40021000
 800278c:	48000800 	.word	0x48000800
 8002790:	200005f0 	.word	0x200005f0
 8002794:	40020044 	.word	0x40020044
 8002798:	40004800 	.word	0x40004800
 800279c:	20000650 	.word	0x20000650
 80027a0:	40020030 	.word	0x40020030

080027a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80027a4:	b480      	push	{r7}
 80027a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80027a8:	bf00      	nop
 80027aa:	e7fd      	b.n	80027a8 <NMI_Handler+0x4>

080027ac <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80027ac:	b480      	push	{r7}
 80027ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80027b0:	bf00      	nop
 80027b2:	e7fd      	b.n	80027b0 <HardFault_Handler+0x4>

080027b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80027b4:	b480      	push	{r7}
 80027b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80027b8:	bf00      	nop
 80027ba:	e7fd      	b.n	80027b8 <MemManage_Handler+0x4>

080027bc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80027bc:	b480      	push	{r7}
 80027be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80027c0:	bf00      	nop
 80027c2:	e7fd      	b.n	80027c0 <BusFault_Handler+0x4>

080027c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80027c4:	b480      	push	{r7}
 80027c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80027c8:	bf00      	nop
 80027ca:	e7fd      	b.n	80027c8 <UsageFault_Handler+0x4>

080027cc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80027cc:	b480      	push	{r7}
 80027ce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80027d0:	bf00      	nop
 80027d2:	46bd      	mov	sp, r7
 80027d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d8:	4770      	bx	lr

080027da <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80027da:	b580      	push	{r7, lr}
 80027dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80027de:	f000 f9a3 	bl	8002b28 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80027e2:	f008 fc89 	bl	800b0f8 <xTaskGetSchedulerState>
 80027e6:	4603      	mov	r3, r0
 80027e8:	2b01      	cmp	r3, #1
 80027ea:	d001      	beq.n	80027f0 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80027ec:	f009 f86c 	bl	800b8c8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80027f0:	bf00      	nop
 80027f2:	bd80      	pop	{r7, pc}

080027f4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80027f8:	4802      	ldr	r0, [pc, #8]	@ (8002804 <DMA1_Channel1_IRQHandler+0x10>)
 80027fa:	f002 fc24 	bl	8005046 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80027fe:	bf00      	nop
 8002800:	bd80      	pop	{r7, pc}
 8002802:	bf00      	nop
 8002804:	200003a4 	.word	0x200003a4

08002808 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 800280c:	4802      	ldr	r0, [pc, #8]	@ (8002818 <DMA1_Channel2_IRQHandler+0x10>)
 800280e:	f002 fc1a 	bl	8005046 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8002812:	bf00      	nop
 8002814:	bd80      	pop	{r7, pc}
 8002816:	bf00      	nop
 8002818:	20000404 	.word	0x20000404

0800281c <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8002820:	4802      	ldr	r0, [pc, #8]	@ (800282c <DMA1_Channel3_IRQHandler+0x10>)
 8002822:	f002 fc10 	bl	8005046 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8002826:	bf00      	nop
 8002828:	bd80      	pop	{r7, pc}
 800282a:	bf00      	nop
 800282c:	20000650 	.word	0x20000650

08002830 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002834:	4802      	ldr	r0, [pc, #8]	@ (8002840 <DMA1_Channel4_IRQHandler+0x10>)
 8002836:	f002 fc06 	bl	8005046 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 800283a:	bf00      	nop
 800283c:	bd80      	pop	{r7, pc}
 800283e:	bf00      	nop
 8002840:	200005f0 	.word	0x200005f0

08002844 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt / USART3 wake-up interrupt through EXTI line 28.
  */
void USART3_IRQHandler(void)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002848:	4802      	ldr	r0, [pc, #8]	@ (8002854 <USART3_IRQHandler+0x10>)
 800284a:	f004 fca3 	bl	8007194 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800284e:	bf00      	nop
 8002850:	bd80      	pop	{r7, pc}
 8002852:	bf00      	nop
 8002854:	2000055c 	.word	0x2000055c

08002858 <ADC3_IRQHandler>:

/**
  * @brief This function handles ADC3 global interrupt.
  */
void ADC3_IRQHandler(void)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC3_IRQn 0 */

  /* USER CODE END ADC3_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc3);
 800285c:	4802      	ldr	r0, [pc, #8]	@ (8002868 <ADC3_IRQHandler+0x10>)
 800285e:	f000 ffb7 	bl	80037d0 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC3_IRQn 1 */

  /* USER CODE END ADC3_IRQn 1 */
}
 8002862:	bf00      	nop
 8002864:	bd80      	pop	{r7, pc}
 8002866:	bf00      	nop
 8002868:	200002cc 	.word	0x200002cc

0800286c <ADC5_IRQHandler>:

/**
  * @brief This function handles ADC5 global interrupt.
  */
void ADC5_IRQHandler(void)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC5_IRQn 0 */

  /* USER CODE END ADC5_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc5);
 8002870:	4802      	ldr	r0, [pc, #8]	@ (800287c <ADC5_IRQHandler+0x10>)
 8002872:	f000 ffad 	bl	80037d0 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC5_IRQn 1 */

  /* USER CODE END ADC5_IRQn 1 */
}
 8002876:	bf00      	nop
 8002878:	bd80      	pop	{r7, pc}
 800287a:	bf00      	nop
 800287c:	20000338 	.word	0x20000338

08002880 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002880:	b480      	push	{r7}
 8002882:	af00      	add	r7, sp, #0
  return 1;
 8002884:	2301      	movs	r3, #1
}
 8002886:	4618      	mov	r0, r3
 8002888:	46bd      	mov	sp, r7
 800288a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288e:	4770      	bx	lr

08002890 <_kill>:

int _kill(int pid, int sig)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b082      	sub	sp, #8
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
 8002898:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800289a:	f00a ff21 	bl	800d6e0 <__errno>
 800289e:	4603      	mov	r3, r0
 80028a0:	2216      	movs	r2, #22
 80028a2:	601a      	str	r2, [r3, #0]
  return -1;
 80028a4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80028a8:	4618      	mov	r0, r3
 80028aa:	3708      	adds	r7, #8
 80028ac:	46bd      	mov	sp, r7
 80028ae:	bd80      	pop	{r7, pc}

080028b0 <_exit>:

void _exit (int status)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b082      	sub	sp, #8
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80028b8:	f04f 31ff 	mov.w	r1, #4294967295
 80028bc:	6878      	ldr	r0, [r7, #4]
 80028be:	f7ff ffe7 	bl	8002890 <_kill>
  while (1) {}    /* Make sure we hang here */
 80028c2:	bf00      	nop
 80028c4:	e7fd      	b.n	80028c2 <_exit+0x12>

080028c6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80028c6:	b580      	push	{r7, lr}
 80028c8:	b086      	sub	sp, #24
 80028ca:	af00      	add	r7, sp, #0
 80028cc:	60f8      	str	r0, [r7, #12]
 80028ce:	60b9      	str	r1, [r7, #8]
 80028d0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028d2:	2300      	movs	r3, #0
 80028d4:	617b      	str	r3, [r7, #20]
 80028d6:	e00a      	b.n	80028ee <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80028d8:	f3af 8000 	nop.w
 80028dc:	4601      	mov	r1, r0
 80028de:	68bb      	ldr	r3, [r7, #8]
 80028e0:	1c5a      	adds	r2, r3, #1
 80028e2:	60ba      	str	r2, [r7, #8]
 80028e4:	b2ca      	uxtb	r2, r1
 80028e6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028e8:	697b      	ldr	r3, [r7, #20]
 80028ea:	3301      	adds	r3, #1
 80028ec:	617b      	str	r3, [r7, #20]
 80028ee:	697a      	ldr	r2, [r7, #20]
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	429a      	cmp	r2, r3
 80028f4:	dbf0      	blt.n	80028d8 <_read+0x12>
  }

  return len;
 80028f6:	687b      	ldr	r3, [r7, #4]
}
 80028f8:	4618      	mov	r0, r3
 80028fa:	3718      	adds	r7, #24
 80028fc:	46bd      	mov	sp, r7
 80028fe:	bd80      	pop	{r7, pc}

08002900 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b086      	sub	sp, #24
 8002904:	af00      	add	r7, sp, #0
 8002906:	60f8      	str	r0, [r7, #12]
 8002908:	60b9      	str	r1, [r7, #8]
 800290a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800290c:	2300      	movs	r3, #0
 800290e:	617b      	str	r3, [r7, #20]
 8002910:	e009      	b.n	8002926 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002912:	68bb      	ldr	r3, [r7, #8]
 8002914:	1c5a      	adds	r2, r3, #1
 8002916:	60ba      	str	r2, [r7, #8]
 8002918:	781b      	ldrb	r3, [r3, #0]
 800291a:	4618      	mov	r0, r3
 800291c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002920:	697b      	ldr	r3, [r7, #20]
 8002922:	3301      	adds	r3, #1
 8002924:	617b      	str	r3, [r7, #20]
 8002926:	697a      	ldr	r2, [r7, #20]
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	429a      	cmp	r2, r3
 800292c:	dbf1      	blt.n	8002912 <_write+0x12>
  }
  return len;
 800292e:	687b      	ldr	r3, [r7, #4]
}
 8002930:	4618      	mov	r0, r3
 8002932:	3718      	adds	r7, #24
 8002934:	46bd      	mov	sp, r7
 8002936:	bd80      	pop	{r7, pc}

08002938 <_close>:

int _close(int file)
{
 8002938:	b480      	push	{r7}
 800293a:	b083      	sub	sp, #12
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002940:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002944:	4618      	mov	r0, r3
 8002946:	370c      	adds	r7, #12
 8002948:	46bd      	mov	sp, r7
 800294a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294e:	4770      	bx	lr

08002950 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002950:	b480      	push	{r7}
 8002952:	b083      	sub	sp, #12
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
 8002958:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002960:	605a      	str	r2, [r3, #4]
  return 0;
 8002962:	2300      	movs	r3, #0
}
 8002964:	4618      	mov	r0, r3
 8002966:	370c      	adds	r7, #12
 8002968:	46bd      	mov	sp, r7
 800296a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296e:	4770      	bx	lr

08002970 <_isatty>:

int _isatty(int file)
{
 8002970:	b480      	push	{r7}
 8002972:	b083      	sub	sp, #12
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002978:	2301      	movs	r3, #1
}
 800297a:	4618      	mov	r0, r3
 800297c:	370c      	adds	r7, #12
 800297e:	46bd      	mov	sp, r7
 8002980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002984:	4770      	bx	lr

08002986 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002986:	b480      	push	{r7}
 8002988:	b085      	sub	sp, #20
 800298a:	af00      	add	r7, sp, #0
 800298c:	60f8      	str	r0, [r7, #12]
 800298e:	60b9      	str	r1, [r7, #8]
 8002990:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002992:	2300      	movs	r3, #0
}
 8002994:	4618      	mov	r0, r3
 8002996:	3714      	adds	r7, #20
 8002998:	46bd      	mov	sp, r7
 800299a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299e:	4770      	bx	lr

080029a0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b086      	sub	sp, #24
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80029a8:	4a14      	ldr	r2, [pc, #80]	@ (80029fc <_sbrk+0x5c>)
 80029aa:	4b15      	ldr	r3, [pc, #84]	@ (8002a00 <_sbrk+0x60>)
 80029ac:	1ad3      	subs	r3, r2, r3
 80029ae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80029b0:	697b      	ldr	r3, [r7, #20]
 80029b2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80029b4:	4b13      	ldr	r3, [pc, #76]	@ (8002a04 <_sbrk+0x64>)
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d102      	bne.n	80029c2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80029bc:	4b11      	ldr	r3, [pc, #68]	@ (8002a04 <_sbrk+0x64>)
 80029be:	4a12      	ldr	r2, [pc, #72]	@ (8002a08 <_sbrk+0x68>)
 80029c0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80029c2:	4b10      	ldr	r3, [pc, #64]	@ (8002a04 <_sbrk+0x64>)
 80029c4:	681a      	ldr	r2, [r3, #0]
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	4413      	add	r3, r2
 80029ca:	693a      	ldr	r2, [r7, #16]
 80029cc:	429a      	cmp	r2, r3
 80029ce:	d207      	bcs.n	80029e0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80029d0:	f00a fe86 	bl	800d6e0 <__errno>
 80029d4:	4603      	mov	r3, r0
 80029d6:	220c      	movs	r2, #12
 80029d8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80029da:	f04f 33ff 	mov.w	r3, #4294967295
 80029de:	e009      	b.n	80029f4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80029e0:	4b08      	ldr	r3, [pc, #32]	@ (8002a04 <_sbrk+0x64>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80029e6:	4b07      	ldr	r3, [pc, #28]	@ (8002a04 <_sbrk+0x64>)
 80029e8:	681a      	ldr	r2, [r3, #0]
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	4413      	add	r3, r2
 80029ee:	4a05      	ldr	r2, [pc, #20]	@ (8002a04 <_sbrk+0x64>)
 80029f0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80029f2:	68fb      	ldr	r3, [r7, #12]
}
 80029f4:	4618      	mov	r0, r3
 80029f6:	3718      	adds	r7, #24
 80029f8:	46bd      	mov	sp, r7
 80029fa:	bd80      	pop	{r7, pc}
 80029fc:	20020000 	.word	0x20020000
 8002a00:	00000400 	.word	0x00000400
 8002a04:	20000914 	.word	0x20000914
 8002a08:	20001f48 	.word	0x20001f48

08002a0c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002a0c:	b480      	push	{r7}
 8002a0e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002a10:	4b06      	ldr	r3, [pc, #24]	@ (8002a2c <SystemInit+0x20>)
 8002a12:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a16:	4a05      	ldr	r2, [pc, #20]	@ (8002a2c <SystemInit+0x20>)
 8002a18:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002a1c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002a20:	bf00      	nop
 8002a22:	46bd      	mov	sp, r7
 8002a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a28:	4770      	bx	lr
 8002a2a:	bf00      	nop
 8002a2c:	e000ed00 	.word	0xe000ed00

08002a30 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002a30:	480d      	ldr	r0, [pc, #52]	@ (8002a68 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002a32:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002a34:	f7ff ffea 	bl	8002a0c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002a38:	480c      	ldr	r0, [pc, #48]	@ (8002a6c <LoopForever+0x6>)
  ldr r1, =_edata
 8002a3a:	490d      	ldr	r1, [pc, #52]	@ (8002a70 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002a3c:	4a0d      	ldr	r2, [pc, #52]	@ (8002a74 <LoopForever+0xe>)
  movs r3, #0
 8002a3e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8002a40:	e002      	b.n	8002a48 <LoopCopyDataInit>

08002a42 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002a42:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002a44:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002a46:	3304      	adds	r3, #4

08002a48 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002a48:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002a4a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002a4c:	d3f9      	bcc.n	8002a42 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002a4e:	4a0a      	ldr	r2, [pc, #40]	@ (8002a78 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002a50:	4c0a      	ldr	r4, [pc, #40]	@ (8002a7c <LoopForever+0x16>)
  movs r3, #0
 8002a52:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002a54:	e001      	b.n	8002a5a <LoopFillZerobss>

08002a56 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002a56:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002a58:	3204      	adds	r2, #4

08002a5a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002a5a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002a5c:	d3fb      	bcc.n	8002a56 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002a5e:	f00a fe45 	bl	800d6ec <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002a62:	f7fe fc37 	bl	80012d4 <main>

08002a66 <LoopForever>:

LoopForever:
    b LoopForever
 8002a66:	e7fe      	b.n	8002a66 <LoopForever>
  ldr   r0, =_estack
 8002a68:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002a6c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002a70:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8002a74:	080109f0 	.word	0x080109f0
  ldr r2, =_sbss
 8002a78:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8002a7c:	20001f44 	.word	0x20001f44

08002a80 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002a80:	e7fe      	b.n	8002a80 <ADC1_2_IRQHandler>

08002a82 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002a82:	b580      	push	{r7, lr}
 8002a84:	b082      	sub	sp, #8
 8002a86:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002a88:	2300      	movs	r3, #0
 8002a8a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002a8c:	2003      	movs	r0, #3
 8002a8e:	f002 f8b7 	bl	8004c00 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002a92:	200f      	movs	r0, #15
 8002a94:	f000 f80e 	bl	8002ab4 <HAL_InitTick>
 8002a98:	4603      	mov	r3, r0
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d002      	beq.n	8002aa4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	71fb      	strb	r3, [r7, #7]
 8002aa2:	e001      	b.n	8002aa8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002aa4:	f7ff fb08 	bl	80020b8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002aa8:	79fb      	ldrb	r3, [r7, #7]

}
 8002aaa:	4618      	mov	r0, r3
 8002aac:	3708      	adds	r7, #8
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bd80      	pop	{r7, pc}
	...

08002ab4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b084      	sub	sp, #16
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002abc:	2300      	movs	r3, #0
 8002abe:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8002ac0:	4b16      	ldr	r3, [pc, #88]	@ (8002b1c <HAL_InitTick+0x68>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d022      	beq.n	8002b0e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002ac8:	4b15      	ldr	r3, [pc, #84]	@ (8002b20 <HAL_InitTick+0x6c>)
 8002aca:	681a      	ldr	r2, [r3, #0]
 8002acc:	4b13      	ldr	r3, [pc, #76]	@ (8002b1c <HAL_InitTick+0x68>)
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8002ad4:	fbb1 f3f3 	udiv	r3, r1, r3
 8002ad8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002adc:	4618      	mov	r0, r3
 8002ade:	f002 f8c2 	bl	8004c66 <HAL_SYSTICK_Config>
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d10f      	bne.n	8002b08 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2b0f      	cmp	r3, #15
 8002aec:	d809      	bhi.n	8002b02 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002aee:	2200      	movs	r2, #0
 8002af0:	6879      	ldr	r1, [r7, #4]
 8002af2:	f04f 30ff 	mov.w	r0, #4294967295
 8002af6:	f002 f88e 	bl	8004c16 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002afa:	4a0a      	ldr	r2, [pc, #40]	@ (8002b24 <HAL_InitTick+0x70>)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6013      	str	r3, [r2, #0]
 8002b00:	e007      	b.n	8002b12 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8002b02:	2301      	movs	r3, #1
 8002b04:	73fb      	strb	r3, [r7, #15]
 8002b06:	e004      	b.n	8002b12 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002b08:	2301      	movs	r3, #1
 8002b0a:	73fb      	strb	r3, [r7, #15]
 8002b0c:	e001      	b.n	8002b12 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002b0e:	2301      	movs	r3, #1
 8002b10:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002b12:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b14:	4618      	mov	r0, r3
 8002b16:	3710      	adds	r7, #16
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	bd80      	pop	{r7, pc}
 8002b1c:	20000008 	.word	0x20000008
 8002b20:	20000000 	.word	0x20000000
 8002b24:	20000004 	.word	0x20000004

08002b28 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002b28:	b480      	push	{r7}
 8002b2a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002b2c:	4b05      	ldr	r3, [pc, #20]	@ (8002b44 <HAL_IncTick+0x1c>)
 8002b2e:	681a      	ldr	r2, [r3, #0]
 8002b30:	4b05      	ldr	r3, [pc, #20]	@ (8002b48 <HAL_IncTick+0x20>)
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	4413      	add	r3, r2
 8002b36:	4a03      	ldr	r2, [pc, #12]	@ (8002b44 <HAL_IncTick+0x1c>)
 8002b38:	6013      	str	r3, [r2, #0]
}
 8002b3a:	bf00      	nop
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b42:	4770      	bx	lr
 8002b44:	20000918 	.word	0x20000918
 8002b48:	20000008 	.word	0x20000008

08002b4c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	af00      	add	r7, sp, #0
  return uwTick;
 8002b50:	4b03      	ldr	r3, [pc, #12]	@ (8002b60 <HAL_GetTick+0x14>)
 8002b52:	681b      	ldr	r3, [r3, #0]
}
 8002b54:	4618      	mov	r0, r3
 8002b56:	46bd      	mov	sp, r7
 8002b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5c:	4770      	bx	lr
 8002b5e:	bf00      	nop
 8002b60:	20000918 	.word	0x20000918

08002b64 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002b64:	b480      	push	{r7}
 8002b66:	b083      	sub	sp, #12
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
 8002b6c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	689b      	ldr	r3, [r3, #8]
 8002b72:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	431a      	orrs	r2, r3
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	609a      	str	r2, [r3, #8]
}
 8002b7e:	bf00      	nop
 8002b80:	370c      	adds	r7, #12
 8002b82:	46bd      	mov	sp, r7
 8002b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b88:	4770      	bx	lr

08002b8a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002b8a:	b480      	push	{r7}
 8002b8c:	b083      	sub	sp, #12
 8002b8e:	af00      	add	r7, sp, #0
 8002b90:	6078      	str	r0, [r7, #4]
 8002b92:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	689b      	ldr	r3, [r3, #8]
 8002b98:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	431a      	orrs	r2, r3
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	609a      	str	r2, [r3, #8]
}
 8002ba4:	bf00      	nop
 8002ba6:	370c      	adds	r7, #12
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bae:	4770      	bx	lr

08002bb0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002bb0:	b480      	push	{r7}
 8002bb2:	b083      	sub	sp, #12
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	689b      	ldr	r3, [r3, #8]
 8002bbc:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	370c      	adds	r7, #12
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bca:	4770      	bx	lr

08002bcc <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002bcc:	b480      	push	{r7}
 8002bce:	b087      	sub	sp, #28
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	60f8      	str	r0, [r7, #12]
 8002bd4:	60b9      	str	r1, [r7, #8]
 8002bd6:	607a      	str	r2, [r7, #4]
 8002bd8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	3360      	adds	r3, #96	@ 0x60
 8002bde:	461a      	mov	r2, r3
 8002be0:	68bb      	ldr	r3, [r7, #8]
 8002be2:	009b      	lsls	r3, r3, #2
 8002be4:	4413      	add	r3, r2
 8002be6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002be8:	697b      	ldr	r3, [r7, #20]
 8002bea:	681a      	ldr	r2, [r3, #0]
 8002bec:	4b08      	ldr	r3, [pc, #32]	@ (8002c10 <LL_ADC_SetOffset+0x44>)
 8002bee:	4013      	ands	r3, r2
 8002bf0:	687a      	ldr	r2, [r7, #4]
 8002bf2:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8002bf6:	683a      	ldr	r2, [r7, #0]
 8002bf8:	430a      	orrs	r2, r1
 8002bfa:	4313      	orrs	r3, r2
 8002bfc:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002c00:	697b      	ldr	r3, [r7, #20]
 8002c02:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002c04:	bf00      	nop
 8002c06:	371c      	adds	r7, #28
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0e:	4770      	bx	lr
 8002c10:	03fff000 	.word	0x03fff000

08002c14 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002c14:	b480      	push	{r7}
 8002c16:	b085      	sub	sp, #20
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
 8002c1c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	3360      	adds	r3, #96	@ 0x60
 8002c22:	461a      	mov	r2, r3
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	009b      	lsls	r3, r3, #2
 8002c28:	4413      	add	r3, r2
 8002c2a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8002c34:	4618      	mov	r0, r3
 8002c36:	3714      	adds	r7, #20
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3e:	4770      	bx	lr

08002c40 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002c40:	b480      	push	{r7}
 8002c42:	b087      	sub	sp, #28
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	60f8      	str	r0, [r7, #12]
 8002c48:	60b9      	str	r1, [r7, #8]
 8002c4a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	3360      	adds	r3, #96	@ 0x60
 8002c50:	461a      	mov	r2, r3
 8002c52:	68bb      	ldr	r3, [r7, #8]
 8002c54:	009b      	lsls	r3, r3, #2
 8002c56:	4413      	add	r3, r2
 8002c58:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002c5a:	697b      	ldr	r3, [r7, #20]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	431a      	orrs	r2, r3
 8002c66:	697b      	ldr	r3, [r7, #20]
 8002c68:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002c6a:	bf00      	nop
 8002c6c:	371c      	adds	r7, #28
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c74:	4770      	bx	lr

08002c76 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8002c76:	b480      	push	{r7}
 8002c78:	b087      	sub	sp, #28
 8002c7a:	af00      	add	r7, sp, #0
 8002c7c:	60f8      	str	r0, [r7, #12]
 8002c7e:	60b9      	str	r1, [r7, #8]
 8002c80:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	3360      	adds	r3, #96	@ 0x60
 8002c86:	461a      	mov	r2, r3
 8002c88:	68bb      	ldr	r3, [r7, #8]
 8002c8a:	009b      	lsls	r3, r3, #2
 8002c8c:	4413      	add	r3, r2
 8002c8e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002c90:	697b      	ldr	r3, [r7, #20]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	431a      	orrs	r2, r3
 8002c9c:	697b      	ldr	r3, [r7, #20]
 8002c9e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8002ca0:	bf00      	nop
 8002ca2:	371c      	adds	r7, #28
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002caa:	4770      	bx	lr

08002cac <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8002cac:	b480      	push	{r7}
 8002cae:	b087      	sub	sp, #28
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	60f8      	str	r0, [r7, #12]
 8002cb4:	60b9      	str	r1, [r7, #8]
 8002cb6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	3360      	adds	r3, #96	@ 0x60
 8002cbc:	461a      	mov	r2, r3
 8002cbe:	68bb      	ldr	r3, [r7, #8]
 8002cc0:	009b      	lsls	r3, r3, #2
 8002cc2:	4413      	add	r3, r2
 8002cc4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002cc6:	697b      	ldr	r3, [r7, #20]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	431a      	orrs	r2, r3
 8002cd2:	697b      	ldr	r3, [r7, #20]
 8002cd4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8002cd6:	bf00      	nop
 8002cd8:	371c      	adds	r7, #28
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce0:	4770      	bx	lr

08002ce2 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8002ce2:	b480      	push	{r7}
 8002ce4:	b083      	sub	sp, #12
 8002ce6:	af00      	add	r7, sp, #0
 8002ce8:	6078      	str	r0, [r7, #4]
 8002cea:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	695b      	ldr	r3, [r3, #20]
 8002cf0:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	431a      	orrs	r2, r3
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	615a      	str	r2, [r3, #20]
}
 8002cfc:	bf00      	nop
 8002cfe:	370c      	adds	r7, #12
 8002d00:	46bd      	mov	sp, r7
 8002d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d06:	4770      	bx	lr

08002d08 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002d08:	b480      	push	{r7}
 8002d0a:	b083      	sub	sp, #12
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	68db      	ldr	r3, [r3, #12]
 8002d14:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d101      	bne.n	8002d20 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002d1c:	2301      	movs	r3, #1
 8002d1e:	e000      	b.n	8002d22 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002d20:	2300      	movs	r3, #0
}
 8002d22:	4618      	mov	r0, r3
 8002d24:	370c      	adds	r7, #12
 8002d26:	46bd      	mov	sp, r7
 8002d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2c:	4770      	bx	lr

08002d2e <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002d2e:	b480      	push	{r7}
 8002d30:	b087      	sub	sp, #28
 8002d32:	af00      	add	r7, sp, #0
 8002d34:	60f8      	str	r0, [r7, #12]
 8002d36:	60b9      	str	r1, [r7, #8]
 8002d38:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	3330      	adds	r3, #48	@ 0x30
 8002d3e:	461a      	mov	r2, r3
 8002d40:	68bb      	ldr	r3, [r7, #8]
 8002d42:	0a1b      	lsrs	r3, r3, #8
 8002d44:	009b      	lsls	r3, r3, #2
 8002d46:	f003 030c 	and.w	r3, r3, #12
 8002d4a:	4413      	add	r3, r2
 8002d4c:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002d4e:	697b      	ldr	r3, [r7, #20]
 8002d50:	681a      	ldr	r2, [r3, #0]
 8002d52:	68bb      	ldr	r3, [r7, #8]
 8002d54:	f003 031f 	and.w	r3, r3, #31
 8002d58:	211f      	movs	r1, #31
 8002d5a:	fa01 f303 	lsl.w	r3, r1, r3
 8002d5e:	43db      	mvns	r3, r3
 8002d60:	401a      	ands	r2, r3
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	0e9b      	lsrs	r3, r3, #26
 8002d66:	f003 011f 	and.w	r1, r3, #31
 8002d6a:	68bb      	ldr	r3, [r7, #8]
 8002d6c:	f003 031f 	and.w	r3, r3, #31
 8002d70:	fa01 f303 	lsl.w	r3, r1, r3
 8002d74:	431a      	orrs	r2, r3
 8002d76:	697b      	ldr	r3, [r7, #20]
 8002d78:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002d7a:	bf00      	nop
 8002d7c:	371c      	adds	r7, #28
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d84:	4770      	bx	lr

08002d86 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002d86:	b480      	push	{r7}
 8002d88:	b083      	sub	sp, #12
 8002d8a:	af00      	add	r7, sp, #0
 8002d8c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d92:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d101      	bne.n	8002d9e <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	e000      	b.n	8002da0 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8002d9e:	2300      	movs	r3, #0
}
 8002da0:	4618      	mov	r0, r3
 8002da2:	370c      	adds	r7, #12
 8002da4:	46bd      	mov	sp, r7
 8002da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002daa:	4770      	bx	lr

08002dac <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002dac:	b480      	push	{r7}
 8002dae:	b087      	sub	sp, #28
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	60f8      	str	r0, [r7, #12]
 8002db4:	60b9      	str	r1, [r7, #8]
 8002db6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	3314      	adds	r3, #20
 8002dbc:	461a      	mov	r2, r3
 8002dbe:	68bb      	ldr	r3, [r7, #8]
 8002dc0:	0e5b      	lsrs	r3, r3, #25
 8002dc2:	009b      	lsls	r3, r3, #2
 8002dc4:	f003 0304 	and.w	r3, r3, #4
 8002dc8:	4413      	add	r3, r2
 8002dca:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002dcc:	697b      	ldr	r3, [r7, #20]
 8002dce:	681a      	ldr	r2, [r3, #0]
 8002dd0:	68bb      	ldr	r3, [r7, #8]
 8002dd2:	0d1b      	lsrs	r3, r3, #20
 8002dd4:	f003 031f 	and.w	r3, r3, #31
 8002dd8:	2107      	movs	r1, #7
 8002dda:	fa01 f303 	lsl.w	r3, r1, r3
 8002dde:	43db      	mvns	r3, r3
 8002de0:	401a      	ands	r2, r3
 8002de2:	68bb      	ldr	r3, [r7, #8]
 8002de4:	0d1b      	lsrs	r3, r3, #20
 8002de6:	f003 031f 	and.w	r3, r3, #31
 8002dea:	6879      	ldr	r1, [r7, #4]
 8002dec:	fa01 f303 	lsl.w	r3, r1, r3
 8002df0:	431a      	orrs	r2, r3
 8002df2:	697b      	ldr	r3, [r7, #20]
 8002df4:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002df6:	bf00      	nop
 8002df8:	371c      	adds	r7, #28
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e00:	4770      	bx	lr
	...

08002e04 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002e04:	b480      	push	{r7}
 8002e06:	b085      	sub	sp, #20
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	60f8      	str	r0, [r7, #12]
 8002e0c:	60b9      	str	r1, [r7, #8]
 8002e0e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8002e16:	68bb      	ldr	r3, [r7, #8]
 8002e18:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e1c:	43db      	mvns	r3, r3
 8002e1e:	401a      	ands	r2, r3
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	f003 0318 	and.w	r3, r3, #24
 8002e26:	4908      	ldr	r1, [pc, #32]	@ (8002e48 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002e28:	40d9      	lsrs	r1, r3
 8002e2a:	68bb      	ldr	r3, [r7, #8]
 8002e2c:	400b      	ands	r3, r1
 8002e2e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e32:	431a      	orrs	r2, r3
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002e3a:	bf00      	nop
 8002e3c:	3714      	adds	r7, #20
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e44:	4770      	bx	lr
 8002e46:	bf00      	nop
 8002e48:	0007ffff 	.word	0x0007ffff

08002e4c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002e4c:	b480      	push	{r7}
 8002e4e:	b083      	sub	sp, #12
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	689b      	ldr	r3, [r3, #8]
 8002e58:	f003 031f 	and.w	r3, r3, #31
}
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	370c      	adds	r7, #12
 8002e60:	46bd      	mov	sp, r7
 8002e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e66:	4770      	bx	lr

08002e68 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002e68:	b480      	push	{r7}
 8002e6a:	b083      	sub	sp, #12
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	689b      	ldr	r3, [r3, #8]
 8002e74:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8002e78:	4618      	mov	r0, r3
 8002e7a:	370c      	adds	r7, #12
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e82:	4770      	bx	lr

08002e84 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002e84:	b480      	push	{r7}
 8002e86:	b083      	sub	sp, #12
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	689b      	ldr	r3, [r3, #8]
 8002e90:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8002e94:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002e98:	687a      	ldr	r2, [r7, #4]
 8002e9a:	6093      	str	r3, [r2, #8]
}
 8002e9c:	bf00      	nop
 8002e9e:	370c      	adds	r7, #12
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea6:	4770      	bx	lr

08002ea8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002ea8:	b480      	push	{r7}
 8002eaa:	b083      	sub	sp, #12
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	689b      	ldr	r3, [r3, #8]
 8002eb4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002eb8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002ebc:	d101      	bne.n	8002ec2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	e000      	b.n	8002ec4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002ec2:	2300      	movs	r3, #0
}
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	370c      	adds	r7, #12
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ece:	4770      	bx	lr

08002ed0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002ed0:	b480      	push	{r7}
 8002ed2:	b083      	sub	sp, #12
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	689b      	ldr	r3, [r3, #8]
 8002edc:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8002ee0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002ee4:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002eec:	bf00      	nop
 8002eee:	370c      	adds	r7, #12
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef6:	4770      	bx	lr

08002ef8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002ef8:	b480      	push	{r7}
 8002efa:	b083      	sub	sp, #12
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	689b      	ldr	r3, [r3, #8]
 8002f04:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f08:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002f0c:	d101      	bne.n	8002f12 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002f0e:	2301      	movs	r3, #1
 8002f10:	e000      	b.n	8002f14 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002f12:	2300      	movs	r3, #0
}
 8002f14:	4618      	mov	r0, r3
 8002f16:	370c      	adds	r7, #12
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1e:	4770      	bx	lr

08002f20 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002f20:	b480      	push	{r7}
 8002f22:	b083      	sub	sp, #12
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	689b      	ldr	r3, [r3, #8]
 8002f2c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002f30:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002f34:	f043 0201 	orr.w	r2, r3, #1
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002f3c:	bf00      	nop
 8002f3e:	370c      	adds	r7, #12
 8002f40:	46bd      	mov	sp, r7
 8002f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f46:	4770      	bx	lr

08002f48 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002f48:	b480      	push	{r7}
 8002f4a:	b083      	sub	sp, #12
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	689b      	ldr	r3, [r3, #8]
 8002f54:	f003 0301 	and.w	r3, r3, #1
 8002f58:	2b01      	cmp	r3, #1
 8002f5a:	d101      	bne.n	8002f60 <LL_ADC_IsEnabled+0x18>
 8002f5c:	2301      	movs	r3, #1
 8002f5e:	e000      	b.n	8002f62 <LL_ADC_IsEnabled+0x1a>
 8002f60:	2300      	movs	r3, #0
}
 8002f62:	4618      	mov	r0, r3
 8002f64:	370c      	adds	r7, #12
 8002f66:	46bd      	mov	sp, r7
 8002f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6c:	4770      	bx	lr

08002f6e <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002f6e:	b480      	push	{r7}
 8002f70:	b083      	sub	sp, #12
 8002f72:	af00      	add	r7, sp, #0
 8002f74:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	689b      	ldr	r3, [r3, #8]
 8002f7a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002f7e:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002f82:	f043 0204 	orr.w	r2, r3, #4
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002f8a:	bf00      	nop
 8002f8c:	370c      	adds	r7, #12
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f94:	4770      	bx	lr

08002f96 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002f96:	b480      	push	{r7}
 8002f98:	b083      	sub	sp, #12
 8002f9a:	af00      	add	r7, sp, #0
 8002f9c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	689b      	ldr	r3, [r3, #8]
 8002fa2:	f003 0304 	and.w	r3, r3, #4
 8002fa6:	2b04      	cmp	r3, #4
 8002fa8:	d101      	bne.n	8002fae <LL_ADC_REG_IsConversionOngoing+0x18>
 8002faa:	2301      	movs	r3, #1
 8002fac:	e000      	b.n	8002fb0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002fae:	2300      	movs	r3, #0
}
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	370c      	adds	r7, #12
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fba:	4770      	bx	lr

08002fbc <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002fbc:	b480      	push	{r7}
 8002fbe:	b083      	sub	sp, #12
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	689b      	ldr	r3, [r3, #8]
 8002fc8:	f003 0308 	and.w	r3, r3, #8
 8002fcc:	2b08      	cmp	r3, #8
 8002fce:	d101      	bne.n	8002fd4 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002fd0:	2301      	movs	r3, #1
 8002fd2:	e000      	b.n	8002fd6 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002fd4:	2300      	movs	r3, #0
}
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	370c      	adds	r7, #12
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe0:	4770      	bx	lr
	...

08002fe4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002fe4:	b590      	push	{r4, r7, lr}
 8002fe6:	b089      	sub	sp, #36	@ 0x24
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002fec:	2300      	movs	r3, #0
 8002fee:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d101      	bne.n	8002ffe <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002ffa:	2301      	movs	r3, #1
 8002ffc:	e1a9      	b.n	8003352 <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	695b      	ldr	r3, [r3, #20]
 8003002:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003008:	2b00      	cmp	r3, #0
 800300a:	d109      	bne.n	8003020 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800300c:	6878      	ldr	r0, [r7, #4]
 800300e:	f7ff f87d 	bl	800210c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	2200      	movs	r2, #0
 8003016:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2200      	movs	r2, #0
 800301c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	4618      	mov	r0, r3
 8003026:	f7ff ff3f 	bl	8002ea8 <LL_ADC_IsDeepPowerDownEnabled>
 800302a:	4603      	mov	r3, r0
 800302c:	2b00      	cmp	r3, #0
 800302e:	d004      	beq.n	800303a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	4618      	mov	r0, r3
 8003036:	f7ff ff25 	bl	8002e84 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	4618      	mov	r0, r3
 8003040:	f7ff ff5a 	bl	8002ef8 <LL_ADC_IsInternalRegulatorEnabled>
 8003044:	4603      	mov	r3, r0
 8003046:	2b00      	cmp	r3, #0
 8003048:	d115      	bne.n	8003076 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	4618      	mov	r0, r3
 8003050:	f7ff ff3e 	bl	8002ed0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003054:	4b9c      	ldr	r3, [pc, #624]	@ (80032c8 <HAL_ADC_Init+0x2e4>)
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	099b      	lsrs	r3, r3, #6
 800305a:	4a9c      	ldr	r2, [pc, #624]	@ (80032cc <HAL_ADC_Init+0x2e8>)
 800305c:	fba2 2303 	umull	r2, r3, r2, r3
 8003060:	099b      	lsrs	r3, r3, #6
 8003062:	3301      	adds	r3, #1
 8003064:	005b      	lsls	r3, r3, #1
 8003066:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003068:	e002      	b.n	8003070 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	3b01      	subs	r3, #1
 800306e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	2b00      	cmp	r3, #0
 8003074:	d1f9      	bne.n	800306a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	4618      	mov	r0, r3
 800307c:	f7ff ff3c 	bl	8002ef8 <LL_ADC_IsInternalRegulatorEnabled>
 8003080:	4603      	mov	r3, r0
 8003082:	2b00      	cmp	r3, #0
 8003084:	d10d      	bne.n	80030a2 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800308a:	f043 0210 	orr.w	r2, r3, #16
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003096:	f043 0201 	orr.w	r2, r3, #1
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 800309e:	2301      	movs	r3, #1
 80030a0:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	4618      	mov	r0, r3
 80030a8:	f7ff ff75 	bl	8002f96 <LL_ADC_REG_IsConversionOngoing>
 80030ac:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030b2:	f003 0310 	and.w	r3, r3, #16
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	f040 8142 	bne.w	8003340 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80030bc:	697b      	ldr	r3, [r7, #20]
 80030be:	2b00      	cmp	r3, #0
 80030c0:	f040 813e 	bne.w	8003340 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030c8:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80030cc:	f043 0202 	orr.w	r2, r3, #2
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	4618      	mov	r0, r3
 80030da:	f7ff ff35 	bl	8002f48 <LL_ADC_IsEnabled>
 80030de:	4603      	mov	r3, r0
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d141      	bne.n	8003168 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80030ec:	d004      	beq.n	80030f8 <HAL_ADC_Init+0x114>
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	4a77      	ldr	r2, [pc, #476]	@ (80032d0 <HAL_ADC_Init+0x2ec>)
 80030f4:	4293      	cmp	r3, r2
 80030f6:	d10f      	bne.n	8003118 <HAL_ADC_Init+0x134>
 80030f8:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80030fc:	f7ff ff24 	bl	8002f48 <LL_ADC_IsEnabled>
 8003100:	4604      	mov	r4, r0
 8003102:	4873      	ldr	r0, [pc, #460]	@ (80032d0 <HAL_ADC_Init+0x2ec>)
 8003104:	f7ff ff20 	bl	8002f48 <LL_ADC_IsEnabled>
 8003108:	4603      	mov	r3, r0
 800310a:	4323      	orrs	r3, r4
 800310c:	2b00      	cmp	r3, #0
 800310e:	bf0c      	ite	eq
 8003110:	2301      	moveq	r3, #1
 8003112:	2300      	movne	r3, #0
 8003114:	b2db      	uxtb	r3, r3
 8003116:	e012      	b.n	800313e <HAL_ADC_Init+0x15a>
 8003118:	486e      	ldr	r0, [pc, #440]	@ (80032d4 <HAL_ADC_Init+0x2f0>)
 800311a:	f7ff ff15 	bl	8002f48 <LL_ADC_IsEnabled>
 800311e:	4604      	mov	r4, r0
 8003120:	486d      	ldr	r0, [pc, #436]	@ (80032d8 <HAL_ADC_Init+0x2f4>)
 8003122:	f7ff ff11 	bl	8002f48 <LL_ADC_IsEnabled>
 8003126:	4603      	mov	r3, r0
 8003128:	431c      	orrs	r4, r3
 800312a:	486c      	ldr	r0, [pc, #432]	@ (80032dc <HAL_ADC_Init+0x2f8>)
 800312c:	f7ff ff0c 	bl	8002f48 <LL_ADC_IsEnabled>
 8003130:	4603      	mov	r3, r0
 8003132:	4323      	orrs	r3, r4
 8003134:	2b00      	cmp	r3, #0
 8003136:	bf0c      	ite	eq
 8003138:	2301      	moveq	r3, #1
 800313a:	2300      	movne	r3, #0
 800313c:	b2db      	uxtb	r3, r3
 800313e:	2b00      	cmp	r3, #0
 8003140:	d012      	beq.n	8003168 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800314a:	d004      	beq.n	8003156 <HAL_ADC_Init+0x172>
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	4a5f      	ldr	r2, [pc, #380]	@ (80032d0 <HAL_ADC_Init+0x2ec>)
 8003152:	4293      	cmp	r3, r2
 8003154:	d101      	bne.n	800315a <HAL_ADC_Init+0x176>
 8003156:	4a62      	ldr	r2, [pc, #392]	@ (80032e0 <HAL_ADC_Init+0x2fc>)
 8003158:	e000      	b.n	800315c <HAL_ADC_Init+0x178>
 800315a:	4a62      	ldr	r2, [pc, #392]	@ (80032e4 <HAL_ADC_Init+0x300>)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	685b      	ldr	r3, [r3, #4]
 8003160:	4619      	mov	r1, r3
 8003162:	4610      	mov	r0, r2
 8003164:	f7ff fcfe 	bl	8002b64 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	7f5b      	ldrb	r3, [r3, #29]
 800316c:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003172:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8003178:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800317e:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003186:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003188:	4313      	orrs	r3, r2
 800318a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003192:	2b01      	cmp	r3, #1
 8003194:	d106      	bne.n	80031a4 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800319a:	3b01      	subs	r3, #1
 800319c:	045b      	lsls	r3, r3, #17
 800319e:	69ba      	ldr	r2, [r7, #24]
 80031a0:	4313      	orrs	r3, r2
 80031a2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d009      	beq.n	80031c0 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031b0:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031b8:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80031ba:	69ba      	ldr	r2, [r7, #24]
 80031bc:	4313      	orrs	r3, r2
 80031be:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	68da      	ldr	r2, [r3, #12]
 80031c6:	4b48      	ldr	r3, [pc, #288]	@ (80032e8 <HAL_ADC_Init+0x304>)
 80031c8:	4013      	ands	r3, r2
 80031ca:	687a      	ldr	r2, [r7, #4]
 80031cc:	6812      	ldr	r2, [r2, #0]
 80031ce:	69b9      	ldr	r1, [r7, #24]
 80031d0:	430b      	orrs	r3, r1
 80031d2:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	691b      	ldr	r3, [r3, #16]
 80031da:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	430a      	orrs	r2, r1
 80031e8:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	4618      	mov	r0, r3
 80031f0:	f7ff fee4 	bl	8002fbc <LL_ADC_INJ_IsConversionOngoing>
 80031f4:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80031f6:	697b      	ldr	r3, [r7, #20]
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d17f      	bne.n	80032fc <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80031fc:	693b      	ldr	r3, [r7, #16]
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d17c      	bne.n	80032fc <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003206:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800320e:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003210:	4313      	orrs	r3, r2
 8003212:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	68db      	ldr	r3, [r3, #12]
 800321a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800321e:	f023 0302 	bic.w	r3, r3, #2
 8003222:	687a      	ldr	r2, [r7, #4]
 8003224:	6812      	ldr	r2, [r2, #0]
 8003226:	69b9      	ldr	r1, [r7, #24]
 8003228:	430b      	orrs	r3, r1
 800322a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	691b      	ldr	r3, [r3, #16]
 8003230:	2b00      	cmp	r3, #0
 8003232:	d017      	beq.n	8003264 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	691a      	ldr	r2, [r3, #16]
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8003242:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800324c:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8003250:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003254:	687a      	ldr	r2, [r7, #4]
 8003256:	6911      	ldr	r1, [r2, #16]
 8003258:	687a      	ldr	r2, [r7, #4]
 800325a:	6812      	ldr	r2, [r2, #0]
 800325c:	430b      	orrs	r3, r1
 800325e:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8003262:	e013      	b.n	800328c <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	691a      	ldr	r2, [r3, #16]
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8003272:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800327c:	687a      	ldr	r2, [r7, #4]
 800327e:	6812      	ldr	r2, [r2, #0]
 8003280:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8003284:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003288:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003292:	2b01      	cmp	r3, #1
 8003294:	d12a      	bne.n	80032ec <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	691b      	ldr	r3, [r3, #16]
 800329c:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80032a0:	f023 0304 	bic.w	r3, r3, #4
 80032a4:	687a      	ldr	r2, [r7, #4]
 80032a6:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 80032a8:	687a      	ldr	r2, [r7, #4]
 80032aa:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80032ac:	4311      	orrs	r1, r2
 80032ae:	687a      	ldr	r2, [r7, #4]
 80032b0:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80032b2:	4311      	orrs	r1, r2
 80032b4:	687a      	ldr	r2, [r7, #4]
 80032b6:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80032b8:	430a      	orrs	r2, r1
 80032ba:	431a      	orrs	r2, r3
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f042 0201 	orr.w	r2, r2, #1
 80032c4:	611a      	str	r2, [r3, #16]
 80032c6:	e019      	b.n	80032fc <HAL_ADC_Init+0x318>
 80032c8:	20000000 	.word	0x20000000
 80032cc:	053e2d63 	.word	0x053e2d63
 80032d0:	50000100 	.word	0x50000100
 80032d4:	50000400 	.word	0x50000400
 80032d8:	50000500 	.word	0x50000500
 80032dc:	50000600 	.word	0x50000600
 80032e0:	50000300 	.word	0x50000300
 80032e4:	50000700 	.word	0x50000700
 80032e8:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	691a      	ldr	r2, [r3, #16]
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f022 0201 	bic.w	r2, r2, #1
 80032fa:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	695b      	ldr	r3, [r3, #20]
 8003300:	2b01      	cmp	r3, #1
 8003302:	d10c      	bne.n	800331e <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800330a:	f023 010f 	bic.w	r1, r3, #15
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6a1b      	ldr	r3, [r3, #32]
 8003312:	1e5a      	subs	r2, r3, #1
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	430a      	orrs	r2, r1
 800331a:	631a      	str	r2, [r3, #48]	@ 0x30
 800331c:	e007      	b.n	800332e <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f022 020f 	bic.w	r2, r2, #15
 800332c:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003332:	f023 0303 	bic.w	r3, r3, #3
 8003336:	f043 0201 	orr.w	r2, r3, #1
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	65da      	str	r2, [r3, #92]	@ 0x5c
 800333e:	e007      	b.n	8003350 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003344:	f043 0210 	orr.w	r2, r3, #16
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 800334c:	2301      	movs	r3, #1
 800334e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003350:	7ffb      	ldrb	r3, [r7, #31]
}
 8003352:	4618      	mov	r0, r3
 8003354:	3724      	adds	r7, #36	@ 0x24
 8003356:	46bd      	mov	sp, r7
 8003358:	bd90      	pop	{r4, r7, pc}
 800335a:	bf00      	nop

0800335c <HAL_ADC_Start_IT>:
  *          before calling HAL_ADC_Start_IT().
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	b086      	sub	sp, #24
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800336c:	d004      	beq.n	8003378 <HAL_ADC_Start_IT+0x1c>
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	4a92      	ldr	r2, [pc, #584]	@ (80035bc <HAL_ADC_Start_IT+0x260>)
 8003374:	4293      	cmp	r3, r2
 8003376:	d101      	bne.n	800337c <HAL_ADC_Start_IT+0x20>
 8003378:	4b91      	ldr	r3, [pc, #580]	@ (80035c0 <HAL_ADC_Start_IT+0x264>)
 800337a:	e000      	b.n	800337e <HAL_ADC_Start_IT+0x22>
 800337c:	4b91      	ldr	r3, [pc, #580]	@ (80035c4 <HAL_ADC_Start_IT+0x268>)
 800337e:	4618      	mov	r0, r3
 8003380:	f7ff fd64 	bl	8002e4c <LL_ADC_GetMultimode>
 8003384:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	4618      	mov	r0, r3
 800338c:	f7ff fe03 	bl	8002f96 <LL_ADC_REG_IsConversionOngoing>
 8003390:	4603      	mov	r3, r0
 8003392:	2b00      	cmp	r3, #0
 8003394:	f040 8132 	bne.w	80035fc <HAL_ADC_Start_IT+0x2a0>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800339e:	2b01      	cmp	r3, #1
 80033a0:	d101      	bne.n	80033a6 <HAL_ADC_Start_IT+0x4a>
 80033a2:	2302      	movs	r3, #2
 80033a4:	e12d      	b.n	8003602 <HAL_ADC_Start_IT+0x2a6>
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	2201      	movs	r2, #1
 80033aa:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80033ae:	6878      	ldr	r0, [r7, #4]
 80033b0:	f001 f8cc 	bl	800454c <ADC_Enable>
 80033b4:	4603      	mov	r3, r0
 80033b6:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80033b8:	7dfb      	ldrb	r3, [r7, #23]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	f040 8119 	bne.w	80035f2 <HAL_ADC_Start_IT+0x296>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033c4:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80033c8:	f023 0301 	bic.w	r3, r3, #1
 80033cc:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	4a78      	ldr	r2, [pc, #480]	@ (80035bc <HAL_ADC_Start_IT+0x260>)
 80033da:	4293      	cmp	r3, r2
 80033dc:	d009      	beq.n	80033f2 <HAL_ADC_Start_IT+0x96>
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	4a79      	ldr	r2, [pc, #484]	@ (80035c8 <HAL_ADC_Start_IT+0x26c>)
 80033e4:	4293      	cmp	r3, r2
 80033e6:	d002      	beq.n	80033ee <HAL_ADC_Start_IT+0x92>
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	e003      	b.n	80033f6 <HAL_ADC_Start_IT+0x9a>
 80033ee:	4b77      	ldr	r3, [pc, #476]	@ (80035cc <HAL_ADC_Start_IT+0x270>)
 80033f0:	e001      	b.n	80033f6 <HAL_ADC_Start_IT+0x9a>
 80033f2:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80033f6:	687a      	ldr	r2, [r7, #4]
 80033f8:	6812      	ldr	r2, [r2, #0]
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d002      	beq.n	8003404 <HAL_ADC_Start_IT+0xa8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80033fe:	693b      	ldr	r3, [r7, #16]
 8003400:	2b00      	cmp	r3, #0
 8003402:	d105      	bne.n	8003410 <HAL_ADC_Start_IT+0xb4>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003408:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	65da      	str	r2, [r3, #92]	@ 0x5c
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003414:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003418:	2b00      	cmp	r3, #0
 800341a:	d006      	beq.n	800342a <HAL_ADC_Start_IT+0xce>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003420:	f023 0206 	bic.w	r2, r3, #6
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	661a      	str	r2, [r3, #96]	@ 0x60
 8003428:	e002      	b.n	8003430 <HAL_ADC_Start_IT+0xd4>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	2200      	movs	r2, #0
 800342e:	661a      	str	r2, [r3, #96]	@ 0x60
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	221c      	movs	r2, #28
 8003436:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2200      	movs	r2, #0
 800343c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

      /* Disable all interruptions before enabling the desired ones */
      __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	685a      	ldr	r2, [r3, #4]
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f022 021c 	bic.w	r2, r2, #28
 800344e:	605a      	str	r2, [r3, #4]

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	699b      	ldr	r3, [r3, #24]
 8003454:	2b08      	cmp	r3, #8
 8003456:	d108      	bne.n	800346a <HAL_ADC_Start_IT+0x10e>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	685a      	ldr	r2, [r3, #4]
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f042 0208 	orr.w	r2, r2, #8
 8003466:	605a      	str	r2, [r3, #4]
          break;
 8003468:	e008      	b.n	800347c <HAL_ADC_Start_IT+0x120>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	685a      	ldr	r2, [r3, #4]
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f042 0204 	orr.w	r2, r2, #4
 8003478:	605a      	str	r2, [r3, #4]
          break;
 800347a:	bf00      	nop

      /* Enable ADC overrun interrupt */
      /* If hadc->Init.Overrun is set to ADC_OVR_DATA_PRESERVED, only then is
         ADC_IT_OVR enabled; otherwise data overwrite is considered as normal
         behavior and no CPU time is lost for a non-processed interruption */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003480:	2b00      	cmp	r3, #0
 8003482:	d107      	bne.n	8003494 <HAL_ADC_Start_IT+0x138>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	685a      	ldr	r2, [r3, #4]
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f042 0210 	orr.w	r2, r2, #16
 8003492:	605a      	str	r2, [r3, #4]
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	4a48      	ldr	r2, [pc, #288]	@ (80035bc <HAL_ADC_Start_IT+0x260>)
 800349a:	4293      	cmp	r3, r2
 800349c:	d009      	beq.n	80034b2 <HAL_ADC_Start_IT+0x156>
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	4a49      	ldr	r2, [pc, #292]	@ (80035c8 <HAL_ADC_Start_IT+0x26c>)
 80034a4:	4293      	cmp	r3, r2
 80034a6:	d002      	beq.n	80034ae <HAL_ADC_Start_IT+0x152>
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	e003      	b.n	80034b6 <HAL_ADC_Start_IT+0x15a>
 80034ae:	4b47      	ldr	r3, [pc, #284]	@ (80035cc <HAL_ADC_Start_IT+0x270>)
 80034b0:	e001      	b.n	80034b6 <HAL_ADC_Start_IT+0x15a>
 80034b2:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80034b6:	687a      	ldr	r2, [r7, #4]
 80034b8:	6812      	ldr	r2, [r2, #0]
 80034ba:	4293      	cmp	r3, r2
 80034bc:	d008      	beq.n	80034d0 <HAL_ADC_Start_IT+0x174>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80034be:	693b      	ldr	r3, [r7, #16]
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d005      	beq.n	80034d0 <HAL_ADC_Start_IT+0x174>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80034c4:	693b      	ldr	r3, [r7, #16]
 80034c6:	2b05      	cmp	r3, #5
 80034c8:	d002      	beq.n	80034d0 <HAL_ADC_Start_IT+0x174>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80034ca:	693b      	ldr	r3, [r7, #16]
 80034cc:	2b09      	cmp	r3, #9
 80034ce:	d13a      	bne.n	8003546 <HAL_ADC_Start_IT+0x1ea>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	68db      	ldr	r3, [r3, #12]
 80034d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d02d      	beq.n	800353a <HAL_ADC_Start_IT+0x1de>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034e2:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80034e6:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Enable as well injected interruptions in case
           HAL_ADCEx_InjectedStart_IT() has not been called beforehand. This
           allows to start regular and injected conversions when JAUTO is
           set with a single call to HAL_ADC_Start_IT() */
          switch (hadc->Init.EOCSelection)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	699b      	ldr	r3, [r3, #24]
 80034f2:	2b08      	cmp	r3, #8
 80034f4:	d110      	bne.n	8003518 <HAL_ADC_Start_IT+0x1bc>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	685a      	ldr	r2, [r3, #4]
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f022 0220 	bic.w	r2, r2, #32
 8003504:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	685a      	ldr	r2, [r3, #4]
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003514:	605a      	str	r2, [r3, #4]
              break;
 8003516:	e010      	b.n	800353a <HAL_ADC_Start_IT+0x1de>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	685a      	ldr	r2, [r3, #4]
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003526:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	685a      	ldr	r2, [r3, #4]
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f042 0220 	orr.w	r2, r2, #32
 8003536:	605a      	str	r2, [r3, #4]
              break;
 8003538:	bf00      	nop
          }
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	4618      	mov	r0, r3
 8003540:	f7ff fd15 	bl	8002f6e <LL_ADC_REG_StartConversion>
 8003544:	e05c      	b.n	8003600 <HAL_ADC_Start_IT+0x2a4>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800354a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* if Master ADC JAUTO bit is set, Slave injected interruptions
           are enabled nevertheless (for same reason as above) */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	4a19      	ldr	r2, [pc, #100]	@ (80035bc <HAL_ADC_Start_IT+0x260>)
 8003558:	4293      	cmp	r3, r2
 800355a:	d009      	beq.n	8003570 <HAL_ADC_Start_IT+0x214>
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	4a19      	ldr	r2, [pc, #100]	@ (80035c8 <HAL_ADC_Start_IT+0x26c>)
 8003562:	4293      	cmp	r3, r2
 8003564:	d002      	beq.n	800356c <HAL_ADC_Start_IT+0x210>
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	e003      	b.n	8003574 <HAL_ADC_Start_IT+0x218>
 800356c:	4b17      	ldr	r3, [pc, #92]	@ (80035cc <HAL_ADC_Start_IT+0x270>)
 800356e:	e001      	b.n	8003574 <HAL_ADC_Start_IT+0x218>
 8003570:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8003574:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	68db      	ldr	r3, [r3, #12]
 800357a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800357e:	2b00      	cmp	r3, #0
 8003580:	d03e      	beq.n	8003600 <HAL_ADC_Start_IT+0x2a4>
        {
          /* First, update Slave State in setting HAL_ADC_STATE_INJ_BUSY bit
             and in resetting HAL_ADC_STATE_INJ_EOC bit */
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003586:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800358a:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	65da      	str	r2, [r3, #92]	@ 0x5c
          /* Next, set Slave injected interruptions */
          switch (hadc->Init.EOCSelection)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	699b      	ldr	r3, [r3, #24]
 8003596:	2b08      	cmp	r3, #8
 8003598:	d11a      	bne.n	80035d0 <HAL_ADC_Start_IT+0x274>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	685a      	ldr	r2, [r3, #4]
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f022 0220 	bic.w	r2, r2, #32
 80035a8:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	685a      	ldr	r2, [r3, #4]
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80035b8:	605a      	str	r2, [r3, #4]
              break;
 80035ba:	e021      	b.n	8003600 <HAL_ADC_Start_IT+0x2a4>
 80035bc:	50000100 	.word	0x50000100
 80035c0:	50000300 	.word	0x50000300
 80035c4:	50000700 	.word	0x50000700
 80035c8:	50000500 	.word	0x50000500
 80035cc:	50000400 	.word	0x50000400
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	685a      	ldr	r2, [r3, #4]
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80035de:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	685a      	ldr	r2, [r3, #4]
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f042 0220 	orr.w	r2, r2, #32
 80035ee:	605a      	str	r2, [r3, #4]
              break;
 80035f0:	e006      	b.n	8003600 <HAL_ADC_Start_IT+0x2a4>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	2200      	movs	r2, #0
 80035f6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 80035fa:	e001      	b.n	8003600 <HAL_ADC_Start_IT+0x2a4>
    }

  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80035fc:	2302      	movs	r3, #2
 80035fe:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8003600:	7dfb      	ldrb	r3, [r7, #23]
}
 8003602:	4618      	mov	r0, r3
 8003604:	3718      	adds	r7, #24
 8003606:	46bd      	mov	sp, r7
 8003608:	bd80      	pop	{r7, pc}
 800360a:	bf00      	nop

0800360c <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 800360c:	b580      	push	{r7, lr}
 800360e:	b086      	sub	sp, #24
 8003610:	af00      	add	r7, sp, #0
 8003612:	60f8      	str	r0, [r7, #12]
 8003614:	60b9      	str	r1, [r7, #8]
 8003616:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003620:	d004      	beq.n	800362c <HAL_ADC_Start_DMA+0x20>
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	4a5a      	ldr	r2, [pc, #360]	@ (8003790 <HAL_ADC_Start_DMA+0x184>)
 8003628:	4293      	cmp	r3, r2
 800362a:	d101      	bne.n	8003630 <HAL_ADC_Start_DMA+0x24>
 800362c:	4b59      	ldr	r3, [pc, #356]	@ (8003794 <HAL_ADC_Start_DMA+0x188>)
 800362e:	e000      	b.n	8003632 <HAL_ADC_Start_DMA+0x26>
 8003630:	4b59      	ldr	r3, [pc, #356]	@ (8003798 <HAL_ADC_Start_DMA+0x18c>)
 8003632:	4618      	mov	r0, r3
 8003634:	f7ff fc0a 	bl	8002e4c <LL_ADC_GetMultimode>
 8003638:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	4618      	mov	r0, r3
 8003640:	f7ff fca9 	bl	8002f96 <LL_ADC_REG_IsConversionOngoing>
 8003644:	4603      	mov	r3, r0
 8003646:	2b00      	cmp	r3, #0
 8003648:	f040 809b 	bne.w	8003782 <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8003652:	2b01      	cmp	r3, #1
 8003654:	d101      	bne.n	800365a <HAL_ADC_Start_DMA+0x4e>
 8003656:	2302      	movs	r3, #2
 8003658:	e096      	b.n	8003788 <HAL_ADC_Start_DMA+0x17c>
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	2201      	movs	r2, #1
 800365e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	4a4d      	ldr	r2, [pc, #308]	@ (800379c <HAL_ADC_Start_DMA+0x190>)
 8003668:	4293      	cmp	r3, r2
 800366a:	d008      	beq.n	800367e <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800366c:	693b      	ldr	r3, [r7, #16]
 800366e:	2b00      	cmp	r3, #0
 8003670:	d005      	beq.n	800367e <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003672:	693b      	ldr	r3, [r7, #16]
 8003674:	2b05      	cmp	r3, #5
 8003676:	d002      	beq.n	800367e <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003678:	693b      	ldr	r3, [r7, #16]
 800367a:	2b09      	cmp	r3, #9
 800367c:	d17a      	bne.n	8003774 <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800367e:	68f8      	ldr	r0, [r7, #12]
 8003680:	f000 ff64 	bl	800454c <ADC_Enable>
 8003684:	4603      	mov	r3, r0
 8003686:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8003688:	7dfb      	ldrb	r3, [r7, #23]
 800368a:	2b00      	cmp	r3, #0
 800368c:	d16d      	bne.n	800376a <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003692:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003696:	f023 0301 	bic.w	r3, r3, #1
 800369a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	4a3a      	ldr	r2, [pc, #232]	@ (8003790 <HAL_ADC_Start_DMA+0x184>)
 80036a8:	4293      	cmp	r3, r2
 80036aa:	d009      	beq.n	80036c0 <HAL_ADC_Start_DMA+0xb4>
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	4a3b      	ldr	r2, [pc, #236]	@ (80037a0 <HAL_ADC_Start_DMA+0x194>)
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d002      	beq.n	80036bc <HAL_ADC_Start_DMA+0xb0>
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	e003      	b.n	80036c4 <HAL_ADC_Start_DMA+0xb8>
 80036bc:	4b39      	ldr	r3, [pc, #228]	@ (80037a4 <HAL_ADC_Start_DMA+0x198>)
 80036be:	e001      	b.n	80036c4 <HAL_ADC_Start_DMA+0xb8>
 80036c0:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80036c4:	68fa      	ldr	r2, [r7, #12]
 80036c6:	6812      	ldr	r2, [r2, #0]
 80036c8:	4293      	cmp	r3, r2
 80036ca:	d002      	beq.n	80036d2 <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80036cc:	693b      	ldr	r3, [r7, #16]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d105      	bne.n	80036de <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036d6:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036e2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d006      	beq.n	80036f8 <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80036ee:	f023 0206 	bic.w	r2, r3, #6
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	661a      	str	r2, [r3, #96]	@ 0x60
 80036f6:	e002      	b.n	80036fe <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	2200      	movs	r2, #0
 80036fc:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003702:	4a29      	ldr	r2, [pc, #164]	@ (80037a8 <HAL_ADC_Start_DMA+0x19c>)
 8003704:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800370a:	4a28      	ldr	r2, [pc, #160]	@ (80037ac <HAL_ADC_Start_DMA+0x1a0>)
 800370c:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003712:	4a27      	ldr	r2, [pc, #156]	@ (80037b0 <HAL_ADC_Start_DMA+0x1a4>)
 8003714:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	221c      	movs	r2, #28
 800371c:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	2200      	movs	r2, #0
 8003722:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	685a      	ldr	r2, [r3, #4]
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f042 0210 	orr.w	r2, r2, #16
 8003734:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	68da      	ldr	r2, [r3, #12]
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f042 0201 	orr.w	r2, r2, #1
 8003744:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	3340      	adds	r3, #64	@ 0x40
 8003750:	4619      	mov	r1, r3
 8003752:	68ba      	ldr	r2, [r7, #8]
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	f001 fb3b 	bl	8004dd0 <HAL_DMA_Start_IT>
 800375a:	4603      	mov	r3, r0
 800375c:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	4618      	mov	r0, r3
 8003764:	f7ff fc03 	bl	8002f6e <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8003768:	e00d      	b.n	8003786 <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	2200      	movs	r2, #0
 800376e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 8003772:	e008      	b.n	8003786 <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8003774:	2301      	movs	r3, #1
 8003776:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	2200      	movs	r2, #0
 800377c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 8003780:	e001      	b.n	8003786 <HAL_ADC_Start_DMA+0x17a>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003782:	2302      	movs	r3, #2
 8003784:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8003786:	7dfb      	ldrb	r3, [r7, #23]
}
 8003788:	4618      	mov	r0, r3
 800378a:	3718      	adds	r7, #24
 800378c:	46bd      	mov	sp, r7
 800378e:	bd80      	pop	{r7, pc}
 8003790:	50000100 	.word	0x50000100
 8003794:	50000300 	.word	0x50000300
 8003798:	50000700 	.word	0x50000700
 800379c:	50000600 	.word	0x50000600
 80037a0:	50000500 	.word	0x50000500
 80037a4:	50000400 	.word	0x50000400
 80037a8:	08004679 	.word	0x08004679
 80037ac:	08004751 	.word	0x08004751
 80037b0:	0800476d 	.word	0x0800476d

080037b4 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 80037b4:	b480      	push	{r7}
 80037b6:	b083      	sub	sp, #12
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 80037c2:	4618      	mov	r0, r3
 80037c4:	370c      	adds	r7, #12
 80037c6:	46bd      	mov	sp, r7
 80037c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037cc:	4770      	bx	lr
	...

080037d0 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b08a      	sub	sp, #40	@ 0x28
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 80037d8:	2300      	movs	r3, #0
 80037da:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	685b      	ldr	r3, [r3, #4]
 80037ea:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80037f4:	d004      	beq.n	8003800 <HAL_ADC_IRQHandler+0x30>
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	4a8e      	ldr	r2, [pc, #568]	@ (8003a34 <HAL_ADC_IRQHandler+0x264>)
 80037fc:	4293      	cmp	r3, r2
 80037fe:	d101      	bne.n	8003804 <HAL_ADC_IRQHandler+0x34>
 8003800:	4b8d      	ldr	r3, [pc, #564]	@ (8003a38 <HAL_ADC_IRQHandler+0x268>)
 8003802:	e000      	b.n	8003806 <HAL_ADC_IRQHandler+0x36>
 8003804:	4b8d      	ldr	r3, [pc, #564]	@ (8003a3c <HAL_ADC_IRQHandler+0x26c>)
 8003806:	4618      	mov	r0, r3
 8003808:	f7ff fb20 	bl	8002e4c <LL_ADC_GetMultimode>
 800380c:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 800380e:	69fb      	ldr	r3, [r7, #28]
 8003810:	f003 0302 	and.w	r3, r3, #2
 8003814:	2b00      	cmp	r3, #0
 8003816:	d017      	beq.n	8003848 <HAL_ADC_IRQHandler+0x78>
 8003818:	69bb      	ldr	r3, [r7, #24]
 800381a:	f003 0302 	and.w	r3, r3, #2
 800381e:	2b00      	cmp	r3, #0
 8003820:	d012      	beq.n	8003848 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003826:	f003 0310 	and.w	r3, r3, #16
 800382a:	2b00      	cmp	r3, #0
 800382c:	d105      	bne.n	800383a <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003832:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 800383a:	6878      	ldr	r0, [r7, #4]
 800383c:	f000 fffe 	bl	800483c <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	2202      	movs	r2, #2
 8003846:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003848:	69fb      	ldr	r3, [r7, #28]
 800384a:	f003 0304 	and.w	r3, r3, #4
 800384e:	2b00      	cmp	r3, #0
 8003850:	d004      	beq.n	800385c <HAL_ADC_IRQHandler+0x8c>
 8003852:	69bb      	ldr	r3, [r7, #24]
 8003854:	f003 0304 	and.w	r3, r3, #4
 8003858:	2b00      	cmp	r3, #0
 800385a:	d10b      	bne.n	8003874 <HAL_ADC_IRQHandler+0xa4>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800385c:	69fb      	ldr	r3, [r7, #28]
 800385e:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003862:	2b00      	cmp	r3, #0
 8003864:	f000 8094 	beq.w	8003990 <HAL_ADC_IRQHandler+0x1c0>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003868:	69bb      	ldr	r3, [r7, #24]
 800386a:	f003 0308 	and.w	r3, r3, #8
 800386e:	2b00      	cmp	r3, #0
 8003870:	f000 808e 	beq.w	8003990 <HAL_ADC_IRQHandler+0x1c0>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003878:	f003 0310 	and.w	r3, r3, #16
 800387c:	2b00      	cmp	r3, #0
 800387e:	d105      	bne.n	800388c <HAL_ADC_IRQHandler+0xbc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003884:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	4618      	mov	r0, r3
 8003892:	f7ff fa39 	bl	8002d08 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003896:	4603      	mov	r3, r0
 8003898:	2b00      	cmp	r3, #0
 800389a:	d072      	beq.n	8003982 <HAL_ADC_IRQHandler+0x1b2>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	4a64      	ldr	r2, [pc, #400]	@ (8003a34 <HAL_ADC_IRQHandler+0x264>)
 80038a2:	4293      	cmp	r3, r2
 80038a4:	d009      	beq.n	80038ba <HAL_ADC_IRQHandler+0xea>
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	4a65      	ldr	r2, [pc, #404]	@ (8003a40 <HAL_ADC_IRQHandler+0x270>)
 80038ac:	4293      	cmp	r3, r2
 80038ae:	d002      	beq.n	80038b6 <HAL_ADC_IRQHandler+0xe6>
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	e003      	b.n	80038be <HAL_ADC_IRQHandler+0xee>
 80038b6:	4b63      	ldr	r3, [pc, #396]	@ (8003a44 <HAL_ADC_IRQHandler+0x274>)
 80038b8:	e001      	b.n	80038be <HAL_ADC_IRQHandler+0xee>
 80038ba:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80038be:	687a      	ldr	r2, [r7, #4]
 80038c0:	6812      	ldr	r2, [r2, #0]
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d008      	beq.n	80038d8 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80038c6:	697b      	ldr	r3, [r7, #20]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d005      	beq.n	80038d8 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80038cc:	697b      	ldr	r3, [r7, #20]
 80038ce:	2b05      	cmp	r3, #5
 80038d0:	d002      	beq.n	80038d8 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80038d2:	697b      	ldr	r3, [r7, #20]
 80038d4:	2b09      	cmp	r3, #9
 80038d6:	d104      	bne.n	80038e2 <HAL_ADC_IRQHandler+0x112>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	68db      	ldr	r3, [r3, #12]
 80038de:	623b      	str	r3, [r7, #32]
 80038e0:	e014      	b.n	800390c <HAL_ADC_IRQHandler+0x13c>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	4a53      	ldr	r2, [pc, #332]	@ (8003a34 <HAL_ADC_IRQHandler+0x264>)
 80038e8:	4293      	cmp	r3, r2
 80038ea:	d009      	beq.n	8003900 <HAL_ADC_IRQHandler+0x130>
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	4a53      	ldr	r2, [pc, #332]	@ (8003a40 <HAL_ADC_IRQHandler+0x270>)
 80038f2:	4293      	cmp	r3, r2
 80038f4:	d002      	beq.n	80038fc <HAL_ADC_IRQHandler+0x12c>
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	e003      	b.n	8003904 <HAL_ADC_IRQHandler+0x134>
 80038fc:	4b51      	ldr	r3, [pc, #324]	@ (8003a44 <HAL_ADC_IRQHandler+0x274>)
 80038fe:	e001      	b.n	8003904 <HAL_ADC_IRQHandler+0x134>
 8003900:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8003904:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003906:	693b      	ldr	r3, [r7, #16]
 8003908:	68db      	ldr	r3, [r3, #12]
 800390a:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 800390c:	6a3b      	ldr	r3, [r7, #32]
 800390e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003912:	2b00      	cmp	r3, #0
 8003914:	d135      	bne.n	8003982 <HAL_ADC_IRQHandler+0x1b2>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f003 0308 	and.w	r3, r3, #8
 8003920:	2b08      	cmp	r3, #8
 8003922:	d12e      	bne.n	8003982 <HAL_ADC_IRQHandler+0x1b2>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	4618      	mov	r0, r3
 800392a:	f7ff fb34 	bl	8002f96 <LL_ADC_REG_IsConversionOngoing>
 800392e:	4603      	mov	r3, r0
 8003930:	2b00      	cmp	r3, #0
 8003932:	d11a      	bne.n	800396a <HAL_ADC_IRQHandler+0x19a>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	685a      	ldr	r2, [r3, #4]
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f022 020c 	bic.w	r2, r2, #12
 8003942:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003948:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	65da      	str	r2, [r3, #92]	@ 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003954:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003958:	2b00      	cmp	r3, #0
 800395a:	d112      	bne.n	8003982 <HAL_ADC_IRQHandler+0x1b2>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003960:	f043 0201 	orr.w	r2, r3, #1
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003968:	e00b      	b.n	8003982 <HAL_ADC_IRQHandler+0x1b2>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800396e:	f043 0210 	orr.w	r2, r3, #16
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	65da      	str	r2, [r3, #92]	@ 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800397a:	f043 0201 	orr.w	r2, r3, #1
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	661a      	str	r2, [r3, #96]	@ 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003982:	6878      	ldr	r0, [r7, #4]
 8003984:	f7fd fc78 	bl	8001278 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	220c      	movs	r2, #12
 800398e:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003990:	69fb      	ldr	r3, [r7, #28]
 8003992:	f003 0320 	and.w	r3, r3, #32
 8003996:	2b00      	cmp	r3, #0
 8003998:	d004      	beq.n	80039a4 <HAL_ADC_IRQHandler+0x1d4>
 800399a:	69bb      	ldr	r3, [r7, #24]
 800399c:	f003 0320 	and.w	r3, r3, #32
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d10b      	bne.n	80039bc <HAL_ADC_IRQHandler+0x1ec>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80039a4:	69fb      	ldr	r3, [r7, #28]
 80039a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	f000 80b3 	beq.w	8003b16 <HAL_ADC_IRQHandler+0x346>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80039b0:	69bb      	ldr	r3, [r7, #24]
 80039b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	f000 80ad 	beq.w	8003b16 <HAL_ADC_IRQHandler+0x346>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039c0:	f003 0310 	and.w	r3, r3, #16
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d105      	bne.n	80039d4 <HAL_ADC_IRQHandler+0x204>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039cc:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	4618      	mov	r0, r3
 80039da:	f7ff f9d4 	bl	8002d86 <LL_ADC_INJ_IsTriggerSourceSWStart>
 80039de:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	4618      	mov	r0, r3
 80039e6:	f7ff f98f 	bl	8002d08 <LL_ADC_REG_IsTriggerSourceSWStart>
 80039ea:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	4a10      	ldr	r2, [pc, #64]	@ (8003a34 <HAL_ADC_IRQHandler+0x264>)
 80039f2:	4293      	cmp	r3, r2
 80039f4:	d009      	beq.n	8003a0a <HAL_ADC_IRQHandler+0x23a>
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	4a11      	ldr	r2, [pc, #68]	@ (8003a40 <HAL_ADC_IRQHandler+0x270>)
 80039fc:	4293      	cmp	r3, r2
 80039fe:	d002      	beq.n	8003a06 <HAL_ADC_IRQHandler+0x236>
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	e003      	b.n	8003a0e <HAL_ADC_IRQHandler+0x23e>
 8003a06:	4b0f      	ldr	r3, [pc, #60]	@ (8003a44 <HAL_ADC_IRQHandler+0x274>)
 8003a08:	e001      	b.n	8003a0e <HAL_ADC_IRQHandler+0x23e>
 8003a0a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8003a0e:	687a      	ldr	r2, [r7, #4]
 8003a10:	6812      	ldr	r2, [r2, #0]
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d008      	beq.n	8003a28 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003a16:	697b      	ldr	r3, [r7, #20]
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d005      	beq.n	8003a28 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8003a1c:	697b      	ldr	r3, [r7, #20]
 8003a1e:	2b06      	cmp	r3, #6
 8003a20:	d002      	beq.n	8003a28 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8003a22:	697b      	ldr	r3, [r7, #20]
 8003a24:	2b07      	cmp	r3, #7
 8003a26:	d10f      	bne.n	8003a48 <HAL_ADC_IRQHandler+0x278>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	68db      	ldr	r3, [r3, #12]
 8003a2e:	623b      	str	r3, [r7, #32]
 8003a30:	e01f      	b.n	8003a72 <HAL_ADC_IRQHandler+0x2a2>
 8003a32:	bf00      	nop
 8003a34:	50000100 	.word	0x50000100
 8003a38:	50000300 	.word	0x50000300
 8003a3c:	50000700 	.word	0x50000700
 8003a40:	50000500 	.word	0x50000500
 8003a44:	50000400 	.word	0x50000400
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	4a8b      	ldr	r2, [pc, #556]	@ (8003c7c <HAL_ADC_IRQHandler+0x4ac>)
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d009      	beq.n	8003a66 <HAL_ADC_IRQHandler+0x296>
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	4a8a      	ldr	r2, [pc, #552]	@ (8003c80 <HAL_ADC_IRQHandler+0x4b0>)
 8003a58:	4293      	cmp	r3, r2
 8003a5a:	d002      	beq.n	8003a62 <HAL_ADC_IRQHandler+0x292>
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	e003      	b.n	8003a6a <HAL_ADC_IRQHandler+0x29a>
 8003a62:	4b88      	ldr	r3, [pc, #544]	@ (8003c84 <HAL_ADC_IRQHandler+0x4b4>)
 8003a64:	e001      	b.n	8003a6a <HAL_ADC_IRQHandler+0x29a>
 8003a66:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8003a6a:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003a6c:	693b      	ldr	r3, [r7, #16]
 8003a6e:	68db      	ldr	r3, [r3, #12]
 8003a70:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d047      	beq.n	8003b08 <HAL_ADC_IRQHandler+0x338>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8003a78:	6a3b      	ldr	r3, [r7, #32]
 8003a7a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d007      	beq.n	8003a92 <HAL_ADC_IRQHandler+0x2c2>
 8003a82:	68bb      	ldr	r3, [r7, #8]
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d03f      	beq.n	8003b08 <HAL_ADC_IRQHandler+0x338>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8003a88:	6a3b      	ldr	r3, [r7, #32]
 8003a8a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d13a      	bne.n	8003b08 <HAL_ADC_IRQHandler+0x338>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a9c:	2b40      	cmp	r3, #64	@ 0x40
 8003a9e:	d133      	bne.n	8003b08 <HAL_ADC_IRQHandler+0x338>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8003aa0:	6a3b      	ldr	r3, [r7, #32]
 8003aa2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d12e      	bne.n	8003b08 <HAL_ADC_IRQHandler+0x338>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	4618      	mov	r0, r3
 8003ab0:	f7ff fa84 	bl	8002fbc <LL_ADC_INJ_IsConversionOngoing>
 8003ab4:	4603      	mov	r3, r0
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d11a      	bne.n	8003af0 <HAL_ADC_IRQHandler+0x320>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	685a      	ldr	r2, [r3, #4]
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003ac8:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ace:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	65da      	str	r2, [r3, #92]	@ 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ada:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d112      	bne.n	8003b08 <HAL_ADC_IRQHandler+0x338>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ae6:	f043 0201 	orr.w	r2, r3, #1
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003aee:	e00b      	b.n	8003b08 <HAL_ADC_IRQHandler+0x338>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003af4:	f043 0210 	orr.w	r2, r3, #16
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	65da      	str	r2, [r3, #92]	@ 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b00:	f043 0201 	orr.w	r2, r3, #1
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	661a      	str	r2, [r3, #96]	@ 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003b08:	6878      	ldr	r0, [r7, #4]
 8003b0a:	f000 fe6f 	bl	80047ec <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	2260      	movs	r2, #96	@ 0x60
 8003b14:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8003b16:	69fb      	ldr	r3, [r7, #28]
 8003b18:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d011      	beq.n	8003b44 <HAL_ADC_IRQHandler+0x374>
 8003b20:	69bb      	ldr	r3, [r7, #24]
 8003b22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d00c      	beq.n	8003b44 <HAL_ADC_IRQHandler+0x374>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b2e:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003b36:	6878      	ldr	r0, [r7, #4]
 8003b38:	f000 f8b4 	bl	8003ca4 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	2280      	movs	r2, #128	@ 0x80
 8003b42:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8003b44:	69fb      	ldr	r3, [r7, #28]
 8003b46:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d012      	beq.n	8003b74 <HAL_ADC_IRQHandler+0x3a4>
 8003b4e:	69bb      	ldr	r3, [r7, #24]
 8003b50:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d00d      	beq.n	8003b74 <HAL_ADC_IRQHandler+0x3a4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b5c:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8003b64:	6878      	ldr	r0, [r7, #4]
 8003b66:	f000 fe55 	bl	8004814 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003b72:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8003b74:	69fb      	ldr	r3, [r7, #28]
 8003b76:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d012      	beq.n	8003ba4 <HAL_ADC_IRQHandler+0x3d4>
 8003b7e:	69bb      	ldr	r3, [r7, #24]
 8003b80:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d00d      	beq.n	8003ba4 <HAL_ADC_IRQHandler+0x3d4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b8c:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8003b94:	6878      	ldr	r0, [r7, #4]
 8003b96:	f000 fe47 	bl	8004828 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003ba2:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8003ba4:	69fb      	ldr	r3, [r7, #28]
 8003ba6:	f003 0310 	and.w	r3, r3, #16
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d043      	beq.n	8003c36 <HAL_ADC_IRQHandler+0x466>
 8003bae:	69bb      	ldr	r3, [r7, #24]
 8003bb0:	f003 0310 	and.w	r3, r3, #16
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d03e      	beq.n	8003c36 <HAL_ADC_IRQHandler+0x466>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d102      	bne.n	8003bc6 <HAL_ADC_IRQHandler+0x3f6>
    {
      overrun_error = 1UL;
 8003bc0:	2301      	movs	r3, #1
 8003bc2:	627b      	str	r3, [r7, #36]	@ 0x24
 8003bc4:	e021      	b.n	8003c0a <HAL_ADC_IRQHandler+0x43a>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8003bc6:	697b      	ldr	r3, [r7, #20]
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d015      	beq.n	8003bf8 <HAL_ADC_IRQHandler+0x428>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003bd4:	d004      	beq.n	8003be0 <HAL_ADC_IRQHandler+0x410>
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	4a28      	ldr	r2, [pc, #160]	@ (8003c7c <HAL_ADC_IRQHandler+0x4ac>)
 8003bdc:	4293      	cmp	r3, r2
 8003bde:	d101      	bne.n	8003be4 <HAL_ADC_IRQHandler+0x414>
 8003be0:	4b29      	ldr	r3, [pc, #164]	@ (8003c88 <HAL_ADC_IRQHandler+0x4b8>)
 8003be2:	e000      	b.n	8003be6 <HAL_ADC_IRQHandler+0x416>
 8003be4:	4b29      	ldr	r3, [pc, #164]	@ (8003c8c <HAL_ADC_IRQHandler+0x4bc>)
 8003be6:	4618      	mov	r0, r3
 8003be8:	f7ff f93e 	bl	8002e68 <LL_ADC_GetMultiDMATransfer>
 8003bec:	4603      	mov	r3, r0
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d00b      	beq.n	8003c0a <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 8003bf2:	2301      	movs	r3, #1
 8003bf4:	627b      	str	r3, [r7, #36]	@ 0x24
 8003bf6:	e008      	b.n	8003c0a <HAL_ADC_IRQHandler+0x43a>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	68db      	ldr	r3, [r3, #12]
 8003bfe:	f003 0301 	and.w	r3, r3, #1
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d001      	beq.n	8003c0a <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 8003c06:	2301      	movs	r3, #1
 8003c08:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8003c0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c0c:	2b01      	cmp	r3, #1
 8003c0e:	d10e      	bne.n	8003c2e <HAL_ADC_IRQHandler+0x45e>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c14:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c20:	f043 0202 	orr.w	r2, r3, #2
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	661a      	str	r2, [r3, #96]	@ 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8003c28:	6878      	ldr	r0, [r7, #4]
 8003c2a:	f000 f845 	bl	8003cb8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	2210      	movs	r2, #16
 8003c34:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8003c36:	69fb      	ldr	r3, [r7, #28]
 8003c38:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d018      	beq.n	8003c72 <HAL_ADC_IRQHandler+0x4a2>
 8003c40:	69bb      	ldr	r3, [r7, #24]
 8003c42:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d013      	beq.n	8003c72 <HAL_ADC_IRQHandler+0x4a2>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c4e:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c5a:	f043 0208 	orr.w	r2, r3, #8
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003c6a:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8003c6c:	6878      	ldr	r0, [r7, #4]
 8003c6e:	f000 fdc7 	bl	8004800 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8003c72:	bf00      	nop
 8003c74:	3728      	adds	r7, #40	@ 0x28
 8003c76:	46bd      	mov	sp, r7
 8003c78:	bd80      	pop	{r7, pc}
 8003c7a:	bf00      	nop
 8003c7c:	50000100 	.word	0x50000100
 8003c80:	50000500 	.word	0x50000500
 8003c84:	50000400 	.word	0x50000400
 8003c88:	50000300 	.word	0x50000300
 8003c8c:	50000700 	.word	0x50000700

08003c90 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003c90:	b480      	push	{r7}
 8003c92:	b083      	sub	sp, #12
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8003c98:	bf00      	nop
 8003c9a:	370c      	adds	r7, #12
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca2:	4770      	bx	lr

08003ca4 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8003ca4:	b480      	push	{r7}
 8003ca6:	b083      	sub	sp, #12
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8003cac:	bf00      	nop
 8003cae:	370c      	adds	r7, #12
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb6:	4770      	bx	lr

08003cb8 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003cb8:	b480      	push	{r7}
 8003cba:	b083      	sub	sp, #12
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003cc0:	bf00      	nop
 8003cc2:	370c      	adds	r7, #12
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cca:	4770      	bx	lr

08003ccc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	b0b6      	sub	sp, #216	@ 0xd8
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
 8003cd4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003cdc:	2300      	movs	r3, #0
 8003cde:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8003ce6:	2b01      	cmp	r3, #1
 8003ce8:	d102      	bne.n	8003cf0 <HAL_ADC_ConfigChannel+0x24>
 8003cea:	2302      	movs	r3, #2
 8003cec:	f000 bc13 	b.w	8004516 <HAL_ADC_ConfigChannel+0x84a>
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2201      	movs	r2, #1
 8003cf4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	f7ff f94a 	bl	8002f96 <LL_ADC_REG_IsConversionOngoing>
 8003d02:	4603      	mov	r3, r0
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	f040 83f3 	bne.w	80044f0 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6818      	ldr	r0, [r3, #0]
 8003d0e:	683b      	ldr	r3, [r7, #0]
 8003d10:	6859      	ldr	r1, [r3, #4]
 8003d12:	683b      	ldr	r3, [r7, #0]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	461a      	mov	r2, r3
 8003d18:	f7ff f809 	bl	8002d2e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	4618      	mov	r0, r3
 8003d22:	f7ff f938 	bl	8002f96 <LL_ADC_REG_IsConversionOngoing>
 8003d26:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	4618      	mov	r0, r3
 8003d30:	f7ff f944 	bl	8002fbc <LL_ADC_INJ_IsConversionOngoing>
 8003d34:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003d38:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	f040 81d9 	bne.w	80040f4 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003d42:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	f040 81d4 	bne.w	80040f4 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	689b      	ldr	r3, [r3, #8]
 8003d50:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003d54:	d10f      	bne.n	8003d76 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6818      	ldr	r0, [r3, #0]
 8003d5a:	683b      	ldr	r3, [r7, #0]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	2200      	movs	r2, #0
 8003d60:	4619      	mov	r1, r3
 8003d62:	f7ff f823 	bl	8002dac <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8003d6e:	4618      	mov	r0, r3
 8003d70:	f7fe ffb7 	bl	8002ce2 <LL_ADC_SetSamplingTimeCommonConfig>
 8003d74:	e00e      	b.n	8003d94 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6818      	ldr	r0, [r3, #0]
 8003d7a:	683b      	ldr	r3, [r7, #0]
 8003d7c:	6819      	ldr	r1, [r3, #0]
 8003d7e:	683b      	ldr	r3, [r7, #0]
 8003d80:	689b      	ldr	r3, [r3, #8]
 8003d82:	461a      	mov	r2, r3
 8003d84:	f7ff f812 	bl	8002dac <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	2100      	movs	r1, #0
 8003d8e:	4618      	mov	r0, r3
 8003d90:	f7fe ffa7 	bl	8002ce2 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	695a      	ldr	r2, [r3, #20]
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	68db      	ldr	r3, [r3, #12]
 8003d9e:	08db      	lsrs	r3, r3, #3
 8003da0:	f003 0303 	and.w	r3, r3, #3
 8003da4:	005b      	lsls	r3, r3, #1
 8003da6:	fa02 f303 	lsl.w	r3, r2, r3
 8003daa:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	691b      	ldr	r3, [r3, #16]
 8003db2:	2b04      	cmp	r3, #4
 8003db4:	d022      	beq.n	8003dfc <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6818      	ldr	r0, [r3, #0]
 8003dba:	683b      	ldr	r3, [r7, #0]
 8003dbc:	6919      	ldr	r1, [r3, #16]
 8003dbe:	683b      	ldr	r3, [r7, #0]
 8003dc0:	681a      	ldr	r2, [r3, #0]
 8003dc2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003dc6:	f7fe ff01 	bl	8002bcc <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6818      	ldr	r0, [r3, #0]
 8003dce:	683b      	ldr	r3, [r7, #0]
 8003dd0:	6919      	ldr	r1, [r3, #16]
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	699b      	ldr	r3, [r3, #24]
 8003dd6:	461a      	mov	r2, r3
 8003dd8:	f7fe ff4d 	bl	8002c76 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	6818      	ldr	r0, [r3, #0]
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8003de4:	683b      	ldr	r3, [r7, #0]
 8003de6:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8003de8:	2b01      	cmp	r3, #1
 8003dea:	d102      	bne.n	8003df2 <HAL_ADC_ConfigChannel+0x126>
 8003dec:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003df0:	e000      	b.n	8003df4 <HAL_ADC_ConfigChannel+0x128>
 8003df2:	2300      	movs	r3, #0
 8003df4:	461a      	mov	r2, r3
 8003df6:	f7fe ff59 	bl	8002cac <LL_ADC_SetOffsetSaturation>
 8003dfa:	e17b      	b.n	80040f4 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	2100      	movs	r1, #0
 8003e02:	4618      	mov	r0, r3
 8003e04:	f7fe ff06 	bl	8002c14 <LL_ADC_GetOffsetChannel>
 8003e08:	4603      	mov	r3, r0
 8003e0a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d10a      	bne.n	8003e28 <HAL_ADC_ConfigChannel+0x15c>
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	2100      	movs	r1, #0
 8003e18:	4618      	mov	r0, r3
 8003e1a:	f7fe fefb 	bl	8002c14 <LL_ADC_GetOffsetChannel>
 8003e1e:	4603      	mov	r3, r0
 8003e20:	0e9b      	lsrs	r3, r3, #26
 8003e22:	f003 021f 	and.w	r2, r3, #31
 8003e26:	e01e      	b.n	8003e66 <HAL_ADC_ConfigChannel+0x19a>
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	2100      	movs	r1, #0
 8003e2e:	4618      	mov	r0, r3
 8003e30:	f7fe fef0 	bl	8002c14 <LL_ADC_GetOffsetChannel>
 8003e34:	4603      	mov	r3, r0
 8003e36:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e3a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003e3e:	fa93 f3a3 	rbit	r3, r3
 8003e42:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003e46:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003e4a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003e4e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d101      	bne.n	8003e5a <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8003e56:	2320      	movs	r3, #32
 8003e58:	e004      	b.n	8003e64 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8003e5a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003e5e:	fab3 f383 	clz	r3, r3
 8003e62:	b2db      	uxtb	r3, r3
 8003e64:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003e66:	683b      	ldr	r3, [r7, #0]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d105      	bne.n	8003e7e <HAL_ADC_ConfigChannel+0x1b2>
 8003e72:	683b      	ldr	r3, [r7, #0]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	0e9b      	lsrs	r3, r3, #26
 8003e78:	f003 031f 	and.w	r3, r3, #31
 8003e7c:	e018      	b.n	8003eb0 <HAL_ADC_ConfigChannel+0x1e4>
 8003e7e:	683b      	ldr	r3, [r7, #0]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e86:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8003e8a:	fa93 f3a3 	rbit	r3, r3
 8003e8e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8003e92:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003e96:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8003e9a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d101      	bne.n	8003ea6 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8003ea2:	2320      	movs	r3, #32
 8003ea4:	e004      	b.n	8003eb0 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8003ea6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003eaa:	fab3 f383 	clz	r3, r3
 8003eae:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003eb0:	429a      	cmp	r2, r3
 8003eb2:	d106      	bne.n	8003ec2 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	2200      	movs	r2, #0
 8003eba:	2100      	movs	r1, #0
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	f7fe febf 	bl	8002c40 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	2101      	movs	r1, #1
 8003ec8:	4618      	mov	r0, r3
 8003eca:	f7fe fea3 	bl	8002c14 <LL_ADC_GetOffsetChannel>
 8003ece:	4603      	mov	r3, r0
 8003ed0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d10a      	bne.n	8003eee <HAL_ADC_ConfigChannel+0x222>
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	2101      	movs	r1, #1
 8003ede:	4618      	mov	r0, r3
 8003ee0:	f7fe fe98 	bl	8002c14 <LL_ADC_GetOffsetChannel>
 8003ee4:	4603      	mov	r3, r0
 8003ee6:	0e9b      	lsrs	r3, r3, #26
 8003ee8:	f003 021f 	and.w	r2, r3, #31
 8003eec:	e01e      	b.n	8003f2c <HAL_ADC_ConfigChannel+0x260>
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	2101      	movs	r1, #1
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	f7fe fe8d 	bl	8002c14 <LL_ADC_GetOffsetChannel>
 8003efa:	4603      	mov	r3, r0
 8003efc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f00:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003f04:	fa93 f3a3 	rbit	r3, r3
 8003f08:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8003f0c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003f10:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8003f14:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d101      	bne.n	8003f20 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8003f1c:	2320      	movs	r3, #32
 8003f1e:	e004      	b.n	8003f2a <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8003f20:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003f24:	fab3 f383 	clz	r3, r3
 8003f28:	b2db      	uxtb	r3, r3
 8003f2a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003f2c:	683b      	ldr	r3, [r7, #0]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d105      	bne.n	8003f44 <HAL_ADC_ConfigChannel+0x278>
 8003f38:	683b      	ldr	r3, [r7, #0]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	0e9b      	lsrs	r3, r3, #26
 8003f3e:	f003 031f 	and.w	r3, r3, #31
 8003f42:	e018      	b.n	8003f76 <HAL_ADC_ConfigChannel+0x2aa>
 8003f44:	683b      	ldr	r3, [r7, #0]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f4c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003f50:	fa93 f3a3 	rbit	r3, r3
 8003f54:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8003f58:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003f5c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8003f60:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d101      	bne.n	8003f6c <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8003f68:	2320      	movs	r3, #32
 8003f6a:	e004      	b.n	8003f76 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8003f6c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003f70:	fab3 f383 	clz	r3, r3
 8003f74:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003f76:	429a      	cmp	r2, r3
 8003f78:	d106      	bne.n	8003f88 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	2200      	movs	r2, #0
 8003f80:	2101      	movs	r1, #1
 8003f82:	4618      	mov	r0, r3
 8003f84:	f7fe fe5c 	bl	8002c40 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	2102      	movs	r1, #2
 8003f8e:	4618      	mov	r0, r3
 8003f90:	f7fe fe40 	bl	8002c14 <LL_ADC_GetOffsetChannel>
 8003f94:	4603      	mov	r3, r0
 8003f96:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d10a      	bne.n	8003fb4 <HAL_ADC_ConfigChannel+0x2e8>
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	2102      	movs	r1, #2
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	f7fe fe35 	bl	8002c14 <LL_ADC_GetOffsetChannel>
 8003faa:	4603      	mov	r3, r0
 8003fac:	0e9b      	lsrs	r3, r3, #26
 8003fae:	f003 021f 	and.w	r2, r3, #31
 8003fb2:	e01e      	b.n	8003ff2 <HAL_ADC_ConfigChannel+0x326>
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	2102      	movs	r1, #2
 8003fba:	4618      	mov	r0, r3
 8003fbc:	f7fe fe2a 	bl	8002c14 <LL_ADC_GetOffsetChannel>
 8003fc0:	4603      	mov	r3, r0
 8003fc2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fc6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003fca:	fa93 f3a3 	rbit	r3, r3
 8003fce:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8003fd2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003fd6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8003fda:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d101      	bne.n	8003fe6 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8003fe2:	2320      	movs	r3, #32
 8003fe4:	e004      	b.n	8003ff0 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8003fe6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003fea:	fab3 f383 	clz	r3, r3
 8003fee:	b2db      	uxtb	r3, r3
 8003ff0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003ff2:	683b      	ldr	r3, [r7, #0]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d105      	bne.n	800400a <HAL_ADC_ConfigChannel+0x33e>
 8003ffe:	683b      	ldr	r3, [r7, #0]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	0e9b      	lsrs	r3, r3, #26
 8004004:	f003 031f 	and.w	r3, r3, #31
 8004008:	e016      	b.n	8004038 <HAL_ADC_ConfigChannel+0x36c>
 800400a:	683b      	ldr	r3, [r7, #0]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004012:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004016:	fa93 f3a3 	rbit	r3, r3
 800401a:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 800401c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800401e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8004022:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004026:	2b00      	cmp	r3, #0
 8004028:	d101      	bne.n	800402e <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 800402a:	2320      	movs	r3, #32
 800402c:	e004      	b.n	8004038 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 800402e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004032:	fab3 f383 	clz	r3, r3
 8004036:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004038:	429a      	cmp	r2, r3
 800403a:	d106      	bne.n	800404a <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	2200      	movs	r2, #0
 8004042:	2102      	movs	r1, #2
 8004044:	4618      	mov	r0, r3
 8004046:	f7fe fdfb 	bl	8002c40 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	2103      	movs	r1, #3
 8004050:	4618      	mov	r0, r3
 8004052:	f7fe fddf 	bl	8002c14 <LL_ADC_GetOffsetChannel>
 8004056:	4603      	mov	r3, r0
 8004058:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800405c:	2b00      	cmp	r3, #0
 800405e:	d10a      	bne.n	8004076 <HAL_ADC_ConfigChannel+0x3aa>
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	2103      	movs	r1, #3
 8004066:	4618      	mov	r0, r3
 8004068:	f7fe fdd4 	bl	8002c14 <LL_ADC_GetOffsetChannel>
 800406c:	4603      	mov	r3, r0
 800406e:	0e9b      	lsrs	r3, r3, #26
 8004070:	f003 021f 	and.w	r2, r3, #31
 8004074:	e017      	b.n	80040a6 <HAL_ADC_ConfigChannel+0x3da>
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	2103      	movs	r1, #3
 800407c:	4618      	mov	r0, r3
 800407e:	f7fe fdc9 	bl	8002c14 <LL_ADC_GetOffsetChannel>
 8004082:	4603      	mov	r3, r0
 8004084:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004086:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004088:	fa93 f3a3 	rbit	r3, r3
 800408c:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 800408e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004090:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8004092:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004094:	2b00      	cmp	r3, #0
 8004096:	d101      	bne.n	800409c <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8004098:	2320      	movs	r3, #32
 800409a:	e003      	b.n	80040a4 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 800409c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800409e:	fab3 f383 	clz	r3, r3
 80040a2:	b2db      	uxtb	r3, r3
 80040a4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80040a6:	683b      	ldr	r3, [r7, #0]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d105      	bne.n	80040be <HAL_ADC_ConfigChannel+0x3f2>
 80040b2:	683b      	ldr	r3, [r7, #0]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	0e9b      	lsrs	r3, r3, #26
 80040b8:	f003 031f 	and.w	r3, r3, #31
 80040bc:	e011      	b.n	80040e2 <HAL_ADC_ConfigChannel+0x416>
 80040be:	683b      	ldr	r3, [r7, #0]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040c4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80040c6:	fa93 f3a3 	rbit	r3, r3
 80040ca:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 80040cc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80040ce:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 80040d0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d101      	bne.n	80040da <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 80040d6:	2320      	movs	r3, #32
 80040d8:	e003      	b.n	80040e2 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 80040da:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80040dc:	fab3 f383 	clz	r3, r3
 80040e0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80040e2:	429a      	cmp	r2, r3
 80040e4:	d106      	bne.n	80040f4 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	2200      	movs	r2, #0
 80040ec:	2103      	movs	r1, #3
 80040ee:	4618      	mov	r0, r3
 80040f0:	f7fe fda6 	bl	8002c40 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	4618      	mov	r0, r3
 80040fa:	f7fe ff25 	bl	8002f48 <LL_ADC_IsEnabled>
 80040fe:	4603      	mov	r3, r0
 8004100:	2b00      	cmp	r3, #0
 8004102:	f040 813d 	bne.w	8004380 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6818      	ldr	r0, [r3, #0]
 800410a:	683b      	ldr	r3, [r7, #0]
 800410c:	6819      	ldr	r1, [r3, #0]
 800410e:	683b      	ldr	r3, [r7, #0]
 8004110:	68db      	ldr	r3, [r3, #12]
 8004112:	461a      	mov	r2, r3
 8004114:	f7fe fe76 	bl	8002e04 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004118:	683b      	ldr	r3, [r7, #0]
 800411a:	68db      	ldr	r3, [r3, #12]
 800411c:	4aa2      	ldr	r2, [pc, #648]	@ (80043a8 <HAL_ADC_ConfigChannel+0x6dc>)
 800411e:	4293      	cmp	r3, r2
 8004120:	f040 812e 	bne.w	8004380 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004128:	683b      	ldr	r3, [r7, #0]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004130:	2b00      	cmp	r3, #0
 8004132:	d10b      	bne.n	800414c <HAL_ADC_ConfigChannel+0x480>
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	0e9b      	lsrs	r3, r3, #26
 800413a:	3301      	adds	r3, #1
 800413c:	f003 031f 	and.w	r3, r3, #31
 8004140:	2b09      	cmp	r3, #9
 8004142:	bf94      	ite	ls
 8004144:	2301      	movls	r3, #1
 8004146:	2300      	movhi	r3, #0
 8004148:	b2db      	uxtb	r3, r3
 800414a:	e019      	b.n	8004180 <HAL_ADC_ConfigChannel+0x4b4>
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004152:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004154:	fa93 f3a3 	rbit	r3, r3
 8004158:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 800415a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800415c:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 800415e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004160:	2b00      	cmp	r3, #0
 8004162:	d101      	bne.n	8004168 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8004164:	2320      	movs	r3, #32
 8004166:	e003      	b.n	8004170 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8004168:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800416a:	fab3 f383 	clz	r3, r3
 800416e:	b2db      	uxtb	r3, r3
 8004170:	3301      	adds	r3, #1
 8004172:	f003 031f 	and.w	r3, r3, #31
 8004176:	2b09      	cmp	r3, #9
 8004178:	bf94      	ite	ls
 800417a:	2301      	movls	r3, #1
 800417c:	2300      	movhi	r3, #0
 800417e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004180:	2b00      	cmp	r3, #0
 8004182:	d079      	beq.n	8004278 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004184:	683b      	ldr	r3, [r7, #0]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800418c:	2b00      	cmp	r3, #0
 800418e:	d107      	bne.n	80041a0 <HAL_ADC_ConfigChannel+0x4d4>
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	0e9b      	lsrs	r3, r3, #26
 8004196:	3301      	adds	r3, #1
 8004198:	069b      	lsls	r3, r3, #26
 800419a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800419e:	e015      	b.n	80041cc <HAL_ADC_ConfigChannel+0x500>
 80041a0:	683b      	ldr	r3, [r7, #0]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041a6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80041a8:	fa93 f3a3 	rbit	r3, r3
 80041ac:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 80041ae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80041b0:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 80041b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d101      	bne.n	80041bc <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 80041b8:	2320      	movs	r3, #32
 80041ba:	e003      	b.n	80041c4 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 80041bc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80041be:	fab3 f383 	clz	r3, r3
 80041c2:	b2db      	uxtb	r3, r3
 80041c4:	3301      	adds	r3, #1
 80041c6:	069b      	lsls	r3, r3, #26
 80041c8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80041cc:	683b      	ldr	r3, [r7, #0]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d109      	bne.n	80041ec <HAL_ADC_ConfigChannel+0x520>
 80041d8:	683b      	ldr	r3, [r7, #0]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	0e9b      	lsrs	r3, r3, #26
 80041de:	3301      	adds	r3, #1
 80041e0:	f003 031f 	and.w	r3, r3, #31
 80041e4:	2101      	movs	r1, #1
 80041e6:	fa01 f303 	lsl.w	r3, r1, r3
 80041ea:	e017      	b.n	800421c <HAL_ADC_ConfigChannel+0x550>
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041f2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80041f4:	fa93 f3a3 	rbit	r3, r3
 80041f8:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 80041fa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80041fc:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 80041fe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004200:	2b00      	cmp	r3, #0
 8004202:	d101      	bne.n	8004208 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8004204:	2320      	movs	r3, #32
 8004206:	e003      	b.n	8004210 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8004208:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800420a:	fab3 f383 	clz	r3, r3
 800420e:	b2db      	uxtb	r3, r3
 8004210:	3301      	adds	r3, #1
 8004212:	f003 031f 	and.w	r3, r3, #31
 8004216:	2101      	movs	r1, #1
 8004218:	fa01 f303 	lsl.w	r3, r1, r3
 800421c:	ea42 0103 	orr.w	r1, r2, r3
 8004220:	683b      	ldr	r3, [r7, #0]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004228:	2b00      	cmp	r3, #0
 800422a:	d10a      	bne.n	8004242 <HAL_ADC_ConfigChannel+0x576>
 800422c:	683b      	ldr	r3, [r7, #0]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	0e9b      	lsrs	r3, r3, #26
 8004232:	3301      	adds	r3, #1
 8004234:	f003 021f 	and.w	r2, r3, #31
 8004238:	4613      	mov	r3, r2
 800423a:	005b      	lsls	r3, r3, #1
 800423c:	4413      	add	r3, r2
 800423e:	051b      	lsls	r3, r3, #20
 8004240:	e018      	b.n	8004274 <HAL_ADC_ConfigChannel+0x5a8>
 8004242:	683b      	ldr	r3, [r7, #0]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004248:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800424a:	fa93 f3a3 	rbit	r3, r3
 800424e:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8004250:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004252:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8004254:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004256:	2b00      	cmp	r3, #0
 8004258:	d101      	bne.n	800425e <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 800425a:	2320      	movs	r3, #32
 800425c:	e003      	b.n	8004266 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 800425e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004260:	fab3 f383 	clz	r3, r3
 8004264:	b2db      	uxtb	r3, r3
 8004266:	3301      	adds	r3, #1
 8004268:	f003 021f 	and.w	r2, r3, #31
 800426c:	4613      	mov	r3, r2
 800426e:	005b      	lsls	r3, r3, #1
 8004270:	4413      	add	r3, r2
 8004272:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004274:	430b      	orrs	r3, r1
 8004276:	e07e      	b.n	8004376 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004278:	683b      	ldr	r3, [r7, #0]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004280:	2b00      	cmp	r3, #0
 8004282:	d107      	bne.n	8004294 <HAL_ADC_ConfigChannel+0x5c8>
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	0e9b      	lsrs	r3, r3, #26
 800428a:	3301      	adds	r3, #1
 800428c:	069b      	lsls	r3, r3, #26
 800428e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004292:	e015      	b.n	80042c0 <HAL_ADC_ConfigChannel+0x5f4>
 8004294:	683b      	ldr	r3, [r7, #0]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800429a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800429c:	fa93 f3a3 	rbit	r3, r3
 80042a0:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 80042a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042a4:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 80042a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d101      	bne.n	80042b0 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 80042ac:	2320      	movs	r3, #32
 80042ae:	e003      	b.n	80042b8 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 80042b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042b2:	fab3 f383 	clz	r3, r3
 80042b6:	b2db      	uxtb	r3, r3
 80042b8:	3301      	adds	r3, #1
 80042ba:	069b      	lsls	r3, r3, #26
 80042bc:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80042c0:	683b      	ldr	r3, [r7, #0]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d109      	bne.n	80042e0 <HAL_ADC_ConfigChannel+0x614>
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	0e9b      	lsrs	r3, r3, #26
 80042d2:	3301      	adds	r3, #1
 80042d4:	f003 031f 	and.w	r3, r3, #31
 80042d8:	2101      	movs	r1, #1
 80042da:	fa01 f303 	lsl.w	r3, r1, r3
 80042de:	e017      	b.n	8004310 <HAL_ADC_ConfigChannel+0x644>
 80042e0:	683b      	ldr	r3, [r7, #0]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042e6:	6a3b      	ldr	r3, [r7, #32]
 80042e8:	fa93 f3a3 	rbit	r3, r3
 80042ec:	61fb      	str	r3, [r7, #28]
  return result;
 80042ee:	69fb      	ldr	r3, [r7, #28]
 80042f0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80042f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d101      	bne.n	80042fc <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 80042f8:	2320      	movs	r3, #32
 80042fa:	e003      	b.n	8004304 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 80042fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042fe:	fab3 f383 	clz	r3, r3
 8004302:	b2db      	uxtb	r3, r3
 8004304:	3301      	adds	r3, #1
 8004306:	f003 031f 	and.w	r3, r3, #31
 800430a:	2101      	movs	r1, #1
 800430c:	fa01 f303 	lsl.w	r3, r1, r3
 8004310:	ea42 0103 	orr.w	r1, r2, r3
 8004314:	683b      	ldr	r3, [r7, #0]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800431c:	2b00      	cmp	r3, #0
 800431e:	d10d      	bne.n	800433c <HAL_ADC_ConfigChannel+0x670>
 8004320:	683b      	ldr	r3, [r7, #0]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	0e9b      	lsrs	r3, r3, #26
 8004326:	3301      	adds	r3, #1
 8004328:	f003 021f 	and.w	r2, r3, #31
 800432c:	4613      	mov	r3, r2
 800432e:	005b      	lsls	r3, r3, #1
 8004330:	4413      	add	r3, r2
 8004332:	3b1e      	subs	r3, #30
 8004334:	051b      	lsls	r3, r3, #20
 8004336:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800433a:	e01b      	b.n	8004374 <HAL_ADC_ConfigChannel+0x6a8>
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004342:	697b      	ldr	r3, [r7, #20]
 8004344:	fa93 f3a3 	rbit	r3, r3
 8004348:	613b      	str	r3, [r7, #16]
  return result;
 800434a:	693b      	ldr	r3, [r7, #16]
 800434c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800434e:	69bb      	ldr	r3, [r7, #24]
 8004350:	2b00      	cmp	r3, #0
 8004352:	d101      	bne.n	8004358 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8004354:	2320      	movs	r3, #32
 8004356:	e003      	b.n	8004360 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8004358:	69bb      	ldr	r3, [r7, #24]
 800435a:	fab3 f383 	clz	r3, r3
 800435e:	b2db      	uxtb	r3, r3
 8004360:	3301      	adds	r3, #1
 8004362:	f003 021f 	and.w	r2, r3, #31
 8004366:	4613      	mov	r3, r2
 8004368:	005b      	lsls	r3, r3, #1
 800436a:	4413      	add	r3, r2
 800436c:	3b1e      	subs	r3, #30
 800436e:	051b      	lsls	r3, r3, #20
 8004370:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004374:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8004376:	683a      	ldr	r2, [r7, #0]
 8004378:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800437a:	4619      	mov	r1, r3
 800437c:	f7fe fd16 	bl	8002dac <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8004380:	683b      	ldr	r3, [r7, #0]
 8004382:	681a      	ldr	r2, [r3, #0]
 8004384:	4b09      	ldr	r3, [pc, #36]	@ (80043ac <HAL_ADC_ConfigChannel+0x6e0>)
 8004386:	4013      	ands	r3, r2
 8004388:	2b00      	cmp	r3, #0
 800438a:	f000 80be 	beq.w	800450a <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004396:	d004      	beq.n	80043a2 <HAL_ADC_ConfigChannel+0x6d6>
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	4a04      	ldr	r2, [pc, #16]	@ (80043b0 <HAL_ADC_ConfigChannel+0x6e4>)
 800439e:	4293      	cmp	r3, r2
 80043a0:	d10a      	bne.n	80043b8 <HAL_ADC_ConfigChannel+0x6ec>
 80043a2:	4b04      	ldr	r3, [pc, #16]	@ (80043b4 <HAL_ADC_ConfigChannel+0x6e8>)
 80043a4:	e009      	b.n	80043ba <HAL_ADC_ConfigChannel+0x6ee>
 80043a6:	bf00      	nop
 80043a8:	407f0000 	.word	0x407f0000
 80043ac:	80080000 	.word	0x80080000
 80043b0:	50000100 	.word	0x50000100
 80043b4:	50000300 	.word	0x50000300
 80043b8:	4b59      	ldr	r3, [pc, #356]	@ (8004520 <HAL_ADC_ConfigChannel+0x854>)
 80043ba:	4618      	mov	r0, r3
 80043bc:	f7fe fbf8 	bl	8002bb0 <LL_ADC_GetCommonPathInternalCh>
 80043c0:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80043c4:	683b      	ldr	r3, [r7, #0]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	4a56      	ldr	r2, [pc, #344]	@ (8004524 <HAL_ADC_ConfigChannel+0x858>)
 80043ca:	4293      	cmp	r3, r2
 80043cc:	d004      	beq.n	80043d8 <HAL_ADC_ConfigChannel+0x70c>
 80043ce:	683b      	ldr	r3, [r7, #0]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	4a55      	ldr	r2, [pc, #340]	@ (8004528 <HAL_ADC_ConfigChannel+0x85c>)
 80043d4:	4293      	cmp	r3, r2
 80043d6:	d13a      	bne.n	800444e <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80043d8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80043dc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d134      	bne.n	800444e <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80043ec:	d005      	beq.n	80043fa <HAL_ADC_ConfigChannel+0x72e>
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	4a4e      	ldr	r2, [pc, #312]	@ (800452c <HAL_ADC_ConfigChannel+0x860>)
 80043f4:	4293      	cmp	r3, r2
 80043f6:	f040 8085 	bne.w	8004504 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004402:	d004      	beq.n	800440e <HAL_ADC_ConfigChannel+0x742>
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	4a49      	ldr	r2, [pc, #292]	@ (8004530 <HAL_ADC_ConfigChannel+0x864>)
 800440a:	4293      	cmp	r3, r2
 800440c:	d101      	bne.n	8004412 <HAL_ADC_ConfigChannel+0x746>
 800440e:	4a49      	ldr	r2, [pc, #292]	@ (8004534 <HAL_ADC_ConfigChannel+0x868>)
 8004410:	e000      	b.n	8004414 <HAL_ADC_ConfigChannel+0x748>
 8004412:	4a43      	ldr	r2, [pc, #268]	@ (8004520 <HAL_ADC_ConfigChannel+0x854>)
 8004414:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004418:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800441c:	4619      	mov	r1, r3
 800441e:	4610      	mov	r0, r2
 8004420:	f7fe fbb3 	bl	8002b8a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004424:	4b44      	ldr	r3, [pc, #272]	@ (8004538 <HAL_ADC_ConfigChannel+0x86c>)
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	099b      	lsrs	r3, r3, #6
 800442a:	4a44      	ldr	r2, [pc, #272]	@ (800453c <HAL_ADC_ConfigChannel+0x870>)
 800442c:	fba2 2303 	umull	r2, r3, r2, r3
 8004430:	099b      	lsrs	r3, r3, #6
 8004432:	1c5a      	adds	r2, r3, #1
 8004434:	4613      	mov	r3, r2
 8004436:	005b      	lsls	r3, r3, #1
 8004438:	4413      	add	r3, r2
 800443a:	009b      	lsls	r3, r3, #2
 800443c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800443e:	e002      	b.n	8004446 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	3b01      	subs	r3, #1
 8004444:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	2b00      	cmp	r3, #0
 800444a:	d1f9      	bne.n	8004440 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800444c:	e05a      	b.n	8004504 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800444e:	683b      	ldr	r3, [r7, #0]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	4a3b      	ldr	r2, [pc, #236]	@ (8004540 <HAL_ADC_ConfigChannel+0x874>)
 8004454:	4293      	cmp	r3, r2
 8004456:	d125      	bne.n	80044a4 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004458:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800445c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004460:	2b00      	cmp	r3, #0
 8004462:	d11f      	bne.n	80044a4 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	4a31      	ldr	r2, [pc, #196]	@ (8004530 <HAL_ADC_ConfigChannel+0x864>)
 800446a:	4293      	cmp	r3, r2
 800446c:	d104      	bne.n	8004478 <HAL_ADC_ConfigChannel+0x7ac>
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	4a34      	ldr	r2, [pc, #208]	@ (8004544 <HAL_ADC_ConfigChannel+0x878>)
 8004474:	4293      	cmp	r3, r2
 8004476:	d047      	beq.n	8004508 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004480:	d004      	beq.n	800448c <HAL_ADC_ConfigChannel+0x7c0>
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	4a2a      	ldr	r2, [pc, #168]	@ (8004530 <HAL_ADC_ConfigChannel+0x864>)
 8004488:	4293      	cmp	r3, r2
 800448a:	d101      	bne.n	8004490 <HAL_ADC_ConfigChannel+0x7c4>
 800448c:	4a29      	ldr	r2, [pc, #164]	@ (8004534 <HAL_ADC_ConfigChannel+0x868>)
 800448e:	e000      	b.n	8004492 <HAL_ADC_ConfigChannel+0x7c6>
 8004490:	4a23      	ldr	r2, [pc, #140]	@ (8004520 <HAL_ADC_ConfigChannel+0x854>)
 8004492:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004496:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800449a:	4619      	mov	r1, r3
 800449c:	4610      	mov	r0, r2
 800449e:	f7fe fb74 	bl	8002b8a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80044a2:	e031      	b.n	8004508 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80044a4:	683b      	ldr	r3, [r7, #0]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	4a27      	ldr	r2, [pc, #156]	@ (8004548 <HAL_ADC_ConfigChannel+0x87c>)
 80044aa:	4293      	cmp	r3, r2
 80044ac:	d12d      	bne.n	800450a <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80044ae:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80044b2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d127      	bne.n	800450a <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	4a1c      	ldr	r2, [pc, #112]	@ (8004530 <HAL_ADC_ConfigChannel+0x864>)
 80044c0:	4293      	cmp	r3, r2
 80044c2:	d022      	beq.n	800450a <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80044cc:	d004      	beq.n	80044d8 <HAL_ADC_ConfigChannel+0x80c>
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	4a17      	ldr	r2, [pc, #92]	@ (8004530 <HAL_ADC_ConfigChannel+0x864>)
 80044d4:	4293      	cmp	r3, r2
 80044d6:	d101      	bne.n	80044dc <HAL_ADC_ConfigChannel+0x810>
 80044d8:	4a16      	ldr	r2, [pc, #88]	@ (8004534 <HAL_ADC_ConfigChannel+0x868>)
 80044da:	e000      	b.n	80044de <HAL_ADC_ConfigChannel+0x812>
 80044dc:	4a10      	ldr	r2, [pc, #64]	@ (8004520 <HAL_ADC_ConfigChannel+0x854>)
 80044de:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80044e2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80044e6:	4619      	mov	r1, r3
 80044e8:	4610      	mov	r0, r2
 80044ea:	f7fe fb4e 	bl	8002b8a <LL_ADC_SetCommonPathInternalCh>
 80044ee:	e00c      	b.n	800450a <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80044f4:	f043 0220 	orr.w	r2, r3, #32
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80044fc:	2301      	movs	r3, #1
 80044fe:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8004502:	e002      	b.n	800450a <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004504:	bf00      	nop
 8004506:	e000      	b.n	800450a <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004508:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	2200      	movs	r2, #0
 800450e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8004512:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8004516:	4618      	mov	r0, r3
 8004518:	37d8      	adds	r7, #216	@ 0xd8
 800451a:	46bd      	mov	sp, r7
 800451c:	bd80      	pop	{r7, pc}
 800451e:	bf00      	nop
 8004520:	50000700 	.word	0x50000700
 8004524:	c3210000 	.word	0xc3210000
 8004528:	90c00010 	.word	0x90c00010
 800452c:	50000600 	.word	0x50000600
 8004530:	50000100 	.word	0x50000100
 8004534:	50000300 	.word	0x50000300
 8004538:	20000000 	.word	0x20000000
 800453c:	053e2d63 	.word	0x053e2d63
 8004540:	c7520000 	.word	0xc7520000
 8004544:	50000500 	.word	0x50000500
 8004548:	cb840000 	.word	0xcb840000

0800454c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800454c:	b580      	push	{r7, lr}
 800454e:	b084      	sub	sp, #16
 8004550:	af00      	add	r7, sp, #0
 8004552:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8004554:	2300      	movs	r3, #0
 8004556:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	4618      	mov	r0, r3
 800455e:	f7fe fcf3 	bl	8002f48 <LL_ADC_IsEnabled>
 8004562:	4603      	mov	r3, r0
 8004564:	2b00      	cmp	r3, #0
 8004566:	d176      	bne.n	8004656 <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	689a      	ldr	r2, [r3, #8]
 800456e:	4b3c      	ldr	r3, [pc, #240]	@ (8004660 <ADC_Enable+0x114>)
 8004570:	4013      	ands	r3, r2
 8004572:	2b00      	cmp	r3, #0
 8004574:	d00d      	beq.n	8004592 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800457a:	f043 0210 	orr.w	r2, r3, #16
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004586:	f043 0201 	orr.w	r2, r3, #1
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 800458e:	2301      	movs	r3, #1
 8004590:	e062      	b.n	8004658 <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	4618      	mov	r0, r3
 8004598:	f7fe fcc2 	bl	8002f20 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80045a4:	d004      	beq.n	80045b0 <ADC_Enable+0x64>
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	4a2e      	ldr	r2, [pc, #184]	@ (8004664 <ADC_Enable+0x118>)
 80045ac:	4293      	cmp	r3, r2
 80045ae:	d101      	bne.n	80045b4 <ADC_Enable+0x68>
 80045b0:	4b2d      	ldr	r3, [pc, #180]	@ (8004668 <ADC_Enable+0x11c>)
 80045b2:	e000      	b.n	80045b6 <ADC_Enable+0x6a>
 80045b4:	4b2d      	ldr	r3, [pc, #180]	@ (800466c <ADC_Enable+0x120>)
 80045b6:	4618      	mov	r0, r3
 80045b8:	f7fe fafa 	bl	8002bb0 <LL_ADC_GetCommonPathInternalCh>
 80045bc:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80045be:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d013      	beq.n	80045ee <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80045c6:	4b2a      	ldr	r3, [pc, #168]	@ (8004670 <ADC_Enable+0x124>)
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	099b      	lsrs	r3, r3, #6
 80045cc:	4a29      	ldr	r2, [pc, #164]	@ (8004674 <ADC_Enable+0x128>)
 80045ce:	fba2 2303 	umull	r2, r3, r2, r3
 80045d2:	099b      	lsrs	r3, r3, #6
 80045d4:	1c5a      	adds	r2, r3, #1
 80045d6:	4613      	mov	r3, r2
 80045d8:	005b      	lsls	r3, r3, #1
 80045da:	4413      	add	r3, r2
 80045dc:	009b      	lsls	r3, r3, #2
 80045de:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80045e0:	e002      	b.n	80045e8 <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 80045e2:	68bb      	ldr	r3, [r7, #8]
 80045e4:	3b01      	subs	r3, #1
 80045e6:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80045e8:	68bb      	ldr	r3, [r7, #8]
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d1f9      	bne.n	80045e2 <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80045ee:	f7fe faad 	bl	8002b4c <HAL_GetTick>
 80045f2:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80045f4:	e028      	b.n	8004648 <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	4618      	mov	r0, r3
 80045fc:	f7fe fca4 	bl	8002f48 <LL_ADC_IsEnabled>
 8004600:	4603      	mov	r3, r0
 8004602:	2b00      	cmp	r3, #0
 8004604:	d104      	bne.n	8004610 <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	4618      	mov	r0, r3
 800460c:	f7fe fc88 	bl	8002f20 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004610:	f7fe fa9c 	bl	8002b4c <HAL_GetTick>
 8004614:	4602      	mov	r2, r0
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	1ad3      	subs	r3, r2, r3
 800461a:	2b02      	cmp	r3, #2
 800461c:	d914      	bls.n	8004648 <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f003 0301 	and.w	r3, r3, #1
 8004628:	2b01      	cmp	r3, #1
 800462a:	d00d      	beq.n	8004648 <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004630:	f043 0210 	orr.w	r2, r3, #16
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800463c:	f043 0201 	orr.w	r2, r3, #1
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8004644:	2301      	movs	r3, #1
 8004646:	e007      	b.n	8004658 <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f003 0301 	and.w	r3, r3, #1
 8004652:	2b01      	cmp	r3, #1
 8004654:	d1cf      	bne.n	80045f6 <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004656:	2300      	movs	r3, #0
}
 8004658:	4618      	mov	r0, r3
 800465a:	3710      	adds	r7, #16
 800465c:	46bd      	mov	sp, r7
 800465e:	bd80      	pop	{r7, pc}
 8004660:	8000003f 	.word	0x8000003f
 8004664:	50000100 	.word	0x50000100
 8004668:	50000300 	.word	0x50000300
 800466c:	50000700 	.word	0x50000700
 8004670:	20000000 	.word	0x20000000
 8004674:	053e2d63 	.word	0x053e2d63

08004678 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004678:	b580      	push	{r7, lr}
 800467a:	b084      	sub	sp, #16
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004684:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800468a:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800468e:	2b00      	cmp	r3, #0
 8004690:	d14b      	bne.n	800472a <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004696:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f003 0308 	and.w	r3, r3, #8
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d021      	beq.n	80046f0 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	4618      	mov	r0, r3
 80046b2:	f7fe fb29 	bl	8002d08 <LL_ADC_REG_IsTriggerSourceSWStart>
 80046b6:	4603      	mov	r3, r0
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d032      	beq.n	8004722 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	68db      	ldr	r3, [r3, #12]
 80046c2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d12b      	bne.n	8004722 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80046ce:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80046da:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d11f      	bne.n	8004722 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80046e6:	f043 0201 	orr.w	r2, r3, #1
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	65da      	str	r2, [r3, #92]	@ 0x5c
 80046ee:	e018      	b.n	8004722 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	68db      	ldr	r3, [r3, #12]
 80046f6:	f003 0302 	and.w	r3, r3, #2
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d111      	bne.n	8004722 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004702:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800470e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004712:	2b00      	cmp	r3, #0
 8004714:	d105      	bne.n	8004722 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800471a:	f043 0201 	orr.w	r2, r3, #1
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004722:	68f8      	ldr	r0, [r7, #12]
 8004724:	f7fc fda8 	bl	8001278 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004728:	e00e      	b.n	8004748 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800472e:	f003 0310 	and.w	r3, r3, #16
 8004732:	2b00      	cmp	r3, #0
 8004734:	d003      	beq.n	800473e <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8004736:	68f8      	ldr	r0, [r7, #12]
 8004738:	f7ff fabe 	bl	8003cb8 <HAL_ADC_ErrorCallback>
}
 800473c:	e004      	b.n	8004748 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004742:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004744:	6878      	ldr	r0, [r7, #4]
 8004746:	4798      	blx	r3
}
 8004748:	bf00      	nop
 800474a:	3710      	adds	r7, #16
 800474c:	46bd      	mov	sp, r7
 800474e:	bd80      	pop	{r7, pc}

08004750 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8004750:	b580      	push	{r7, lr}
 8004752:	b084      	sub	sp, #16
 8004754:	af00      	add	r7, sp, #0
 8004756:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800475c:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800475e:	68f8      	ldr	r0, [r7, #12]
 8004760:	f7ff fa96 	bl	8003c90 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004764:	bf00      	nop
 8004766:	3710      	adds	r7, #16
 8004768:	46bd      	mov	sp, r7
 800476a:	bd80      	pop	{r7, pc}

0800476c <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800476c:	b580      	push	{r7, lr}
 800476e:	b084      	sub	sp, #16
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004778:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800477e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800478a:	f043 0204 	orr.w	r2, r3, #4
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004792:	68f8      	ldr	r0, [r7, #12]
 8004794:	f7ff fa90 	bl	8003cb8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004798:	bf00      	nop
 800479a:	3710      	adds	r7, #16
 800479c:	46bd      	mov	sp, r7
 800479e:	bd80      	pop	{r7, pc}

080047a0 <LL_ADC_IsEnabled>:
{
 80047a0:	b480      	push	{r7}
 80047a2:	b083      	sub	sp, #12
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	689b      	ldr	r3, [r3, #8]
 80047ac:	f003 0301 	and.w	r3, r3, #1
 80047b0:	2b01      	cmp	r3, #1
 80047b2:	d101      	bne.n	80047b8 <LL_ADC_IsEnabled+0x18>
 80047b4:	2301      	movs	r3, #1
 80047b6:	e000      	b.n	80047ba <LL_ADC_IsEnabled+0x1a>
 80047b8:	2300      	movs	r3, #0
}
 80047ba:	4618      	mov	r0, r3
 80047bc:	370c      	adds	r7, #12
 80047be:	46bd      	mov	sp, r7
 80047c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c4:	4770      	bx	lr

080047c6 <LL_ADC_REG_IsConversionOngoing>:
{
 80047c6:	b480      	push	{r7}
 80047c8:	b083      	sub	sp, #12
 80047ca:	af00      	add	r7, sp, #0
 80047cc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	689b      	ldr	r3, [r3, #8]
 80047d2:	f003 0304 	and.w	r3, r3, #4
 80047d6:	2b04      	cmp	r3, #4
 80047d8:	d101      	bne.n	80047de <LL_ADC_REG_IsConversionOngoing+0x18>
 80047da:	2301      	movs	r3, #1
 80047dc:	e000      	b.n	80047e0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80047de:	2300      	movs	r3, #0
}
 80047e0:	4618      	mov	r0, r3
 80047e2:	370c      	adds	r7, #12
 80047e4:	46bd      	mov	sp, r7
 80047e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ea:	4770      	bx	lr

080047ec <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80047ec:	b480      	push	{r7}
 80047ee:	b083      	sub	sp, #12
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 80047f4:	bf00      	nop
 80047f6:	370c      	adds	r7, #12
 80047f8:	46bd      	mov	sp, r7
 80047fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fe:	4770      	bx	lr

08004800 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8004800:	b480      	push	{r7}
 8004802:	b083      	sub	sp, #12
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8004808:	bf00      	nop
 800480a:	370c      	adds	r7, #12
 800480c:	46bd      	mov	sp, r7
 800480e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004812:	4770      	bx	lr

08004814 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8004814:	b480      	push	{r7}
 8004816:	b083      	sub	sp, #12
 8004818:	af00      	add	r7, sp, #0
 800481a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 800481c:	bf00      	nop
 800481e:	370c      	adds	r7, #12
 8004820:	46bd      	mov	sp, r7
 8004822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004826:	4770      	bx	lr

08004828 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8004828:	b480      	push	{r7}
 800482a:	b083      	sub	sp, #12
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8004830:	bf00      	nop
 8004832:	370c      	adds	r7, #12
 8004834:	46bd      	mov	sp, r7
 8004836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483a:	4770      	bx	lr

0800483c <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 800483c:	b480      	push	{r7}
 800483e:	b083      	sub	sp, #12
 8004840:	af00      	add	r7, sp, #0
 8004842:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8004844:	bf00      	nop
 8004846:	370c      	adds	r7, #12
 8004848:	46bd      	mov	sp, r7
 800484a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484e:	4770      	bx	lr

08004850 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8004850:	b590      	push	{r4, r7, lr}
 8004852:	b0a1      	sub	sp, #132	@ 0x84
 8004854:	af00      	add	r7, sp, #0
 8004856:	6078      	str	r0, [r7, #4]
 8004858:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800485a:	2300      	movs	r3, #0
 800485c:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8004866:	2b01      	cmp	r3, #1
 8004868:	d101      	bne.n	800486e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800486a:	2302      	movs	r3, #2
 800486c:	e0e7      	b.n	8004a3e <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	2201      	movs	r2, #1
 8004872:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8004876:	2300      	movs	r3, #0
 8004878:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 800487a:	2300      	movs	r3, #0
 800487c:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004886:	d102      	bne.n	800488e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004888:	4b6f      	ldr	r3, [pc, #444]	@ (8004a48 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800488a:	60bb      	str	r3, [r7, #8]
 800488c:	e009      	b.n	80048a2 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	4a6e      	ldr	r2, [pc, #440]	@ (8004a4c <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8004894:	4293      	cmp	r3, r2
 8004896:	d102      	bne.n	800489e <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8004898:	4b6d      	ldr	r3, [pc, #436]	@ (8004a50 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800489a:	60bb      	str	r3, [r7, #8]
 800489c:	e001      	b.n	80048a2 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800489e:	2300      	movs	r3, #0
 80048a0:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 80048a2:	68bb      	ldr	r3, [r7, #8]
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d10b      	bne.n	80048c0 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80048ac:	f043 0220 	orr.w	r2, r3, #32
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2200      	movs	r2, #0
 80048b8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 80048bc:	2301      	movs	r3, #1
 80048be:	e0be      	b.n	8004a3e <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 80048c0:	68bb      	ldr	r3, [r7, #8]
 80048c2:	4618      	mov	r0, r3
 80048c4:	f7ff ff7f 	bl	80047c6 <LL_ADC_REG_IsConversionOngoing>
 80048c8:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	4618      	mov	r0, r3
 80048d0:	f7ff ff79 	bl	80047c6 <LL_ADC_REG_IsConversionOngoing>
 80048d4:	4603      	mov	r3, r0
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	f040 80a0 	bne.w	8004a1c <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 80048dc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80048de:	2b00      	cmp	r3, #0
 80048e0:	f040 809c 	bne.w	8004a1c <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80048ec:	d004      	beq.n	80048f8 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	4a55      	ldr	r2, [pc, #340]	@ (8004a48 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80048f4:	4293      	cmp	r3, r2
 80048f6:	d101      	bne.n	80048fc <HAL_ADCEx_MultiModeConfigChannel+0xac>
 80048f8:	4b56      	ldr	r3, [pc, #344]	@ (8004a54 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 80048fa:	e000      	b.n	80048fe <HAL_ADCEx_MultiModeConfigChannel+0xae>
 80048fc:	4b56      	ldr	r3, [pc, #344]	@ (8004a58 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 80048fe:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	2b00      	cmp	r3, #0
 8004906:	d04b      	beq.n	80049a0 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8004908:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800490a:	689b      	ldr	r3, [r3, #8]
 800490c:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004910:	683b      	ldr	r3, [r7, #0]
 8004912:	6859      	ldr	r1, [r3, #4]
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800491a:	035b      	lsls	r3, r3, #13
 800491c:	430b      	orrs	r3, r1
 800491e:	431a      	orrs	r2, r3
 8004920:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004922:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800492c:	d004      	beq.n	8004938 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	4a45      	ldr	r2, [pc, #276]	@ (8004a48 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004934:	4293      	cmp	r3, r2
 8004936:	d10f      	bne.n	8004958 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8004938:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 800493c:	f7ff ff30 	bl	80047a0 <LL_ADC_IsEnabled>
 8004940:	4604      	mov	r4, r0
 8004942:	4841      	ldr	r0, [pc, #260]	@ (8004a48 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004944:	f7ff ff2c 	bl	80047a0 <LL_ADC_IsEnabled>
 8004948:	4603      	mov	r3, r0
 800494a:	4323      	orrs	r3, r4
 800494c:	2b00      	cmp	r3, #0
 800494e:	bf0c      	ite	eq
 8004950:	2301      	moveq	r3, #1
 8004952:	2300      	movne	r3, #0
 8004954:	b2db      	uxtb	r3, r3
 8004956:	e012      	b.n	800497e <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8004958:	483c      	ldr	r0, [pc, #240]	@ (8004a4c <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800495a:	f7ff ff21 	bl	80047a0 <LL_ADC_IsEnabled>
 800495e:	4604      	mov	r4, r0
 8004960:	483b      	ldr	r0, [pc, #236]	@ (8004a50 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8004962:	f7ff ff1d 	bl	80047a0 <LL_ADC_IsEnabled>
 8004966:	4603      	mov	r3, r0
 8004968:	431c      	orrs	r4, r3
 800496a:	483c      	ldr	r0, [pc, #240]	@ (8004a5c <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 800496c:	f7ff ff18 	bl	80047a0 <LL_ADC_IsEnabled>
 8004970:	4603      	mov	r3, r0
 8004972:	4323      	orrs	r3, r4
 8004974:	2b00      	cmp	r3, #0
 8004976:	bf0c      	ite	eq
 8004978:	2301      	moveq	r3, #1
 800497a:	2300      	movne	r3, #0
 800497c:	b2db      	uxtb	r3, r3
 800497e:	2b00      	cmp	r3, #0
 8004980:	d056      	beq.n	8004a30 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8004982:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004984:	689b      	ldr	r3, [r3, #8]
 8004986:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800498a:	f023 030f 	bic.w	r3, r3, #15
 800498e:	683a      	ldr	r2, [r7, #0]
 8004990:	6811      	ldr	r1, [r2, #0]
 8004992:	683a      	ldr	r2, [r7, #0]
 8004994:	6892      	ldr	r2, [r2, #8]
 8004996:	430a      	orrs	r2, r1
 8004998:	431a      	orrs	r2, r3
 800499a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800499c:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800499e:	e047      	b.n	8004a30 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80049a0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80049a2:	689b      	ldr	r3, [r3, #8]
 80049a4:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80049a8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80049aa:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80049b4:	d004      	beq.n	80049c0 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	4a23      	ldr	r2, [pc, #140]	@ (8004a48 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80049bc:	4293      	cmp	r3, r2
 80049be:	d10f      	bne.n	80049e0 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 80049c0:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80049c4:	f7ff feec 	bl	80047a0 <LL_ADC_IsEnabled>
 80049c8:	4604      	mov	r4, r0
 80049ca:	481f      	ldr	r0, [pc, #124]	@ (8004a48 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80049cc:	f7ff fee8 	bl	80047a0 <LL_ADC_IsEnabled>
 80049d0:	4603      	mov	r3, r0
 80049d2:	4323      	orrs	r3, r4
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	bf0c      	ite	eq
 80049d8:	2301      	moveq	r3, #1
 80049da:	2300      	movne	r3, #0
 80049dc:	b2db      	uxtb	r3, r3
 80049de:	e012      	b.n	8004a06 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 80049e0:	481a      	ldr	r0, [pc, #104]	@ (8004a4c <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80049e2:	f7ff fedd 	bl	80047a0 <LL_ADC_IsEnabled>
 80049e6:	4604      	mov	r4, r0
 80049e8:	4819      	ldr	r0, [pc, #100]	@ (8004a50 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80049ea:	f7ff fed9 	bl	80047a0 <LL_ADC_IsEnabled>
 80049ee:	4603      	mov	r3, r0
 80049f0:	431c      	orrs	r4, r3
 80049f2:	481a      	ldr	r0, [pc, #104]	@ (8004a5c <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 80049f4:	f7ff fed4 	bl	80047a0 <LL_ADC_IsEnabled>
 80049f8:	4603      	mov	r3, r0
 80049fa:	4323      	orrs	r3, r4
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	bf0c      	ite	eq
 8004a00:	2301      	moveq	r3, #1
 8004a02:	2300      	movne	r3, #0
 8004a04:	b2db      	uxtb	r3, r3
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d012      	beq.n	8004a30 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004a0a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004a0c:	689b      	ldr	r3, [r3, #8]
 8004a0e:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8004a12:	f023 030f 	bic.w	r3, r3, #15
 8004a16:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8004a18:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004a1a:	e009      	b.n	8004a30 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a20:	f043 0220 	orr.w	r2, r3, #32
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8004a28:	2301      	movs	r3, #1
 8004a2a:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8004a2e:	e000      	b.n	8004a32 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004a30:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	2200      	movs	r2, #0
 8004a36:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8004a3a:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8004a3e:	4618      	mov	r0, r3
 8004a40:	3784      	adds	r7, #132	@ 0x84
 8004a42:	46bd      	mov	sp, r7
 8004a44:	bd90      	pop	{r4, r7, pc}
 8004a46:	bf00      	nop
 8004a48:	50000100 	.word	0x50000100
 8004a4c:	50000400 	.word	0x50000400
 8004a50:	50000500 	.word	0x50000500
 8004a54:	50000300 	.word	0x50000300
 8004a58:	50000700 	.word	0x50000700
 8004a5c:	50000600 	.word	0x50000600

08004a60 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004a60:	b480      	push	{r7}
 8004a62:	b085      	sub	sp, #20
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	f003 0307 	and.w	r3, r3, #7
 8004a6e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004a70:	4b0c      	ldr	r3, [pc, #48]	@ (8004aa4 <__NVIC_SetPriorityGrouping+0x44>)
 8004a72:	68db      	ldr	r3, [r3, #12]
 8004a74:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004a76:	68ba      	ldr	r2, [r7, #8]
 8004a78:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004a7c:	4013      	ands	r3, r2
 8004a7e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004a84:	68bb      	ldr	r3, [r7, #8]
 8004a86:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004a88:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004a8c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004a90:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004a92:	4a04      	ldr	r2, [pc, #16]	@ (8004aa4 <__NVIC_SetPriorityGrouping+0x44>)
 8004a94:	68bb      	ldr	r3, [r7, #8]
 8004a96:	60d3      	str	r3, [r2, #12]
}
 8004a98:	bf00      	nop
 8004a9a:	3714      	adds	r7, #20
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa2:	4770      	bx	lr
 8004aa4:	e000ed00 	.word	0xe000ed00

08004aa8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004aa8:	b480      	push	{r7}
 8004aaa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004aac:	4b04      	ldr	r3, [pc, #16]	@ (8004ac0 <__NVIC_GetPriorityGrouping+0x18>)
 8004aae:	68db      	ldr	r3, [r3, #12]
 8004ab0:	0a1b      	lsrs	r3, r3, #8
 8004ab2:	f003 0307 	and.w	r3, r3, #7
}
 8004ab6:	4618      	mov	r0, r3
 8004ab8:	46bd      	mov	sp, r7
 8004aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004abe:	4770      	bx	lr
 8004ac0:	e000ed00 	.word	0xe000ed00

08004ac4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004ac4:	b480      	push	{r7}
 8004ac6:	b083      	sub	sp, #12
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	4603      	mov	r3, r0
 8004acc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004ace:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	db0b      	blt.n	8004aee <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004ad6:	79fb      	ldrb	r3, [r7, #7]
 8004ad8:	f003 021f 	and.w	r2, r3, #31
 8004adc:	4907      	ldr	r1, [pc, #28]	@ (8004afc <__NVIC_EnableIRQ+0x38>)
 8004ade:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ae2:	095b      	lsrs	r3, r3, #5
 8004ae4:	2001      	movs	r0, #1
 8004ae6:	fa00 f202 	lsl.w	r2, r0, r2
 8004aea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004aee:	bf00      	nop
 8004af0:	370c      	adds	r7, #12
 8004af2:	46bd      	mov	sp, r7
 8004af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af8:	4770      	bx	lr
 8004afa:	bf00      	nop
 8004afc:	e000e100 	.word	0xe000e100

08004b00 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004b00:	b480      	push	{r7}
 8004b02:	b083      	sub	sp, #12
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	4603      	mov	r3, r0
 8004b08:	6039      	str	r1, [r7, #0]
 8004b0a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004b0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	db0a      	blt.n	8004b2a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004b14:	683b      	ldr	r3, [r7, #0]
 8004b16:	b2da      	uxtb	r2, r3
 8004b18:	490c      	ldr	r1, [pc, #48]	@ (8004b4c <__NVIC_SetPriority+0x4c>)
 8004b1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b1e:	0112      	lsls	r2, r2, #4
 8004b20:	b2d2      	uxtb	r2, r2
 8004b22:	440b      	add	r3, r1
 8004b24:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004b28:	e00a      	b.n	8004b40 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004b2a:	683b      	ldr	r3, [r7, #0]
 8004b2c:	b2da      	uxtb	r2, r3
 8004b2e:	4908      	ldr	r1, [pc, #32]	@ (8004b50 <__NVIC_SetPriority+0x50>)
 8004b30:	79fb      	ldrb	r3, [r7, #7]
 8004b32:	f003 030f 	and.w	r3, r3, #15
 8004b36:	3b04      	subs	r3, #4
 8004b38:	0112      	lsls	r2, r2, #4
 8004b3a:	b2d2      	uxtb	r2, r2
 8004b3c:	440b      	add	r3, r1
 8004b3e:	761a      	strb	r2, [r3, #24]
}
 8004b40:	bf00      	nop
 8004b42:	370c      	adds	r7, #12
 8004b44:	46bd      	mov	sp, r7
 8004b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4a:	4770      	bx	lr
 8004b4c:	e000e100 	.word	0xe000e100
 8004b50:	e000ed00 	.word	0xe000ed00

08004b54 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004b54:	b480      	push	{r7}
 8004b56:	b089      	sub	sp, #36	@ 0x24
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	60f8      	str	r0, [r7, #12]
 8004b5c:	60b9      	str	r1, [r7, #8]
 8004b5e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	f003 0307 	and.w	r3, r3, #7
 8004b66:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004b68:	69fb      	ldr	r3, [r7, #28]
 8004b6a:	f1c3 0307 	rsb	r3, r3, #7
 8004b6e:	2b04      	cmp	r3, #4
 8004b70:	bf28      	it	cs
 8004b72:	2304      	movcs	r3, #4
 8004b74:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004b76:	69fb      	ldr	r3, [r7, #28]
 8004b78:	3304      	adds	r3, #4
 8004b7a:	2b06      	cmp	r3, #6
 8004b7c:	d902      	bls.n	8004b84 <NVIC_EncodePriority+0x30>
 8004b7e:	69fb      	ldr	r3, [r7, #28]
 8004b80:	3b03      	subs	r3, #3
 8004b82:	e000      	b.n	8004b86 <NVIC_EncodePriority+0x32>
 8004b84:	2300      	movs	r3, #0
 8004b86:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004b88:	f04f 32ff 	mov.w	r2, #4294967295
 8004b8c:	69bb      	ldr	r3, [r7, #24]
 8004b8e:	fa02 f303 	lsl.w	r3, r2, r3
 8004b92:	43da      	mvns	r2, r3
 8004b94:	68bb      	ldr	r3, [r7, #8]
 8004b96:	401a      	ands	r2, r3
 8004b98:	697b      	ldr	r3, [r7, #20]
 8004b9a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004b9c:	f04f 31ff 	mov.w	r1, #4294967295
 8004ba0:	697b      	ldr	r3, [r7, #20]
 8004ba2:	fa01 f303 	lsl.w	r3, r1, r3
 8004ba6:	43d9      	mvns	r1, r3
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004bac:	4313      	orrs	r3, r2
         );
}
 8004bae:	4618      	mov	r0, r3
 8004bb0:	3724      	adds	r7, #36	@ 0x24
 8004bb2:	46bd      	mov	sp, r7
 8004bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb8:	4770      	bx	lr
	...

08004bbc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004bbc:	b580      	push	{r7, lr}
 8004bbe:	b082      	sub	sp, #8
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	3b01      	subs	r3, #1
 8004bc8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004bcc:	d301      	bcc.n	8004bd2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004bce:	2301      	movs	r3, #1
 8004bd0:	e00f      	b.n	8004bf2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004bd2:	4a0a      	ldr	r2, [pc, #40]	@ (8004bfc <SysTick_Config+0x40>)
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	3b01      	subs	r3, #1
 8004bd8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004bda:	210f      	movs	r1, #15
 8004bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8004be0:	f7ff ff8e 	bl	8004b00 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004be4:	4b05      	ldr	r3, [pc, #20]	@ (8004bfc <SysTick_Config+0x40>)
 8004be6:	2200      	movs	r2, #0
 8004be8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004bea:	4b04      	ldr	r3, [pc, #16]	@ (8004bfc <SysTick_Config+0x40>)
 8004bec:	2207      	movs	r2, #7
 8004bee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004bf0:	2300      	movs	r3, #0
}
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	3708      	adds	r7, #8
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	bd80      	pop	{r7, pc}
 8004bfa:	bf00      	nop
 8004bfc:	e000e010 	.word	0xe000e010

08004c00 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004c00:	b580      	push	{r7, lr}
 8004c02:	b082      	sub	sp, #8
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004c08:	6878      	ldr	r0, [r7, #4]
 8004c0a:	f7ff ff29 	bl	8004a60 <__NVIC_SetPriorityGrouping>
}
 8004c0e:	bf00      	nop
 8004c10:	3708      	adds	r7, #8
 8004c12:	46bd      	mov	sp, r7
 8004c14:	bd80      	pop	{r7, pc}

08004c16 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004c16:	b580      	push	{r7, lr}
 8004c18:	b086      	sub	sp, #24
 8004c1a:	af00      	add	r7, sp, #0
 8004c1c:	4603      	mov	r3, r0
 8004c1e:	60b9      	str	r1, [r7, #8]
 8004c20:	607a      	str	r2, [r7, #4]
 8004c22:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004c24:	f7ff ff40 	bl	8004aa8 <__NVIC_GetPriorityGrouping>
 8004c28:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004c2a:	687a      	ldr	r2, [r7, #4]
 8004c2c:	68b9      	ldr	r1, [r7, #8]
 8004c2e:	6978      	ldr	r0, [r7, #20]
 8004c30:	f7ff ff90 	bl	8004b54 <NVIC_EncodePriority>
 8004c34:	4602      	mov	r2, r0
 8004c36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004c3a:	4611      	mov	r1, r2
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	f7ff ff5f 	bl	8004b00 <__NVIC_SetPriority>
}
 8004c42:	bf00      	nop
 8004c44:	3718      	adds	r7, #24
 8004c46:	46bd      	mov	sp, r7
 8004c48:	bd80      	pop	{r7, pc}

08004c4a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004c4a:	b580      	push	{r7, lr}
 8004c4c:	b082      	sub	sp, #8
 8004c4e:	af00      	add	r7, sp, #0
 8004c50:	4603      	mov	r3, r0
 8004c52:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004c54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c58:	4618      	mov	r0, r3
 8004c5a:	f7ff ff33 	bl	8004ac4 <__NVIC_EnableIRQ>
}
 8004c5e:	bf00      	nop
 8004c60:	3708      	adds	r7, #8
 8004c62:	46bd      	mov	sp, r7
 8004c64:	bd80      	pop	{r7, pc}

08004c66 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004c66:	b580      	push	{r7, lr}
 8004c68:	b082      	sub	sp, #8
 8004c6a:	af00      	add	r7, sp, #0
 8004c6c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004c6e:	6878      	ldr	r0, [r7, #4]
 8004c70:	f7ff ffa4 	bl	8004bbc <SysTick_Config>
 8004c74:	4603      	mov	r3, r0
}
 8004c76:	4618      	mov	r0, r3
 8004c78:	3708      	adds	r7, #8
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	bd80      	pop	{r7, pc}
	...

08004c80 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004c80:	b580      	push	{r7, lr}
 8004c82:	b084      	sub	sp, #16
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d101      	bne.n	8004c92 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8004c8e:	2301      	movs	r3, #1
 8004c90:	e08d      	b.n	8004dae <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	461a      	mov	r2, r3
 8004c98:	4b47      	ldr	r3, [pc, #284]	@ (8004db8 <HAL_DMA_Init+0x138>)
 8004c9a:	429a      	cmp	r2, r3
 8004c9c:	d80f      	bhi.n	8004cbe <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	461a      	mov	r2, r3
 8004ca4:	4b45      	ldr	r3, [pc, #276]	@ (8004dbc <HAL_DMA_Init+0x13c>)
 8004ca6:	4413      	add	r3, r2
 8004ca8:	4a45      	ldr	r2, [pc, #276]	@ (8004dc0 <HAL_DMA_Init+0x140>)
 8004caa:	fba2 2303 	umull	r2, r3, r2, r3
 8004cae:	091b      	lsrs	r3, r3, #4
 8004cb0:	009a      	lsls	r2, r3, #2
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	4a42      	ldr	r2, [pc, #264]	@ (8004dc4 <HAL_DMA_Init+0x144>)
 8004cba:	641a      	str	r2, [r3, #64]	@ 0x40
 8004cbc:	e00e      	b.n	8004cdc <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	461a      	mov	r2, r3
 8004cc4:	4b40      	ldr	r3, [pc, #256]	@ (8004dc8 <HAL_DMA_Init+0x148>)
 8004cc6:	4413      	add	r3, r2
 8004cc8:	4a3d      	ldr	r2, [pc, #244]	@ (8004dc0 <HAL_DMA_Init+0x140>)
 8004cca:	fba2 2303 	umull	r2, r3, r2, r3
 8004cce:	091b      	lsrs	r3, r3, #4
 8004cd0:	009a      	lsls	r2, r3, #2
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	4a3c      	ldr	r2, [pc, #240]	@ (8004dcc <HAL_DMA_Init+0x14c>)
 8004cda:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	2202      	movs	r2, #2
 8004ce0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8004cf2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004cf6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8004d00:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	691b      	ldr	r3, [r3, #16]
 8004d06:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004d0c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	699b      	ldr	r3, [r3, #24]
 8004d12:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004d18:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	6a1b      	ldr	r3, [r3, #32]
 8004d1e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004d20:	68fa      	ldr	r2, [r7, #12]
 8004d22:	4313      	orrs	r3, r2
 8004d24:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	68fa      	ldr	r2, [r7, #12]
 8004d2c:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004d2e:	6878      	ldr	r0, [r7, #4]
 8004d30:	f000 fa76 	bl	8005220 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	689b      	ldr	r3, [r3, #8]
 8004d38:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004d3c:	d102      	bne.n	8004d44 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	2200      	movs	r2, #0
 8004d42:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	685a      	ldr	r2, [r3, #4]
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004d4c:	b2d2      	uxtb	r2, r2
 8004d4e:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004d54:	687a      	ldr	r2, [r7, #4]
 8004d56:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004d58:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	685b      	ldr	r3, [r3, #4]
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d010      	beq.n	8004d84 <HAL_DMA_Init+0x104>
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	685b      	ldr	r3, [r3, #4]
 8004d66:	2b04      	cmp	r3, #4
 8004d68:	d80c      	bhi.n	8004d84 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004d6a:	6878      	ldr	r0, [r7, #4]
 8004d6c:	f000 fa96 	bl	800529c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d74:	2200      	movs	r2, #0
 8004d76:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d7c:	687a      	ldr	r2, [r7, #4]
 8004d7e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004d80:	605a      	str	r2, [r3, #4]
 8004d82:	e008      	b.n	8004d96 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	2200      	movs	r2, #0
 8004d88:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	2200      	movs	r2, #0
 8004d8e:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2200      	movs	r2, #0
 8004d94:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	2200      	movs	r2, #0
 8004d9a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	2201      	movs	r2, #1
 8004da0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2200      	movs	r2, #0
 8004da8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8004dac:	2300      	movs	r3, #0
}
 8004dae:	4618      	mov	r0, r3
 8004db0:	3710      	adds	r7, #16
 8004db2:	46bd      	mov	sp, r7
 8004db4:	bd80      	pop	{r7, pc}
 8004db6:	bf00      	nop
 8004db8:	40020407 	.word	0x40020407
 8004dbc:	bffdfff8 	.word	0xbffdfff8
 8004dc0:	cccccccd 	.word	0xcccccccd
 8004dc4:	40020000 	.word	0x40020000
 8004dc8:	bffdfbf8 	.word	0xbffdfbf8
 8004dcc:	40020400 	.word	0x40020400

08004dd0 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8004dd0:	b580      	push	{r7, lr}
 8004dd2:	b086      	sub	sp, #24
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	60f8      	str	r0, [r7, #12]
 8004dd8:	60b9      	str	r1, [r7, #8]
 8004dda:	607a      	str	r2, [r7, #4]
 8004ddc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004dde:	2300      	movs	r3, #0
 8004de0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004de8:	2b01      	cmp	r3, #1
 8004dea:	d101      	bne.n	8004df0 <HAL_DMA_Start_IT+0x20>
 8004dec:	2302      	movs	r3, #2
 8004dee:	e066      	b.n	8004ebe <HAL_DMA_Start_IT+0xee>
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	2201      	movs	r2, #1
 8004df4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004dfe:	b2db      	uxtb	r3, r3
 8004e00:	2b01      	cmp	r3, #1
 8004e02:	d155      	bne.n	8004eb0 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	2202      	movs	r2, #2
 8004e08:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	2200      	movs	r2, #0
 8004e10:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	681a      	ldr	r2, [r3, #0]
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f022 0201 	bic.w	r2, r2, #1
 8004e20:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004e22:	683b      	ldr	r3, [r7, #0]
 8004e24:	687a      	ldr	r2, [r7, #4]
 8004e26:	68b9      	ldr	r1, [r7, #8]
 8004e28:	68f8      	ldr	r0, [r7, #12]
 8004e2a:	f000 f9bb 	bl	80051a4 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d008      	beq.n	8004e48 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	681a      	ldr	r2, [r3, #0]
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f042 020e 	orr.w	r2, r2, #14
 8004e44:	601a      	str	r2, [r3, #0]
 8004e46:	e00f      	b.n	8004e68 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	681a      	ldr	r2, [r3, #0]
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f022 0204 	bic.w	r2, r2, #4
 8004e56:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	681a      	ldr	r2, [r3, #0]
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f042 020a 	orr.w	r2, r2, #10
 8004e66:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d007      	beq.n	8004e86 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004e7a:	681a      	ldr	r2, [r3, #0]
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004e80:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004e84:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d007      	beq.n	8004e9e <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e92:	681a      	ldr	r2, [r3, #0]
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e98:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004e9c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	681a      	ldr	r2, [r3, #0]
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	f042 0201 	orr.w	r2, r2, #1
 8004eac:	601a      	str	r2, [r3, #0]
 8004eae:	e005      	b.n	8004ebc <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	2200      	movs	r2, #0
 8004eb4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8004eb8:	2302      	movs	r3, #2
 8004eba:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8004ebc:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	3718      	adds	r7, #24
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	bd80      	pop	{r7, pc}

08004ec6 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004ec6:	b480      	push	{r7}
 8004ec8:	b085      	sub	sp, #20
 8004eca:	af00      	add	r7, sp, #0
 8004ecc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004ece:	2300      	movs	r3, #0
 8004ed0:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004ed8:	b2db      	uxtb	r3, r3
 8004eda:	2b02      	cmp	r3, #2
 8004edc:	d005      	beq.n	8004eea <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	2204      	movs	r2, #4
 8004ee2:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8004ee4:	2301      	movs	r3, #1
 8004ee6:	73fb      	strb	r3, [r7, #15]
 8004ee8:	e037      	b.n	8004f5a <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	681a      	ldr	r2, [r3, #0]
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f022 020e 	bic.w	r2, r2, #14
 8004ef8:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004efe:	681a      	ldr	r2, [r3, #0]
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004f04:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004f08:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	681a      	ldr	r2, [r3, #0]
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f022 0201 	bic.w	r2, r2, #1
 8004f18:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f1e:	f003 021f 	and.w	r2, r3, #31
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f26:	2101      	movs	r1, #1
 8004f28:	fa01 f202 	lsl.w	r2, r1, r2
 8004f2c:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004f32:	687a      	ldr	r2, [r7, #4]
 8004f34:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004f36:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d00c      	beq.n	8004f5a <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f44:	681a      	ldr	r2, [r3, #0]
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f4a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004f4e:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f54:	687a      	ldr	r2, [r7, #4]
 8004f56:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004f58:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	2201      	movs	r2, #1
 8004f5e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	2200      	movs	r2, #0
 8004f66:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8004f6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f6c:	4618      	mov	r0, r3
 8004f6e:	3714      	adds	r7, #20
 8004f70:	46bd      	mov	sp, r7
 8004f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f76:	4770      	bx	lr

08004f78 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004f78:	b580      	push	{r7, lr}
 8004f7a:	b084      	sub	sp, #16
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004f80:	2300      	movs	r3, #0
 8004f82:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004f8a:	b2db      	uxtb	r3, r3
 8004f8c:	2b02      	cmp	r3, #2
 8004f8e:	d00d      	beq.n	8004fac <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2204      	movs	r2, #4
 8004f94:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	2201      	movs	r2, #1
 8004f9a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	2200      	movs	r2, #0
 8004fa2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8004fa6:	2301      	movs	r3, #1
 8004fa8:	73fb      	strb	r3, [r7, #15]
 8004faa:	e047      	b.n	800503c <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	681a      	ldr	r2, [r3, #0]
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	f022 020e 	bic.w	r2, r2, #14
 8004fba:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	681a      	ldr	r2, [r3, #0]
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	f022 0201 	bic.w	r2, r2, #1
 8004fca:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004fd0:	681a      	ldr	r2, [r3, #0]
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004fd6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004fda:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004fe0:	f003 021f 	and.w	r2, r3, #31
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fe8:	2101      	movs	r1, #1
 8004fea:	fa01 f202 	lsl.w	r2, r1, r2
 8004fee:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004ff4:	687a      	ldr	r2, [r7, #4]
 8004ff6:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004ff8:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d00c      	beq.n	800501c <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005006:	681a      	ldr	r2, [r3, #0]
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800500c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005010:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005016:	687a      	ldr	r2, [r7, #4]
 8005018:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800501a:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2201      	movs	r2, #1
 8005020:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2200      	movs	r2, #0
 8005028:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005030:	2b00      	cmp	r3, #0
 8005032:	d003      	beq.n	800503c <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005038:	6878      	ldr	r0, [r7, #4]
 800503a:	4798      	blx	r3
    }
  }
  return status;
 800503c:	7bfb      	ldrb	r3, [r7, #15]
}
 800503e:	4618      	mov	r0, r3
 8005040:	3710      	adds	r7, #16
 8005042:	46bd      	mov	sp, r7
 8005044:	bd80      	pop	{r7, pc}

08005046 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005046:	b580      	push	{r7, lr}
 8005048:	b084      	sub	sp, #16
 800504a:	af00      	add	r7, sp, #0
 800504c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005062:	f003 031f 	and.w	r3, r3, #31
 8005066:	2204      	movs	r2, #4
 8005068:	409a      	lsls	r2, r3
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	4013      	ands	r3, r2
 800506e:	2b00      	cmp	r3, #0
 8005070:	d026      	beq.n	80050c0 <HAL_DMA_IRQHandler+0x7a>
 8005072:	68bb      	ldr	r3, [r7, #8]
 8005074:	f003 0304 	and.w	r3, r3, #4
 8005078:	2b00      	cmp	r3, #0
 800507a:	d021      	beq.n	80050c0 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f003 0320 	and.w	r3, r3, #32
 8005086:	2b00      	cmp	r3, #0
 8005088:	d107      	bne.n	800509a <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	681a      	ldr	r2, [r3, #0]
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	f022 0204 	bic.w	r2, r2, #4
 8005098:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800509e:	f003 021f 	and.w	r2, r3, #31
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050a6:	2104      	movs	r1, #4
 80050a8:	fa01 f202 	lsl.w	r2, r1, r2
 80050ac:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d071      	beq.n	800519a <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050ba:	6878      	ldr	r0, [r7, #4]
 80050bc:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80050be:	e06c      	b.n	800519a <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80050c4:	f003 031f 	and.w	r3, r3, #31
 80050c8:	2202      	movs	r2, #2
 80050ca:	409a      	lsls	r2, r3
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	4013      	ands	r3, r2
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d02e      	beq.n	8005132 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80050d4:	68bb      	ldr	r3, [r7, #8]
 80050d6:	f003 0302 	and.w	r3, r3, #2
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d029      	beq.n	8005132 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f003 0320 	and.w	r3, r3, #32
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d10b      	bne.n	8005104 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	681a      	ldr	r2, [r3, #0]
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f022 020a 	bic.w	r2, r2, #10
 80050fa:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	2201      	movs	r2, #1
 8005100:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005108:	f003 021f 	and.w	r2, r3, #31
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005110:	2102      	movs	r1, #2
 8005112:	fa01 f202 	lsl.w	r2, r1, r2
 8005116:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2200      	movs	r2, #0
 800511c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005124:	2b00      	cmp	r3, #0
 8005126:	d038      	beq.n	800519a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800512c:	6878      	ldr	r0, [r7, #4]
 800512e:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8005130:	e033      	b.n	800519a <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005136:	f003 031f 	and.w	r3, r3, #31
 800513a:	2208      	movs	r2, #8
 800513c:	409a      	lsls	r2, r3
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	4013      	ands	r3, r2
 8005142:	2b00      	cmp	r3, #0
 8005144:	d02a      	beq.n	800519c <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8005146:	68bb      	ldr	r3, [r7, #8]
 8005148:	f003 0308 	and.w	r3, r3, #8
 800514c:	2b00      	cmp	r3, #0
 800514e:	d025      	beq.n	800519c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	681a      	ldr	r2, [r3, #0]
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f022 020e 	bic.w	r2, r2, #14
 800515e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005164:	f003 021f 	and.w	r2, r3, #31
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800516c:	2101      	movs	r1, #1
 800516e:	fa01 f202 	lsl.w	r2, r1, r2
 8005172:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2201      	movs	r2, #1
 8005178:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	2201      	movs	r2, #1
 800517e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	2200      	movs	r2, #0
 8005186:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800518e:	2b00      	cmp	r3, #0
 8005190:	d004      	beq.n	800519c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005196:	6878      	ldr	r0, [r7, #4]
 8005198:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800519a:	bf00      	nop
 800519c:	bf00      	nop
}
 800519e:	3710      	adds	r7, #16
 80051a0:	46bd      	mov	sp, r7
 80051a2:	bd80      	pop	{r7, pc}

080051a4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80051a4:	b480      	push	{r7}
 80051a6:	b085      	sub	sp, #20
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	60f8      	str	r0, [r7, #12]
 80051ac:	60b9      	str	r1, [r7, #8]
 80051ae:	607a      	str	r2, [r7, #4]
 80051b0:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80051b6:	68fa      	ldr	r2, [r7, #12]
 80051b8:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80051ba:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d004      	beq.n	80051ce <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80051c8:	68fa      	ldr	r2, [r7, #12]
 80051ca:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80051cc:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80051d2:	f003 021f 	and.w	r2, r3, #31
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051da:	2101      	movs	r1, #1
 80051dc:	fa01 f202 	lsl.w	r2, r1, r2
 80051e0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	683a      	ldr	r2, [r7, #0]
 80051e8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	689b      	ldr	r3, [r3, #8]
 80051ee:	2b10      	cmp	r3, #16
 80051f0:	d108      	bne.n	8005204 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	687a      	ldr	r2, [r7, #4]
 80051f8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	68ba      	ldr	r2, [r7, #8]
 8005200:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8005202:	e007      	b.n	8005214 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	68ba      	ldr	r2, [r7, #8]
 800520a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	687a      	ldr	r2, [r7, #4]
 8005212:	60da      	str	r2, [r3, #12]
}
 8005214:	bf00      	nop
 8005216:	3714      	adds	r7, #20
 8005218:	46bd      	mov	sp, r7
 800521a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800521e:	4770      	bx	lr

08005220 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005220:	b480      	push	{r7}
 8005222:	b087      	sub	sp, #28
 8005224:	af00      	add	r7, sp, #0
 8005226:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	461a      	mov	r2, r3
 800522e:	4b16      	ldr	r3, [pc, #88]	@ (8005288 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8005230:	429a      	cmp	r2, r3
 8005232:	d802      	bhi.n	800523a <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8005234:	4b15      	ldr	r3, [pc, #84]	@ (800528c <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8005236:	617b      	str	r3, [r7, #20]
 8005238:	e001      	b.n	800523e <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 800523a:	4b15      	ldr	r3, [pc, #84]	@ (8005290 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 800523c:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800523e:	697b      	ldr	r3, [r7, #20]
 8005240:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	b2db      	uxtb	r3, r3
 8005248:	3b08      	subs	r3, #8
 800524a:	4a12      	ldr	r2, [pc, #72]	@ (8005294 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 800524c:	fba2 2303 	umull	r2, r3, r2, r3
 8005250:	091b      	lsrs	r3, r3, #4
 8005252:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005258:	089b      	lsrs	r3, r3, #2
 800525a:	009a      	lsls	r2, r3, #2
 800525c:	693b      	ldr	r3, [r7, #16]
 800525e:	4413      	add	r3, r2
 8005260:	461a      	mov	r2, r3
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	4a0b      	ldr	r2, [pc, #44]	@ (8005298 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800526a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	f003 031f 	and.w	r3, r3, #31
 8005272:	2201      	movs	r2, #1
 8005274:	409a      	lsls	r2, r3
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800527a:	bf00      	nop
 800527c:	371c      	adds	r7, #28
 800527e:	46bd      	mov	sp, r7
 8005280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005284:	4770      	bx	lr
 8005286:	bf00      	nop
 8005288:	40020407 	.word	0x40020407
 800528c:	40020800 	.word	0x40020800
 8005290:	40020820 	.word	0x40020820
 8005294:	cccccccd 	.word	0xcccccccd
 8005298:	40020880 	.word	0x40020880

0800529c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800529c:	b480      	push	{r7}
 800529e:	b085      	sub	sp, #20
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	685b      	ldr	r3, [r3, #4]
 80052a8:	b2db      	uxtb	r3, r3
 80052aa:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80052ac:	68fa      	ldr	r2, [r7, #12]
 80052ae:	4b0b      	ldr	r3, [pc, #44]	@ (80052dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80052b0:	4413      	add	r3, r2
 80052b2:	009b      	lsls	r3, r3, #2
 80052b4:	461a      	mov	r2, r3
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	4a08      	ldr	r2, [pc, #32]	@ (80052e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80052be:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	3b01      	subs	r3, #1
 80052c4:	f003 031f 	and.w	r3, r3, #31
 80052c8:	2201      	movs	r2, #1
 80052ca:	409a      	lsls	r2, r3
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 80052d0:	bf00      	nop
 80052d2:	3714      	adds	r7, #20
 80052d4:	46bd      	mov	sp, r7
 80052d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052da:	4770      	bx	lr
 80052dc:	1000823f 	.word	0x1000823f
 80052e0:	40020940 	.word	0x40020940

080052e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80052e4:	b480      	push	{r7}
 80052e6:	b087      	sub	sp, #28
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	6078      	str	r0, [r7, #4]
 80052ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80052ee:	2300      	movs	r3, #0
 80052f0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80052f2:	e15a      	b.n	80055aa <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80052f4:	683b      	ldr	r3, [r7, #0]
 80052f6:	681a      	ldr	r2, [r3, #0]
 80052f8:	2101      	movs	r1, #1
 80052fa:	697b      	ldr	r3, [r7, #20]
 80052fc:	fa01 f303 	lsl.w	r3, r1, r3
 8005300:	4013      	ands	r3, r2
 8005302:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	2b00      	cmp	r3, #0
 8005308:	f000 814c 	beq.w	80055a4 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800530c:	683b      	ldr	r3, [r7, #0]
 800530e:	685b      	ldr	r3, [r3, #4]
 8005310:	f003 0303 	and.w	r3, r3, #3
 8005314:	2b01      	cmp	r3, #1
 8005316:	d005      	beq.n	8005324 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005318:	683b      	ldr	r3, [r7, #0]
 800531a:	685b      	ldr	r3, [r3, #4]
 800531c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005320:	2b02      	cmp	r3, #2
 8005322:	d130      	bne.n	8005386 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	689b      	ldr	r3, [r3, #8]
 8005328:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800532a:	697b      	ldr	r3, [r7, #20]
 800532c:	005b      	lsls	r3, r3, #1
 800532e:	2203      	movs	r2, #3
 8005330:	fa02 f303 	lsl.w	r3, r2, r3
 8005334:	43db      	mvns	r3, r3
 8005336:	693a      	ldr	r2, [r7, #16]
 8005338:	4013      	ands	r3, r2
 800533a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800533c:	683b      	ldr	r3, [r7, #0]
 800533e:	68da      	ldr	r2, [r3, #12]
 8005340:	697b      	ldr	r3, [r7, #20]
 8005342:	005b      	lsls	r3, r3, #1
 8005344:	fa02 f303 	lsl.w	r3, r2, r3
 8005348:	693a      	ldr	r2, [r7, #16]
 800534a:	4313      	orrs	r3, r2
 800534c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	693a      	ldr	r2, [r7, #16]
 8005352:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	685b      	ldr	r3, [r3, #4]
 8005358:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800535a:	2201      	movs	r2, #1
 800535c:	697b      	ldr	r3, [r7, #20]
 800535e:	fa02 f303 	lsl.w	r3, r2, r3
 8005362:	43db      	mvns	r3, r3
 8005364:	693a      	ldr	r2, [r7, #16]
 8005366:	4013      	ands	r3, r2
 8005368:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800536a:	683b      	ldr	r3, [r7, #0]
 800536c:	685b      	ldr	r3, [r3, #4]
 800536e:	091b      	lsrs	r3, r3, #4
 8005370:	f003 0201 	and.w	r2, r3, #1
 8005374:	697b      	ldr	r3, [r7, #20]
 8005376:	fa02 f303 	lsl.w	r3, r2, r3
 800537a:	693a      	ldr	r2, [r7, #16]
 800537c:	4313      	orrs	r3, r2
 800537e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	693a      	ldr	r2, [r7, #16]
 8005384:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005386:	683b      	ldr	r3, [r7, #0]
 8005388:	685b      	ldr	r3, [r3, #4]
 800538a:	f003 0303 	and.w	r3, r3, #3
 800538e:	2b03      	cmp	r3, #3
 8005390:	d017      	beq.n	80053c2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	68db      	ldr	r3, [r3, #12]
 8005396:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005398:	697b      	ldr	r3, [r7, #20]
 800539a:	005b      	lsls	r3, r3, #1
 800539c:	2203      	movs	r2, #3
 800539e:	fa02 f303 	lsl.w	r3, r2, r3
 80053a2:	43db      	mvns	r3, r3
 80053a4:	693a      	ldr	r2, [r7, #16]
 80053a6:	4013      	ands	r3, r2
 80053a8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80053aa:	683b      	ldr	r3, [r7, #0]
 80053ac:	689a      	ldr	r2, [r3, #8]
 80053ae:	697b      	ldr	r3, [r7, #20]
 80053b0:	005b      	lsls	r3, r3, #1
 80053b2:	fa02 f303 	lsl.w	r3, r2, r3
 80053b6:	693a      	ldr	r2, [r7, #16]
 80053b8:	4313      	orrs	r3, r2
 80053ba:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	693a      	ldr	r2, [r7, #16]
 80053c0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80053c2:	683b      	ldr	r3, [r7, #0]
 80053c4:	685b      	ldr	r3, [r3, #4]
 80053c6:	f003 0303 	and.w	r3, r3, #3
 80053ca:	2b02      	cmp	r3, #2
 80053cc:	d123      	bne.n	8005416 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80053ce:	697b      	ldr	r3, [r7, #20]
 80053d0:	08da      	lsrs	r2, r3, #3
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	3208      	adds	r2, #8
 80053d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80053da:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80053dc:	697b      	ldr	r3, [r7, #20]
 80053de:	f003 0307 	and.w	r3, r3, #7
 80053e2:	009b      	lsls	r3, r3, #2
 80053e4:	220f      	movs	r2, #15
 80053e6:	fa02 f303 	lsl.w	r3, r2, r3
 80053ea:	43db      	mvns	r3, r3
 80053ec:	693a      	ldr	r2, [r7, #16]
 80053ee:	4013      	ands	r3, r2
 80053f0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80053f2:	683b      	ldr	r3, [r7, #0]
 80053f4:	691a      	ldr	r2, [r3, #16]
 80053f6:	697b      	ldr	r3, [r7, #20]
 80053f8:	f003 0307 	and.w	r3, r3, #7
 80053fc:	009b      	lsls	r3, r3, #2
 80053fe:	fa02 f303 	lsl.w	r3, r2, r3
 8005402:	693a      	ldr	r2, [r7, #16]
 8005404:	4313      	orrs	r3, r2
 8005406:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8005408:	697b      	ldr	r3, [r7, #20]
 800540a:	08da      	lsrs	r2, r3, #3
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	3208      	adds	r2, #8
 8005410:	6939      	ldr	r1, [r7, #16]
 8005412:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800541c:	697b      	ldr	r3, [r7, #20]
 800541e:	005b      	lsls	r3, r3, #1
 8005420:	2203      	movs	r2, #3
 8005422:	fa02 f303 	lsl.w	r3, r2, r3
 8005426:	43db      	mvns	r3, r3
 8005428:	693a      	ldr	r2, [r7, #16]
 800542a:	4013      	ands	r3, r2
 800542c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800542e:	683b      	ldr	r3, [r7, #0]
 8005430:	685b      	ldr	r3, [r3, #4]
 8005432:	f003 0203 	and.w	r2, r3, #3
 8005436:	697b      	ldr	r3, [r7, #20]
 8005438:	005b      	lsls	r3, r3, #1
 800543a:	fa02 f303 	lsl.w	r3, r2, r3
 800543e:	693a      	ldr	r2, [r7, #16]
 8005440:	4313      	orrs	r3, r2
 8005442:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	693a      	ldr	r2, [r7, #16]
 8005448:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800544a:	683b      	ldr	r3, [r7, #0]
 800544c:	685b      	ldr	r3, [r3, #4]
 800544e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005452:	2b00      	cmp	r3, #0
 8005454:	f000 80a6 	beq.w	80055a4 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005458:	4b5b      	ldr	r3, [pc, #364]	@ (80055c8 <HAL_GPIO_Init+0x2e4>)
 800545a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800545c:	4a5a      	ldr	r2, [pc, #360]	@ (80055c8 <HAL_GPIO_Init+0x2e4>)
 800545e:	f043 0301 	orr.w	r3, r3, #1
 8005462:	6613      	str	r3, [r2, #96]	@ 0x60
 8005464:	4b58      	ldr	r3, [pc, #352]	@ (80055c8 <HAL_GPIO_Init+0x2e4>)
 8005466:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005468:	f003 0301 	and.w	r3, r3, #1
 800546c:	60bb      	str	r3, [r7, #8]
 800546e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005470:	4a56      	ldr	r2, [pc, #344]	@ (80055cc <HAL_GPIO_Init+0x2e8>)
 8005472:	697b      	ldr	r3, [r7, #20]
 8005474:	089b      	lsrs	r3, r3, #2
 8005476:	3302      	adds	r3, #2
 8005478:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800547c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800547e:	697b      	ldr	r3, [r7, #20]
 8005480:	f003 0303 	and.w	r3, r3, #3
 8005484:	009b      	lsls	r3, r3, #2
 8005486:	220f      	movs	r2, #15
 8005488:	fa02 f303 	lsl.w	r3, r2, r3
 800548c:	43db      	mvns	r3, r3
 800548e:	693a      	ldr	r2, [r7, #16]
 8005490:	4013      	ands	r3, r2
 8005492:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800549a:	d01f      	beq.n	80054dc <HAL_GPIO_Init+0x1f8>
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	4a4c      	ldr	r2, [pc, #304]	@ (80055d0 <HAL_GPIO_Init+0x2ec>)
 80054a0:	4293      	cmp	r3, r2
 80054a2:	d019      	beq.n	80054d8 <HAL_GPIO_Init+0x1f4>
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	4a4b      	ldr	r2, [pc, #300]	@ (80055d4 <HAL_GPIO_Init+0x2f0>)
 80054a8:	4293      	cmp	r3, r2
 80054aa:	d013      	beq.n	80054d4 <HAL_GPIO_Init+0x1f0>
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	4a4a      	ldr	r2, [pc, #296]	@ (80055d8 <HAL_GPIO_Init+0x2f4>)
 80054b0:	4293      	cmp	r3, r2
 80054b2:	d00d      	beq.n	80054d0 <HAL_GPIO_Init+0x1ec>
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	4a49      	ldr	r2, [pc, #292]	@ (80055dc <HAL_GPIO_Init+0x2f8>)
 80054b8:	4293      	cmp	r3, r2
 80054ba:	d007      	beq.n	80054cc <HAL_GPIO_Init+0x1e8>
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	4a48      	ldr	r2, [pc, #288]	@ (80055e0 <HAL_GPIO_Init+0x2fc>)
 80054c0:	4293      	cmp	r3, r2
 80054c2:	d101      	bne.n	80054c8 <HAL_GPIO_Init+0x1e4>
 80054c4:	2305      	movs	r3, #5
 80054c6:	e00a      	b.n	80054de <HAL_GPIO_Init+0x1fa>
 80054c8:	2306      	movs	r3, #6
 80054ca:	e008      	b.n	80054de <HAL_GPIO_Init+0x1fa>
 80054cc:	2304      	movs	r3, #4
 80054ce:	e006      	b.n	80054de <HAL_GPIO_Init+0x1fa>
 80054d0:	2303      	movs	r3, #3
 80054d2:	e004      	b.n	80054de <HAL_GPIO_Init+0x1fa>
 80054d4:	2302      	movs	r3, #2
 80054d6:	e002      	b.n	80054de <HAL_GPIO_Init+0x1fa>
 80054d8:	2301      	movs	r3, #1
 80054da:	e000      	b.n	80054de <HAL_GPIO_Init+0x1fa>
 80054dc:	2300      	movs	r3, #0
 80054de:	697a      	ldr	r2, [r7, #20]
 80054e0:	f002 0203 	and.w	r2, r2, #3
 80054e4:	0092      	lsls	r2, r2, #2
 80054e6:	4093      	lsls	r3, r2
 80054e8:	693a      	ldr	r2, [r7, #16]
 80054ea:	4313      	orrs	r3, r2
 80054ec:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80054ee:	4937      	ldr	r1, [pc, #220]	@ (80055cc <HAL_GPIO_Init+0x2e8>)
 80054f0:	697b      	ldr	r3, [r7, #20]
 80054f2:	089b      	lsrs	r3, r3, #2
 80054f4:	3302      	adds	r3, #2
 80054f6:	693a      	ldr	r2, [r7, #16]
 80054f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80054fc:	4b39      	ldr	r3, [pc, #228]	@ (80055e4 <HAL_GPIO_Init+0x300>)
 80054fe:	689b      	ldr	r3, [r3, #8]
 8005500:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	43db      	mvns	r3, r3
 8005506:	693a      	ldr	r2, [r7, #16]
 8005508:	4013      	ands	r3, r2
 800550a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800550c:	683b      	ldr	r3, [r7, #0]
 800550e:	685b      	ldr	r3, [r3, #4]
 8005510:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005514:	2b00      	cmp	r3, #0
 8005516:	d003      	beq.n	8005520 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8005518:	693a      	ldr	r2, [r7, #16]
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	4313      	orrs	r3, r2
 800551e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005520:	4a30      	ldr	r2, [pc, #192]	@ (80055e4 <HAL_GPIO_Init+0x300>)
 8005522:	693b      	ldr	r3, [r7, #16]
 8005524:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8005526:	4b2f      	ldr	r3, [pc, #188]	@ (80055e4 <HAL_GPIO_Init+0x300>)
 8005528:	68db      	ldr	r3, [r3, #12]
 800552a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	43db      	mvns	r3, r3
 8005530:	693a      	ldr	r2, [r7, #16]
 8005532:	4013      	ands	r3, r2
 8005534:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005536:	683b      	ldr	r3, [r7, #0]
 8005538:	685b      	ldr	r3, [r3, #4]
 800553a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800553e:	2b00      	cmp	r3, #0
 8005540:	d003      	beq.n	800554a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8005542:	693a      	ldr	r2, [r7, #16]
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	4313      	orrs	r3, r2
 8005548:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800554a:	4a26      	ldr	r2, [pc, #152]	@ (80055e4 <HAL_GPIO_Init+0x300>)
 800554c:	693b      	ldr	r3, [r7, #16]
 800554e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8005550:	4b24      	ldr	r3, [pc, #144]	@ (80055e4 <HAL_GPIO_Init+0x300>)
 8005552:	685b      	ldr	r3, [r3, #4]
 8005554:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	43db      	mvns	r3, r3
 800555a:	693a      	ldr	r2, [r7, #16]
 800555c:	4013      	ands	r3, r2
 800555e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005560:	683b      	ldr	r3, [r7, #0]
 8005562:	685b      	ldr	r3, [r3, #4]
 8005564:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005568:	2b00      	cmp	r3, #0
 800556a:	d003      	beq.n	8005574 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800556c:	693a      	ldr	r2, [r7, #16]
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	4313      	orrs	r3, r2
 8005572:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005574:	4a1b      	ldr	r2, [pc, #108]	@ (80055e4 <HAL_GPIO_Init+0x300>)
 8005576:	693b      	ldr	r3, [r7, #16]
 8005578:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800557a:	4b1a      	ldr	r3, [pc, #104]	@ (80055e4 <HAL_GPIO_Init+0x300>)
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	43db      	mvns	r3, r3
 8005584:	693a      	ldr	r2, [r7, #16]
 8005586:	4013      	ands	r3, r2
 8005588:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800558a:	683b      	ldr	r3, [r7, #0]
 800558c:	685b      	ldr	r3, [r3, #4]
 800558e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005592:	2b00      	cmp	r3, #0
 8005594:	d003      	beq.n	800559e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8005596:	693a      	ldr	r2, [r7, #16]
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	4313      	orrs	r3, r2
 800559c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800559e:	4a11      	ldr	r2, [pc, #68]	@ (80055e4 <HAL_GPIO_Init+0x300>)
 80055a0:	693b      	ldr	r3, [r7, #16]
 80055a2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80055a4:	697b      	ldr	r3, [r7, #20]
 80055a6:	3301      	adds	r3, #1
 80055a8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80055aa:	683b      	ldr	r3, [r7, #0]
 80055ac:	681a      	ldr	r2, [r3, #0]
 80055ae:	697b      	ldr	r3, [r7, #20]
 80055b0:	fa22 f303 	lsr.w	r3, r2, r3
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	f47f ae9d 	bne.w	80052f4 <HAL_GPIO_Init+0x10>
  }
}
 80055ba:	bf00      	nop
 80055bc:	bf00      	nop
 80055be:	371c      	adds	r7, #28
 80055c0:	46bd      	mov	sp, r7
 80055c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c6:	4770      	bx	lr
 80055c8:	40021000 	.word	0x40021000
 80055cc:	40010000 	.word	0x40010000
 80055d0:	48000400 	.word	0x48000400
 80055d4:	48000800 	.word	0x48000800
 80055d8:	48000c00 	.word	0x48000c00
 80055dc:	48001000 	.word	0x48001000
 80055e0:	48001400 	.word	0x48001400
 80055e4:	40010400 	.word	0x40010400

080055e8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80055e8:	b480      	push	{r7}
 80055ea:	b085      	sub	sp, #20
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d141      	bne.n	800567a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80055f6:	4b4b      	ldr	r3, [pc, #300]	@ (8005724 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80055fe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005602:	d131      	bne.n	8005668 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005604:	4b47      	ldr	r3, [pc, #284]	@ (8005724 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005606:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800560a:	4a46      	ldr	r2, [pc, #280]	@ (8005724 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800560c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005610:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005614:	4b43      	ldr	r3, [pc, #268]	@ (8005724 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800561c:	4a41      	ldr	r2, [pc, #260]	@ (8005724 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800561e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005622:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005624:	4b40      	ldr	r3, [pc, #256]	@ (8005728 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	2232      	movs	r2, #50	@ 0x32
 800562a:	fb02 f303 	mul.w	r3, r2, r3
 800562e:	4a3f      	ldr	r2, [pc, #252]	@ (800572c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005630:	fba2 2303 	umull	r2, r3, r2, r3
 8005634:	0c9b      	lsrs	r3, r3, #18
 8005636:	3301      	adds	r3, #1
 8005638:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800563a:	e002      	b.n	8005642 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	3b01      	subs	r3, #1
 8005640:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005642:	4b38      	ldr	r3, [pc, #224]	@ (8005724 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005644:	695b      	ldr	r3, [r3, #20]
 8005646:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800564a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800564e:	d102      	bne.n	8005656 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	2b00      	cmp	r3, #0
 8005654:	d1f2      	bne.n	800563c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005656:	4b33      	ldr	r3, [pc, #204]	@ (8005724 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005658:	695b      	ldr	r3, [r3, #20]
 800565a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800565e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005662:	d158      	bne.n	8005716 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005664:	2303      	movs	r3, #3
 8005666:	e057      	b.n	8005718 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005668:	4b2e      	ldr	r3, [pc, #184]	@ (8005724 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800566a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800566e:	4a2d      	ldr	r2, [pc, #180]	@ (8005724 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005670:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005674:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8005678:	e04d      	b.n	8005716 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005680:	d141      	bne.n	8005706 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005682:	4b28      	ldr	r3, [pc, #160]	@ (8005724 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800568a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800568e:	d131      	bne.n	80056f4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005690:	4b24      	ldr	r3, [pc, #144]	@ (8005724 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005692:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005696:	4a23      	ldr	r2, [pc, #140]	@ (8005724 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005698:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800569c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80056a0:	4b20      	ldr	r3, [pc, #128]	@ (8005724 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80056a8:	4a1e      	ldr	r2, [pc, #120]	@ (8005724 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80056aa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80056ae:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80056b0:	4b1d      	ldr	r3, [pc, #116]	@ (8005728 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	2232      	movs	r2, #50	@ 0x32
 80056b6:	fb02 f303 	mul.w	r3, r2, r3
 80056ba:	4a1c      	ldr	r2, [pc, #112]	@ (800572c <HAL_PWREx_ControlVoltageScaling+0x144>)
 80056bc:	fba2 2303 	umull	r2, r3, r2, r3
 80056c0:	0c9b      	lsrs	r3, r3, #18
 80056c2:	3301      	adds	r3, #1
 80056c4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80056c6:	e002      	b.n	80056ce <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	3b01      	subs	r3, #1
 80056cc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80056ce:	4b15      	ldr	r3, [pc, #84]	@ (8005724 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80056d0:	695b      	ldr	r3, [r3, #20]
 80056d2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80056d6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80056da:	d102      	bne.n	80056e2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d1f2      	bne.n	80056c8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80056e2:	4b10      	ldr	r3, [pc, #64]	@ (8005724 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80056e4:	695b      	ldr	r3, [r3, #20]
 80056e6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80056ea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80056ee:	d112      	bne.n	8005716 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80056f0:	2303      	movs	r3, #3
 80056f2:	e011      	b.n	8005718 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80056f4:	4b0b      	ldr	r3, [pc, #44]	@ (8005724 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80056f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80056fa:	4a0a      	ldr	r2, [pc, #40]	@ (8005724 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80056fc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005700:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8005704:	e007      	b.n	8005716 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005706:	4b07      	ldr	r3, [pc, #28]	@ (8005724 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800570e:	4a05      	ldr	r2, [pc, #20]	@ (8005724 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005710:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005714:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8005716:	2300      	movs	r3, #0
}
 8005718:	4618      	mov	r0, r3
 800571a:	3714      	adds	r7, #20
 800571c:	46bd      	mov	sp, r7
 800571e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005722:	4770      	bx	lr
 8005724:	40007000 	.word	0x40007000
 8005728:	20000000 	.word	0x20000000
 800572c:	431bde83 	.word	0x431bde83

08005730 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8005730:	b480      	push	{r7}
 8005732:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8005734:	4b05      	ldr	r3, [pc, #20]	@ (800574c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8005736:	689b      	ldr	r3, [r3, #8]
 8005738:	4a04      	ldr	r2, [pc, #16]	@ (800574c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800573a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800573e:	6093      	str	r3, [r2, #8]
}
 8005740:	bf00      	nop
 8005742:	46bd      	mov	sp, r7
 8005744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005748:	4770      	bx	lr
 800574a:	bf00      	nop
 800574c:	40007000 	.word	0x40007000

08005750 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005750:	b580      	push	{r7, lr}
 8005752:	b088      	sub	sp, #32
 8005754:	af00      	add	r7, sp, #0
 8005756:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2b00      	cmp	r3, #0
 800575c:	d101      	bne.n	8005762 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800575e:	2301      	movs	r3, #1
 8005760:	e2fe      	b.n	8005d60 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	f003 0301 	and.w	r3, r3, #1
 800576a:	2b00      	cmp	r3, #0
 800576c:	d075      	beq.n	800585a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800576e:	4b97      	ldr	r3, [pc, #604]	@ (80059cc <HAL_RCC_OscConfig+0x27c>)
 8005770:	689b      	ldr	r3, [r3, #8]
 8005772:	f003 030c 	and.w	r3, r3, #12
 8005776:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005778:	4b94      	ldr	r3, [pc, #592]	@ (80059cc <HAL_RCC_OscConfig+0x27c>)
 800577a:	68db      	ldr	r3, [r3, #12]
 800577c:	f003 0303 	and.w	r3, r3, #3
 8005780:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8005782:	69bb      	ldr	r3, [r7, #24]
 8005784:	2b0c      	cmp	r3, #12
 8005786:	d102      	bne.n	800578e <HAL_RCC_OscConfig+0x3e>
 8005788:	697b      	ldr	r3, [r7, #20]
 800578a:	2b03      	cmp	r3, #3
 800578c:	d002      	beq.n	8005794 <HAL_RCC_OscConfig+0x44>
 800578e:	69bb      	ldr	r3, [r7, #24]
 8005790:	2b08      	cmp	r3, #8
 8005792:	d10b      	bne.n	80057ac <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005794:	4b8d      	ldr	r3, [pc, #564]	@ (80059cc <HAL_RCC_OscConfig+0x27c>)
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800579c:	2b00      	cmp	r3, #0
 800579e:	d05b      	beq.n	8005858 <HAL_RCC_OscConfig+0x108>
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	685b      	ldr	r3, [r3, #4]
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d157      	bne.n	8005858 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80057a8:	2301      	movs	r3, #1
 80057aa:	e2d9      	b.n	8005d60 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	685b      	ldr	r3, [r3, #4]
 80057b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80057b4:	d106      	bne.n	80057c4 <HAL_RCC_OscConfig+0x74>
 80057b6:	4b85      	ldr	r3, [pc, #532]	@ (80059cc <HAL_RCC_OscConfig+0x27c>)
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	4a84      	ldr	r2, [pc, #528]	@ (80059cc <HAL_RCC_OscConfig+0x27c>)
 80057bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80057c0:	6013      	str	r3, [r2, #0]
 80057c2:	e01d      	b.n	8005800 <HAL_RCC_OscConfig+0xb0>
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	685b      	ldr	r3, [r3, #4]
 80057c8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80057cc:	d10c      	bne.n	80057e8 <HAL_RCC_OscConfig+0x98>
 80057ce:	4b7f      	ldr	r3, [pc, #508]	@ (80059cc <HAL_RCC_OscConfig+0x27c>)
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	4a7e      	ldr	r2, [pc, #504]	@ (80059cc <HAL_RCC_OscConfig+0x27c>)
 80057d4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80057d8:	6013      	str	r3, [r2, #0]
 80057da:	4b7c      	ldr	r3, [pc, #496]	@ (80059cc <HAL_RCC_OscConfig+0x27c>)
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	4a7b      	ldr	r2, [pc, #492]	@ (80059cc <HAL_RCC_OscConfig+0x27c>)
 80057e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80057e4:	6013      	str	r3, [r2, #0]
 80057e6:	e00b      	b.n	8005800 <HAL_RCC_OscConfig+0xb0>
 80057e8:	4b78      	ldr	r3, [pc, #480]	@ (80059cc <HAL_RCC_OscConfig+0x27c>)
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	4a77      	ldr	r2, [pc, #476]	@ (80059cc <HAL_RCC_OscConfig+0x27c>)
 80057ee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80057f2:	6013      	str	r3, [r2, #0]
 80057f4:	4b75      	ldr	r3, [pc, #468]	@ (80059cc <HAL_RCC_OscConfig+0x27c>)
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	4a74      	ldr	r2, [pc, #464]	@ (80059cc <HAL_RCC_OscConfig+0x27c>)
 80057fa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80057fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	685b      	ldr	r3, [r3, #4]
 8005804:	2b00      	cmp	r3, #0
 8005806:	d013      	beq.n	8005830 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005808:	f7fd f9a0 	bl	8002b4c <HAL_GetTick>
 800580c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800580e:	e008      	b.n	8005822 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005810:	f7fd f99c 	bl	8002b4c <HAL_GetTick>
 8005814:	4602      	mov	r2, r0
 8005816:	693b      	ldr	r3, [r7, #16]
 8005818:	1ad3      	subs	r3, r2, r3
 800581a:	2b64      	cmp	r3, #100	@ 0x64
 800581c:	d901      	bls.n	8005822 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800581e:	2303      	movs	r3, #3
 8005820:	e29e      	b.n	8005d60 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005822:	4b6a      	ldr	r3, [pc, #424]	@ (80059cc <HAL_RCC_OscConfig+0x27c>)
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800582a:	2b00      	cmp	r3, #0
 800582c:	d0f0      	beq.n	8005810 <HAL_RCC_OscConfig+0xc0>
 800582e:	e014      	b.n	800585a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005830:	f7fd f98c 	bl	8002b4c <HAL_GetTick>
 8005834:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005836:	e008      	b.n	800584a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005838:	f7fd f988 	bl	8002b4c <HAL_GetTick>
 800583c:	4602      	mov	r2, r0
 800583e:	693b      	ldr	r3, [r7, #16]
 8005840:	1ad3      	subs	r3, r2, r3
 8005842:	2b64      	cmp	r3, #100	@ 0x64
 8005844:	d901      	bls.n	800584a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005846:	2303      	movs	r3, #3
 8005848:	e28a      	b.n	8005d60 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800584a:	4b60      	ldr	r3, [pc, #384]	@ (80059cc <HAL_RCC_OscConfig+0x27c>)
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005852:	2b00      	cmp	r3, #0
 8005854:	d1f0      	bne.n	8005838 <HAL_RCC_OscConfig+0xe8>
 8005856:	e000      	b.n	800585a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005858:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	f003 0302 	and.w	r3, r3, #2
 8005862:	2b00      	cmp	r3, #0
 8005864:	d075      	beq.n	8005952 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005866:	4b59      	ldr	r3, [pc, #356]	@ (80059cc <HAL_RCC_OscConfig+0x27c>)
 8005868:	689b      	ldr	r3, [r3, #8]
 800586a:	f003 030c 	and.w	r3, r3, #12
 800586e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005870:	4b56      	ldr	r3, [pc, #344]	@ (80059cc <HAL_RCC_OscConfig+0x27c>)
 8005872:	68db      	ldr	r3, [r3, #12]
 8005874:	f003 0303 	and.w	r3, r3, #3
 8005878:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800587a:	69bb      	ldr	r3, [r7, #24]
 800587c:	2b0c      	cmp	r3, #12
 800587e:	d102      	bne.n	8005886 <HAL_RCC_OscConfig+0x136>
 8005880:	697b      	ldr	r3, [r7, #20]
 8005882:	2b02      	cmp	r3, #2
 8005884:	d002      	beq.n	800588c <HAL_RCC_OscConfig+0x13c>
 8005886:	69bb      	ldr	r3, [r7, #24]
 8005888:	2b04      	cmp	r3, #4
 800588a:	d11f      	bne.n	80058cc <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800588c:	4b4f      	ldr	r3, [pc, #316]	@ (80059cc <HAL_RCC_OscConfig+0x27c>)
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005894:	2b00      	cmp	r3, #0
 8005896:	d005      	beq.n	80058a4 <HAL_RCC_OscConfig+0x154>
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	68db      	ldr	r3, [r3, #12]
 800589c:	2b00      	cmp	r3, #0
 800589e:	d101      	bne.n	80058a4 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80058a0:	2301      	movs	r3, #1
 80058a2:	e25d      	b.n	8005d60 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80058a4:	4b49      	ldr	r3, [pc, #292]	@ (80059cc <HAL_RCC_OscConfig+0x27c>)
 80058a6:	685b      	ldr	r3, [r3, #4]
 80058a8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	691b      	ldr	r3, [r3, #16]
 80058b0:	061b      	lsls	r3, r3, #24
 80058b2:	4946      	ldr	r1, [pc, #280]	@ (80059cc <HAL_RCC_OscConfig+0x27c>)
 80058b4:	4313      	orrs	r3, r2
 80058b6:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80058b8:	4b45      	ldr	r3, [pc, #276]	@ (80059d0 <HAL_RCC_OscConfig+0x280>)
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	4618      	mov	r0, r3
 80058be:	f7fd f8f9 	bl	8002ab4 <HAL_InitTick>
 80058c2:	4603      	mov	r3, r0
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d043      	beq.n	8005950 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80058c8:	2301      	movs	r3, #1
 80058ca:	e249      	b.n	8005d60 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	68db      	ldr	r3, [r3, #12]
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d023      	beq.n	800591c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80058d4:	4b3d      	ldr	r3, [pc, #244]	@ (80059cc <HAL_RCC_OscConfig+0x27c>)
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	4a3c      	ldr	r2, [pc, #240]	@ (80059cc <HAL_RCC_OscConfig+0x27c>)
 80058da:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80058de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058e0:	f7fd f934 	bl	8002b4c <HAL_GetTick>
 80058e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80058e6:	e008      	b.n	80058fa <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80058e8:	f7fd f930 	bl	8002b4c <HAL_GetTick>
 80058ec:	4602      	mov	r2, r0
 80058ee:	693b      	ldr	r3, [r7, #16]
 80058f0:	1ad3      	subs	r3, r2, r3
 80058f2:	2b02      	cmp	r3, #2
 80058f4:	d901      	bls.n	80058fa <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80058f6:	2303      	movs	r3, #3
 80058f8:	e232      	b.n	8005d60 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80058fa:	4b34      	ldr	r3, [pc, #208]	@ (80059cc <HAL_RCC_OscConfig+0x27c>)
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005902:	2b00      	cmp	r3, #0
 8005904:	d0f0      	beq.n	80058e8 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005906:	4b31      	ldr	r3, [pc, #196]	@ (80059cc <HAL_RCC_OscConfig+0x27c>)
 8005908:	685b      	ldr	r3, [r3, #4]
 800590a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	691b      	ldr	r3, [r3, #16]
 8005912:	061b      	lsls	r3, r3, #24
 8005914:	492d      	ldr	r1, [pc, #180]	@ (80059cc <HAL_RCC_OscConfig+0x27c>)
 8005916:	4313      	orrs	r3, r2
 8005918:	604b      	str	r3, [r1, #4]
 800591a:	e01a      	b.n	8005952 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800591c:	4b2b      	ldr	r3, [pc, #172]	@ (80059cc <HAL_RCC_OscConfig+0x27c>)
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	4a2a      	ldr	r2, [pc, #168]	@ (80059cc <HAL_RCC_OscConfig+0x27c>)
 8005922:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005926:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005928:	f7fd f910 	bl	8002b4c <HAL_GetTick>
 800592c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800592e:	e008      	b.n	8005942 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005930:	f7fd f90c 	bl	8002b4c <HAL_GetTick>
 8005934:	4602      	mov	r2, r0
 8005936:	693b      	ldr	r3, [r7, #16]
 8005938:	1ad3      	subs	r3, r2, r3
 800593a:	2b02      	cmp	r3, #2
 800593c:	d901      	bls.n	8005942 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800593e:	2303      	movs	r3, #3
 8005940:	e20e      	b.n	8005d60 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005942:	4b22      	ldr	r3, [pc, #136]	@ (80059cc <HAL_RCC_OscConfig+0x27c>)
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800594a:	2b00      	cmp	r3, #0
 800594c:	d1f0      	bne.n	8005930 <HAL_RCC_OscConfig+0x1e0>
 800594e:	e000      	b.n	8005952 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005950:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	f003 0308 	and.w	r3, r3, #8
 800595a:	2b00      	cmp	r3, #0
 800595c:	d041      	beq.n	80059e2 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	695b      	ldr	r3, [r3, #20]
 8005962:	2b00      	cmp	r3, #0
 8005964:	d01c      	beq.n	80059a0 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005966:	4b19      	ldr	r3, [pc, #100]	@ (80059cc <HAL_RCC_OscConfig+0x27c>)
 8005968:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800596c:	4a17      	ldr	r2, [pc, #92]	@ (80059cc <HAL_RCC_OscConfig+0x27c>)
 800596e:	f043 0301 	orr.w	r3, r3, #1
 8005972:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005976:	f7fd f8e9 	bl	8002b4c <HAL_GetTick>
 800597a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800597c:	e008      	b.n	8005990 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800597e:	f7fd f8e5 	bl	8002b4c <HAL_GetTick>
 8005982:	4602      	mov	r2, r0
 8005984:	693b      	ldr	r3, [r7, #16]
 8005986:	1ad3      	subs	r3, r2, r3
 8005988:	2b02      	cmp	r3, #2
 800598a:	d901      	bls.n	8005990 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800598c:	2303      	movs	r3, #3
 800598e:	e1e7      	b.n	8005d60 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005990:	4b0e      	ldr	r3, [pc, #56]	@ (80059cc <HAL_RCC_OscConfig+0x27c>)
 8005992:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005996:	f003 0302 	and.w	r3, r3, #2
 800599a:	2b00      	cmp	r3, #0
 800599c:	d0ef      	beq.n	800597e <HAL_RCC_OscConfig+0x22e>
 800599e:	e020      	b.n	80059e2 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80059a0:	4b0a      	ldr	r3, [pc, #40]	@ (80059cc <HAL_RCC_OscConfig+0x27c>)
 80059a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80059a6:	4a09      	ldr	r2, [pc, #36]	@ (80059cc <HAL_RCC_OscConfig+0x27c>)
 80059a8:	f023 0301 	bic.w	r3, r3, #1
 80059ac:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80059b0:	f7fd f8cc 	bl	8002b4c <HAL_GetTick>
 80059b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80059b6:	e00d      	b.n	80059d4 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80059b8:	f7fd f8c8 	bl	8002b4c <HAL_GetTick>
 80059bc:	4602      	mov	r2, r0
 80059be:	693b      	ldr	r3, [r7, #16]
 80059c0:	1ad3      	subs	r3, r2, r3
 80059c2:	2b02      	cmp	r3, #2
 80059c4:	d906      	bls.n	80059d4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80059c6:	2303      	movs	r3, #3
 80059c8:	e1ca      	b.n	8005d60 <HAL_RCC_OscConfig+0x610>
 80059ca:	bf00      	nop
 80059cc:	40021000 	.word	0x40021000
 80059d0:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80059d4:	4b8c      	ldr	r3, [pc, #560]	@ (8005c08 <HAL_RCC_OscConfig+0x4b8>)
 80059d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80059da:	f003 0302 	and.w	r3, r3, #2
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d1ea      	bne.n	80059b8 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	f003 0304 	and.w	r3, r3, #4
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	f000 80a6 	beq.w	8005b3c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80059f0:	2300      	movs	r3, #0
 80059f2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80059f4:	4b84      	ldr	r3, [pc, #528]	@ (8005c08 <HAL_RCC_OscConfig+0x4b8>)
 80059f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80059f8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d101      	bne.n	8005a04 <HAL_RCC_OscConfig+0x2b4>
 8005a00:	2301      	movs	r3, #1
 8005a02:	e000      	b.n	8005a06 <HAL_RCC_OscConfig+0x2b6>
 8005a04:	2300      	movs	r3, #0
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d00d      	beq.n	8005a26 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005a0a:	4b7f      	ldr	r3, [pc, #508]	@ (8005c08 <HAL_RCC_OscConfig+0x4b8>)
 8005a0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005a0e:	4a7e      	ldr	r2, [pc, #504]	@ (8005c08 <HAL_RCC_OscConfig+0x4b8>)
 8005a10:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005a14:	6593      	str	r3, [r2, #88]	@ 0x58
 8005a16:	4b7c      	ldr	r3, [pc, #496]	@ (8005c08 <HAL_RCC_OscConfig+0x4b8>)
 8005a18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005a1a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005a1e:	60fb      	str	r3, [r7, #12]
 8005a20:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8005a22:	2301      	movs	r3, #1
 8005a24:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005a26:	4b79      	ldr	r3, [pc, #484]	@ (8005c0c <HAL_RCC_OscConfig+0x4bc>)
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d118      	bne.n	8005a64 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005a32:	4b76      	ldr	r3, [pc, #472]	@ (8005c0c <HAL_RCC_OscConfig+0x4bc>)
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	4a75      	ldr	r2, [pc, #468]	@ (8005c0c <HAL_RCC_OscConfig+0x4bc>)
 8005a38:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005a3c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005a3e:	f7fd f885 	bl	8002b4c <HAL_GetTick>
 8005a42:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005a44:	e008      	b.n	8005a58 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005a46:	f7fd f881 	bl	8002b4c <HAL_GetTick>
 8005a4a:	4602      	mov	r2, r0
 8005a4c:	693b      	ldr	r3, [r7, #16]
 8005a4e:	1ad3      	subs	r3, r2, r3
 8005a50:	2b02      	cmp	r3, #2
 8005a52:	d901      	bls.n	8005a58 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8005a54:	2303      	movs	r3, #3
 8005a56:	e183      	b.n	8005d60 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005a58:	4b6c      	ldr	r3, [pc, #432]	@ (8005c0c <HAL_RCC_OscConfig+0x4bc>)
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d0f0      	beq.n	8005a46 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	689b      	ldr	r3, [r3, #8]
 8005a68:	2b01      	cmp	r3, #1
 8005a6a:	d108      	bne.n	8005a7e <HAL_RCC_OscConfig+0x32e>
 8005a6c:	4b66      	ldr	r3, [pc, #408]	@ (8005c08 <HAL_RCC_OscConfig+0x4b8>)
 8005a6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a72:	4a65      	ldr	r2, [pc, #404]	@ (8005c08 <HAL_RCC_OscConfig+0x4b8>)
 8005a74:	f043 0301 	orr.w	r3, r3, #1
 8005a78:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005a7c:	e024      	b.n	8005ac8 <HAL_RCC_OscConfig+0x378>
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	689b      	ldr	r3, [r3, #8]
 8005a82:	2b05      	cmp	r3, #5
 8005a84:	d110      	bne.n	8005aa8 <HAL_RCC_OscConfig+0x358>
 8005a86:	4b60      	ldr	r3, [pc, #384]	@ (8005c08 <HAL_RCC_OscConfig+0x4b8>)
 8005a88:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a8c:	4a5e      	ldr	r2, [pc, #376]	@ (8005c08 <HAL_RCC_OscConfig+0x4b8>)
 8005a8e:	f043 0304 	orr.w	r3, r3, #4
 8005a92:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005a96:	4b5c      	ldr	r3, [pc, #368]	@ (8005c08 <HAL_RCC_OscConfig+0x4b8>)
 8005a98:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a9c:	4a5a      	ldr	r2, [pc, #360]	@ (8005c08 <HAL_RCC_OscConfig+0x4b8>)
 8005a9e:	f043 0301 	orr.w	r3, r3, #1
 8005aa2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005aa6:	e00f      	b.n	8005ac8 <HAL_RCC_OscConfig+0x378>
 8005aa8:	4b57      	ldr	r3, [pc, #348]	@ (8005c08 <HAL_RCC_OscConfig+0x4b8>)
 8005aaa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005aae:	4a56      	ldr	r2, [pc, #344]	@ (8005c08 <HAL_RCC_OscConfig+0x4b8>)
 8005ab0:	f023 0301 	bic.w	r3, r3, #1
 8005ab4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005ab8:	4b53      	ldr	r3, [pc, #332]	@ (8005c08 <HAL_RCC_OscConfig+0x4b8>)
 8005aba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005abe:	4a52      	ldr	r2, [pc, #328]	@ (8005c08 <HAL_RCC_OscConfig+0x4b8>)
 8005ac0:	f023 0304 	bic.w	r3, r3, #4
 8005ac4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	689b      	ldr	r3, [r3, #8]
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d016      	beq.n	8005afe <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ad0:	f7fd f83c 	bl	8002b4c <HAL_GetTick>
 8005ad4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005ad6:	e00a      	b.n	8005aee <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005ad8:	f7fd f838 	bl	8002b4c <HAL_GetTick>
 8005adc:	4602      	mov	r2, r0
 8005ade:	693b      	ldr	r3, [r7, #16]
 8005ae0:	1ad3      	subs	r3, r2, r3
 8005ae2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005ae6:	4293      	cmp	r3, r2
 8005ae8:	d901      	bls.n	8005aee <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8005aea:	2303      	movs	r3, #3
 8005aec:	e138      	b.n	8005d60 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005aee:	4b46      	ldr	r3, [pc, #280]	@ (8005c08 <HAL_RCC_OscConfig+0x4b8>)
 8005af0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005af4:	f003 0302 	and.w	r3, r3, #2
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d0ed      	beq.n	8005ad8 <HAL_RCC_OscConfig+0x388>
 8005afc:	e015      	b.n	8005b2a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005afe:	f7fd f825 	bl	8002b4c <HAL_GetTick>
 8005b02:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005b04:	e00a      	b.n	8005b1c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005b06:	f7fd f821 	bl	8002b4c <HAL_GetTick>
 8005b0a:	4602      	mov	r2, r0
 8005b0c:	693b      	ldr	r3, [r7, #16]
 8005b0e:	1ad3      	subs	r3, r2, r3
 8005b10:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005b14:	4293      	cmp	r3, r2
 8005b16:	d901      	bls.n	8005b1c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8005b18:	2303      	movs	r3, #3
 8005b1a:	e121      	b.n	8005d60 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005b1c:	4b3a      	ldr	r3, [pc, #232]	@ (8005c08 <HAL_RCC_OscConfig+0x4b8>)
 8005b1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b22:	f003 0302 	and.w	r3, r3, #2
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d1ed      	bne.n	8005b06 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005b2a:	7ffb      	ldrb	r3, [r7, #31]
 8005b2c:	2b01      	cmp	r3, #1
 8005b2e:	d105      	bne.n	8005b3c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005b30:	4b35      	ldr	r3, [pc, #212]	@ (8005c08 <HAL_RCC_OscConfig+0x4b8>)
 8005b32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b34:	4a34      	ldr	r2, [pc, #208]	@ (8005c08 <HAL_RCC_OscConfig+0x4b8>)
 8005b36:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005b3a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	f003 0320 	and.w	r3, r3, #32
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d03c      	beq.n	8005bc2 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	699b      	ldr	r3, [r3, #24]
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d01c      	beq.n	8005b8a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005b50:	4b2d      	ldr	r3, [pc, #180]	@ (8005c08 <HAL_RCC_OscConfig+0x4b8>)
 8005b52:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005b56:	4a2c      	ldr	r2, [pc, #176]	@ (8005c08 <HAL_RCC_OscConfig+0x4b8>)
 8005b58:	f043 0301 	orr.w	r3, r3, #1
 8005b5c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b60:	f7fc fff4 	bl	8002b4c <HAL_GetTick>
 8005b64:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005b66:	e008      	b.n	8005b7a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005b68:	f7fc fff0 	bl	8002b4c <HAL_GetTick>
 8005b6c:	4602      	mov	r2, r0
 8005b6e:	693b      	ldr	r3, [r7, #16]
 8005b70:	1ad3      	subs	r3, r2, r3
 8005b72:	2b02      	cmp	r3, #2
 8005b74:	d901      	bls.n	8005b7a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8005b76:	2303      	movs	r3, #3
 8005b78:	e0f2      	b.n	8005d60 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005b7a:	4b23      	ldr	r3, [pc, #140]	@ (8005c08 <HAL_RCC_OscConfig+0x4b8>)
 8005b7c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005b80:	f003 0302 	and.w	r3, r3, #2
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d0ef      	beq.n	8005b68 <HAL_RCC_OscConfig+0x418>
 8005b88:	e01b      	b.n	8005bc2 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005b8a:	4b1f      	ldr	r3, [pc, #124]	@ (8005c08 <HAL_RCC_OscConfig+0x4b8>)
 8005b8c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005b90:	4a1d      	ldr	r2, [pc, #116]	@ (8005c08 <HAL_RCC_OscConfig+0x4b8>)
 8005b92:	f023 0301 	bic.w	r3, r3, #1
 8005b96:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b9a:	f7fc ffd7 	bl	8002b4c <HAL_GetTick>
 8005b9e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005ba0:	e008      	b.n	8005bb4 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005ba2:	f7fc ffd3 	bl	8002b4c <HAL_GetTick>
 8005ba6:	4602      	mov	r2, r0
 8005ba8:	693b      	ldr	r3, [r7, #16]
 8005baa:	1ad3      	subs	r3, r2, r3
 8005bac:	2b02      	cmp	r3, #2
 8005bae:	d901      	bls.n	8005bb4 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8005bb0:	2303      	movs	r3, #3
 8005bb2:	e0d5      	b.n	8005d60 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005bb4:	4b14      	ldr	r3, [pc, #80]	@ (8005c08 <HAL_RCC_OscConfig+0x4b8>)
 8005bb6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005bba:	f003 0302 	and.w	r3, r3, #2
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d1ef      	bne.n	8005ba2 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	69db      	ldr	r3, [r3, #28]
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	f000 80c9 	beq.w	8005d5e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005bcc:	4b0e      	ldr	r3, [pc, #56]	@ (8005c08 <HAL_RCC_OscConfig+0x4b8>)
 8005bce:	689b      	ldr	r3, [r3, #8]
 8005bd0:	f003 030c 	and.w	r3, r3, #12
 8005bd4:	2b0c      	cmp	r3, #12
 8005bd6:	f000 8083 	beq.w	8005ce0 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	69db      	ldr	r3, [r3, #28]
 8005bde:	2b02      	cmp	r3, #2
 8005be0:	d15e      	bne.n	8005ca0 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005be2:	4b09      	ldr	r3, [pc, #36]	@ (8005c08 <HAL_RCC_OscConfig+0x4b8>)
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	4a08      	ldr	r2, [pc, #32]	@ (8005c08 <HAL_RCC_OscConfig+0x4b8>)
 8005be8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005bec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005bee:	f7fc ffad 	bl	8002b4c <HAL_GetTick>
 8005bf2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005bf4:	e00c      	b.n	8005c10 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005bf6:	f7fc ffa9 	bl	8002b4c <HAL_GetTick>
 8005bfa:	4602      	mov	r2, r0
 8005bfc:	693b      	ldr	r3, [r7, #16]
 8005bfe:	1ad3      	subs	r3, r2, r3
 8005c00:	2b02      	cmp	r3, #2
 8005c02:	d905      	bls.n	8005c10 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8005c04:	2303      	movs	r3, #3
 8005c06:	e0ab      	b.n	8005d60 <HAL_RCC_OscConfig+0x610>
 8005c08:	40021000 	.word	0x40021000
 8005c0c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005c10:	4b55      	ldr	r3, [pc, #340]	@ (8005d68 <HAL_RCC_OscConfig+0x618>)
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d1ec      	bne.n	8005bf6 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005c1c:	4b52      	ldr	r3, [pc, #328]	@ (8005d68 <HAL_RCC_OscConfig+0x618>)
 8005c1e:	68da      	ldr	r2, [r3, #12]
 8005c20:	4b52      	ldr	r3, [pc, #328]	@ (8005d6c <HAL_RCC_OscConfig+0x61c>)
 8005c22:	4013      	ands	r3, r2
 8005c24:	687a      	ldr	r2, [r7, #4]
 8005c26:	6a11      	ldr	r1, [r2, #32]
 8005c28:	687a      	ldr	r2, [r7, #4]
 8005c2a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005c2c:	3a01      	subs	r2, #1
 8005c2e:	0112      	lsls	r2, r2, #4
 8005c30:	4311      	orrs	r1, r2
 8005c32:	687a      	ldr	r2, [r7, #4]
 8005c34:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8005c36:	0212      	lsls	r2, r2, #8
 8005c38:	4311      	orrs	r1, r2
 8005c3a:	687a      	ldr	r2, [r7, #4]
 8005c3c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8005c3e:	0852      	lsrs	r2, r2, #1
 8005c40:	3a01      	subs	r2, #1
 8005c42:	0552      	lsls	r2, r2, #21
 8005c44:	4311      	orrs	r1, r2
 8005c46:	687a      	ldr	r2, [r7, #4]
 8005c48:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8005c4a:	0852      	lsrs	r2, r2, #1
 8005c4c:	3a01      	subs	r2, #1
 8005c4e:	0652      	lsls	r2, r2, #25
 8005c50:	4311      	orrs	r1, r2
 8005c52:	687a      	ldr	r2, [r7, #4]
 8005c54:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8005c56:	06d2      	lsls	r2, r2, #27
 8005c58:	430a      	orrs	r2, r1
 8005c5a:	4943      	ldr	r1, [pc, #268]	@ (8005d68 <HAL_RCC_OscConfig+0x618>)
 8005c5c:	4313      	orrs	r3, r2
 8005c5e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005c60:	4b41      	ldr	r3, [pc, #260]	@ (8005d68 <HAL_RCC_OscConfig+0x618>)
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	4a40      	ldr	r2, [pc, #256]	@ (8005d68 <HAL_RCC_OscConfig+0x618>)
 8005c66:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005c6a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005c6c:	4b3e      	ldr	r3, [pc, #248]	@ (8005d68 <HAL_RCC_OscConfig+0x618>)
 8005c6e:	68db      	ldr	r3, [r3, #12]
 8005c70:	4a3d      	ldr	r2, [pc, #244]	@ (8005d68 <HAL_RCC_OscConfig+0x618>)
 8005c72:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005c76:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c78:	f7fc ff68 	bl	8002b4c <HAL_GetTick>
 8005c7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005c7e:	e008      	b.n	8005c92 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005c80:	f7fc ff64 	bl	8002b4c <HAL_GetTick>
 8005c84:	4602      	mov	r2, r0
 8005c86:	693b      	ldr	r3, [r7, #16]
 8005c88:	1ad3      	subs	r3, r2, r3
 8005c8a:	2b02      	cmp	r3, #2
 8005c8c:	d901      	bls.n	8005c92 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8005c8e:	2303      	movs	r3, #3
 8005c90:	e066      	b.n	8005d60 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005c92:	4b35      	ldr	r3, [pc, #212]	@ (8005d68 <HAL_RCC_OscConfig+0x618>)
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d0f0      	beq.n	8005c80 <HAL_RCC_OscConfig+0x530>
 8005c9e:	e05e      	b.n	8005d5e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005ca0:	4b31      	ldr	r3, [pc, #196]	@ (8005d68 <HAL_RCC_OscConfig+0x618>)
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	4a30      	ldr	r2, [pc, #192]	@ (8005d68 <HAL_RCC_OscConfig+0x618>)
 8005ca6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005caa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005cac:	f7fc ff4e 	bl	8002b4c <HAL_GetTick>
 8005cb0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005cb2:	e008      	b.n	8005cc6 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005cb4:	f7fc ff4a 	bl	8002b4c <HAL_GetTick>
 8005cb8:	4602      	mov	r2, r0
 8005cba:	693b      	ldr	r3, [r7, #16]
 8005cbc:	1ad3      	subs	r3, r2, r3
 8005cbe:	2b02      	cmp	r3, #2
 8005cc0:	d901      	bls.n	8005cc6 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8005cc2:	2303      	movs	r3, #3
 8005cc4:	e04c      	b.n	8005d60 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005cc6:	4b28      	ldr	r3, [pc, #160]	@ (8005d68 <HAL_RCC_OscConfig+0x618>)
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d1f0      	bne.n	8005cb4 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8005cd2:	4b25      	ldr	r3, [pc, #148]	@ (8005d68 <HAL_RCC_OscConfig+0x618>)
 8005cd4:	68da      	ldr	r2, [r3, #12]
 8005cd6:	4924      	ldr	r1, [pc, #144]	@ (8005d68 <HAL_RCC_OscConfig+0x618>)
 8005cd8:	4b25      	ldr	r3, [pc, #148]	@ (8005d70 <HAL_RCC_OscConfig+0x620>)
 8005cda:	4013      	ands	r3, r2
 8005cdc:	60cb      	str	r3, [r1, #12]
 8005cde:	e03e      	b.n	8005d5e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	69db      	ldr	r3, [r3, #28]
 8005ce4:	2b01      	cmp	r3, #1
 8005ce6:	d101      	bne.n	8005cec <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8005ce8:	2301      	movs	r3, #1
 8005cea:	e039      	b.n	8005d60 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8005cec:	4b1e      	ldr	r3, [pc, #120]	@ (8005d68 <HAL_RCC_OscConfig+0x618>)
 8005cee:	68db      	ldr	r3, [r3, #12]
 8005cf0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005cf2:	697b      	ldr	r3, [r7, #20]
 8005cf4:	f003 0203 	and.w	r2, r3, #3
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	6a1b      	ldr	r3, [r3, #32]
 8005cfc:	429a      	cmp	r2, r3
 8005cfe:	d12c      	bne.n	8005d5a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005d00:	697b      	ldr	r3, [r7, #20]
 8005d02:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d0a:	3b01      	subs	r3, #1
 8005d0c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005d0e:	429a      	cmp	r2, r3
 8005d10:	d123      	bne.n	8005d5a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005d12:	697b      	ldr	r3, [r7, #20]
 8005d14:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d1c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005d1e:	429a      	cmp	r2, r3
 8005d20:	d11b      	bne.n	8005d5a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005d22:	697b      	ldr	r3, [r7, #20]
 8005d24:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d2c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005d2e:	429a      	cmp	r2, r3
 8005d30:	d113      	bne.n	8005d5a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005d32:	697b      	ldr	r3, [r7, #20]
 8005d34:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d3c:	085b      	lsrs	r3, r3, #1
 8005d3e:	3b01      	subs	r3, #1
 8005d40:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005d42:	429a      	cmp	r2, r3
 8005d44:	d109      	bne.n	8005d5a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005d46:	697b      	ldr	r3, [r7, #20]
 8005d48:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005d50:	085b      	lsrs	r3, r3, #1
 8005d52:	3b01      	subs	r3, #1
 8005d54:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005d56:	429a      	cmp	r2, r3
 8005d58:	d001      	beq.n	8005d5e <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8005d5a:	2301      	movs	r3, #1
 8005d5c:	e000      	b.n	8005d60 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8005d5e:	2300      	movs	r3, #0
}
 8005d60:	4618      	mov	r0, r3
 8005d62:	3720      	adds	r7, #32
 8005d64:	46bd      	mov	sp, r7
 8005d66:	bd80      	pop	{r7, pc}
 8005d68:	40021000 	.word	0x40021000
 8005d6c:	019f800c 	.word	0x019f800c
 8005d70:	feeefffc 	.word	0xfeeefffc

08005d74 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005d74:	b580      	push	{r7, lr}
 8005d76:	b086      	sub	sp, #24
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	6078      	str	r0, [r7, #4]
 8005d7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8005d7e:	2300      	movs	r3, #0
 8005d80:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d101      	bne.n	8005d8c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005d88:	2301      	movs	r3, #1
 8005d8a:	e11e      	b.n	8005fca <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005d8c:	4b91      	ldr	r3, [pc, #580]	@ (8005fd4 <HAL_RCC_ClockConfig+0x260>)
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	f003 030f 	and.w	r3, r3, #15
 8005d94:	683a      	ldr	r2, [r7, #0]
 8005d96:	429a      	cmp	r2, r3
 8005d98:	d910      	bls.n	8005dbc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d9a:	4b8e      	ldr	r3, [pc, #568]	@ (8005fd4 <HAL_RCC_ClockConfig+0x260>)
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	f023 020f 	bic.w	r2, r3, #15
 8005da2:	498c      	ldr	r1, [pc, #560]	@ (8005fd4 <HAL_RCC_ClockConfig+0x260>)
 8005da4:	683b      	ldr	r3, [r7, #0]
 8005da6:	4313      	orrs	r3, r2
 8005da8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005daa:	4b8a      	ldr	r3, [pc, #552]	@ (8005fd4 <HAL_RCC_ClockConfig+0x260>)
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	f003 030f 	and.w	r3, r3, #15
 8005db2:	683a      	ldr	r2, [r7, #0]
 8005db4:	429a      	cmp	r2, r3
 8005db6:	d001      	beq.n	8005dbc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005db8:	2301      	movs	r3, #1
 8005dba:	e106      	b.n	8005fca <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	f003 0301 	and.w	r3, r3, #1
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d073      	beq.n	8005eb0 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	685b      	ldr	r3, [r3, #4]
 8005dcc:	2b03      	cmp	r3, #3
 8005dce:	d129      	bne.n	8005e24 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005dd0:	4b81      	ldr	r3, [pc, #516]	@ (8005fd8 <HAL_RCC_ClockConfig+0x264>)
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d101      	bne.n	8005de0 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8005ddc:	2301      	movs	r3, #1
 8005dde:	e0f4      	b.n	8005fca <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8005de0:	f000 f99c 	bl	800611c <RCC_GetSysClockFreqFromPLLSource>
 8005de4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8005de6:	693b      	ldr	r3, [r7, #16]
 8005de8:	4a7c      	ldr	r2, [pc, #496]	@ (8005fdc <HAL_RCC_ClockConfig+0x268>)
 8005dea:	4293      	cmp	r3, r2
 8005dec:	d93f      	bls.n	8005e6e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005dee:	4b7a      	ldr	r3, [pc, #488]	@ (8005fd8 <HAL_RCC_ClockConfig+0x264>)
 8005df0:	689b      	ldr	r3, [r3, #8]
 8005df2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d009      	beq.n	8005e0e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d033      	beq.n	8005e6e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d12f      	bne.n	8005e6e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005e0e:	4b72      	ldr	r3, [pc, #456]	@ (8005fd8 <HAL_RCC_ClockConfig+0x264>)
 8005e10:	689b      	ldr	r3, [r3, #8]
 8005e12:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005e16:	4a70      	ldr	r2, [pc, #448]	@ (8005fd8 <HAL_RCC_ClockConfig+0x264>)
 8005e18:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005e1c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005e1e:	2380      	movs	r3, #128	@ 0x80
 8005e20:	617b      	str	r3, [r7, #20]
 8005e22:	e024      	b.n	8005e6e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	685b      	ldr	r3, [r3, #4]
 8005e28:	2b02      	cmp	r3, #2
 8005e2a:	d107      	bne.n	8005e3c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005e2c:	4b6a      	ldr	r3, [pc, #424]	@ (8005fd8 <HAL_RCC_ClockConfig+0x264>)
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d109      	bne.n	8005e4c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005e38:	2301      	movs	r3, #1
 8005e3a:	e0c6      	b.n	8005fca <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005e3c:	4b66      	ldr	r3, [pc, #408]	@ (8005fd8 <HAL_RCC_ClockConfig+0x264>)
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d101      	bne.n	8005e4c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005e48:	2301      	movs	r3, #1
 8005e4a:	e0be      	b.n	8005fca <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8005e4c:	f000 f8ce 	bl	8005fec <HAL_RCC_GetSysClockFreq>
 8005e50:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8005e52:	693b      	ldr	r3, [r7, #16]
 8005e54:	4a61      	ldr	r2, [pc, #388]	@ (8005fdc <HAL_RCC_ClockConfig+0x268>)
 8005e56:	4293      	cmp	r3, r2
 8005e58:	d909      	bls.n	8005e6e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005e5a:	4b5f      	ldr	r3, [pc, #380]	@ (8005fd8 <HAL_RCC_ClockConfig+0x264>)
 8005e5c:	689b      	ldr	r3, [r3, #8]
 8005e5e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005e62:	4a5d      	ldr	r2, [pc, #372]	@ (8005fd8 <HAL_RCC_ClockConfig+0x264>)
 8005e64:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005e68:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8005e6a:	2380      	movs	r3, #128	@ 0x80
 8005e6c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005e6e:	4b5a      	ldr	r3, [pc, #360]	@ (8005fd8 <HAL_RCC_ClockConfig+0x264>)
 8005e70:	689b      	ldr	r3, [r3, #8]
 8005e72:	f023 0203 	bic.w	r2, r3, #3
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	685b      	ldr	r3, [r3, #4]
 8005e7a:	4957      	ldr	r1, [pc, #348]	@ (8005fd8 <HAL_RCC_ClockConfig+0x264>)
 8005e7c:	4313      	orrs	r3, r2
 8005e7e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005e80:	f7fc fe64 	bl	8002b4c <HAL_GetTick>
 8005e84:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005e86:	e00a      	b.n	8005e9e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005e88:	f7fc fe60 	bl	8002b4c <HAL_GetTick>
 8005e8c:	4602      	mov	r2, r0
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	1ad3      	subs	r3, r2, r3
 8005e92:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005e96:	4293      	cmp	r3, r2
 8005e98:	d901      	bls.n	8005e9e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8005e9a:	2303      	movs	r3, #3
 8005e9c:	e095      	b.n	8005fca <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005e9e:	4b4e      	ldr	r3, [pc, #312]	@ (8005fd8 <HAL_RCC_ClockConfig+0x264>)
 8005ea0:	689b      	ldr	r3, [r3, #8]
 8005ea2:	f003 020c 	and.w	r2, r3, #12
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	685b      	ldr	r3, [r3, #4]
 8005eaa:	009b      	lsls	r3, r3, #2
 8005eac:	429a      	cmp	r2, r3
 8005eae:	d1eb      	bne.n	8005e88 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	f003 0302 	and.w	r3, r3, #2
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d023      	beq.n	8005f04 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	f003 0304 	and.w	r3, r3, #4
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d005      	beq.n	8005ed4 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005ec8:	4b43      	ldr	r3, [pc, #268]	@ (8005fd8 <HAL_RCC_ClockConfig+0x264>)
 8005eca:	689b      	ldr	r3, [r3, #8]
 8005ecc:	4a42      	ldr	r2, [pc, #264]	@ (8005fd8 <HAL_RCC_ClockConfig+0x264>)
 8005ece:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8005ed2:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	f003 0308 	and.w	r3, r3, #8
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d007      	beq.n	8005ef0 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8005ee0:	4b3d      	ldr	r3, [pc, #244]	@ (8005fd8 <HAL_RCC_ClockConfig+0x264>)
 8005ee2:	689b      	ldr	r3, [r3, #8]
 8005ee4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8005ee8:	4a3b      	ldr	r2, [pc, #236]	@ (8005fd8 <HAL_RCC_ClockConfig+0x264>)
 8005eea:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8005eee:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005ef0:	4b39      	ldr	r3, [pc, #228]	@ (8005fd8 <HAL_RCC_ClockConfig+0x264>)
 8005ef2:	689b      	ldr	r3, [r3, #8]
 8005ef4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	689b      	ldr	r3, [r3, #8]
 8005efc:	4936      	ldr	r1, [pc, #216]	@ (8005fd8 <HAL_RCC_ClockConfig+0x264>)
 8005efe:	4313      	orrs	r3, r2
 8005f00:	608b      	str	r3, [r1, #8]
 8005f02:	e008      	b.n	8005f16 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8005f04:	697b      	ldr	r3, [r7, #20]
 8005f06:	2b80      	cmp	r3, #128	@ 0x80
 8005f08:	d105      	bne.n	8005f16 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8005f0a:	4b33      	ldr	r3, [pc, #204]	@ (8005fd8 <HAL_RCC_ClockConfig+0x264>)
 8005f0c:	689b      	ldr	r3, [r3, #8]
 8005f0e:	4a32      	ldr	r2, [pc, #200]	@ (8005fd8 <HAL_RCC_ClockConfig+0x264>)
 8005f10:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005f14:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005f16:	4b2f      	ldr	r3, [pc, #188]	@ (8005fd4 <HAL_RCC_ClockConfig+0x260>)
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	f003 030f 	and.w	r3, r3, #15
 8005f1e:	683a      	ldr	r2, [r7, #0]
 8005f20:	429a      	cmp	r2, r3
 8005f22:	d21d      	bcs.n	8005f60 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005f24:	4b2b      	ldr	r3, [pc, #172]	@ (8005fd4 <HAL_RCC_ClockConfig+0x260>)
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	f023 020f 	bic.w	r2, r3, #15
 8005f2c:	4929      	ldr	r1, [pc, #164]	@ (8005fd4 <HAL_RCC_ClockConfig+0x260>)
 8005f2e:	683b      	ldr	r3, [r7, #0]
 8005f30:	4313      	orrs	r3, r2
 8005f32:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005f34:	f7fc fe0a 	bl	8002b4c <HAL_GetTick>
 8005f38:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005f3a:	e00a      	b.n	8005f52 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005f3c:	f7fc fe06 	bl	8002b4c <HAL_GetTick>
 8005f40:	4602      	mov	r2, r0
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	1ad3      	subs	r3, r2, r3
 8005f46:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005f4a:	4293      	cmp	r3, r2
 8005f4c:	d901      	bls.n	8005f52 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8005f4e:	2303      	movs	r3, #3
 8005f50:	e03b      	b.n	8005fca <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005f52:	4b20      	ldr	r3, [pc, #128]	@ (8005fd4 <HAL_RCC_ClockConfig+0x260>)
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	f003 030f 	and.w	r3, r3, #15
 8005f5a:	683a      	ldr	r2, [r7, #0]
 8005f5c:	429a      	cmp	r2, r3
 8005f5e:	d1ed      	bne.n	8005f3c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	f003 0304 	and.w	r3, r3, #4
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d008      	beq.n	8005f7e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005f6c:	4b1a      	ldr	r3, [pc, #104]	@ (8005fd8 <HAL_RCC_ClockConfig+0x264>)
 8005f6e:	689b      	ldr	r3, [r3, #8]
 8005f70:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	68db      	ldr	r3, [r3, #12]
 8005f78:	4917      	ldr	r1, [pc, #92]	@ (8005fd8 <HAL_RCC_ClockConfig+0x264>)
 8005f7a:	4313      	orrs	r3, r2
 8005f7c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	f003 0308 	and.w	r3, r3, #8
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d009      	beq.n	8005f9e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005f8a:	4b13      	ldr	r3, [pc, #76]	@ (8005fd8 <HAL_RCC_ClockConfig+0x264>)
 8005f8c:	689b      	ldr	r3, [r3, #8]
 8005f8e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	691b      	ldr	r3, [r3, #16]
 8005f96:	00db      	lsls	r3, r3, #3
 8005f98:	490f      	ldr	r1, [pc, #60]	@ (8005fd8 <HAL_RCC_ClockConfig+0x264>)
 8005f9a:	4313      	orrs	r3, r2
 8005f9c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005f9e:	f000 f825 	bl	8005fec <HAL_RCC_GetSysClockFreq>
 8005fa2:	4602      	mov	r2, r0
 8005fa4:	4b0c      	ldr	r3, [pc, #48]	@ (8005fd8 <HAL_RCC_ClockConfig+0x264>)
 8005fa6:	689b      	ldr	r3, [r3, #8]
 8005fa8:	091b      	lsrs	r3, r3, #4
 8005faa:	f003 030f 	and.w	r3, r3, #15
 8005fae:	490c      	ldr	r1, [pc, #48]	@ (8005fe0 <HAL_RCC_ClockConfig+0x26c>)
 8005fb0:	5ccb      	ldrb	r3, [r1, r3]
 8005fb2:	f003 031f 	and.w	r3, r3, #31
 8005fb6:	fa22 f303 	lsr.w	r3, r2, r3
 8005fba:	4a0a      	ldr	r2, [pc, #40]	@ (8005fe4 <HAL_RCC_ClockConfig+0x270>)
 8005fbc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8005fbe:	4b0a      	ldr	r3, [pc, #40]	@ (8005fe8 <HAL_RCC_ClockConfig+0x274>)
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	4618      	mov	r0, r3
 8005fc4:	f7fc fd76 	bl	8002ab4 <HAL_InitTick>
 8005fc8:	4603      	mov	r3, r0
}
 8005fca:	4618      	mov	r0, r3
 8005fcc:	3718      	adds	r7, #24
 8005fce:	46bd      	mov	sp, r7
 8005fd0:	bd80      	pop	{r7, pc}
 8005fd2:	bf00      	nop
 8005fd4:	40022000 	.word	0x40022000
 8005fd8:	40021000 	.word	0x40021000
 8005fdc:	04c4b400 	.word	0x04c4b400
 8005fe0:	08010578 	.word	0x08010578
 8005fe4:	20000000 	.word	0x20000000
 8005fe8:	20000004 	.word	0x20000004

08005fec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005fec:	b480      	push	{r7}
 8005fee:	b087      	sub	sp, #28
 8005ff0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8005ff2:	4b2c      	ldr	r3, [pc, #176]	@ (80060a4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005ff4:	689b      	ldr	r3, [r3, #8]
 8005ff6:	f003 030c 	and.w	r3, r3, #12
 8005ffa:	2b04      	cmp	r3, #4
 8005ffc:	d102      	bne.n	8006004 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005ffe:	4b2a      	ldr	r3, [pc, #168]	@ (80060a8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8006000:	613b      	str	r3, [r7, #16]
 8006002:	e047      	b.n	8006094 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8006004:	4b27      	ldr	r3, [pc, #156]	@ (80060a4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006006:	689b      	ldr	r3, [r3, #8]
 8006008:	f003 030c 	and.w	r3, r3, #12
 800600c:	2b08      	cmp	r3, #8
 800600e:	d102      	bne.n	8006016 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006010:	4b25      	ldr	r3, [pc, #148]	@ (80060a8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8006012:	613b      	str	r3, [r7, #16]
 8006014:	e03e      	b.n	8006094 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8006016:	4b23      	ldr	r3, [pc, #140]	@ (80060a4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006018:	689b      	ldr	r3, [r3, #8]
 800601a:	f003 030c 	and.w	r3, r3, #12
 800601e:	2b0c      	cmp	r3, #12
 8006020:	d136      	bne.n	8006090 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006022:	4b20      	ldr	r3, [pc, #128]	@ (80060a4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006024:	68db      	ldr	r3, [r3, #12]
 8006026:	f003 0303 	and.w	r3, r3, #3
 800602a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800602c:	4b1d      	ldr	r3, [pc, #116]	@ (80060a4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800602e:	68db      	ldr	r3, [r3, #12]
 8006030:	091b      	lsrs	r3, r3, #4
 8006032:	f003 030f 	and.w	r3, r3, #15
 8006036:	3301      	adds	r3, #1
 8006038:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	2b03      	cmp	r3, #3
 800603e:	d10c      	bne.n	800605a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006040:	4a19      	ldr	r2, [pc, #100]	@ (80060a8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8006042:	68bb      	ldr	r3, [r7, #8]
 8006044:	fbb2 f3f3 	udiv	r3, r2, r3
 8006048:	4a16      	ldr	r2, [pc, #88]	@ (80060a4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800604a:	68d2      	ldr	r2, [r2, #12]
 800604c:	0a12      	lsrs	r2, r2, #8
 800604e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006052:	fb02 f303 	mul.w	r3, r2, r3
 8006056:	617b      	str	r3, [r7, #20]
      break;
 8006058:	e00c      	b.n	8006074 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800605a:	4a13      	ldr	r2, [pc, #76]	@ (80060a8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800605c:	68bb      	ldr	r3, [r7, #8]
 800605e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006062:	4a10      	ldr	r2, [pc, #64]	@ (80060a4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006064:	68d2      	ldr	r2, [r2, #12]
 8006066:	0a12      	lsrs	r2, r2, #8
 8006068:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800606c:	fb02 f303 	mul.w	r3, r2, r3
 8006070:	617b      	str	r3, [r7, #20]
      break;
 8006072:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006074:	4b0b      	ldr	r3, [pc, #44]	@ (80060a4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006076:	68db      	ldr	r3, [r3, #12]
 8006078:	0e5b      	lsrs	r3, r3, #25
 800607a:	f003 0303 	and.w	r3, r3, #3
 800607e:	3301      	adds	r3, #1
 8006080:	005b      	lsls	r3, r3, #1
 8006082:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8006084:	697a      	ldr	r2, [r7, #20]
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	fbb2 f3f3 	udiv	r3, r2, r3
 800608c:	613b      	str	r3, [r7, #16]
 800608e:	e001      	b.n	8006094 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8006090:	2300      	movs	r3, #0
 8006092:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8006094:	693b      	ldr	r3, [r7, #16]
}
 8006096:	4618      	mov	r0, r3
 8006098:	371c      	adds	r7, #28
 800609a:	46bd      	mov	sp, r7
 800609c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a0:	4770      	bx	lr
 80060a2:	bf00      	nop
 80060a4:	40021000 	.word	0x40021000
 80060a8:	00f42400 	.word	0x00f42400

080060ac <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80060ac:	b480      	push	{r7}
 80060ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80060b0:	4b03      	ldr	r3, [pc, #12]	@ (80060c0 <HAL_RCC_GetHCLKFreq+0x14>)
 80060b2:	681b      	ldr	r3, [r3, #0]
}
 80060b4:	4618      	mov	r0, r3
 80060b6:	46bd      	mov	sp, r7
 80060b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060bc:	4770      	bx	lr
 80060be:	bf00      	nop
 80060c0:	20000000 	.word	0x20000000

080060c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80060c4:	b580      	push	{r7, lr}
 80060c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80060c8:	f7ff fff0 	bl	80060ac <HAL_RCC_GetHCLKFreq>
 80060cc:	4602      	mov	r2, r0
 80060ce:	4b06      	ldr	r3, [pc, #24]	@ (80060e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80060d0:	689b      	ldr	r3, [r3, #8]
 80060d2:	0a1b      	lsrs	r3, r3, #8
 80060d4:	f003 0307 	and.w	r3, r3, #7
 80060d8:	4904      	ldr	r1, [pc, #16]	@ (80060ec <HAL_RCC_GetPCLK1Freq+0x28>)
 80060da:	5ccb      	ldrb	r3, [r1, r3]
 80060dc:	f003 031f 	and.w	r3, r3, #31
 80060e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80060e4:	4618      	mov	r0, r3
 80060e6:	bd80      	pop	{r7, pc}
 80060e8:	40021000 	.word	0x40021000
 80060ec:	08010588 	.word	0x08010588

080060f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80060f0:	b580      	push	{r7, lr}
 80060f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80060f4:	f7ff ffda 	bl	80060ac <HAL_RCC_GetHCLKFreq>
 80060f8:	4602      	mov	r2, r0
 80060fa:	4b06      	ldr	r3, [pc, #24]	@ (8006114 <HAL_RCC_GetPCLK2Freq+0x24>)
 80060fc:	689b      	ldr	r3, [r3, #8]
 80060fe:	0adb      	lsrs	r3, r3, #11
 8006100:	f003 0307 	and.w	r3, r3, #7
 8006104:	4904      	ldr	r1, [pc, #16]	@ (8006118 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006106:	5ccb      	ldrb	r3, [r1, r3]
 8006108:	f003 031f 	and.w	r3, r3, #31
 800610c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006110:	4618      	mov	r0, r3
 8006112:	bd80      	pop	{r7, pc}
 8006114:	40021000 	.word	0x40021000
 8006118:	08010588 	.word	0x08010588

0800611c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800611c:	b480      	push	{r7}
 800611e:	b087      	sub	sp, #28
 8006120:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006122:	4b1e      	ldr	r3, [pc, #120]	@ (800619c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006124:	68db      	ldr	r3, [r3, #12]
 8006126:	f003 0303 	and.w	r3, r3, #3
 800612a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800612c:	4b1b      	ldr	r3, [pc, #108]	@ (800619c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800612e:	68db      	ldr	r3, [r3, #12]
 8006130:	091b      	lsrs	r3, r3, #4
 8006132:	f003 030f 	and.w	r3, r3, #15
 8006136:	3301      	adds	r3, #1
 8006138:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800613a:	693b      	ldr	r3, [r7, #16]
 800613c:	2b03      	cmp	r3, #3
 800613e:	d10c      	bne.n	800615a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006140:	4a17      	ldr	r2, [pc, #92]	@ (80061a0 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	fbb2 f3f3 	udiv	r3, r2, r3
 8006148:	4a14      	ldr	r2, [pc, #80]	@ (800619c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800614a:	68d2      	ldr	r2, [r2, #12]
 800614c:	0a12      	lsrs	r2, r2, #8
 800614e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006152:	fb02 f303 	mul.w	r3, r2, r3
 8006156:	617b      	str	r3, [r7, #20]
    break;
 8006158:	e00c      	b.n	8006174 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800615a:	4a11      	ldr	r2, [pc, #68]	@ (80061a0 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006162:	4a0e      	ldr	r2, [pc, #56]	@ (800619c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006164:	68d2      	ldr	r2, [r2, #12]
 8006166:	0a12      	lsrs	r2, r2, #8
 8006168:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800616c:	fb02 f303 	mul.w	r3, r2, r3
 8006170:	617b      	str	r3, [r7, #20]
    break;
 8006172:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006174:	4b09      	ldr	r3, [pc, #36]	@ (800619c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006176:	68db      	ldr	r3, [r3, #12]
 8006178:	0e5b      	lsrs	r3, r3, #25
 800617a:	f003 0303 	and.w	r3, r3, #3
 800617e:	3301      	adds	r3, #1
 8006180:	005b      	lsls	r3, r3, #1
 8006182:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8006184:	697a      	ldr	r2, [r7, #20]
 8006186:	68bb      	ldr	r3, [r7, #8]
 8006188:	fbb2 f3f3 	udiv	r3, r2, r3
 800618c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800618e:	687b      	ldr	r3, [r7, #4]
}
 8006190:	4618      	mov	r0, r3
 8006192:	371c      	adds	r7, #28
 8006194:	46bd      	mov	sp, r7
 8006196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800619a:	4770      	bx	lr
 800619c:	40021000 	.word	0x40021000
 80061a0:	00f42400 	.word	0x00f42400

080061a4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80061a4:	b580      	push	{r7, lr}
 80061a6:	b086      	sub	sp, #24
 80061a8:	af00      	add	r7, sp, #0
 80061aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80061ac:	2300      	movs	r3, #0
 80061ae:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80061b0:	2300      	movs	r3, #0
 80061b2:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80061bc:	2b00      	cmp	r3, #0
 80061be:	f000 8098 	beq.w	80062f2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80061c2:	2300      	movs	r3, #0
 80061c4:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80061c6:	4b43      	ldr	r3, [pc, #268]	@ (80062d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80061c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80061ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d10d      	bne.n	80061ee <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80061d2:	4b40      	ldr	r3, [pc, #256]	@ (80062d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80061d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80061d6:	4a3f      	ldr	r2, [pc, #252]	@ (80062d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80061d8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80061dc:	6593      	str	r3, [r2, #88]	@ 0x58
 80061de:	4b3d      	ldr	r3, [pc, #244]	@ (80062d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80061e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80061e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80061e6:	60bb      	str	r3, [r7, #8]
 80061e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80061ea:	2301      	movs	r3, #1
 80061ec:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80061ee:	4b3a      	ldr	r3, [pc, #232]	@ (80062d8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	4a39      	ldr	r2, [pc, #228]	@ (80062d8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80061f4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80061f8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80061fa:	f7fc fca7 	bl	8002b4c <HAL_GetTick>
 80061fe:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006200:	e009      	b.n	8006216 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006202:	f7fc fca3 	bl	8002b4c <HAL_GetTick>
 8006206:	4602      	mov	r2, r0
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	1ad3      	subs	r3, r2, r3
 800620c:	2b02      	cmp	r3, #2
 800620e:	d902      	bls.n	8006216 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8006210:	2303      	movs	r3, #3
 8006212:	74fb      	strb	r3, [r7, #19]
        break;
 8006214:	e005      	b.n	8006222 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006216:	4b30      	ldr	r3, [pc, #192]	@ (80062d8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800621e:	2b00      	cmp	r3, #0
 8006220:	d0ef      	beq.n	8006202 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8006222:	7cfb      	ldrb	r3, [r7, #19]
 8006224:	2b00      	cmp	r3, #0
 8006226:	d159      	bne.n	80062dc <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006228:	4b2a      	ldr	r3, [pc, #168]	@ (80062d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800622a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800622e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006232:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006234:	697b      	ldr	r3, [r7, #20]
 8006236:	2b00      	cmp	r3, #0
 8006238:	d01e      	beq.n	8006278 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800623e:	697a      	ldr	r2, [r7, #20]
 8006240:	429a      	cmp	r2, r3
 8006242:	d019      	beq.n	8006278 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006244:	4b23      	ldr	r3, [pc, #140]	@ (80062d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006246:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800624a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800624e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006250:	4b20      	ldr	r3, [pc, #128]	@ (80062d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006252:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006256:	4a1f      	ldr	r2, [pc, #124]	@ (80062d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006258:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800625c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006260:	4b1c      	ldr	r3, [pc, #112]	@ (80062d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006262:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006266:	4a1b      	ldr	r2, [pc, #108]	@ (80062d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006268:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800626c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006270:	4a18      	ldr	r2, [pc, #96]	@ (80062d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006272:	697b      	ldr	r3, [r7, #20]
 8006274:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006278:	697b      	ldr	r3, [r7, #20]
 800627a:	f003 0301 	and.w	r3, r3, #1
 800627e:	2b00      	cmp	r3, #0
 8006280:	d016      	beq.n	80062b0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006282:	f7fc fc63 	bl	8002b4c <HAL_GetTick>
 8006286:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006288:	e00b      	b.n	80062a2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800628a:	f7fc fc5f 	bl	8002b4c <HAL_GetTick>
 800628e:	4602      	mov	r2, r0
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	1ad3      	subs	r3, r2, r3
 8006294:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006298:	4293      	cmp	r3, r2
 800629a:	d902      	bls.n	80062a2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800629c:	2303      	movs	r3, #3
 800629e:	74fb      	strb	r3, [r7, #19]
            break;
 80062a0:	e006      	b.n	80062b0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80062a2:	4b0c      	ldr	r3, [pc, #48]	@ (80062d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80062a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80062a8:	f003 0302 	and.w	r3, r3, #2
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d0ec      	beq.n	800628a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80062b0:	7cfb      	ldrb	r3, [r7, #19]
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d10b      	bne.n	80062ce <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80062b6:	4b07      	ldr	r3, [pc, #28]	@ (80062d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80062b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80062bc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80062c4:	4903      	ldr	r1, [pc, #12]	@ (80062d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80062c6:	4313      	orrs	r3, r2
 80062c8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80062cc:	e008      	b.n	80062e0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80062ce:	7cfb      	ldrb	r3, [r7, #19]
 80062d0:	74bb      	strb	r3, [r7, #18]
 80062d2:	e005      	b.n	80062e0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80062d4:	40021000 	.word	0x40021000
 80062d8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062dc:	7cfb      	ldrb	r3, [r7, #19]
 80062de:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80062e0:	7c7b      	ldrb	r3, [r7, #17]
 80062e2:	2b01      	cmp	r3, #1
 80062e4:	d105      	bne.n	80062f2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80062e6:	4ba7      	ldr	r3, [pc, #668]	@ (8006584 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80062e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80062ea:	4aa6      	ldr	r2, [pc, #664]	@ (8006584 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80062ec:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80062f0:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	f003 0301 	and.w	r3, r3, #1
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d00a      	beq.n	8006314 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80062fe:	4ba1      	ldr	r3, [pc, #644]	@ (8006584 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006300:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006304:	f023 0203 	bic.w	r2, r3, #3
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	685b      	ldr	r3, [r3, #4]
 800630c:	499d      	ldr	r1, [pc, #628]	@ (8006584 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800630e:	4313      	orrs	r3, r2
 8006310:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	f003 0302 	and.w	r3, r3, #2
 800631c:	2b00      	cmp	r3, #0
 800631e:	d00a      	beq.n	8006336 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006320:	4b98      	ldr	r3, [pc, #608]	@ (8006584 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006322:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006326:	f023 020c 	bic.w	r2, r3, #12
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	689b      	ldr	r3, [r3, #8]
 800632e:	4995      	ldr	r1, [pc, #596]	@ (8006584 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006330:	4313      	orrs	r3, r2
 8006332:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	f003 0304 	and.w	r3, r3, #4
 800633e:	2b00      	cmp	r3, #0
 8006340:	d00a      	beq.n	8006358 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006342:	4b90      	ldr	r3, [pc, #576]	@ (8006584 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006344:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006348:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	68db      	ldr	r3, [r3, #12]
 8006350:	498c      	ldr	r1, [pc, #560]	@ (8006584 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006352:	4313      	orrs	r3, r2
 8006354:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	f003 0308 	and.w	r3, r3, #8
 8006360:	2b00      	cmp	r3, #0
 8006362:	d00a      	beq.n	800637a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006364:	4b87      	ldr	r3, [pc, #540]	@ (8006584 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006366:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800636a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	691b      	ldr	r3, [r3, #16]
 8006372:	4984      	ldr	r1, [pc, #528]	@ (8006584 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006374:	4313      	orrs	r3, r2
 8006376:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	f003 0310 	and.w	r3, r3, #16
 8006382:	2b00      	cmp	r3, #0
 8006384:	d00a      	beq.n	800639c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006386:	4b7f      	ldr	r3, [pc, #508]	@ (8006584 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006388:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800638c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	695b      	ldr	r3, [r3, #20]
 8006394:	497b      	ldr	r1, [pc, #492]	@ (8006584 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006396:	4313      	orrs	r3, r2
 8006398:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	f003 0320 	and.w	r3, r3, #32
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d00a      	beq.n	80063be <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80063a8:	4b76      	ldr	r3, [pc, #472]	@ (8006584 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80063aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80063ae:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	699b      	ldr	r3, [r3, #24]
 80063b6:	4973      	ldr	r1, [pc, #460]	@ (8006584 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80063b8:	4313      	orrs	r3, r2
 80063ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d00a      	beq.n	80063e0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80063ca:	4b6e      	ldr	r3, [pc, #440]	@ (8006584 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80063cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80063d0:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	69db      	ldr	r3, [r3, #28]
 80063d8:	496a      	ldr	r1, [pc, #424]	@ (8006584 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80063da:	4313      	orrs	r3, r2
 80063dc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d00a      	beq.n	8006402 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80063ec:	4b65      	ldr	r3, [pc, #404]	@ (8006584 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80063ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80063f2:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	6a1b      	ldr	r3, [r3, #32]
 80063fa:	4962      	ldr	r1, [pc, #392]	@ (8006584 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80063fc:	4313      	orrs	r3, r2
 80063fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800640a:	2b00      	cmp	r3, #0
 800640c:	d00a      	beq.n	8006424 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800640e:	4b5d      	ldr	r3, [pc, #372]	@ (8006584 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006410:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006414:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800641c:	4959      	ldr	r1, [pc, #356]	@ (8006584 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800641e:	4313      	orrs	r3, r2
 8006420:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800642c:	2b00      	cmp	r3, #0
 800642e:	d00a      	beq.n	8006446 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006430:	4b54      	ldr	r3, [pc, #336]	@ (8006584 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006432:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006436:	f023 0203 	bic.w	r2, r3, #3
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800643e:	4951      	ldr	r1, [pc, #324]	@ (8006584 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006440:	4313      	orrs	r3, r2
 8006442:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800644e:	2b00      	cmp	r3, #0
 8006450:	d00a      	beq.n	8006468 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006452:	4b4c      	ldr	r3, [pc, #304]	@ (8006584 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006454:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006458:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006460:	4948      	ldr	r1, [pc, #288]	@ (8006584 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006462:	4313      	orrs	r3, r2
 8006464:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006470:	2b00      	cmp	r3, #0
 8006472:	d015      	beq.n	80064a0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006474:	4b43      	ldr	r3, [pc, #268]	@ (8006584 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006476:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800647a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006482:	4940      	ldr	r1, [pc, #256]	@ (8006584 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006484:	4313      	orrs	r3, r2
 8006486:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800648e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006492:	d105      	bne.n	80064a0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006494:	4b3b      	ldr	r3, [pc, #236]	@ (8006584 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006496:	68db      	ldr	r3, [r3, #12]
 8006498:	4a3a      	ldr	r2, [pc, #232]	@ (8006584 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800649a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800649e:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d015      	beq.n	80064d8 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80064ac:	4b35      	ldr	r3, [pc, #212]	@ (8006584 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80064ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80064b2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80064ba:	4932      	ldr	r1, [pc, #200]	@ (8006584 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80064bc:	4313      	orrs	r3, r2
 80064be:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80064c6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80064ca:	d105      	bne.n	80064d8 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80064cc:	4b2d      	ldr	r3, [pc, #180]	@ (8006584 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80064ce:	68db      	ldr	r3, [r3, #12]
 80064d0:	4a2c      	ldr	r2, [pc, #176]	@ (8006584 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80064d2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80064d6:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d015      	beq.n	8006510 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80064e4:	4b27      	ldr	r3, [pc, #156]	@ (8006584 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80064e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80064ea:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064f2:	4924      	ldr	r1, [pc, #144]	@ (8006584 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80064f4:	4313      	orrs	r3, r2
 80064f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064fe:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006502:	d105      	bne.n	8006510 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006504:	4b1f      	ldr	r3, [pc, #124]	@ (8006584 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006506:	68db      	ldr	r3, [r3, #12]
 8006508:	4a1e      	ldr	r2, [pc, #120]	@ (8006584 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800650a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800650e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006518:	2b00      	cmp	r3, #0
 800651a:	d015      	beq.n	8006548 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800651c:	4b19      	ldr	r3, [pc, #100]	@ (8006584 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800651e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006522:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800652a:	4916      	ldr	r1, [pc, #88]	@ (8006584 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800652c:	4313      	orrs	r3, r2
 800652e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006536:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800653a:	d105      	bne.n	8006548 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800653c:	4b11      	ldr	r3, [pc, #68]	@ (8006584 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800653e:	68db      	ldr	r3, [r3, #12]
 8006540:	4a10      	ldr	r2, [pc, #64]	@ (8006584 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006542:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006546:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006550:	2b00      	cmp	r3, #0
 8006552:	d019      	beq.n	8006588 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006554:	4b0b      	ldr	r3, [pc, #44]	@ (8006584 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006556:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800655a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006562:	4908      	ldr	r1, [pc, #32]	@ (8006584 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006564:	4313      	orrs	r3, r2
 8006566:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800656e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006572:	d109      	bne.n	8006588 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006574:	4b03      	ldr	r3, [pc, #12]	@ (8006584 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006576:	68db      	ldr	r3, [r3, #12]
 8006578:	4a02      	ldr	r2, [pc, #8]	@ (8006584 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800657a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800657e:	60d3      	str	r3, [r2, #12]
 8006580:	e002      	b.n	8006588 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8006582:	bf00      	nop
 8006584:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006590:	2b00      	cmp	r3, #0
 8006592:	d015      	beq.n	80065c0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8006594:	4b29      	ldr	r3, [pc, #164]	@ (800663c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006596:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800659a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80065a2:	4926      	ldr	r1, [pc, #152]	@ (800663c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80065a4:	4313      	orrs	r3, r2
 80065a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80065ae:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80065b2:	d105      	bne.n	80065c0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80065b4:	4b21      	ldr	r3, [pc, #132]	@ (800663c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80065b6:	68db      	ldr	r3, [r3, #12]
 80065b8:	4a20      	ldr	r2, [pc, #128]	@ (800663c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80065ba:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80065be:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d015      	beq.n	80065f8 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80065cc:	4b1b      	ldr	r3, [pc, #108]	@ (800663c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80065ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80065d2:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80065da:	4918      	ldr	r1, [pc, #96]	@ (800663c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80065dc:	4313      	orrs	r3, r2
 80065de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80065e6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80065ea:	d105      	bne.n	80065f8 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80065ec:	4b13      	ldr	r3, [pc, #76]	@ (800663c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80065ee:	68db      	ldr	r3, [r3, #12]
 80065f0:	4a12      	ldr	r2, [pc, #72]	@ (800663c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80065f2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80065f6:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006600:	2b00      	cmp	r3, #0
 8006602:	d015      	beq.n	8006630 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8006604:	4b0d      	ldr	r3, [pc, #52]	@ (800663c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006606:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800660a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006612:	490a      	ldr	r1, [pc, #40]	@ (800663c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006614:	4313      	orrs	r3, r2
 8006616:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800661e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006622:	d105      	bne.n	8006630 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006624:	4b05      	ldr	r3, [pc, #20]	@ (800663c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006626:	68db      	ldr	r3, [r3, #12]
 8006628:	4a04      	ldr	r2, [pc, #16]	@ (800663c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800662a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800662e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8006630:	7cbb      	ldrb	r3, [r7, #18]
}
 8006632:	4618      	mov	r0, r3
 8006634:	3718      	adds	r7, #24
 8006636:	46bd      	mov	sp, r7
 8006638:	bd80      	pop	{r7, pc}
 800663a:	bf00      	nop
 800663c:	40021000 	.word	0x40021000

08006640 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006640:	b580      	push	{r7, lr}
 8006642:	b084      	sub	sp, #16
 8006644:	af00      	add	r7, sp, #0
 8006646:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	2b00      	cmp	r3, #0
 800664c:	d101      	bne.n	8006652 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800664e:	2301      	movs	r3, #1
 8006650:	e09d      	b.n	800678e <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006656:	2b00      	cmp	r3, #0
 8006658:	d108      	bne.n	800666c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	685b      	ldr	r3, [r3, #4]
 800665e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006662:	d009      	beq.n	8006678 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	2200      	movs	r2, #0
 8006668:	61da      	str	r2, [r3, #28]
 800666a:	e005      	b.n	8006678 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	2200      	movs	r2, #0
 8006670:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	2200      	movs	r2, #0
 8006676:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	2200      	movs	r2, #0
 800667c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006684:	b2db      	uxtb	r3, r3
 8006686:	2b00      	cmp	r3, #0
 8006688:	d106      	bne.n	8006698 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	2200      	movs	r2, #0
 800668e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006692:	6878      	ldr	r0, [r7, #4]
 8006694:	f7fb ff46 	bl	8002524 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	2202      	movs	r2, #2
 800669c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	681a      	ldr	r2, [r3, #0]
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80066ae:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	68db      	ldr	r3, [r3, #12]
 80066b4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80066b8:	d902      	bls.n	80066c0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80066ba:	2300      	movs	r3, #0
 80066bc:	60fb      	str	r3, [r7, #12]
 80066be:	e002      	b.n	80066c6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80066c0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80066c4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	68db      	ldr	r3, [r3, #12]
 80066ca:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80066ce:	d007      	beq.n	80066e0 <HAL_SPI_Init+0xa0>
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	68db      	ldr	r3, [r3, #12]
 80066d4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80066d8:	d002      	beq.n	80066e0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	2200      	movs	r2, #0
 80066de:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	685b      	ldr	r3, [r3, #4]
 80066e4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	689b      	ldr	r3, [r3, #8]
 80066ec:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80066f0:	431a      	orrs	r2, r3
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	691b      	ldr	r3, [r3, #16]
 80066f6:	f003 0302 	and.w	r3, r3, #2
 80066fa:	431a      	orrs	r2, r3
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	695b      	ldr	r3, [r3, #20]
 8006700:	f003 0301 	and.w	r3, r3, #1
 8006704:	431a      	orrs	r2, r3
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	699b      	ldr	r3, [r3, #24]
 800670a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800670e:	431a      	orrs	r2, r3
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	69db      	ldr	r3, [r3, #28]
 8006714:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006718:	431a      	orrs	r2, r3
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	6a1b      	ldr	r3, [r3, #32]
 800671e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006722:	ea42 0103 	orr.w	r1, r2, r3
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800672a:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	430a      	orrs	r2, r1
 8006734:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	699b      	ldr	r3, [r3, #24]
 800673a:	0c1b      	lsrs	r3, r3, #16
 800673c:	f003 0204 	and.w	r2, r3, #4
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006744:	f003 0310 	and.w	r3, r3, #16
 8006748:	431a      	orrs	r2, r3
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800674e:	f003 0308 	and.w	r3, r3, #8
 8006752:	431a      	orrs	r2, r3
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	68db      	ldr	r3, [r3, #12]
 8006758:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800675c:	ea42 0103 	orr.w	r1, r2, r3
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	430a      	orrs	r2, r1
 800676c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	69da      	ldr	r2, [r3, #28]
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800677c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	2200      	movs	r2, #0
 8006782:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	2201      	movs	r2, #1
 8006788:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 800678c:	2300      	movs	r3, #0
}
 800678e:	4618      	mov	r0, r3
 8006790:	3710      	adds	r7, #16
 8006792:	46bd      	mov	sp, r7
 8006794:	bd80      	pop	{r7, pc}

08006796 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8006796:	b580      	push	{r7, lr}
 8006798:	b08a      	sub	sp, #40	@ 0x28
 800679a:	af00      	add	r7, sp, #0
 800679c:	60f8      	str	r0, [r7, #12]
 800679e:	60b9      	str	r1, [r7, #8]
 80067a0:	607a      	str	r2, [r7, #4]
 80067a2:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80067a4:	2301      	movs	r3, #1
 80067a6:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80067a8:	f7fc f9d0 	bl	8002b4c <HAL_GetTick>
 80067ac:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80067b4:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	685b      	ldr	r3, [r3, #4]
 80067ba:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80067bc:	887b      	ldrh	r3, [r7, #2]
 80067be:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 80067c0:	887b      	ldrh	r3, [r7, #2]
 80067c2:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80067c4:	7ffb      	ldrb	r3, [r7, #31]
 80067c6:	2b01      	cmp	r3, #1
 80067c8:	d00c      	beq.n	80067e4 <HAL_SPI_TransmitReceive+0x4e>
 80067ca:	69bb      	ldr	r3, [r7, #24]
 80067cc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80067d0:	d106      	bne.n	80067e0 <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	689b      	ldr	r3, [r3, #8]
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d102      	bne.n	80067e0 <HAL_SPI_TransmitReceive+0x4a>
 80067da:	7ffb      	ldrb	r3, [r7, #31]
 80067dc:	2b04      	cmp	r3, #4
 80067de:	d001      	beq.n	80067e4 <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 80067e0:	2302      	movs	r3, #2
 80067e2:	e1f3      	b.n	8006bcc <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80067e4:	68bb      	ldr	r3, [r7, #8]
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d005      	beq.n	80067f6 <HAL_SPI_TransmitReceive+0x60>
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d002      	beq.n	80067f6 <HAL_SPI_TransmitReceive+0x60>
 80067f0:	887b      	ldrh	r3, [r7, #2]
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d101      	bne.n	80067fa <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 80067f6:	2301      	movs	r3, #1
 80067f8:	e1e8      	b.n	8006bcc <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8006800:	2b01      	cmp	r3, #1
 8006802:	d101      	bne.n	8006808 <HAL_SPI_TransmitReceive+0x72>
 8006804:	2302      	movs	r3, #2
 8006806:	e1e1      	b.n	8006bcc <HAL_SPI_TransmitReceive+0x436>
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	2201      	movs	r2, #1
 800680c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006816:	b2db      	uxtb	r3, r3
 8006818:	2b04      	cmp	r3, #4
 800681a:	d003      	beq.n	8006824 <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	2205      	movs	r2, #5
 8006820:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	2200      	movs	r2, #0
 8006828:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	687a      	ldr	r2, [r7, #4]
 800682e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	887a      	ldrh	r2, [r7, #2]
 8006834:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	887a      	ldrh	r2, [r7, #2]
 800683c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	68ba      	ldr	r2, [r7, #8]
 8006844:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	887a      	ldrh	r2, [r7, #2]
 800684a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	887a      	ldrh	r2, [r7, #2]
 8006850:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	2200      	movs	r2, #0
 8006856:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	2200      	movs	r2, #0
 800685c:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	68db      	ldr	r3, [r3, #12]
 8006862:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006866:	d802      	bhi.n	800686e <HAL_SPI_TransmitReceive+0xd8>
 8006868:	8abb      	ldrh	r3, [r7, #20]
 800686a:	2b01      	cmp	r3, #1
 800686c:	d908      	bls.n	8006880 <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	685a      	ldr	r2, [r3, #4]
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800687c:	605a      	str	r2, [r3, #4]
 800687e:	e007      	b.n	8006890 <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	685a      	ldr	r2, [r3, #4]
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800688e:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800689a:	2b40      	cmp	r3, #64	@ 0x40
 800689c:	d007      	beq.n	80068ae <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	681a      	ldr	r2, [r3, #0]
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80068ac:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	68db      	ldr	r3, [r3, #12]
 80068b2:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80068b6:	f240 8083 	bls.w	80069c0 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	685b      	ldr	r3, [r3, #4]
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d002      	beq.n	80068c8 <HAL_SPI_TransmitReceive+0x132>
 80068c2:	8afb      	ldrh	r3, [r7, #22]
 80068c4:	2b01      	cmp	r3, #1
 80068c6:	d16f      	bne.n	80069a8 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80068cc:	881a      	ldrh	r2, [r3, #0]
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80068d8:	1c9a      	adds	r2, r3, #2
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80068e2:	b29b      	uxth	r3, r3
 80068e4:	3b01      	subs	r3, #1
 80068e6:	b29a      	uxth	r2, r3
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80068ec:	e05c      	b.n	80069a8 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	689b      	ldr	r3, [r3, #8]
 80068f4:	f003 0302 	and.w	r3, r3, #2
 80068f8:	2b02      	cmp	r3, #2
 80068fa:	d11b      	bne.n	8006934 <HAL_SPI_TransmitReceive+0x19e>
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006900:	b29b      	uxth	r3, r3
 8006902:	2b00      	cmp	r3, #0
 8006904:	d016      	beq.n	8006934 <HAL_SPI_TransmitReceive+0x19e>
 8006906:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006908:	2b01      	cmp	r3, #1
 800690a:	d113      	bne.n	8006934 <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006910:	881a      	ldrh	r2, [r3, #0]
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800691c:	1c9a      	adds	r2, r3, #2
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006926:	b29b      	uxth	r3, r3
 8006928:	3b01      	subs	r3, #1
 800692a:	b29a      	uxth	r2, r3
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006930:	2300      	movs	r3, #0
 8006932:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	689b      	ldr	r3, [r3, #8]
 800693a:	f003 0301 	and.w	r3, r3, #1
 800693e:	2b01      	cmp	r3, #1
 8006940:	d11c      	bne.n	800697c <HAL_SPI_TransmitReceive+0x1e6>
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006948:	b29b      	uxth	r3, r3
 800694a:	2b00      	cmp	r3, #0
 800694c:	d016      	beq.n	800697c <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	68da      	ldr	r2, [r3, #12]
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006958:	b292      	uxth	r2, r2
 800695a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006960:	1c9a      	adds	r2, r3, #2
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800696c:	b29b      	uxth	r3, r3
 800696e:	3b01      	subs	r3, #1
 8006970:	b29a      	uxth	r2, r3
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006978:	2301      	movs	r3, #1
 800697a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800697c:	f7fc f8e6 	bl	8002b4c <HAL_GetTick>
 8006980:	4602      	mov	r2, r0
 8006982:	6a3b      	ldr	r3, [r7, #32]
 8006984:	1ad3      	subs	r3, r2, r3
 8006986:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006988:	429a      	cmp	r2, r3
 800698a:	d80d      	bhi.n	80069a8 <HAL_SPI_TransmitReceive+0x212>
 800698c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800698e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006992:	d009      	beq.n	80069a8 <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	2201      	movs	r2, #1
 8006998:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	2200      	movs	r2, #0
 80069a0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 80069a4:	2303      	movs	r3, #3
 80069a6:	e111      	b.n	8006bcc <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80069ac:	b29b      	uxth	r3, r3
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d19d      	bne.n	80068ee <HAL_SPI_TransmitReceive+0x158>
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80069b8:	b29b      	uxth	r3, r3
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d197      	bne.n	80068ee <HAL_SPI_TransmitReceive+0x158>
 80069be:	e0e5      	b.n	8006b8c <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	685b      	ldr	r3, [r3, #4]
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d003      	beq.n	80069d0 <HAL_SPI_TransmitReceive+0x23a>
 80069c8:	8afb      	ldrh	r3, [r7, #22]
 80069ca:	2b01      	cmp	r3, #1
 80069cc:	f040 80d1 	bne.w	8006b72 <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80069d4:	b29b      	uxth	r3, r3
 80069d6:	2b01      	cmp	r3, #1
 80069d8:	d912      	bls.n	8006a00 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80069de:	881a      	ldrh	r2, [r3, #0]
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80069ea:	1c9a      	adds	r2, r3, #2
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80069f4:	b29b      	uxth	r3, r3
 80069f6:	3b02      	subs	r3, #2
 80069f8:	b29a      	uxth	r2, r3
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80069fe:	e0b8      	b.n	8006b72 <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	330c      	adds	r3, #12
 8006a0a:	7812      	ldrb	r2, [r2, #0]
 8006a0c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a12:	1c5a      	adds	r2, r3, #1
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006a1c:	b29b      	uxth	r3, r3
 8006a1e:	3b01      	subs	r3, #1
 8006a20:	b29a      	uxth	r2, r3
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006a26:	e0a4      	b.n	8006b72 <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	689b      	ldr	r3, [r3, #8]
 8006a2e:	f003 0302 	and.w	r3, r3, #2
 8006a32:	2b02      	cmp	r3, #2
 8006a34:	d134      	bne.n	8006aa0 <HAL_SPI_TransmitReceive+0x30a>
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006a3a:	b29b      	uxth	r3, r3
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d02f      	beq.n	8006aa0 <HAL_SPI_TransmitReceive+0x30a>
 8006a40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a42:	2b01      	cmp	r3, #1
 8006a44:	d12c      	bne.n	8006aa0 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006a4a:	b29b      	uxth	r3, r3
 8006a4c:	2b01      	cmp	r3, #1
 8006a4e:	d912      	bls.n	8006a76 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a54:	881a      	ldrh	r2, [r3, #0]
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a60:	1c9a      	adds	r2, r3, #2
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006a6a:	b29b      	uxth	r3, r3
 8006a6c:	3b02      	subs	r3, #2
 8006a6e:	b29a      	uxth	r2, r3
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006a74:	e012      	b.n	8006a9c <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	330c      	adds	r3, #12
 8006a80:	7812      	ldrb	r2, [r2, #0]
 8006a82:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a88:	1c5a      	adds	r2, r3, #1
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006a92:	b29b      	uxth	r3, r3
 8006a94:	3b01      	subs	r3, #1
 8006a96:	b29a      	uxth	r2, r3
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006a9c:	2300      	movs	r3, #0
 8006a9e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	689b      	ldr	r3, [r3, #8]
 8006aa6:	f003 0301 	and.w	r3, r3, #1
 8006aaa:	2b01      	cmp	r3, #1
 8006aac:	d148      	bne.n	8006b40 <HAL_SPI_TransmitReceive+0x3aa>
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006ab4:	b29b      	uxth	r3, r3
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d042      	beq.n	8006b40 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006ac0:	b29b      	uxth	r3, r3
 8006ac2:	2b01      	cmp	r3, #1
 8006ac4:	d923      	bls.n	8006b0e <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	68da      	ldr	r2, [r3, #12]
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ad0:	b292      	uxth	r2, r2
 8006ad2:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ad8:	1c9a      	adds	r2, r3, #2
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006ae4:	b29b      	uxth	r3, r3
 8006ae6:	3b02      	subs	r3, #2
 8006ae8:	b29a      	uxth	r2, r3
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006af6:	b29b      	uxth	r3, r3
 8006af8:	2b01      	cmp	r3, #1
 8006afa:	d81f      	bhi.n	8006b3c <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	685a      	ldr	r2, [r3, #4]
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006b0a:	605a      	str	r2, [r3, #4]
 8006b0c:	e016      	b.n	8006b3c <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	f103 020c 	add.w	r2, r3, #12
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b1a:	7812      	ldrb	r2, [r2, #0]
 8006b1c:	b2d2      	uxtb	r2, r2
 8006b1e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b24:	1c5a      	adds	r2, r3, #1
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006b30:	b29b      	uxth	r3, r3
 8006b32:	3b01      	subs	r3, #1
 8006b34:	b29a      	uxth	r2, r3
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006b3c:	2301      	movs	r3, #1
 8006b3e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006b40:	f7fc f804 	bl	8002b4c <HAL_GetTick>
 8006b44:	4602      	mov	r2, r0
 8006b46:	6a3b      	ldr	r3, [r7, #32]
 8006b48:	1ad3      	subs	r3, r2, r3
 8006b4a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006b4c:	429a      	cmp	r2, r3
 8006b4e:	d803      	bhi.n	8006b58 <HAL_SPI_TransmitReceive+0x3c2>
 8006b50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b56:	d102      	bne.n	8006b5e <HAL_SPI_TransmitReceive+0x3c8>
 8006b58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d109      	bne.n	8006b72 <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	2201      	movs	r2, #1
 8006b62:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	2200      	movs	r2, #0
 8006b6a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8006b6e:	2303      	movs	r3, #3
 8006b70:	e02c      	b.n	8006bcc <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006b76:	b29b      	uxth	r3, r3
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	f47f af55 	bne.w	8006a28 <HAL_SPI_TransmitReceive+0x292>
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006b84:	b29b      	uxth	r3, r3
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	f47f af4e 	bne.w	8006a28 <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006b8c:	6a3a      	ldr	r2, [r7, #32]
 8006b8e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006b90:	68f8      	ldr	r0, [r7, #12]
 8006b92:	f000 f93d 	bl	8006e10 <SPI_EndRxTxTransaction>
 8006b96:	4603      	mov	r3, r0
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d008      	beq.n	8006bae <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	2220      	movs	r2, #32
 8006ba0:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	2200      	movs	r2, #0
 8006ba6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8006baa:	2301      	movs	r3, #1
 8006bac:	e00e      	b.n	8006bcc <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	2201      	movs	r2, #1
 8006bb2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	2200      	movs	r2, #0
 8006bba:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d001      	beq.n	8006bca <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 8006bc6:	2301      	movs	r3, #1
 8006bc8:	e000      	b.n	8006bcc <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 8006bca:	2300      	movs	r3, #0
  }
}
 8006bcc:	4618      	mov	r0, r3
 8006bce:	3728      	adds	r7, #40	@ 0x28
 8006bd0:	46bd      	mov	sp, r7
 8006bd2:	bd80      	pop	{r7, pc}

08006bd4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006bd4:	b580      	push	{r7, lr}
 8006bd6:	b088      	sub	sp, #32
 8006bd8:	af00      	add	r7, sp, #0
 8006bda:	60f8      	str	r0, [r7, #12]
 8006bdc:	60b9      	str	r1, [r7, #8]
 8006bde:	603b      	str	r3, [r7, #0]
 8006be0:	4613      	mov	r3, r2
 8006be2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006be4:	f7fb ffb2 	bl	8002b4c <HAL_GetTick>
 8006be8:	4602      	mov	r2, r0
 8006bea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006bec:	1a9b      	subs	r3, r3, r2
 8006bee:	683a      	ldr	r2, [r7, #0]
 8006bf0:	4413      	add	r3, r2
 8006bf2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006bf4:	f7fb ffaa 	bl	8002b4c <HAL_GetTick>
 8006bf8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006bfa:	4b39      	ldr	r3, [pc, #228]	@ (8006ce0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	015b      	lsls	r3, r3, #5
 8006c00:	0d1b      	lsrs	r3, r3, #20
 8006c02:	69fa      	ldr	r2, [r7, #28]
 8006c04:	fb02 f303 	mul.w	r3, r2, r3
 8006c08:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006c0a:	e054      	b.n	8006cb6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006c0c:	683b      	ldr	r3, [r7, #0]
 8006c0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c12:	d050      	beq.n	8006cb6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006c14:	f7fb ff9a 	bl	8002b4c <HAL_GetTick>
 8006c18:	4602      	mov	r2, r0
 8006c1a:	69bb      	ldr	r3, [r7, #24]
 8006c1c:	1ad3      	subs	r3, r2, r3
 8006c1e:	69fa      	ldr	r2, [r7, #28]
 8006c20:	429a      	cmp	r2, r3
 8006c22:	d902      	bls.n	8006c2a <SPI_WaitFlagStateUntilTimeout+0x56>
 8006c24:	69fb      	ldr	r3, [r7, #28]
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d13d      	bne.n	8006ca6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	685a      	ldr	r2, [r3, #4]
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006c38:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	685b      	ldr	r3, [r3, #4]
 8006c3e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006c42:	d111      	bne.n	8006c68 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	689b      	ldr	r3, [r3, #8]
 8006c48:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006c4c:	d004      	beq.n	8006c58 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	689b      	ldr	r3, [r3, #8]
 8006c52:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006c56:	d107      	bne.n	8006c68 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	681a      	ldr	r2, [r3, #0]
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006c66:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c6c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006c70:	d10f      	bne.n	8006c92 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	681a      	ldr	r2, [r3, #0]
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006c80:	601a      	str	r2, [r3, #0]
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	681a      	ldr	r2, [r3, #0]
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006c90:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	2201      	movs	r2, #1
 8006c96:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	2200      	movs	r2, #0
 8006c9e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8006ca2:	2303      	movs	r3, #3
 8006ca4:	e017      	b.n	8006cd6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006ca6:	697b      	ldr	r3, [r7, #20]
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d101      	bne.n	8006cb0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006cac:	2300      	movs	r3, #0
 8006cae:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006cb0:	697b      	ldr	r3, [r7, #20]
 8006cb2:	3b01      	subs	r3, #1
 8006cb4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	689a      	ldr	r2, [r3, #8]
 8006cbc:	68bb      	ldr	r3, [r7, #8]
 8006cbe:	4013      	ands	r3, r2
 8006cc0:	68ba      	ldr	r2, [r7, #8]
 8006cc2:	429a      	cmp	r2, r3
 8006cc4:	bf0c      	ite	eq
 8006cc6:	2301      	moveq	r3, #1
 8006cc8:	2300      	movne	r3, #0
 8006cca:	b2db      	uxtb	r3, r3
 8006ccc:	461a      	mov	r2, r3
 8006cce:	79fb      	ldrb	r3, [r7, #7]
 8006cd0:	429a      	cmp	r2, r3
 8006cd2:	d19b      	bne.n	8006c0c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006cd4:	2300      	movs	r3, #0
}
 8006cd6:	4618      	mov	r0, r3
 8006cd8:	3720      	adds	r7, #32
 8006cda:	46bd      	mov	sp, r7
 8006cdc:	bd80      	pop	{r7, pc}
 8006cde:	bf00      	nop
 8006ce0:	20000000 	.word	0x20000000

08006ce4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006ce4:	b580      	push	{r7, lr}
 8006ce6:	b08a      	sub	sp, #40	@ 0x28
 8006ce8:	af00      	add	r7, sp, #0
 8006cea:	60f8      	str	r0, [r7, #12]
 8006cec:	60b9      	str	r1, [r7, #8]
 8006cee:	607a      	str	r2, [r7, #4]
 8006cf0:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8006cf2:	2300      	movs	r3, #0
 8006cf4:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8006cf6:	f7fb ff29 	bl	8002b4c <HAL_GetTick>
 8006cfa:	4602      	mov	r2, r0
 8006cfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cfe:	1a9b      	subs	r3, r3, r2
 8006d00:	683a      	ldr	r2, [r7, #0]
 8006d02:	4413      	add	r3, r2
 8006d04:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8006d06:	f7fb ff21 	bl	8002b4c <HAL_GetTick>
 8006d0a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	330c      	adds	r3, #12
 8006d12:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8006d14:	4b3d      	ldr	r3, [pc, #244]	@ (8006e0c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8006d16:	681a      	ldr	r2, [r3, #0]
 8006d18:	4613      	mov	r3, r2
 8006d1a:	009b      	lsls	r3, r3, #2
 8006d1c:	4413      	add	r3, r2
 8006d1e:	00da      	lsls	r2, r3, #3
 8006d20:	1ad3      	subs	r3, r2, r3
 8006d22:	0d1b      	lsrs	r3, r3, #20
 8006d24:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006d26:	fb02 f303 	mul.w	r3, r2, r3
 8006d2a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8006d2c:	e060      	b.n	8006df0 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8006d2e:	68bb      	ldr	r3, [r7, #8]
 8006d30:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8006d34:	d107      	bne.n	8006d46 <SPI_WaitFifoStateUntilTimeout+0x62>
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d104      	bne.n	8006d46 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8006d3c:	69fb      	ldr	r3, [r7, #28]
 8006d3e:	781b      	ldrb	r3, [r3, #0]
 8006d40:	b2db      	uxtb	r3, r3
 8006d42:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8006d44:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8006d46:	683b      	ldr	r3, [r7, #0]
 8006d48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d4c:	d050      	beq.n	8006df0 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006d4e:	f7fb fefd 	bl	8002b4c <HAL_GetTick>
 8006d52:	4602      	mov	r2, r0
 8006d54:	6a3b      	ldr	r3, [r7, #32]
 8006d56:	1ad3      	subs	r3, r2, r3
 8006d58:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006d5a:	429a      	cmp	r2, r3
 8006d5c:	d902      	bls.n	8006d64 <SPI_WaitFifoStateUntilTimeout+0x80>
 8006d5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d13d      	bne.n	8006de0 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	685a      	ldr	r2, [r3, #4]
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006d72:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	685b      	ldr	r3, [r3, #4]
 8006d78:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006d7c:	d111      	bne.n	8006da2 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	689b      	ldr	r3, [r3, #8]
 8006d82:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006d86:	d004      	beq.n	8006d92 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	689b      	ldr	r3, [r3, #8]
 8006d8c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006d90:	d107      	bne.n	8006da2 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	681a      	ldr	r2, [r3, #0]
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006da0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006da6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006daa:	d10f      	bne.n	8006dcc <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	681a      	ldr	r2, [r3, #0]
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006dba:	601a      	str	r2, [r3, #0]
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	681a      	ldr	r2, [r3, #0]
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006dca:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	2201      	movs	r2, #1
 8006dd0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	2200      	movs	r2, #0
 8006dd8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8006ddc:	2303      	movs	r3, #3
 8006dde:	e010      	b.n	8006e02 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006de0:	69bb      	ldr	r3, [r7, #24]
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d101      	bne.n	8006dea <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8006de6:	2300      	movs	r3, #0
 8006de8:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8006dea:	69bb      	ldr	r3, [r7, #24]
 8006dec:	3b01      	subs	r3, #1
 8006dee:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	689a      	ldr	r2, [r3, #8]
 8006df6:	68bb      	ldr	r3, [r7, #8]
 8006df8:	4013      	ands	r3, r2
 8006dfa:	687a      	ldr	r2, [r7, #4]
 8006dfc:	429a      	cmp	r2, r3
 8006dfe:	d196      	bne.n	8006d2e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8006e00:	2300      	movs	r3, #0
}
 8006e02:	4618      	mov	r0, r3
 8006e04:	3728      	adds	r7, #40	@ 0x28
 8006e06:	46bd      	mov	sp, r7
 8006e08:	bd80      	pop	{r7, pc}
 8006e0a:	bf00      	nop
 8006e0c:	20000000 	.word	0x20000000

08006e10 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006e10:	b580      	push	{r7, lr}
 8006e12:	b086      	sub	sp, #24
 8006e14:	af02      	add	r7, sp, #8
 8006e16:	60f8      	str	r0, [r7, #12]
 8006e18:	60b9      	str	r1, [r7, #8]
 8006e1a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	9300      	str	r3, [sp, #0]
 8006e20:	68bb      	ldr	r3, [r7, #8]
 8006e22:	2200      	movs	r2, #0
 8006e24:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8006e28:	68f8      	ldr	r0, [r7, #12]
 8006e2a:	f7ff ff5b 	bl	8006ce4 <SPI_WaitFifoStateUntilTimeout>
 8006e2e:	4603      	mov	r3, r0
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d007      	beq.n	8006e44 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006e38:	f043 0220 	orr.w	r2, r3, #32
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8006e40:	2303      	movs	r3, #3
 8006e42:	e027      	b.n	8006e94 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	9300      	str	r3, [sp, #0]
 8006e48:	68bb      	ldr	r3, [r7, #8]
 8006e4a:	2200      	movs	r2, #0
 8006e4c:	2180      	movs	r1, #128	@ 0x80
 8006e4e:	68f8      	ldr	r0, [r7, #12]
 8006e50:	f7ff fec0 	bl	8006bd4 <SPI_WaitFlagStateUntilTimeout>
 8006e54:	4603      	mov	r3, r0
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d007      	beq.n	8006e6a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006e5e:	f043 0220 	orr.w	r2, r3, #32
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8006e66:	2303      	movs	r3, #3
 8006e68:	e014      	b.n	8006e94 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	9300      	str	r3, [sp, #0]
 8006e6e:	68bb      	ldr	r3, [r7, #8]
 8006e70:	2200      	movs	r2, #0
 8006e72:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8006e76:	68f8      	ldr	r0, [r7, #12]
 8006e78:	f7ff ff34 	bl	8006ce4 <SPI_WaitFifoStateUntilTimeout>
 8006e7c:	4603      	mov	r3, r0
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d007      	beq.n	8006e92 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006e86:	f043 0220 	orr.w	r2, r3, #32
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8006e8e:	2303      	movs	r3, #3
 8006e90:	e000      	b.n	8006e94 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8006e92:	2300      	movs	r3, #0
}
 8006e94:	4618      	mov	r0, r3
 8006e96:	3710      	adds	r7, #16
 8006e98:	46bd      	mov	sp, r7
 8006e9a:	bd80      	pop	{r7, pc}

08006e9c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006e9c:	b580      	push	{r7, lr}
 8006e9e:	b082      	sub	sp, #8
 8006ea0:	af00      	add	r7, sp, #0
 8006ea2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d101      	bne.n	8006eae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006eaa:	2301      	movs	r3, #1
 8006eac:	e042      	b.n	8006f34 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d106      	bne.n	8006ec6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	2200      	movs	r2, #0
 8006ebc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006ec0:	6878      	ldr	r0, [r7, #4]
 8006ec2:	f7fb fb71 	bl	80025a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	2224      	movs	r2, #36	@ 0x24
 8006eca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	681a      	ldr	r2, [r3, #0]
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	f022 0201 	bic.w	r2, r2, #1
 8006edc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d002      	beq.n	8006eec <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8006ee6:	6878      	ldr	r0, [r7, #4]
 8006ee8:	f000 ffbc 	bl	8007e64 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006eec:	6878      	ldr	r0, [r7, #4]
 8006eee:	f000 fcbd 	bl	800786c <UART_SetConfig>
 8006ef2:	4603      	mov	r3, r0
 8006ef4:	2b01      	cmp	r3, #1
 8006ef6:	d101      	bne.n	8006efc <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8006ef8:	2301      	movs	r3, #1
 8006efa:	e01b      	b.n	8006f34 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	685a      	ldr	r2, [r3, #4]
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006f0a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	689a      	ldr	r2, [r3, #8]
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006f1a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	681a      	ldr	r2, [r3, #0]
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	f042 0201 	orr.w	r2, r2, #1
 8006f2a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006f2c:	6878      	ldr	r0, [r7, #4]
 8006f2e:	f001 f83b 	bl	8007fa8 <UART_CheckIdleState>
 8006f32:	4603      	mov	r3, r0
}
 8006f34:	4618      	mov	r0, r3
 8006f36:	3708      	adds	r7, #8
 8006f38:	46bd      	mov	sp, r7
 8006f3a:	bd80      	pop	{r7, pc}

08006f3c <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8006f3c:	b480      	push	{r7}
 8006f3e:	b091      	sub	sp, #68	@ 0x44
 8006f40:	af00      	add	r7, sp, #0
 8006f42:	60f8      	str	r0, [r7, #12]
 8006f44:	60b9      	str	r1, [r7, #8]
 8006f46:	4613      	mov	r3, r2
 8006f48:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006f50:	2b20      	cmp	r3, #32
 8006f52:	d178      	bne.n	8007046 <HAL_UART_Transmit_IT+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006f54:	68bb      	ldr	r3, [r7, #8]
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d002      	beq.n	8006f60 <HAL_UART_Transmit_IT+0x24>
 8006f5a:	88fb      	ldrh	r3, [r7, #6]
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d101      	bne.n	8006f64 <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 8006f60:	2301      	movs	r3, #1
 8006f62:	e071      	b.n	8007048 <HAL_UART_Transmit_IT+0x10c>
    }

    huart->pTxBuffPtr  = pData;
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	68ba      	ldr	r2, [r7, #8]
 8006f68:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	88fa      	ldrh	r2, [r7, #6]
 8006f6e:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	88fa      	ldrh	r2, [r7, #6]
 8006f76:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    huart->TxISR       = NULL;
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	2200      	movs	r2, #0
 8006f7e:	679a      	str	r2, [r3, #120]	@ 0x78

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	2200      	movs	r2, #0
 8006f84:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	2221      	movs	r2, #33	@ 0x21
 8006f8c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006f94:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006f98:	d12a      	bne.n	8006ff0 <HAL_UART_Transmit_IT+0xb4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	689b      	ldr	r3, [r3, #8]
 8006f9e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006fa2:	d107      	bne.n	8006fb4 <HAL_UART_Transmit_IT+0x78>
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	691b      	ldr	r3, [r3, #16]
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d103      	bne.n	8006fb4 <HAL_UART_Transmit_IT+0x78>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	4a29      	ldr	r2, [pc, #164]	@ (8007054 <HAL_UART_Transmit_IT+0x118>)
 8006fb0:	679a      	str	r2, [r3, #120]	@ 0x78
 8006fb2:	e002      	b.n	8006fba <HAL_UART_Transmit_IT+0x7e>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	4a28      	ldr	r2, [pc, #160]	@ (8007058 <HAL_UART_Transmit_IT+0x11c>)
 8006fb8:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	3308      	adds	r3, #8
 8006fc0:	62bb      	str	r3, [r7, #40]	@ 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006fc4:	e853 3f00 	ldrex	r3, [r3]
 8006fc8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006fca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fcc:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8006fd0:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	3308      	adds	r3, #8
 8006fd8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006fda:	637a      	str	r2, [r7, #52]	@ 0x34
 8006fdc:	633b      	str	r3, [r7, #48]	@ 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fde:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006fe0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006fe2:	e841 2300 	strex	r3, r2, [r1]
 8006fe6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8006fe8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d1e5      	bne.n	8006fba <HAL_UART_Transmit_IT+0x7e>
 8006fee:	e028      	b.n	8007042 <HAL_UART_Transmit_IT+0x106>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	689b      	ldr	r3, [r3, #8]
 8006ff4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006ff8:	d107      	bne.n	800700a <HAL_UART_Transmit_IT+0xce>
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	691b      	ldr	r3, [r3, #16]
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d103      	bne.n	800700a <HAL_UART_Transmit_IT+0xce>
      {
        huart->TxISR = UART_TxISR_16BIT;
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	4a15      	ldr	r2, [pc, #84]	@ (800705c <HAL_UART_Transmit_IT+0x120>)
 8007006:	679a      	str	r2, [r3, #120]	@ 0x78
 8007008:	e002      	b.n	8007010 <HAL_UART_Transmit_IT+0xd4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	4a14      	ldr	r2, [pc, #80]	@ (8007060 <HAL_UART_Transmit_IT+0x124>)
 800700e:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007016:	697b      	ldr	r3, [r7, #20]
 8007018:	e853 3f00 	ldrex	r3, [r3]
 800701c:	613b      	str	r3, [r7, #16]
   return(result);
 800701e:	693b      	ldr	r3, [r7, #16]
 8007020:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007024:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	461a      	mov	r2, r3
 800702c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800702e:	623b      	str	r3, [r7, #32]
 8007030:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007032:	69f9      	ldr	r1, [r7, #28]
 8007034:	6a3a      	ldr	r2, [r7, #32]
 8007036:	e841 2300 	strex	r3, r2, [r1]
 800703a:	61bb      	str	r3, [r7, #24]
   return(result);
 800703c:	69bb      	ldr	r3, [r7, #24]
 800703e:	2b00      	cmp	r3, #0
 8007040:	d1e6      	bne.n	8007010 <HAL_UART_Transmit_IT+0xd4>
    }

    return HAL_OK;
 8007042:	2300      	movs	r3, #0
 8007044:	e000      	b.n	8007048 <HAL_UART_Transmit_IT+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8007046:	2302      	movs	r3, #2
  }
}
 8007048:	4618      	mov	r0, r3
 800704a:	3744      	adds	r7, #68	@ 0x44
 800704c:	46bd      	mov	sp, r7
 800704e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007052:	4770      	bx	lr
 8007054:	08008b1f 	.word	0x08008b1f
 8007058:	08008a3f 	.word	0x08008a3f
 800705c:	0800897d 	.word	0x0800897d
 8007060:	080088c5 	.word	0x080088c5

08007064 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007064:	b580      	push	{r7, lr}
 8007066:	b08a      	sub	sp, #40	@ 0x28
 8007068:	af00      	add	r7, sp, #0
 800706a:	60f8      	str	r0, [r7, #12]
 800706c:	60b9      	str	r1, [r7, #8]
 800706e:	4613      	mov	r3, r2
 8007070:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007078:	2b20      	cmp	r3, #32
 800707a:	d137      	bne.n	80070ec <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800707c:	68bb      	ldr	r3, [r7, #8]
 800707e:	2b00      	cmp	r3, #0
 8007080:	d002      	beq.n	8007088 <HAL_UART_Receive_IT+0x24>
 8007082:	88fb      	ldrh	r3, [r7, #6]
 8007084:	2b00      	cmp	r3, #0
 8007086:	d101      	bne.n	800708c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8007088:	2301      	movs	r3, #1
 800708a:	e030      	b.n	80070ee <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	2200      	movs	r2, #0
 8007090:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	4a18      	ldr	r2, [pc, #96]	@ (80070f8 <HAL_UART_Receive_IT+0x94>)
 8007098:	4293      	cmp	r3, r2
 800709a:	d01f      	beq.n	80070dc <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	685b      	ldr	r3, [r3, #4]
 80070a2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d018      	beq.n	80070dc <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070b0:	697b      	ldr	r3, [r7, #20]
 80070b2:	e853 3f00 	ldrex	r3, [r3]
 80070b6:	613b      	str	r3, [r7, #16]
   return(result);
 80070b8:	693b      	ldr	r3, [r7, #16]
 80070ba:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80070be:	627b      	str	r3, [r7, #36]	@ 0x24
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	461a      	mov	r2, r3
 80070c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070c8:	623b      	str	r3, [r7, #32]
 80070ca:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070cc:	69f9      	ldr	r1, [r7, #28]
 80070ce:	6a3a      	ldr	r2, [r7, #32]
 80070d0:	e841 2300 	strex	r3, r2, [r1]
 80070d4:	61bb      	str	r3, [r7, #24]
   return(result);
 80070d6:	69bb      	ldr	r3, [r7, #24]
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d1e6      	bne.n	80070aa <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80070dc:	88fb      	ldrh	r3, [r7, #6]
 80070de:	461a      	mov	r2, r3
 80070e0:	68b9      	ldr	r1, [r7, #8]
 80070e2:	68f8      	ldr	r0, [r7, #12]
 80070e4:	f001 f878 	bl	80081d8 <UART_Start_Receive_IT>
 80070e8:	4603      	mov	r3, r0
 80070ea:	e000      	b.n	80070ee <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80070ec:	2302      	movs	r3, #2
  }
}
 80070ee:	4618      	mov	r0, r3
 80070f0:	3728      	adds	r7, #40	@ 0x28
 80070f2:	46bd      	mov	sp, r7
 80070f4:	bd80      	pop	{r7, pc}
 80070f6:	bf00      	nop
 80070f8:	40008000 	.word	0x40008000

080070fc <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80070fc:	b580      	push	{r7, lr}
 80070fe:	b08a      	sub	sp, #40	@ 0x28
 8007100:	af00      	add	r7, sp, #0
 8007102:	60f8      	str	r0, [r7, #12]
 8007104:	60b9      	str	r1, [r7, #8]
 8007106:	4613      	mov	r3, r2
 8007108:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007110:	2b20      	cmp	r3, #32
 8007112:	d137      	bne.n	8007184 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8007114:	68bb      	ldr	r3, [r7, #8]
 8007116:	2b00      	cmp	r3, #0
 8007118:	d002      	beq.n	8007120 <HAL_UART_Receive_DMA+0x24>
 800711a:	88fb      	ldrh	r3, [r7, #6]
 800711c:	2b00      	cmp	r3, #0
 800711e:	d101      	bne.n	8007124 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8007120:	2301      	movs	r3, #1
 8007122:	e030      	b.n	8007186 <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	2200      	movs	r2, #0
 8007128:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	4a18      	ldr	r2, [pc, #96]	@ (8007190 <HAL_UART_Receive_DMA+0x94>)
 8007130:	4293      	cmp	r3, r2
 8007132:	d01f      	beq.n	8007174 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	685b      	ldr	r3, [r3, #4]
 800713a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800713e:	2b00      	cmp	r3, #0
 8007140:	d018      	beq.n	8007174 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007148:	697b      	ldr	r3, [r7, #20]
 800714a:	e853 3f00 	ldrex	r3, [r3]
 800714e:	613b      	str	r3, [r7, #16]
   return(result);
 8007150:	693b      	ldr	r3, [r7, #16]
 8007152:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007156:	627b      	str	r3, [r7, #36]	@ 0x24
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	461a      	mov	r2, r3
 800715e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007160:	623b      	str	r3, [r7, #32]
 8007162:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007164:	69f9      	ldr	r1, [r7, #28]
 8007166:	6a3a      	ldr	r2, [r7, #32]
 8007168:	e841 2300 	strex	r3, r2, [r1]
 800716c:	61bb      	str	r3, [r7, #24]
   return(result);
 800716e:	69bb      	ldr	r3, [r7, #24]
 8007170:	2b00      	cmp	r3, #0
 8007172:	d1e6      	bne.n	8007142 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8007174:	88fb      	ldrh	r3, [r7, #6]
 8007176:	461a      	mov	r2, r3
 8007178:	68b9      	ldr	r1, [r7, #8]
 800717a:	68f8      	ldr	r0, [r7, #12]
 800717c:	f001 f94e 	bl	800841c <UART_Start_Receive_DMA>
 8007180:	4603      	mov	r3, r0
 8007182:	e000      	b.n	8007186 <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007184:	2302      	movs	r3, #2
  }
}
 8007186:	4618      	mov	r0, r3
 8007188:	3728      	adds	r7, #40	@ 0x28
 800718a:	46bd      	mov	sp, r7
 800718c:	bd80      	pop	{r7, pc}
 800718e:	bf00      	nop
 8007190:	40008000 	.word	0x40008000

08007194 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007194:	b580      	push	{r7, lr}
 8007196:	b0ba      	sub	sp, #232	@ 0xe8
 8007198:	af00      	add	r7, sp, #0
 800719a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	69db      	ldr	r3, [r3, #28]
 80071a2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	689b      	ldr	r3, [r3, #8]
 80071b6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80071ba:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80071be:	f640 030f 	movw	r3, #2063	@ 0x80f
 80071c2:	4013      	ands	r3, r2
 80071c4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80071c8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d11b      	bne.n	8007208 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80071d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80071d4:	f003 0320 	and.w	r3, r3, #32
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d015      	beq.n	8007208 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80071dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80071e0:	f003 0320 	and.w	r3, r3, #32
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d105      	bne.n	80071f4 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80071e8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80071ec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d009      	beq.n	8007208 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	f000 8300 	beq.w	80077fe <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007202:	6878      	ldr	r0, [r7, #4]
 8007204:	4798      	blx	r3
      }
      return;
 8007206:	e2fa      	b.n	80077fe <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007208:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800720c:	2b00      	cmp	r3, #0
 800720e:	f000 8123 	beq.w	8007458 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8007212:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8007216:	4b8d      	ldr	r3, [pc, #564]	@ (800744c <HAL_UART_IRQHandler+0x2b8>)
 8007218:	4013      	ands	r3, r2
 800721a:	2b00      	cmp	r3, #0
 800721c:	d106      	bne.n	800722c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800721e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8007222:	4b8b      	ldr	r3, [pc, #556]	@ (8007450 <HAL_UART_IRQHandler+0x2bc>)
 8007224:	4013      	ands	r3, r2
 8007226:	2b00      	cmp	r3, #0
 8007228:	f000 8116 	beq.w	8007458 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800722c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007230:	f003 0301 	and.w	r3, r3, #1
 8007234:	2b00      	cmp	r3, #0
 8007236:	d011      	beq.n	800725c <HAL_UART_IRQHandler+0xc8>
 8007238:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800723c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007240:	2b00      	cmp	r3, #0
 8007242:	d00b      	beq.n	800725c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	2201      	movs	r2, #1
 800724a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007252:	f043 0201 	orr.w	r2, r3, #1
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800725c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007260:	f003 0302 	and.w	r3, r3, #2
 8007264:	2b00      	cmp	r3, #0
 8007266:	d011      	beq.n	800728c <HAL_UART_IRQHandler+0xf8>
 8007268:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800726c:	f003 0301 	and.w	r3, r3, #1
 8007270:	2b00      	cmp	r3, #0
 8007272:	d00b      	beq.n	800728c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	2202      	movs	r2, #2
 800727a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007282:	f043 0204 	orr.w	r2, r3, #4
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800728c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007290:	f003 0304 	and.w	r3, r3, #4
 8007294:	2b00      	cmp	r3, #0
 8007296:	d011      	beq.n	80072bc <HAL_UART_IRQHandler+0x128>
 8007298:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800729c:	f003 0301 	and.w	r3, r3, #1
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d00b      	beq.n	80072bc <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	2204      	movs	r2, #4
 80072aa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80072b2:	f043 0202 	orr.w	r2, r3, #2
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80072bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80072c0:	f003 0308 	and.w	r3, r3, #8
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d017      	beq.n	80072f8 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80072c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80072cc:	f003 0320 	and.w	r3, r3, #32
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d105      	bne.n	80072e0 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80072d4:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80072d8:	4b5c      	ldr	r3, [pc, #368]	@ (800744c <HAL_UART_IRQHandler+0x2b8>)
 80072da:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d00b      	beq.n	80072f8 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	2208      	movs	r2, #8
 80072e6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80072ee:	f043 0208 	orr.w	r2, r3, #8
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80072f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80072fc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007300:	2b00      	cmp	r3, #0
 8007302:	d012      	beq.n	800732a <HAL_UART_IRQHandler+0x196>
 8007304:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007308:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800730c:	2b00      	cmp	r3, #0
 800730e:	d00c      	beq.n	800732a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007318:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007320:	f043 0220 	orr.w	r2, r3, #32
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007330:	2b00      	cmp	r3, #0
 8007332:	f000 8266 	beq.w	8007802 <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007336:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800733a:	f003 0320 	and.w	r3, r3, #32
 800733e:	2b00      	cmp	r3, #0
 8007340:	d013      	beq.n	800736a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007342:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007346:	f003 0320 	and.w	r3, r3, #32
 800734a:	2b00      	cmp	r3, #0
 800734c:	d105      	bne.n	800735a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800734e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007352:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007356:	2b00      	cmp	r3, #0
 8007358:	d007      	beq.n	800736a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800735e:	2b00      	cmp	r3, #0
 8007360:	d003      	beq.n	800736a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007366:	6878      	ldr	r0, [r7, #4]
 8007368:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007370:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	689b      	ldr	r3, [r3, #8]
 800737a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800737e:	2b40      	cmp	r3, #64	@ 0x40
 8007380:	d005      	beq.n	800738e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007382:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007386:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800738a:	2b00      	cmp	r3, #0
 800738c:	d054      	beq.n	8007438 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800738e:	6878      	ldr	r0, [r7, #4]
 8007390:	f001 f92b 	bl	80085ea <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	689b      	ldr	r3, [r3, #8]
 800739a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800739e:	2b40      	cmp	r3, #64	@ 0x40
 80073a0:	d146      	bne.n	8007430 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	3308      	adds	r3, #8
 80073a8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073ac:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80073b0:	e853 3f00 	ldrex	r3, [r3]
 80073b4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80073b8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80073bc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80073c0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	3308      	adds	r3, #8
 80073ca:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80073ce:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80073d2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073d6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80073da:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80073de:	e841 2300 	strex	r3, r2, [r1]
 80073e2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80073e6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d1d9      	bne.n	80073a2 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d017      	beq.n	8007428 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80073fe:	4a15      	ldr	r2, [pc, #84]	@ (8007454 <HAL_UART_IRQHandler+0x2c0>)
 8007400:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007408:	4618      	mov	r0, r3
 800740a:	f7fd fdb5 	bl	8004f78 <HAL_DMA_Abort_IT>
 800740e:	4603      	mov	r3, r0
 8007410:	2b00      	cmp	r3, #0
 8007412:	d019      	beq.n	8007448 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800741a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800741c:	687a      	ldr	r2, [r7, #4]
 800741e:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8007422:	4610      	mov	r0, r2
 8007424:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007426:	e00f      	b.n	8007448 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007428:	6878      	ldr	r0, [r7, #4]
 800742a:	f000 fa09 	bl	8007840 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800742e:	e00b      	b.n	8007448 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007430:	6878      	ldr	r0, [r7, #4]
 8007432:	f000 fa05 	bl	8007840 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007436:	e007      	b.n	8007448 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007438:	6878      	ldr	r0, [r7, #4]
 800743a:	f000 fa01 	bl	8007840 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	2200      	movs	r2, #0
 8007442:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8007446:	e1dc      	b.n	8007802 <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007448:	bf00      	nop
    return;
 800744a:	e1da      	b.n	8007802 <HAL_UART_IRQHandler+0x66e>
 800744c:	10000001 	.word	0x10000001
 8007450:	04000120 	.word	0x04000120
 8007454:	080088a1 	.word	0x080088a1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800745c:	2b01      	cmp	r3, #1
 800745e:	f040 8170 	bne.w	8007742 <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007462:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007466:	f003 0310 	and.w	r3, r3, #16
 800746a:	2b00      	cmp	r3, #0
 800746c:	f000 8169 	beq.w	8007742 <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007470:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007474:	f003 0310 	and.w	r3, r3, #16
 8007478:	2b00      	cmp	r3, #0
 800747a:	f000 8162 	beq.w	8007742 <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	2210      	movs	r2, #16
 8007484:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	689b      	ldr	r3, [r3, #8]
 800748c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007490:	2b40      	cmp	r3, #64	@ 0x40
 8007492:	f040 80d8 	bne.w	8007646 <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	685b      	ldr	r3, [r3, #4]
 80074a0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80074a4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	f000 80af 	beq.w	800760c <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80074b4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80074b8:	429a      	cmp	r2, r3
 80074ba:	f080 80a7 	bcs.w	800760c <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80074c4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	f003 0320 	and.w	r3, r3, #32
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	f040 8087 	bne.w	80075ea <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074e4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80074e8:	e853 3f00 	ldrex	r3, [r3]
 80074ec:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80074f0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80074f4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80074f8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	461a      	mov	r2, r3
 8007502:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007506:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800750a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800750e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8007512:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8007516:	e841 2300 	strex	r3, r2, [r1]
 800751a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800751e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007522:	2b00      	cmp	r3, #0
 8007524:	d1da      	bne.n	80074dc <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	3308      	adds	r3, #8
 800752c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800752e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007530:	e853 3f00 	ldrex	r3, [r3]
 8007534:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8007536:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007538:	f023 0301 	bic.w	r3, r3, #1
 800753c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	3308      	adds	r3, #8
 8007546:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800754a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800754e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007550:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8007552:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8007556:	e841 2300 	strex	r3, r2, [r1]
 800755a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800755c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800755e:	2b00      	cmp	r3, #0
 8007560:	d1e1      	bne.n	8007526 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	3308      	adds	r3, #8
 8007568:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800756a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800756c:	e853 3f00 	ldrex	r3, [r3]
 8007570:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8007572:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007574:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007578:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	3308      	adds	r3, #8
 8007582:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8007586:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007588:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800758a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800758c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800758e:	e841 2300 	strex	r3, r2, [r1]
 8007592:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007594:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007596:	2b00      	cmp	r3, #0
 8007598:	d1e3      	bne.n	8007562 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	2220      	movs	r2, #32
 800759e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	2200      	movs	r2, #0
 80075a6:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075ae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80075b0:	e853 3f00 	ldrex	r3, [r3]
 80075b4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80075b6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80075b8:	f023 0310 	bic.w	r3, r3, #16
 80075bc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	461a      	mov	r2, r3
 80075c6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80075ca:	65bb      	str	r3, [r7, #88]	@ 0x58
 80075cc:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075ce:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80075d0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80075d2:	e841 2300 	strex	r3, r2, [r1]
 80075d6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80075d8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d1e4      	bne.n	80075a8 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80075e4:	4618      	mov	r0, r3
 80075e6:	f7fd fc6e 	bl	8004ec6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	2202      	movs	r2, #2
 80075ee:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80075fc:	b29b      	uxth	r3, r3
 80075fe:	1ad3      	subs	r3, r2, r3
 8007600:	b29b      	uxth	r3, r3
 8007602:	4619      	mov	r1, r3
 8007604:	6878      	ldr	r0, [r7, #4]
 8007606:	f000 f925 	bl	8007854 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800760a:	e0fc      	b.n	8007806 <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007612:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007616:	429a      	cmp	r2, r3
 8007618:	f040 80f5 	bne.w	8007806 <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	f003 0320 	and.w	r3, r3, #32
 800762a:	2b20      	cmp	r3, #32
 800762c:	f040 80eb 	bne.w	8007806 <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	2202      	movs	r2, #2
 8007634:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800763c:	4619      	mov	r1, r3
 800763e:	6878      	ldr	r0, [r7, #4]
 8007640:	f000 f908 	bl	8007854 <HAL_UARTEx_RxEventCallback>
      return;
 8007644:	e0df      	b.n	8007806 <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007652:	b29b      	uxth	r3, r3
 8007654:	1ad3      	subs	r3, r2, r3
 8007656:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007660:	b29b      	uxth	r3, r3
 8007662:	2b00      	cmp	r3, #0
 8007664:	f000 80d1 	beq.w	800780a <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 8007668:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800766c:	2b00      	cmp	r3, #0
 800766e:	f000 80cc 	beq.w	800780a <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007678:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800767a:	e853 3f00 	ldrex	r3, [r3]
 800767e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007680:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007682:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007686:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	461a      	mov	r2, r3
 8007690:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007694:	647b      	str	r3, [r7, #68]	@ 0x44
 8007696:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007698:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800769a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800769c:	e841 2300 	strex	r3, r2, [r1]
 80076a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80076a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d1e4      	bne.n	8007672 <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	3308      	adds	r3, #8
 80076ae:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076b2:	e853 3f00 	ldrex	r3, [r3]
 80076b6:	623b      	str	r3, [r7, #32]
   return(result);
 80076b8:	6a3b      	ldr	r3, [r7, #32]
 80076ba:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80076be:	f023 0301 	bic.w	r3, r3, #1
 80076c2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	3308      	adds	r3, #8
 80076cc:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80076d0:	633a      	str	r2, [r7, #48]	@ 0x30
 80076d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076d4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80076d6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80076d8:	e841 2300 	strex	r3, r2, [r1]
 80076dc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80076de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d1e1      	bne.n	80076a8 <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	2220      	movs	r2, #32
 80076e8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	2200      	movs	r2, #0
 80076f0:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	2200      	movs	r2, #0
 80076f6:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076fe:	693b      	ldr	r3, [r7, #16]
 8007700:	e853 3f00 	ldrex	r3, [r3]
 8007704:	60fb      	str	r3, [r7, #12]
   return(result);
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	f023 0310 	bic.w	r3, r3, #16
 800770c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	461a      	mov	r2, r3
 8007716:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800771a:	61fb      	str	r3, [r7, #28]
 800771c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800771e:	69b9      	ldr	r1, [r7, #24]
 8007720:	69fa      	ldr	r2, [r7, #28]
 8007722:	e841 2300 	strex	r3, r2, [r1]
 8007726:	617b      	str	r3, [r7, #20]
   return(result);
 8007728:	697b      	ldr	r3, [r7, #20]
 800772a:	2b00      	cmp	r3, #0
 800772c:	d1e4      	bne.n	80076f8 <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	2202      	movs	r2, #2
 8007732:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007734:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007738:	4619      	mov	r1, r3
 800773a:	6878      	ldr	r0, [r7, #4]
 800773c:	f000 f88a 	bl	8007854 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007740:	e063      	b.n	800780a <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007742:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007746:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800774a:	2b00      	cmp	r3, #0
 800774c:	d00e      	beq.n	800776c <HAL_UART_IRQHandler+0x5d8>
 800774e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007752:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007756:	2b00      	cmp	r3, #0
 8007758:	d008      	beq.n	800776c <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8007762:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007764:	6878      	ldr	r0, [r7, #4]
 8007766:	f001 ff9b 	bl	80096a0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800776a:	e051      	b.n	8007810 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800776c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007770:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007774:	2b00      	cmp	r3, #0
 8007776:	d014      	beq.n	80077a2 <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8007778:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800777c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007780:	2b00      	cmp	r3, #0
 8007782:	d105      	bne.n	8007790 <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8007784:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007788:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800778c:	2b00      	cmp	r3, #0
 800778e:	d008      	beq.n	80077a2 <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007794:	2b00      	cmp	r3, #0
 8007796:	d03a      	beq.n	800780e <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800779c:	6878      	ldr	r0, [r7, #4]
 800779e:	4798      	blx	r3
    }
    return;
 80077a0:	e035      	b.n	800780e <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80077a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80077a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d009      	beq.n	80077c2 <HAL_UART_IRQHandler+0x62e>
 80077ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80077b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d003      	beq.n	80077c2 <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 80077ba:	6878      	ldr	r0, [r7, #4]
 80077bc:	f001 fa24 	bl	8008c08 <UART_EndTransmit_IT>
    return;
 80077c0:	e026      	b.n	8007810 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80077c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80077c6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d009      	beq.n	80077e2 <HAL_UART_IRQHandler+0x64e>
 80077ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80077d2:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d003      	beq.n	80077e2 <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80077da:	6878      	ldr	r0, [r7, #4]
 80077dc:	f001 ff74 	bl	80096c8 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80077e0:	e016      	b.n	8007810 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80077e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80077e6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d010      	beq.n	8007810 <HAL_UART_IRQHandler+0x67c>
 80077ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	da0c      	bge.n	8007810 <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80077f6:	6878      	ldr	r0, [r7, #4]
 80077f8:	f001 ff5c 	bl	80096b4 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80077fc:	e008      	b.n	8007810 <HAL_UART_IRQHandler+0x67c>
      return;
 80077fe:	bf00      	nop
 8007800:	e006      	b.n	8007810 <HAL_UART_IRQHandler+0x67c>
    return;
 8007802:	bf00      	nop
 8007804:	e004      	b.n	8007810 <HAL_UART_IRQHandler+0x67c>
      return;
 8007806:	bf00      	nop
 8007808:	e002      	b.n	8007810 <HAL_UART_IRQHandler+0x67c>
      return;
 800780a:	bf00      	nop
 800780c:	e000      	b.n	8007810 <HAL_UART_IRQHandler+0x67c>
    return;
 800780e:	bf00      	nop
  }
}
 8007810:	37e8      	adds	r7, #232	@ 0xe8
 8007812:	46bd      	mov	sp, r7
 8007814:	bd80      	pop	{r7, pc}
 8007816:	bf00      	nop

08007818 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007818:	b480      	push	{r7}
 800781a:	b083      	sub	sp, #12
 800781c:	af00      	add	r7, sp, #0
 800781e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007820:	bf00      	nop
 8007822:	370c      	adds	r7, #12
 8007824:	46bd      	mov	sp, r7
 8007826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800782a:	4770      	bx	lr

0800782c <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800782c:	b480      	push	{r7}
 800782e:	b083      	sub	sp, #12
 8007830:	af00      	add	r7, sp, #0
 8007832:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8007834:	bf00      	nop
 8007836:	370c      	adds	r7, #12
 8007838:	46bd      	mov	sp, r7
 800783a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800783e:	4770      	bx	lr

08007840 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007840:	b480      	push	{r7}
 8007842:	b083      	sub	sp, #12
 8007844:	af00      	add	r7, sp, #0
 8007846:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007848:	bf00      	nop
 800784a:	370c      	adds	r7, #12
 800784c:	46bd      	mov	sp, r7
 800784e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007852:	4770      	bx	lr

08007854 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007854:	b480      	push	{r7}
 8007856:	b083      	sub	sp, #12
 8007858:	af00      	add	r7, sp, #0
 800785a:	6078      	str	r0, [r7, #4]
 800785c:	460b      	mov	r3, r1
 800785e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007860:	bf00      	nop
 8007862:	370c      	adds	r7, #12
 8007864:	46bd      	mov	sp, r7
 8007866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800786a:	4770      	bx	lr

0800786c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800786c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007870:	b08c      	sub	sp, #48	@ 0x30
 8007872:	af00      	add	r7, sp, #0
 8007874:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007876:	2300      	movs	r3, #0
 8007878:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800787c:	697b      	ldr	r3, [r7, #20]
 800787e:	689a      	ldr	r2, [r3, #8]
 8007880:	697b      	ldr	r3, [r7, #20]
 8007882:	691b      	ldr	r3, [r3, #16]
 8007884:	431a      	orrs	r2, r3
 8007886:	697b      	ldr	r3, [r7, #20]
 8007888:	695b      	ldr	r3, [r3, #20]
 800788a:	431a      	orrs	r2, r3
 800788c:	697b      	ldr	r3, [r7, #20]
 800788e:	69db      	ldr	r3, [r3, #28]
 8007890:	4313      	orrs	r3, r2
 8007892:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007894:	697b      	ldr	r3, [r7, #20]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	681a      	ldr	r2, [r3, #0]
 800789a:	4baa      	ldr	r3, [pc, #680]	@ (8007b44 <UART_SetConfig+0x2d8>)
 800789c:	4013      	ands	r3, r2
 800789e:	697a      	ldr	r2, [r7, #20]
 80078a0:	6812      	ldr	r2, [r2, #0]
 80078a2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80078a4:	430b      	orrs	r3, r1
 80078a6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80078a8:	697b      	ldr	r3, [r7, #20]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	685b      	ldr	r3, [r3, #4]
 80078ae:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80078b2:	697b      	ldr	r3, [r7, #20]
 80078b4:	68da      	ldr	r2, [r3, #12]
 80078b6:	697b      	ldr	r3, [r7, #20]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	430a      	orrs	r2, r1
 80078bc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80078be:	697b      	ldr	r3, [r7, #20]
 80078c0:	699b      	ldr	r3, [r3, #24]
 80078c2:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80078c4:	697b      	ldr	r3, [r7, #20]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	4a9f      	ldr	r2, [pc, #636]	@ (8007b48 <UART_SetConfig+0x2dc>)
 80078ca:	4293      	cmp	r3, r2
 80078cc:	d004      	beq.n	80078d8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80078ce:	697b      	ldr	r3, [r7, #20]
 80078d0:	6a1b      	ldr	r3, [r3, #32]
 80078d2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80078d4:	4313      	orrs	r3, r2
 80078d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80078d8:	697b      	ldr	r3, [r7, #20]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	689b      	ldr	r3, [r3, #8]
 80078de:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80078e2:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80078e6:	697a      	ldr	r2, [r7, #20]
 80078e8:	6812      	ldr	r2, [r2, #0]
 80078ea:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80078ec:	430b      	orrs	r3, r1
 80078ee:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80078f0:	697b      	ldr	r3, [r7, #20]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078f6:	f023 010f 	bic.w	r1, r3, #15
 80078fa:	697b      	ldr	r3, [r7, #20]
 80078fc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80078fe:	697b      	ldr	r3, [r7, #20]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	430a      	orrs	r2, r1
 8007904:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007906:	697b      	ldr	r3, [r7, #20]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	4a90      	ldr	r2, [pc, #576]	@ (8007b4c <UART_SetConfig+0x2e0>)
 800790c:	4293      	cmp	r3, r2
 800790e:	d125      	bne.n	800795c <UART_SetConfig+0xf0>
 8007910:	4b8f      	ldr	r3, [pc, #572]	@ (8007b50 <UART_SetConfig+0x2e4>)
 8007912:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007916:	f003 0303 	and.w	r3, r3, #3
 800791a:	2b03      	cmp	r3, #3
 800791c:	d81a      	bhi.n	8007954 <UART_SetConfig+0xe8>
 800791e:	a201      	add	r2, pc, #4	@ (adr r2, 8007924 <UART_SetConfig+0xb8>)
 8007920:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007924:	08007935 	.word	0x08007935
 8007928:	08007945 	.word	0x08007945
 800792c:	0800793d 	.word	0x0800793d
 8007930:	0800794d 	.word	0x0800794d
 8007934:	2301      	movs	r3, #1
 8007936:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800793a:	e116      	b.n	8007b6a <UART_SetConfig+0x2fe>
 800793c:	2302      	movs	r3, #2
 800793e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007942:	e112      	b.n	8007b6a <UART_SetConfig+0x2fe>
 8007944:	2304      	movs	r3, #4
 8007946:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800794a:	e10e      	b.n	8007b6a <UART_SetConfig+0x2fe>
 800794c:	2308      	movs	r3, #8
 800794e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007952:	e10a      	b.n	8007b6a <UART_SetConfig+0x2fe>
 8007954:	2310      	movs	r3, #16
 8007956:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800795a:	e106      	b.n	8007b6a <UART_SetConfig+0x2fe>
 800795c:	697b      	ldr	r3, [r7, #20]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	4a7c      	ldr	r2, [pc, #496]	@ (8007b54 <UART_SetConfig+0x2e8>)
 8007962:	4293      	cmp	r3, r2
 8007964:	d138      	bne.n	80079d8 <UART_SetConfig+0x16c>
 8007966:	4b7a      	ldr	r3, [pc, #488]	@ (8007b50 <UART_SetConfig+0x2e4>)
 8007968:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800796c:	f003 030c 	and.w	r3, r3, #12
 8007970:	2b0c      	cmp	r3, #12
 8007972:	d82d      	bhi.n	80079d0 <UART_SetConfig+0x164>
 8007974:	a201      	add	r2, pc, #4	@ (adr r2, 800797c <UART_SetConfig+0x110>)
 8007976:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800797a:	bf00      	nop
 800797c:	080079b1 	.word	0x080079b1
 8007980:	080079d1 	.word	0x080079d1
 8007984:	080079d1 	.word	0x080079d1
 8007988:	080079d1 	.word	0x080079d1
 800798c:	080079c1 	.word	0x080079c1
 8007990:	080079d1 	.word	0x080079d1
 8007994:	080079d1 	.word	0x080079d1
 8007998:	080079d1 	.word	0x080079d1
 800799c:	080079b9 	.word	0x080079b9
 80079a0:	080079d1 	.word	0x080079d1
 80079a4:	080079d1 	.word	0x080079d1
 80079a8:	080079d1 	.word	0x080079d1
 80079ac:	080079c9 	.word	0x080079c9
 80079b0:	2300      	movs	r3, #0
 80079b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80079b6:	e0d8      	b.n	8007b6a <UART_SetConfig+0x2fe>
 80079b8:	2302      	movs	r3, #2
 80079ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80079be:	e0d4      	b.n	8007b6a <UART_SetConfig+0x2fe>
 80079c0:	2304      	movs	r3, #4
 80079c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80079c6:	e0d0      	b.n	8007b6a <UART_SetConfig+0x2fe>
 80079c8:	2308      	movs	r3, #8
 80079ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80079ce:	e0cc      	b.n	8007b6a <UART_SetConfig+0x2fe>
 80079d0:	2310      	movs	r3, #16
 80079d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80079d6:	e0c8      	b.n	8007b6a <UART_SetConfig+0x2fe>
 80079d8:	697b      	ldr	r3, [r7, #20]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	4a5e      	ldr	r2, [pc, #376]	@ (8007b58 <UART_SetConfig+0x2ec>)
 80079de:	4293      	cmp	r3, r2
 80079e0:	d125      	bne.n	8007a2e <UART_SetConfig+0x1c2>
 80079e2:	4b5b      	ldr	r3, [pc, #364]	@ (8007b50 <UART_SetConfig+0x2e4>)
 80079e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80079e8:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80079ec:	2b30      	cmp	r3, #48	@ 0x30
 80079ee:	d016      	beq.n	8007a1e <UART_SetConfig+0x1b2>
 80079f0:	2b30      	cmp	r3, #48	@ 0x30
 80079f2:	d818      	bhi.n	8007a26 <UART_SetConfig+0x1ba>
 80079f4:	2b20      	cmp	r3, #32
 80079f6:	d00a      	beq.n	8007a0e <UART_SetConfig+0x1a2>
 80079f8:	2b20      	cmp	r3, #32
 80079fa:	d814      	bhi.n	8007a26 <UART_SetConfig+0x1ba>
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d002      	beq.n	8007a06 <UART_SetConfig+0x19a>
 8007a00:	2b10      	cmp	r3, #16
 8007a02:	d008      	beq.n	8007a16 <UART_SetConfig+0x1aa>
 8007a04:	e00f      	b.n	8007a26 <UART_SetConfig+0x1ba>
 8007a06:	2300      	movs	r3, #0
 8007a08:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007a0c:	e0ad      	b.n	8007b6a <UART_SetConfig+0x2fe>
 8007a0e:	2302      	movs	r3, #2
 8007a10:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007a14:	e0a9      	b.n	8007b6a <UART_SetConfig+0x2fe>
 8007a16:	2304      	movs	r3, #4
 8007a18:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007a1c:	e0a5      	b.n	8007b6a <UART_SetConfig+0x2fe>
 8007a1e:	2308      	movs	r3, #8
 8007a20:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007a24:	e0a1      	b.n	8007b6a <UART_SetConfig+0x2fe>
 8007a26:	2310      	movs	r3, #16
 8007a28:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007a2c:	e09d      	b.n	8007b6a <UART_SetConfig+0x2fe>
 8007a2e:	697b      	ldr	r3, [r7, #20]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	4a4a      	ldr	r2, [pc, #296]	@ (8007b5c <UART_SetConfig+0x2f0>)
 8007a34:	4293      	cmp	r3, r2
 8007a36:	d125      	bne.n	8007a84 <UART_SetConfig+0x218>
 8007a38:	4b45      	ldr	r3, [pc, #276]	@ (8007b50 <UART_SetConfig+0x2e4>)
 8007a3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007a3e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8007a42:	2bc0      	cmp	r3, #192	@ 0xc0
 8007a44:	d016      	beq.n	8007a74 <UART_SetConfig+0x208>
 8007a46:	2bc0      	cmp	r3, #192	@ 0xc0
 8007a48:	d818      	bhi.n	8007a7c <UART_SetConfig+0x210>
 8007a4a:	2b80      	cmp	r3, #128	@ 0x80
 8007a4c:	d00a      	beq.n	8007a64 <UART_SetConfig+0x1f8>
 8007a4e:	2b80      	cmp	r3, #128	@ 0x80
 8007a50:	d814      	bhi.n	8007a7c <UART_SetConfig+0x210>
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d002      	beq.n	8007a5c <UART_SetConfig+0x1f0>
 8007a56:	2b40      	cmp	r3, #64	@ 0x40
 8007a58:	d008      	beq.n	8007a6c <UART_SetConfig+0x200>
 8007a5a:	e00f      	b.n	8007a7c <UART_SetConfig+0x210>
 8007a5c:	2300      	movs	r3, #0
 8007a5e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007a62:	e082      	b.n	8007b6a <UART_SetConfig+0x2fe>
 8007a64:	2302      	movs	r3, #2
 8007a66:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007a6a:	e07e      	b.n	8007b6a <UART_SetConfig+0x2fe>
 8007a6c:	2304      	movs	r3, #4
 8007a6e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007a72:	e07a      	b.n	8007b6a <UART_SetConfig+0x2fe>
 8007a74:	2308      	movs	r3, #8
 8007a76:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007a7a:	e076      	b.n	8007b6a <UART_SetConfig+0x2fe>
 8007a7c:	2310      	movs	r3, #16
 8007a7e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007a82:	e072      	b.n	8007b6a <UART_SetConfig+0x2fe>
 8007a84:	697b      	ldr	r3, [r7, #20]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	4a35      	ldr	r2, [pc, #212]	@ (8007b60 <UART_SetConfig+0x2f4>)
 8007a8a:	4293      	cmp	r3, r2
 8007a8c:	d12a      	bne.n	8007ae4 <UART_SetConfig+0x278>
 8007a8e:	4b30      	ldr	r3, [pc, #192]	@ (8007b50 <UART_SetConfig+0x2e4>)
 8007a90:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007a94:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007a98:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007a9c:	d01a      	beq.n	8007ad4 <UART_SetConfig+0x268>
 8007a9e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007aa2:	d81b      	bhi.n	8007adc <UART_SetConfig+0x270>
 8007aa4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007aa8:	d00c      	beq.n	8007ac4 <UART_SetConfig+0x258>
 8007aaa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007aae:	d815      	bhi.n	8007adc <UART_SetConfig+0x270>
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d003      	beq.n	8007abc <UART_SetConfig+0x250>
 8007ab4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007ab8:	d008      	beq.n	8007acc <UART_SetConfig+0x260>
 8007aba:	e00f      	b.n	8007adc <UART_SetConfig+0x270>
 8007abc:	2300      	movs	r3, #0
 8007abe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007ac2:	e052      	b.n	8007b6a <UART_SetConfig+0x2fe>
 8007ac4:	2302      	movs	r3, #2
 8007ac6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007aca:	e04e      	b.n	8007b6a <UART_SetConfig+0x2fe>
 8007acc:	2304      	movs	r3, #4
 8007ace:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007ad2:	e04a      	b.n	8007b6a <UART_SetConfig+0x2fe>
 8007ad4:	2308      	movs	r3, #8
 8007ad6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007ada:	e046      	b.n	8007b6a <UART_SetConfig+0x2fe>
 8007adc:	2310      	movs	r3, #16
 8007ade:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007ae2:	e042      	b.n	8007b6a <UART_SetConfig+0x2fe>
 8007ae4:	697b      	ldr	r3, [r7, #20]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	4a17      	ldr	r2, [pc, #92]	@ (8007b48 <UART_SetConfig+0x2dc>)
 8007aea:	4293      	cmp	r3, r2
 8007aec:	d13a      	bne.n	8007b64 <UART_SetConfig+0x2f8>
 8007aee:	4b18      	ldr	r3, [pc, #96]	@ (8007b50 <UART_SetConfig+0x2e4>)
 8007af0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007af4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8007af8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007afc:	d01a      	beq.n	8007b34 <UART_SetConfig+0x2c8>
 8007afe:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007b02:	d81b      	bhi.n	8007b3c <UART_SetConfig+0x2d0>
 8007b04:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007b08:	d00c      	beq.n	8007b24 <UART_SetConfig+0x2b8>
 8007b0a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007b0e:	d815      	bhi.n	8007b3c <UART_SetConfig+0x2d0>
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d003      	beq.n	8007b1c <UART_SetConfig+0x2b0>
 8007b14:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007b18:	d008      	beq.n	8007b2c <UART_SetConfig+0x2c0>
 8007b1a:	e00f      	b.n	8007b3c <UART_SetConfig+0x2d0>
 8007b1c:	2300      	movs	r3, #0
 8007b1e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007b22:	e022      	b.n	8007b6a <UART_SetConfig+0x2fe>
 8007b24:	2302      	movs	r3, #2
 8007b26:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007b2a:	e01e      	b.n	8007b6a <UART_SetConfig+0x2fe>
 8007b2c:	2304      	movs	r3, #4
 8007b2e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007b32:	e01a      	b.n	8007b6a <UART_SetConfig+0x2fe>
 8007b34:	2308      	movs	r3, #8
 8007b36:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007b3a:	e016      	b.n	8007b6a <UART_SetConfig+0x2fe>
 8007b3c:	2310      	movs	r3, #16
 8007b3e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007b42:	e012      	b.n	8007b6a <UART_SetConfig+0x2fe>
 8007b44:	cfff69f3 	.word	0xcfff69f3
 8007b48:	40008000 	.word	0x40008000
 8007b4c:	40013800 	.word	0x40013800
 8007b50:	40021000 	.word	0x40021000
 8007b54:	40004400 	.word	0x40004400
 8007b58:	40004800 	.word	0x40004800
 8007b5c:	40004c00 	.word	0x40004c00
 8007b60:	40005000 	.word	0x40005000
 8007b64:	2310      	movs	r3, #16
 8007b66:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007b6a:	697b      	ldr	r3, [r7, #20]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	4aae      	ldr	r2, [pc, #696]	@ (8007e28 <UART_SetConfig+0x5bc>)
 8007b70:	4293      	cmp	r3, r2
 8007b72:	f040 8097 	bne.w	8007ca4 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007b76:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007b7a:	2b08      	cmp	r3, #8
 8007b7c:	d823      	bhi.n	8007bc6 <UART_SetConfig+0x35a>
 8007b7e:	a201      	add	r2, pc, #4	@ (adr r2, 8007b84 <UART_SetConfig+0x318>)
 8007b80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b84:	08007ba9 	.word	0x08007ba9
 8007b88:	08007bc7 	.word	0x08007bc7
 8007b8c:	08007bb1 	.word	0x08007bb1
 8007b90:	08007bc7 	.word	0x08007bc7
 8007b94:	08007bb7 	.word	0x08007bb7
 8007b98:	08007bc7 	.word	0x08007bc7
 8007b9c:	08007bc7 	.word	0x08007bc7
 8007ba0:	08007bc7 	.word	0x08007bc7
 8007ba4:	08007bbf 	.word	0x08007bbf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007ba8:	f7fe fa8c 	bl	80060c4 <HAL_RCC_GetPCLK1Freq>
 8007bac:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007bae:	e010      	b.n	8007bd2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007bb0:	4b9e      	ldr	r3, [pc, #632]	@ (8007e2c <UART_SetConfig+0x5c0>)
 8007bb2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007bb4:	e00d      	b.n	8007bd2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007bb6:	f7fe fa19 	bl	8005fec <HAL_RCC_GetSysClockFreq>
 8007bba:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007bbc:	e009      	b.n	8007bd2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007bbe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007bc2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007bc4:	e005      	b.n	8007bd2 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8007bc6:	2300      	movs	r3, #0
 8007bc8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8007bca:	2301      	movs	r3, #1
 8007bcc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007bd0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007bd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	f000 8130 	beq.w	8007e3a <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007bda:	697b      	ldr	r3, [r7, #20]
 8007bdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007bde:	4a94      	ldr	r2, [pc, #592]	@ (8007e30 <UART_SetConfig+0x5c4>)
 8007be0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007be4:	461a      	mov	r2, r3
 8007be6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007be8:	fbb3 f3f2 	udiv	r3, r3, r2
 8007bec:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007bee:	697b      	ldr	r3, [r7, #20]
 8007bf0:	685a      	ldr	r2, [r3, #4]
 8007bf2:	4613      	mov	r3, r2
 8007bf4:	005b      	lsls	r3, r3, #1
 8007bf6:	4413      	add	r3, r2
 8007bf8:	69ba      	ldr	r2, [r7, #24]
 8007bfa:	429a      	cmp	r2, r3
 8007bfc:	d305      	bcc.n	8007c0a <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007bfe:	697b      	ldr	r3, [r7, #20]
 8007c00:	685b      	ldr	r3, [r3, #4]
 8007c02:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007c04:	69ba      	ldr	r2, [r7, #24]
 8007c06:	429a      	cmp	r2, r3
 8007c08:	d903      	bls.n	8007c12 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8007c0a:	2301      	movs	r3, #1
 8007c0c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007c10:	e113      	b.n	8007e3a <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007c12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c14:	2200      	movs	r2, #0
 8007c16:	60bb      	str	r3, [r7, #8]
 8007c18:	60fa      	str	r2, [r7, #12]
 8007c1a:	697b      	ldr	r3, [r7, #20]
 8007c1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c1e:	4a84      	ldr	r2, [pc, #528]	@ (8007e30 <UART_SetConfig+0x5c4>)
 8007c20:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007c24:	b29b      	uxth	r3, r3
 8007c26:	2200      	movs	r2, #0
 8007c28:	603b      	str	r3, [r7, #0]
 8007c2a:	607a      	str	r2, [r7, #4]
 8007c2c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007c30:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007c34:	f7f9 f850 	bl	8000cd8 <__aeabi_uldivmod>
 8007c38:	4602      	mov	r2, r0
 8007c3a:	460b      	mov	r3, r1
 8007c3c:	4610      	mov	r0, r2
 8007c3e:	4619      	mov	r1, r3
 8007c40:	f04f 0200 	mov.w	r2, #0
 8007c44:	f04f 0300 	mov.w	r3, #0
 8007c48:	020b      	lsls	r3, r1, #8
 8007c4a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007c4e:	0202      	lsls	r2, r0, #8
 8007c50:	6979      	ldr	r1, [r7, #20]
 8007c52:	6849      	ldr	r1, [r1, #4]
 8007c54:	0849      	lsrs	r1, r1, #1
 8007c56:	2000      	movs	r0, #0
 8007c58:	460c      	mov	r4, r1
 8007c5a:	4605      	mov	r5, r0
 8007c5c:	eb12 0804 	adds.w	r8, r2, r4
 8007c60:	eb43 0905 	adc.w	r9, r3, r5
 8007c64:	697b      	ldr	r3, [r7, #20]
 8007c66:	685b      	ldr	r3, [r3, #4]
 8007c68:	2200      	movs	r2, #0
 8007c6a:	469a      	mov	sl, r3
 8007c6c:	4693      	mov	fp, r2
 8007c6e:	4652      	mov	r2, sl
 8007c70:	465b      	mov	r3, fp
 8007c72:	4640      	mov	r0, r8
 8007c74:	4649      	mov	r1, r9
 8007c76:	f7f9 f82f 	bl	8000cd8 <__aeabi_uldivmod>
 8007c7a:	4602      	mov	r2, r0
 8007c7c:	460b      	mov	r3, r1
 8007c7e:	4613      	mov	r3, r2
 8007c80:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007c82:	6a3b      	ldr	r3, [r7, #32]
 8007c84:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007c88:	d308      	bcc.n	8007c9c <UART_SetConfig+0x430>
 8007c8a:	6a3b      	ldr	r3, [r7, #32]
 8007c8c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007c90:	d204      	bcs.n	8007c9c <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8007c92:	697b      	ldr	r3, [r7, #20]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	6a3a      	ldr	r2, [r7, #32]
 8007c98:	60da      	str	r2, [r3, #12]
 8007c9a:	e0ce      	b.n	8007e3a <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8007c9c:	2301      	movs	r3, #1
 8007c9e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007ca2:	e0ca      	b.n	8007e3a <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007ca4:	697b      	ldr	r3, [r7, #20]
 8007ca6:	69db      	ldr	r3, [r3, #28]
 8007ca8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007cac:	d166      	bne.n	8007d7c <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8007cae:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007cb2:	2b08      	cmp	r3, #8
 8007cb4:	d827      	bhi.n	8007d06 <UART_SetConfig+0x49a>
 8007cb6:	a201      	add	r2, pc, #4	@ (adr r2, 8007cbc <UART_SetConfig+0x450>)
 8007cb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cbc:	08007ce1 	.word	0x08007ce1
 8007cc0:	08007ce9 	.word	0x08007ce9
 8007cc4:	08007cf1 	.word	0x08007cf1
 8007cc8:	08007d07 	.word	0x08007d07
 8007ccc:	08007cf7 	.word	0x08007cf7
 8007cd0:	08007d07 	.word	0x08007d07
 8007cd4:	08007d07 	.word	0x08007d07
 8007cd8:	08007d07 	.word	0x08007d07
 8007cdc:	08007cff 	.word	0x08007cff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007ce0:	f7fe f9f0 	bl	80060c4 <HAL_RCC_GetPCLK1Freq>
 8007ce4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007ce6:	e014      	b.n	8007d12 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007ce8:	f7fe fa02 	bl	80060f0 <HAL_RCC_GetPCLK2Freq>
 8007cec:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007cee:	e010      	b.n	8007d12 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007cf0:	4b4e      	ldr	r3, [pc, #312]	@ (8007e2c <UART_SetConfig+0x5c0>)
 8007cf2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007cf4:	e00d      	b.n	8007d12 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007cf6:	f7fe f979 	bl	8005fec <HAL_RCC_GetSysClockFreq>
 8007cfa:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007cfc:	e009      	b.n	8007d12 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007cfe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007d02:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007d04:	e005      	b.n	8007d12 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8007d06:	2300      	movs	r3, #0
 8007d08:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8007d0a:	2301      	movs	r3, #1
 8007d0c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007d10:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007d12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	f000 8090 	beq.w	8007e3a <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007d1a:	697b      	ldr	r3, [r7, #20]
 8007d1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d1e:	4a44      	ldr	r2, [pc, #272]	@ (8007e30 <UART_SetConfig+0x5c4>)
 8007d20:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007d24:	461a      	mov	r2, r3
 8007d26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d28:	fbb3 f3f2 	udiv	r3, r3, r2
 8007d2c:	005a      	lsls	r2, r3, #1
 8007d2e:	697b      	ldr	r3, [r7, #20]
 8007d30:	685b      	ldr	r3, [r3, #4]
 8007d32:	085b      	lsrs	r3, r3, #1
 8007d34:	441a      	add	r2, r3
 8007d36:	697b      	ldr	r3, [r7, #20]
 8007d38:	685b      	ldr	r3, [r3, #4]
 8007d3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d3e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007d40:	6a3b      	ldr	r3, [r7, #32]
 8007d42:	2b0f      	cmp	r3, #15
 8007d44:	d916      	bls.n	8007d74 <UART_SetConfig+0x508>
 8007d46:	6a3b      	ldr	r3, [r7, #32]
 8007d48:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007d4c:	d212      	bcs.n	8007d74 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007d4e:	6a3b      	ldr	r3, [r7, #32]
 8007d50:	b29b      	uxth	r3, r3
 8007d52:	f023 030f 	bic.w	r3, r3, #15
 8007d56:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007d58:	6a3b      	ldr	r3, [r7, #32]
 8007d5a:	085b      	lsrs	r3, r3, #1
 8007d5c:	b29b      	uxth	r3, r3
 8007d5e:	f003 0307 	and.w	r3, r3, #7
 8007d62:	b29a      	uxth	r2, r3
 8007d64:	8bfb      	ldrh	r3, [r7, #30]
 8007d66:	4313      	orrs	r3, r2
 8007d68:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8007d6a:	697b      	ldr	r3, [r7, #20]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	8bfa      	ldrh	r2, [r7, #30]
 8007d70:	60da      	str	r2, [r3, #12]
 8007d72:	e062      	b.n	8007e3a <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8007d74:	2301      	movs	r3, #1
 8007d76:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007d7a:	e05e      	b.n	8007e3a <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007d7c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007d80:	2b08      	cmp	r3, #8
 8007d82:	d828      	bhi.n	8007dd6 <UART_SetConfig+0x56a>
 8007d84:	a201      	add	r2, pc, #4	@ (adr r2, 8007d8c <UART_SetConfig+0x520>)
 8007d86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d8a:	bf00      	nop
 8007d8c:	08007db1 	.word	0x08007db1
 8007d90:	08007db9 	.word	0x08007db9
 8007d94:	08007dc1 	.word	0x08007dc1
 8007d98:	08007dd7 	.word	0x08007dd7
 8007d9c:	08007dc7 	.word	0x08007dc7
 8007da0:	08007dd7 	.word	0x08007dd7
 8007da4:	08007dd7 	.word	0x08007dd7
 8007da8:	08007dd7 	.word	0x08007dd7
 8007dac:	08007dcf 	.word	0x08007dcf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007db0:	f7fe f988 	bl	80060c4 <HAL_RCC_GetPCLK1Freq>
 8007db4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007db6:	e014      	b.n	8007de2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007db8:	f7fe f99a 	bl	80060f0 <HAL_RCC_GetPCLK2Freq>
 8007dbc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007dbe:	e010      	b.n	8007de2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007dc0:	4b1a      	ldr	r3, [pc, #104]	@ (8007e2c <UART_SetConfig+0x5c0>)
 8007dc2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007dc4:	e00d      	b.n	8007de2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007dc6:	f7fe f911 	bl	8005fec <HAL_RCC_GetSysClockFreq>
 8007dca:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007dcc:	e009      	b.n	8007de2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007dce:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007dd2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007dd4:	e005      	b.n	8007de2 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8007dd6:	2300      	movs	r3, #0
 8007dd8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8007dda:	2301      	movs	r3, #1
 8007ddc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007de0:	bf00      	nop
    }

    if (pclk != 0U)
 8007de2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d028      	beq.n	8007e3a <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007de8:	697b      	ldr	r3, [r7, #20]
 8007dea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007dec:	4a10      	ldr	r2, [pc, #64]	@ (8007e30 <UART_SetConfig+0x5c4>)
 8007dee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007df2:	461a      	mov	r2, r3
 8007df4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007df6:	fbb3 f2f2 	udiv	r2, r3, r2
 8007dfa:	697b      	ldr	r3, [r7, #20]
 8007dfc:	685b      	ldr	r3, [r3, #4]
 8007dfe:	085b      	lsrs	r3, r3, #1
 8007e00:	441a      	add	r2, r3
 8007e02:	697b      	ldr	r3, [r7, #20]
 8007e04:	685b      	ldr	r3, [r3, #4]
 8007e06:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e0a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007e0c:	6a3b      	ldr	r3, [r7, #32]
 8007e0e:	2b0f      	cmp	r3, #15
 8007e10:	d910      	bls.n	8007e34 <UART_SetConfig+0x5c8>
 8007e12:	6a3b      	ldr	r3, [r7, #32]
 8007e14:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007e18:	d20c      	bcs.n	8007e34 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007e1a:	6a3b      	ldr	r3, [r7, #32]
 8007e1c:	b29a      	uxth	r2, r3
 8007e1e:	697b      	ldr	r3, [r7, #20]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	60da      	str	r2, [r3, #12]
 8007e24:	e009      	b.n	8007e3a <UART_SetConfig+0x5ce>
 8007e26:	bf00      	nop
 8007e28:	40008000 	.word	0x40008000
 8007e2c:	00f42400 	.word	0x00f42400
 8007e30:	08010590 	.word	0x08010590
      }
      else
      {
        ret = HAL_ERROR;
 8007e34:	2301      	movs	r3, #1
 8007e36:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007e3a:	697b      	ldr	r3, [r7, #20]
 8007e3c:	2201      	movs	r2, #1
 8007e3e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8007e42:	697b      	ldr	r3, [r7, #20]
 8007e44:	2201      	movs	r2, #1
 8007e46:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007e4a:	697b      	ldr	r3, [r7, #20]
 8007e4c:	2200      	movs	r2, #0
 8007e4e:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8007e50:	697b      	ldr	r3, [r7, #20]
 8007e52:	2200      	movs	r2, #0
 8007e54:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8007e56:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8007e5a:	4618      	mov	r0, r3
 8007e5c:	3730      	adds	r7, #48	@ 0x30
 8007e5e:	46bd      	mov	sp, r7
 8007e60:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08007e64 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007e64:	b480      	push	{r7}
 8007e66:	b083      	sub	sp, #12
 8007e68:	af00      	add	r7, sp, #0
 8007e6a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e70:	f003 0308 	and.w	r3, r3, #8
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d00a      	beq.n	8007e8e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	685b      	ldr	r3, [r3, #4]
 8007e7e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	430a      	orrs	r2, r1
 8007e8c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e92:	f003 0301 	and.w	r3, r3, #1
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d00a      	beq.n	8007eb0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	685b      	ldr	r3, [r3, #4]
 8007ea0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	430a      	orrs	r2, r1
 8007eae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007eb4:	f003 0302 	and.w	r3, r3, #2
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d00a      	beq.n	8007ed2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	685b      	ldr	r3, [r3, #4]
 8007ec2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	430a      	orrs	r2, r1
 8007ed0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ed6:	f003 0304 	and.w	r3, r3, #4
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d00a      	beq.n	8007ef4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	685b      	ldr	r3, [r3, #4]
 8007ee4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	430a      	orrs	r2, r1
 8007ef2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ef8:	f003 0310 	and.w	r3, r3, #16
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d00a      	beq.n	8007f16 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	689b      	ldr	r3, [r3, #8]
 8007f06:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	430a      	orrs	r2, r1
 8007f14:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f1a:	f003 0320 	and.w	r3, r3, #32
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d00a      	beq.n	8007f38 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	689b      	ldr	r3, [r3, #8]
 8007f28:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	430a      	orrs	r2, r1
 8007f36:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d01a      	beq.n	8007f7a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	685b      	ldr	r3, [r3, #4]
 8007f4a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	430a      	orrs	r2, r1
 8007f58:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007f5e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007f62:	d10a      	bne.n	8007f7a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	685b      	ldr	r3, [r3, #4]
 8007f6a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	430a      	orrs	r2, r1
 8007f78:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f7e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d00a      	beq.n	8007f9c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	685b      	ldr	r3, [r3, #4]
 8007f8c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	430a      	orrs	r2, r1
 8007f9a:	605a      	str	r2, [r3, #4]
  }
}
 8007f9c:	bf00      	nop
 8007f9e:	370c      	adds	r7, #12
 8007fa0:	46bd      	mov	sp, r7
 8007fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fa6:	4770      	bx	lr

08007fa8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007fa8:	b580      	push	{r7, lr}
 8007faa:	b098      	sub	sp, #96	@ 0x60
 8007fac:	af02      	add	r7, sp, #8
 8007fae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	2200      	movs	r2, #0
 8007fb4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007fb8:	f7fa fdc8 	bl	8002b4c <HAL_GetTick>
 8007fbc:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	f003 0308 	and.w	r3, r3, #8
 8007fc8:	2b08      	cmp	r3, #8
 8007fca:	d12f      	bne.n	800802c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007fcc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007fd0:	9300      	str	r3, [sp, #0]
 8007fd2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007fd4:	2200      	movs	r2, #0
 8007fd6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8007fda:	6878      	ldr	r0, [r7, #4]
 8007fdc:	f000 f88e 	bl	80080fc <UART_WaitOnFlagUntilTimeout>
 8007fe0:	4603      	mov	r3, r0
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d022      	beq.n	800802c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007fee:	e853 3f00 	ldrex	r3, [r3]
 8007ff2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007ff4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007ff6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007ffa:	653b      	str	r3, [r7, #80]	@ 0x50
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	461a      	mov	r2, r3
 8008002:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008004:	647b      	str	r3, [r7, #68]	@ 0x44
 8008006:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008008:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800800a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800800c:	e841 2300 	strex	r3, r2, [r1]
 8008010:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008012:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008014:	2b00      	cmp	r3, #0
 8008016:	d1e6      	bne.n	8007fe6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	2220      	movs	r2, #32
 800801c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	2200      	movs	r2, #0
 8008024:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008028:	2303      	movs	r3, #3
 800802a:	e063      	b.n	80080f4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	f003 0304 	and.w	r3, r3, #4
 8008036:	2b04      	cmp	r3, #4
 8008038:	d149      	bne.n	80080ce <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800803a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800803e:	9300      	str	r3, [sp, #0]
 8008040:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008042:	2200      	movs	r2, #0
 8008044:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8008048:	6878      	ldr	r0, [r7, #4]
 800804a:	f000 f857 	bl	80080fc <UART_WaitOnFlagUntilTimeout>
 800804e:	4603      	mov	r3, r0
 8008050:	2b00      	cmp	r3, #0
 8008052:	d03c      	beq.n	80080ce <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800805a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800805c:	e853 3f00 	ldrex	r3, [r3]
 8008060:	623b      	str	r3, [r7, #32]
   return(result);
 8008062:	6a3b      	ldr	r3, [r7, #32]
 8008064:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008068:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	461a      	mov	r2, r3
 8008070:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008072:	633b      	str	r3, [r7, #48]	@ 0x30
 8008074:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008076:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008078:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800807a:	e841 2300 	strex	r3, r2, [r1]
 800807e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008080:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008082:	2b00      	cmp	r3, #0
 8008084:	d1e6      	bne.n	8008054 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	3308      	adds	r3, #8
 800808c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800808e:	693b      	ldr	r3, [r7, #16]
 8008090:	e853 3f00 	ldrex	r3, [r3]
 8008094:	60fb      	str	r3, [r7, #12]
   return(result);
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	f023 0301 	bic.w	r3, r3, #1
 800809c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	3308      	adds	r3, #8
 80080a4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80080a6:	61fa      	str	r2, [r7, #28]
 80080a8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080aa:	69b9      	ldr	r1, [r7, #24]
 80080ac:	69fa      	ldr	r2, [r7, #28]
 80080ae:	e841 2300 	strex	r3, r2, [r1]
 80080b2:	617b      	str	r3, [r7, #20]
   return(result);
 80080b4:	697b      	ldr	r3, [r7, #20]
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d1e5      	bne.n	8008086 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	2220      	movs	r2, #32
 80080be:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	2200      	movs	r2, #0
 80080c6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80080ca:	2303      	movs	r3, #3
 80080cc:	e012      	b.n	80080f4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	2220      	movs	r2, #32
 80080d2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	2220      	movs	r2, #32
 80080da:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	2200      	movs	r2, #0
 80080e2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	2200      	movs	r2, #0
 80080e8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	2200      	movs	r2, #0
 80080ee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80080f2:	2300      	movs	r3, #0
}
 80080f4:	4618      	mov	r0, r3
 80080f6:	3758      	adds	r7, #88	@ 0x58
 80080f8:	46bd      	mov	sp, r7
 80080fa:	bd80      	pop	{r7, pc}

080080fc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80080fc:	b580      	push	{r7, lr}
 80080fe:	b084      	sub	sp, #16
 8008100:	af00      	add	r7, sp, #0
 8008102:	60f8      	str	r0, [r7, #12]
 8008104:	60b9      	str	r1, [r7, #8]
 8008106:	603b      	str	r3, [r7, #0]
 8008108:	4613      	mov	r3, r2
 800810a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800810c:	e04f      	b.n	80081ae <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800810e:	69bb      	ldr	r3, [r7, #24]
 8008110:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008114:	d04b      	beq.n	80081ae <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008116:	f7fa fd19 	bl	8002b4c <HAL_GetTick>
 800811a:	4602      	mov	r2, r0
 800811c:	683b      	ldr	r3, [r7, #0]
 800811e:	1ad3      	subs	r3, r2, r3
 8008120:	69ba      	ldr	r2, [r7, #24]
 8008122:	429a      	cmp	r2, r3
 8008124:	d302      	bcc.n	800812c <UART_WaitOnFlagUntilTimeout+0x30>
 8008126:	69bb      	ldr	r3, [r7, #24]
 8008128:	2b00      	cmp	r3, #0
 800812a:	d101      	bne.n	8008130 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800812c:	2303      	movs	r3, #3
 800812e:	e04e      	b.n	80081ce <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	f003 0304 	and.w	r3, r3, #4
 800813a:	2b00      	cmp	r3, #0
 800813c:	d037      	beq.n	80081ae <UART_WaitOnFlagUntilTimeout+0xb2>
 800813e:	68bb      	ldr	r3, [r7, #8]
 8008140:	2b80      	cmp	r3, #128	@ 0x80
 8008142:	d034      	beq.n	80081ae <UART_WaitOnFlagUntilTimeout+0xb2>
 8008144:	68bb      	ldr	r3, [r7, #8]
 8008146:	2b40      	cmp	r3, #64	@ 0x40
 8008148:	d031      	beq.n	80081ae <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	69db      	ldr	r3, [r3, #28]
 8008150:	f003 0308 	and.w	r3, r3, #8
 8008154:	2b08      	cmp	r3, #8
 8008156:	d110      	bne.n	800817a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	2208      	movs	r2, #8
 800815e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008160:	68f8      	ldr	r0, [r7, #12]
 8008162:	f000 fa42 	bl	80085ea <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	2208      	movs	r2, #8
 800816a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	2200      	movs	r2, #0
 8008172:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8008176:	2301      	movs	r3, #1
 8008178:	e029      	b.n	80081ce <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	69db      	ldr	r3, [r3, #28]
 8008180:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008184:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008188:	d111      	bne.n	80081ae <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008192:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008194:	68f8      	ldr	r0, [r7, #12]
 8008196:	f000 fa28 	bl	80085ea <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	2220      	movs	r2, #32
 800819e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	2200      	movs	r2, #0
 80081a6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80081aa:	2303      	movs	r3, #3
 80081ac:	e00f      	b.n	80081ce <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	69da      	ldr	r2, [r3, #28]
 80081b4:	68bb      	ldr	r3, [r7, #8]
 80081b6:	4013      	ands	r3, r2
 80081b8:	68ba      	ldr	r2, [r7, #8]
 80081ba:	429a      	cmp	r2, r3
 80081bc:	bf0c      	ite	eq
 80081be:	2301      	moveq	r3, #1
 80081c0:	2300      	movne	r3, #0
 80081c2:	b2db      	uxtb	r3, r3
 80081c4:	461a      	mov	r2, r3
 80081c6:	79fb      	ldrb	r3, [r7, #7]
 80081c8:	429a      	cmp	r2, r3
 80081ca:	d0a0      	beq.n	800810e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80081cc:	2300      	movs	r3, #0
}
 80081ce:	4618      	mov	r0, r3
 80081d0:	3710      	adds	r7, #16
 80081d2:	46bd      	mov	sp, r7
 80081d4:	bd80      	pop	{r7, pc}
	...

080081d8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80081d8:	b480      	push	{r7}
 80081da:	b0a3      	sub	sp, #140	@ 0x8c
 80081dc:	af00      	add	r7, sp, #0
 80081de:	60f8      	str	r0, [r7, #12]
 80081e0:	60b9      	str	r1, [r7, #8]
 80081e2:	4613      	mov	r3, r2
 80081e4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	68ba      	ldr	r2, [r7, #8]
 80081ea:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	88fa      	ldrh	r2, [r7, #6]
 80081f0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	88fa      	ldrh	r2, [r7, #6]
 80081f8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	2200      	movs	r2, #0
 8008200:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	689b      	ldr	r3, [r3, #8]
 8008206:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800820a:	d10e      	bne.n	800822a <UART_Start_Receive_IT+0x52>
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	691b      	ldr	r3, [r3, #16]
 8008210:	2b00      	cmp	r3, #0
 8008212:	d105      	bne.n	8008220 <UART_Start_Receive_IT+0x48>
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800821a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800821e:	e02d      	b.n	800827c <UART_Start_Receive_IT+0xa4>
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	22ff      	movs	r2, #255	@ 0xff
 8008224:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008228:	e028      	b.n	800827c <UART_Start_Receive_IT+0xa4>
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	689b      	ldr	r3, [r3, #8]
 800822e:	2b00      	cmp	r3, #0
 8008230:	d10d      	bne.n	800824e <UART_Start_Receive_IT+0x76>
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	691b      	ldr	r3, [r3, #16]
 8008236:	2b00      	cmp	r3, #0
 8008238:	d104      	bne.n	8008244 <UART_Start_Receive_IT+0x6c>
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	22ff      	movs	r2, #255	@ 0xff
 800823e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008242:	e01b      	b.n	800827c <UART_Start_Receive_IT+0xa4>
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	227f      	movs	r2, #127	@ 0x7f
 8008248:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800824c:	e016      	b.n	800827c <UART_Start_Receive_IT+0xa4>
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	689b      	ldr	r3, [r3, #8]
 8008252:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008256:	d10d      	bne.n	8008274 <UART_Start_Receive_IT+0x9c>
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	691b      	ldr	r3, [r3, #16]
 800825c:	2b00      	cmp	r3, #0
 800825e:	d104      	bne.n	800826a <UART_Start_Receive_IT+0x92>
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	227f      	movs	r2, #127	@ 0x7f
 8008264:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008268:	e008      	b.n	800827c <UART_Start_Receive_IT+0xa4>
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	223f      	movs	r2, #63	@ 0x3f
 800826e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008272:	e003      	b.n	800827c <UART_Start_Receive_IT+0xa4>
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	2200      	movs	r2, #0
 8008278:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	2200      	movs	r2, #0
 8008280:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	2222      	movs	r2, #34	@ 0x22
 8008288:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	3308      	adds	r3, #8
 8008292:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008294:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008296:	e853 3f00 	ldrex	r3, [r3]
 800829a:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800829c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800829e:	f043 0301 	orr.w	r3, r3, #1
 80082a2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	3308      	adds	r3, #8
 80082ac:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 80082b0:	673a      	str	r2, [r7, #112]	@ 0x70
 80082b2:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082b4:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 80082b6:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80082b8:	e841 2300 	strex	r3, r2, [r1]
 80082bc:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 80082be:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d1e3      	bne.n	800828c <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80082c8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80082cc:	d14f      	bne.n	800836e <UART_Start_Receive_IT+0x196>
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80082d4:	88fa      	ldrh	r2, [r7, #6]
 80082d6:	429a      	cmp	r2, r3
 80082d8:	d349      	bcc.n	800836e <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	689b      	ldr	r3, [r3, #8]
 80082de:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80082e2:	d107      	bne.n	80082f4 <UART_Start_Receive_IT+0x11c>
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	691b      	ldr	r3, [r3, #16]
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d103      	bne.n	80082f4 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	4a47      	ldr	r2, [pc, #284]	@ (800840c <UART_Start_Receive_IT+0x234>)
 80082f0:	675a      	str	r2, [r3, #116]	@ 0x74
 80082f2:	e002      	b.n	80082fa <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	4a46      	ldr	r2, [pc, #280]	@ (8008410 <UART_Start_Receive_IT+0x238>)
 80082f8:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	691b      	ldr	r3, [r3, #16]
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d01a      	beq.n	8008338 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008308:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800830a:	e853 3f00 	ldrex	r3, [r3]
 800830e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8008310:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008312:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008316:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	461a      	mov	r2, r3
 8008320:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8008324:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008326:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008328:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800832a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800832c:	e841 2300 	strex	r3, r2, [r1]
 8008330:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8008332:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008334:	2b00      	cmp	r3, #0
 8008336:	d1e4      	bne.n	8008302 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	3308      	adds	r3, #8
 800833e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008340:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008342:	e853 3f00 	ldrex	r3, [r3]
 8008346:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008348:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800834a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800834e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	3308      	adds	r3, #8
 8008356:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8008358:	64ba      	str	r2, [r7, #72]	@ 0x48
 800835a:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800835c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800835e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008360:	e841 2300 	strex	r3, r2, [r1]
 8008364:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8008366:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008368:	2b00      	cmp	r3, #0
 800836a:	d1e5      	bne.n	8008338 <UART_Start_Receive_IT+0x160>
 800836c:	e046      	b.n	80083fc <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	689b      	ldr	r3, [r3, #8]
 8008372:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008376:	d107      	bne.n	8008388 <UART_Start_Receive_IT+0x1b0>
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	691b      	ldr	r3, [r3, #16]
 800837c:	2b00      	cmp	r3, #0
 800837e:	d103      	bne.n	8008388 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	4a24      	ldr	r2, [pc, #144]	@ (8008414 <UART_Start_Receive_IT+0x23c>)
 8008384:	675a      	str	r2, [r3, #116]	@ 0x74
 8008386:	e002      	b.n	800838e <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	4a23      	ldr	r2, [pc, #140]	@ (8008418 <UART_Start_Receive_IT+0x240>)
 800838c:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	691b      	ldr	r3, [r3, #16]
 8008392:	2b00      	cmp	r3, #0
 8008394:	d019      	beq.n	80083ca <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800839c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800839e:	e853 3f00 	ldrex	r3, [r3]
 80083a2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80083a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083a6:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 80083aa:	677b      	str	r3, [r7, #116]	@ 0x74
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	461a      	mov	r2, r3
 80083b2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80083b4:	637b      	str	r3, [r7, #52]	@ 0x34
 80083b6:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083b8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80083ba:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80083bc:	e841 2300 	strex	r3, r2, [r1]
 80083c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80083c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d1e6      	bne.n	8008396 <UART_Start_Receive_IT+0x1be>
 80083c8:	e018      	b.n	80083fc <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083d0:	697b      	ldr	r3, [r7, #20]
 80083d2:	e853 3f00 	ldrex	r3, [r3]
 80083d6:	613b      	str	r3, [r7, #16]
   return(result);
 80083d8:	693b      	ldr	r3, [r7, #16]
 80083da:	f043 0320 	orr.w	r3, r3, #32
 80083de:	67bb      	str	r3, [r7, #120]	@ 0x78
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	461a      	mov	r2, r3
 80083e6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80083e8:	623b      	str	r3, [r7, #32]
 80083ea:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083ec:	69f9      	ldr	r1, [r7, #28]
 80083ee:	6a3a      	ldr	r2, [r7, #32]
 80083f0:	e841 2300 	strex	r3, r2, [r1]
 80083f4:	61bb      	str	r3, [r7, #24]
   return(result);
 80083f6:	69bb      	ldr	r3, [r7, #24]
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d1e6      	bne.n	80083ca <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 80083fc:	2300      	movs	r3, #0
}
 80083fe:	4618      	mov	r0, r3
 8008400:	378c      	adds	r7, #140	@ 0x8c
 8008402:	46bd      	mov	sp, r7
 8008404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008408:	4770      	bx	lr
 800840a:	bf00      	nop
 800840c:	08009335 	.word	0x08009335
 8008410:	08008fd1 	.word	0x08008fd1
 8008414:	08008e19 	.word	0x08008e19
 8008418:	08008c61 	.word	0x08008c61

0800841c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800841c:	b580      	push	{r7, lr}
 800841e:	b096      	sub	sp, #88	@ 0x58
 8008420:	af00      	add	r7, sp, #0
 8008422:	60f8      	str	r0, [r7, #12]
 8008424:	60b9      	str	r1, [r7, #8]
 8008426:	4613      	mov	r3, r2
 8008428:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	68ba      	ldr	r2, [r7, #8]
 800842e:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	88fa      	ldrh	r2, [r7, #6]
 8008434:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	2200      	movs	r2, #0
 800843c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	2222      	movs	r2, #34	@ 0x22
 8008444:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800844e:	2b00      	cmp	r3, #0
 8008450:	d02d      	beq.n	80084ae <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008458:	4a40      	ldr	r2, [pc, #256]	@ (800855c <UART_Start_Receive_DMA+0x140>)
 800845a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008462:	4a3f      	ldr	r2, [pc, #252]	@ (8008560 <UART_Start_Receive_DMA+0x144>)
 8008464:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800846c:	4a3d      	ldr	r2, [pc, #244]	@ (8008564 <UART_Start_Receive_DMA+0x148>)
 800846e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008476:	2200      	movs	r2, #0
 8008478:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	3324      	adds	r3, #36	@ 0x24
 8008486:	4619      	mov	r1, r3
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800848c:	461a      	mov	r2, r3
 800848e:	88fb      	ldrh	r3, [r7, #6]
 8008490:	f7fc fc9e 	bl	8004dd0 <HAL_DMA_Start_IT>
 8008494:	4603      	mov	r3, r0
 8008496:	2b00      	cmp	r3, #0
 8008498:	d009      	beq.n	80084ae <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	2210      	movs	r2, #16
 800849e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	2220      	movs	r2, #32
 80084a6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 80084aa:	2301      	movs	r3, #1
 80084ac:	e051      	b.n	8008552 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	691b      	ldr	r3, [r3, #16]
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d018      	beq.n	80084e8 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80084be:	e853 3f00 	ldrex	r3, [r3]
 80084c2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80084c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084c6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80084ca:	657b      	str	r3, [r7, #84]	@ 0x54
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	461a      	mov	r2, r3
 80084d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80084d4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80084d6:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084d8:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80084da:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80084dc:	e841 2300 	strex	r3, r2, [r1]
 80084e0:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80084e2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d1e6      	bne.n	80084b6 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	3308      	adds	r3, #8
 80084ee:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80084f2:	e853 3f00 	ldrex	r3, [r3]
 80084f6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80084f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084fa:	f043 0301 	orr.w	r3, r3, #1
 80084fe:	653b      	str	r3, [r7, #80]	@ 0x50
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	3308      	adds	r3, #8
 8008506:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8008508:	637a      	str	r2, [r7, #52]	@ 0x34
 800850a:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800850c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800850e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008510:	e841 2300 	strex	r3, r2, [r1]
 8008514:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8008516:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008518:	2b00      	cmp	r3, #0
 800851a:	d1e5      	bne.n	80084e8 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	3308      	adds	r3, #8
 8008522:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008524:	697b      	ldr	r3, [r7, #20]
 8008526:	e853 3f00 	ldrex	r3, [r3]
 800852a:	613b      	str	r3, [r7, #16]
   return(result);
 800852c:	693b      	ldr	r3, [r7, #16]
 800852e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008532:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	3308      	adds	r3, #8
 800853a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800853c:	623a      	str	r2, [r7, #32]
 800853e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008540:	69f9      	ldr	r1, [r7, #28]
 8008542:	6a3a      	ldr	r2, [r7, #32]
 8008544:	e841 2300 	strex	r3, r2, [r1]
 8008548:	61bb      	str	r3, [r7, #24]
   return(result);
 800854a:	69bb      	ldr	r3, [r7, #24]
 800854c:	2b00      	cmp	r3, #0
 800854e:	d1e5      	bne.n	800851c <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 8008550:	2300      	movs	r3, #0
}
 8008552:	4618      	mov	r0, r3
 8008554:	3758      	adds	r7, #88	@ 0x58
 8008556:	46bd      	mov	sp, r7
 8008558:	bd80      	pop	{r7, pc}
 800855a:	bf00      	nop
 800855c:	080086b7 	.word	0x080086b7
 8008560:	080087e3 	.word	0x080087e3
 8008564:	08008821 	.word	0x08008821

08008568 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8008568:	b480      	push	{r7}
 800856a:	b08f      	sub	sp, #60	@ 0x3c
 800856c:	af00      	add	r7, sp, #0
 800856e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008576:	6a3b      	ldr	r3, [r7, #32]
 8008578:	e853 3f00 	ldrex	r3, [r3]
 800857c:	61fb      	str	r3, [r7, #28]
   return(result);
 800857e:	69fb      	ldr	r3, [r7, #28]
 8008580:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8008584:	637b      	str	r3, [r7, #52]	@ 0x34
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	461a      	mov	r2, r3
 800858c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800858e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008590:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008592:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008594:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008596:	e841 2300 	strex	r3, r2, [r1]
 800859a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800859c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d1e6      	bne.n	8008570 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	3308      	adds	r3, #8
 80085a8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	e853 3f00 	ldrex	r3, [r3]
 80085b0:	60bb      	str	r3, [r7, #8]
   return(result);
 80085b2:	68bb      	ldr	r3, [r7, #8]
 80085b4:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80085b8:	633b      	str	r3, [r7, #48]	@ 0x30
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	3308      	adds	r3, #8
 80085c0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80085c2:	61ba      	str	r2, [r7, #24]
 80085c4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085c6:	6979      	ldr	r1, [r7, #20]
 80085c8:	69ba      	ldr	r2, [r7, #24]
 80085ca:	e841 2300 	strex	r3, r2, [r1]
 80085ce:	613b      	str	r3, [r7, #16]
   return(result);
 80085d0:	693b      	ldr	r3, [r7, #16]
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d1e5      	bne.n	80085a2 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	2220      	movs	r2, #32
 80085da:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 80085de:	bf00      	nop
 80085e0:	373c      	adds	r7, #60	@ 0x3c
 80085e2:	46bd      	mov	sp, r7
 80085e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085e8:	4770      	bx	lr

080085ea <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80085ea:	b480      	push	{r7}
 80085ec:	b095      	sub	sp, #84	@ 0x54
 80085ee:	af00      	add	r7, sp, #0
 80085f0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80085fa:	e853 3f00 	ldrex	r3, [r3]
 80085fe:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008600:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008602:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008606:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	461a      	mov	r2, r3
 800860e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008610:	643b      	str	r3, [r7, #64]	@ 0x40
 8008612:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008614:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008616:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008618:	e841 2300 	strex	r3, r2, [r1]
 800861c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800861e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008620:	2b00      	cmp	r3, #0
 8008622:	d1e6      	bne.n	80085f2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	3308      	adds	r3, #8
 800862a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800862c:	6a3b      	ldr	r3, [r7, #32]
 800862e:	e853 3f00 	ldrex	r3, [r3]
 8008632:	61fb      	str	r3, [r7, #28]
   return(result);
 8008634:	69fb      	ldr	r3, [r7, #28]
 8008636:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800863a:	f023 0301 	bic.w	r3, r3, #1
 800863e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	3308      	adds	r3, #8
 8008646:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008648:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800864a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800864c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800864e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008650:	e841 2300 	strex	r3, r2, [r1]
 8008654:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008656:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008658:	2b00      	cmp	r3, #0
 800865a:	d1e3      	bne.n	8008624 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008660:	2b01      	cmp	r3, #1
 8008662:	d118      	bne.n	8008696 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	e853 3f00 	ldrex	r3, [r3]
 8008670:	60bb      	str	r3, [r7, #8]
   return(result);
 8008672:	68bb      	ldr	r3, [r7, #8]
 8008674:	f023 0310 	bic.w	r3, r3, #16
 8008678:	647b      	str	r3, [r7, #68]	@ 0x44
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	461a      	mov	r2, r3
 8008680:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008682:	61bb      	str	r3, [r7, #24]
 8008684:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008686:	6979      	ldr	r1, [r7, #20]
 8008688:	69ba      	ldr	r2, [r7, #24]
 800868a:	e841 2300 	strex	r3, r2, [r1]
 800868e:	613b      	str	r3, [r7, #16]
   return(result);
 8008690:	693b      	ldr	r3, [r7, #16]
 8008692:	2b00      	cmp	r3, #0
 8008694:	d1e6      	bne.n	8008664 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	2220      	movs	r2, #32
 800869a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	2200      	movs	r2, #0
 80086a2:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	2200      	movs	r2, #0
 80086a8:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80086aa:	bf00      	nop
 80086ac:	3754      	adds	r7, #84	@ 0x54
 80086ae:	46bd      	mov	sp, r7
 80086b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086b4:	4770      	bx	lr

080086b6 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80086b6:	b580      	push	{r7, lr}
 80086b8:	b09c      	sub	sp, #112	@ 0x70
 80086ba:	af00      	add	r7, sp, #0
 80086bc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80086c2:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	f003 0320 	and.w	r3, r3, #32
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d171      	bne.n	80087b6 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 80086d2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80086d4:	2200      	movs	r2, #0
 80086d6:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80086da:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086e0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80086e2:	e853 3f00 	ldrex	r3, [r3]
 80086e6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80086e8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80086ea:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80086ee:	66bb      	str	r3, [r7, #104]	@ 0x68
 80086f0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	461a      	mov	r2, r3
 80086f6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80086f8:	65bb      	str	r3, [r7, #88]	@ 0x58
 80086fa:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086fc:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80086fe:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008700:	e841 2300 	strex	r3, r2, [r1]
 8008704:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008706:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008708:	2b00      	cmp	r3, #0
 800870a:	d1e6      	bne.n	80086da <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800870c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	3308      	adds	r3, #8
 8008712:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008714:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008716:	e853 3f00 	ldrex	r3, [r3]
 800871a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800871c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800871e:	f023 0301 	bic.w	r3, r3, #1
 8008722:	667b      	str	r3, [r7, #100]	@ 0x64
 8008724:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	3308      	adds	r3, #8
 800872a:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800872c:	647a      	str	r2, [r7, #68]	@ 0x44
 800872e:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008730:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008732:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008734:	e841 2300 	strex	r3, r2, [r1]
 8008738:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800873a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800873c:	2b00      	cmp	r3, #0
 800873e:	d1e5      	bne.n	800870c <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008740:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	3308      	adds	r3, #8
 8008746:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008748:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800874a:	e853 3f00 	ldrex	r3, [r3]
 800874e:	623b      	str	r3, [r7, #32]
   return(result);
 8008750:	6a3b      	ldr	r3, [r7, #32]
 8008752:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008756:	663b      	str	r3, [r7, #96]	@ 0x60
 8008758:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	3308      	adds	r3, #8
 800875e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8008760:	633a      	str	r2, [r7, #48]	@ 0x30
 8008762:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008764:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008766:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008768:	e841 2300 	strex	r3, r2, [r1]
 800876c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800876e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008770:	2b00      	cmp	r3, #0
 8008772:	d1e5      	bne.n	8008740 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008774:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008776:	2220      	movs	r2, #32
 8008778:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800877c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800877e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008780:	2b01      	cmp	r3, #1
 8008782:	d118      	bne.n	80087b6 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008784:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800878a:	693b      	ldr	r3, [r7, #16]
 800878c:	e853 3f00 	ldrex	r3, [r3]
 8008790:	60fb      	str	r3, [r7, #12]
   return(result);
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	f023 0310 	bic.w	r3, r3, #16
 8008798:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800879a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	461a      	mov	r2, r3
 80087a0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80087a2:	61fb      	str	r3, [r7, #28]
 80087a4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087a6:	69b9      	ldr	r1, [r7, #24]
 80087a8:	69fa      	ldr	r2, [r7, #28]
 80087aa:	e841 2300 	strex	r3, r2, [r1]
 80087ae:	617b      	str	r3, [r7, #20]
   return(result);
 80087b0:	697b      	ldr	r3, [r7, #20]
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d1e6      	bne.n	8008784 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80087b6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80087b8:	2200      	movs	r2, #0
 80087ba:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80087bc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80087be:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80087c0:	2b01      	cmp	r3, #1
 80087c2:	d107      	bne.n	80087d4 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80087c4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80087c6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80087ca:	4619      	mov	r1, r3
 80087cc:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80087ce:	f7ff f841 	bl	8007854 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80087d2:	e002      	b.n	80087da <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 80087d4:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80087d6:	f7f8 fc4b 	bl	8001070 <HAL_UART_RxCpltCallback>
}
 80087da:	bf00      	nop
 80087dc:	3770      	adds	r7, #112	@ 0x70
 80087de:	46bd      	mov	sp, r7
 80087e0:	bd80      	pop	{r7, pc}

080087e2 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80087e2:	b580      	push	{r7, lr}
 80087e4:	b084      	sub	sp, #16
 80087e6:	af00      	add	r7, sp, #0
 80087e8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80087ee:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	2201      	movs	r2, #1
 80087f4:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80087fa:	2b01      	cmp	r3, #1
 80087fc:	d109      	bne.n	8008812 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008804:	085b      	lsrs	r3, r3, #1
 8008806:	b29b      	uxth	r3, r3
 8008808:	4619      	mov	r1, r3
 800880a:	68f8      	ldr	r0, [r7, #12]
 800880c:	f7ff f822 	bl	8007854 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008810:	e002      	b.n	8008818 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8008812:	68f8      	ldr	r0, [r7, #12]
 8008814:	f7ff f80a 	bl	800782c <HAL_UART_RxHalfCpltCallback>
}
 8008818:	bf00      	nop
 800881a:	3710      	adds	r7, #16
 800881c:	46bd      	mov	sp, r7
 800881e:	bd80      	pop	{r7, pc}

08008820 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8008820:	b580      	push	{r7, lr}
 8008822:	b086      	sub	sp, #24
 8008824:	af00      	add	r7, sp, #0
 8008826:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800882c:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800882e:	697b      	ldr	r3, [r7, #20]
 8008830:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008834:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8008836:	697b      	ldr	r3, [r7, #20]
 8008838:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800883c:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800883e:	697b      	ldr	r3, [r7, #20]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	689b      	ldr	r3, [r3, #8]
 8008844:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008848:	2b80      	cmp	r3, #128	@ 0x80
 800884a:	d109      	bne.n	8008860 <UART_DMAError+0x40>
 800884c:	693b      	ldr	r3, [r7, #16]
 800884e:	2b21      	cmp	r3, #33	@ 0x21
 8008850:	d106      	bne.n	8008860 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8008852:	697b      	ldr	r3, [r7, #20]
 8008854:	2200      	movs	r2, #0
 8008856:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800885a:	6978      	ldr	r0, [r7, #20]
 800885c:	f7ff fe84 	bl	8008568 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8008860:	697b      	ldr	r3, [r7, #20]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	689b      	ldr	r3, [r3, #8]
 8008866:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800886a:	2b40      	cmp	r3, #64	@ 0x40
 800886c:	d109      	bne.n	8008882 <UART_DMAError+0x62>
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	2b22      	cmp	r3, #34	@ 0x22
 8008872:	d106      	bne.n	8008882 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8008874:	697b      	ldr	r3, [r7, #20]
 8008876:	2200      	movs	r2, #0
 8008878:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800887c:	6978      	ldr	r0, [r7, #20]
 800887e:	f7ff feb4 	bl	80085ea <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008882:	697b      	ldr	r3, [r7, #20]
 8008884:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008888:	f043 0210 	orr.w	r2, r3, #16
 800888c:	697b      	ldr	r3, [r7, #20]
 800888e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008892:	6978      	ldr	r0, [r7, #20]
 8008894:	f7fe ffd4 	bl	8007840 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008898:	bf00      	nop
 800889a:	3718      	adds	r7, #24
 800889c:	46bd      	mov	sp, r7
 800889e:	bd80      	pop	{r7, pc}

080088a0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80088a0:	b580      	push	{r7, lr}
 80088a2:	b084      	sub	sp, #16
 80088a4:	af00      	add	r7, sp, #0
 80088a6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80088ac:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	2200      	movs	r2, #0
 80088b2:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80088b6:	68f8      	ldr	r0, [r7, #12]
 80088b8:	f7fe ffc2 	bl	8007840 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80088bc:	bf00      	nop
 80088be:	3710      	adds	r7, #16
 80088c0:	46bd      	mov	sp, r7
 80088c2:	bd80      	pop	{r7, pc}

080088c4 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 80088c4:	b480      	push	{r7}
 80088c6:	b08f      	sub	sp, #60	@ 0x3c
 80088c8:	af00      	add	r7, sp, #0
 80088ca:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80088d2:	2b21      	cmp	r3, #33	@ 0x21
 80088d4:	d14c      	bne.n	8008970 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80088dc:	b29b      	uxth	r3, r3
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d132      	bne.n	8008948 <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088e8:	6a3b      	ldr	r3, [r7, #32]
 80088ea:	e853 3f00 	ldrex	r3, [r3]
 80088ee:	61fb      	str	r3, [r7, #28]
   return(result);
 80088f0:	69fb      	ldr	r3, [r7, #28]
 80088f2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80088f6:	637b      	str	r3, [r7, #52]	@ 0x34
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	461a      	mov	r2, r3
 80088fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008900:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008902:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008904:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008906:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008908:	e841 2300 	strex	r3, r2, [r1]
 800890c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800890e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008910:	2b00      	cmp	r3, #0
 8008912:	d1e6      	bne.n	80088e2 <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	e853 3f00 	ldrex	r3, [r3]
 8008920:	60bb      	str	r3, [r7, #8]
   return(result);
 8008922:	68bb      	ldr	r3, [r7, #8]
 8008924:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008928:	633b      	str	r3, [r7, #48]	@ 0x30
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	461a      	mov	r2, r3
 8008930:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008932:	61bb      	str	r3, [r7, #24]
 8008934:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008936:	6979      	ldr	r1, [r7, #20]
 8008938:	69ba      	ldr	r2, [r7, #24]
 800893a:	e841 2300 	strex	r3, r2, [r1]
 800893e:	613b      	str	r3, [r7, #16]
   return(result);
 8008940:	693b      	ldr	r3, [r7, #16]
 8008942:	2b00      	cmp	r3, #0
 8008944:	d1e6      	bne.n	8008914 <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8008946:	e013      	b.n	8008970 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800894c:	781a      	ldrb	r2, [r3, #0]
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008958:	1c5a      	adds	r2, r3, #1
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8008964:	b29b      	uxth	r3, r3
 8008966:	3b01      	subs	r3, #1
 8008968:	b29a      	uxth	r2, r3
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 8008970:	bf00      	nop
 8008972:	373c      	adds	r7, #60	@ 0x3c
 8008974:	46bd      	mov	sp, r7
 8008976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800897a:	4770      	bx	lr

0800897c <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800897c:	b480      	push	{r7}
 800897e:	b091      	sub	sp, #68	@ 0x44
 8008980:	af00      	add	r7, sp, #0
 8008982:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800898a:	2b21      	cmp	r3, #33	@ 0x21
 800898c:	d151      	bne.n	8008a32 <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8008994:	b29b      	uxth	r3, r3
 8008996:	2b00      	cmp	r3, #0
 8008998:	d132      	bne.n	8008a00 <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089a2:	e853 3f00 	ldrex	r3, [r3]
 80089a6:	623b      	str	r3, [r7, #32]
   return(result);
 80089a8:	6a3b      	ldr	r3, [r7, #32]
 80089aa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80089ae:	63bb      	str	r3, [r7, #56]	@ 0x38
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	461a      	mov	r2, r3
 80089b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089b8:	633b      	str	r3, [r7, #48]	@ 0x30
 80089ba:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089bc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80089be:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80089c0:	e841 2300 	strex	r3, r2, [r1]
 80089c4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80089c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d1e6      	bne.n	800899a <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089d2:	693b      	ldr	r3, [r7, #16]
 80089d4:	e853 3f00 	ldrex	r3, [r3]
 80089d8:	60fb      	str	r3, [r7, #12]
   return(result);
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80089e0:	637b      	str	r3, [r7, #52]	@ 0x34
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	461a      	mov	r2, r3
 80089e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80089ea:	61fb      	str	r3, [r7, #28]
 80089ec:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089ee:	69b9      	ldr	r1, [r7, #24]
 80089f0:	69fa      	ldr	r2, [r7, #28]
 80089f2:	e841 2300 	strex	r3, r2, [r1]
 80089f6:	617b      	str	r3, [r7, #20]
   return(result);
 80089f8:	697b      	ldr	r3, [r7, #20]
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d1e6      	bne.n	80089cc <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 80089fe:	e018      	b.n	8008a32 <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008a04:	63fb      	str	r3, [r7, #60]	@ 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8008a06:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008a08:	881b      	ldrh	r3, [r3, #0]
 8008a0a:	461a      	mov	r2, r3
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008a14:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008a1a:	1c9a      	adds	r2, r3, #2
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8008a26:	b29b      	uxth	r3, r3
 8008a28:	3b01      	subs	r3, #1
 8008a2a:	b29a      	uxth	r2, r3
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 8008a32:	bf00      	nop
 8008a34:	3744      	adds	r7, #68	@ 0x44
 8008a36:	46bd      	mov	sp, r7
 8008a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a3c:	4770      	bx	lr

08008a3e <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008a3e:	b480      	push	{r7}
 8008a40:	b091      	sub	sp, #68	@ 0x44
 8008a42:	af00      	add	r7, sp, #0
 8008a44:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008a4c:	2b21      	cmp	r3, #33	@ 0x21
 8008a4e:	d160      	bne.n	8008b12 <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008a56:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8008a58:	e057      	b.n	8008b0a <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8008a60:	b29b      	uxth	r3, r3
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d133      	bne.n	8008ace <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	3308      	adds	r3, #8
 8008a6c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a70:	e853 3f00 	ldrex	r3, [r3]
 8008a74:	623b      	str	r3, [r7, #32]
   return(result);
 8008a76:	6a3b      	ldr	r3, [r7, #32]
 8008a78:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8008a7c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	3308      	adds	r3, #8
 8008a84:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008a86:	633a      	str	r2, [r7, #48]	@ 0x30
 8008a88:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a8a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008a8c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008a8e:	e841 2300 	strex	r3, r2, [r1]
 8008a92:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008a94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d1e5      	bne.n	8008a66 <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008aa0:	693b      	ldr	r3, [r7, #16]
 8008aa2:	e853 3f00 	ldrex	r3, [r3]
 8008aa6:	60fb      	str	r3, [r7, #12]
   return(result);
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008aae:	637b      	str	r3, [r7, #52]	@ 0x34
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	461a      	mov	r2, r3
 8008ab6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008ab8:	61fb      	str	r3, [r7, #28]
 8008aba:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008abc:	69b9      	ldr	r1, [r7, #24]
 8008abe:	69fa      	ldr	r2, [r7, #28]
 8008ac0:	e841 2300 	strex	r3, r2, [r1]
 8008ac4:	617b      	str	r3, [r7, #20]
   return(result);
 8008ac6:	697b      	ldr	r3, [r7, #20]
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d1e6      	bne.n	8008a9a <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8008acc:	e021      	b.n	8008b12 <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	69db      	ldr	r3, [r3, #28]
 8008ad4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d013      	beq.n	8008b04 <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008ae0:	781a      	ldrb	r2, [r3, #0]
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr++;
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008aec:	1c5a      	adds	r2, r3, #1
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8008af8:	b29b      	uxth	r3, r3
 8008afa:	3b01      	subs	r3, #1
 8008afc:	b29a      	uxth	r2, r3
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8008b04:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8008b06:	3b01      	subs	r3, #1
 8008b08:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8008b0a:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d1a4      	bne.n	8008a5a <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 8008b10:	e7ff      	b.n	8008b12 <UART_TxISR_8BIT_FIFOEN+0xd4>
 8008b12:	bf00      	nop
 8008b14:	3744      	adds	r7, #68	@ 0x44
 8008b16:	46bd      	mov	sp, r7
 8008b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b1c:	4770      	bx	lr

08008b1e <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008b1e:	b480      	push	{r7}
 8008b20:	b091      	sub	sp, #68	@ 0x44
 8008b22:	af00      	add	r7, sp, #0
 8008b24:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008b2c:	2b21      	cmp	r3, #33	@ 0x21
 8008b2e:	d165      	bne.n	8008bfc <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008b36:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8008b38:	e05c      	b.n	8008bf4 <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8008b40:	b29b      	uxth	r3, r3
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d133      	bne.n	8008bae <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	3308      	adds	r3, #8
 8008b4c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b4e:	6a3b      	ldr	r3, [r7, #32]
 8008b50:	e853 3f00 	ldrex	r3, [r3]
 8008b54:	61fb      	str	r3, [r7, #28]
   return(result);
 8008b56:	69fb      	ldr	r3, [r7, #28]
 8008b58:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8008b5c:	637b      	str	r3, [r7, #52]	@ 0x34
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	3308      	adds	r3, #8
 8008b64:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008b66:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008b68:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b6a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008b6c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008b6e:	e841 2300 	strex	r3, r2, [r1]
 8008b72:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008b74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d1e5      	bne.n	8008b46 <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	e853 3f00 	ldrex	r3, [r3]
 8008b86:	60bb      	str	r3, [r7, #8]
   return(result);
 8008b88:	68bb      	ldr	r3, [r7, #8]
 8008b8a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008b8e:	633b      	str	r3, [r7, #48]	@ 0x30
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	461a      	mov	r2, r3
 8008b96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b98:	61bb      	str	r3, [r7, #24]
 8008b9a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b9c:	6979      	ldr	r1, [r7, #20]
 8008b9e:	69ba      	ldr	r2, [r7, #24]
 8008ba0:	e841 2300 	strex	r3, r2, [r1]
 8008ba4:	613b      	str	r3, [r7, #16]
   return(result);
 8008ba6:	693b      	ldr	r3, [r7, #16]
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d1e6      	bne.n	8008b7a <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8008bac:	e026      	b.n	8008bfc <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	69db      	ldr	r3, [r3, #28]
 8008bb4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d018      	beq.n	8008bee <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008bc0:	63bb      	str	r3, [r7, #56]	@ 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8008bc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008bc4:	881b      	ldrh	r3, [r3, #0]
 8008bc6:	461a      	mov	r2, r3
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008bd0:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr += 2U;
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008bd6:	1c9a      	adds	r2, r3, #2
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8008be2:	b29b      	uxth	r3, r3
 8008be4:	3b01      	subs	r3, #1
 8008be6:	b29a      	uxth	r2, r3
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8008bee:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8008bf0:	3b01      	subs	r3, #1
 8008bf2:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8008bf4:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d19f      	bne.n	8008b3a <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 8008bfa:	e7ff      	b.n	8008bfc <UART_TxISR_16BIT_FIFOEN+0xde>
 8008bfc:	bf00      	nop
 8008bfe:	3744      	adds	r7, #68	@ 0x44
 8008c00:	46bd      	mov	sp, r7
 8008c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c06:	4770      	bx	lr

08008c08 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008c08:	b580      	push	{r7, lr}
 8008c0a:	b088      	sub	sp, #32
 8008c0c:	af00      	add	r7, sp, #0
 8008c0e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	e853 3f00 	ldrex	r3, [r3]
 8008c1c:	60bb      	str	r3, [r7, #8]
   return(result);
 8008c1e:	68bb      	ldr	r3, [r7, #8]
 8008c20:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008c24:	61fb      	str	r3, [r7, #28]
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	461a      	mov	r2, r3
 8008c2c:	69fb      	ldr	r3, [r7, #28]
 8008c2e:	61bb      	str	r3, [r7, #24]
 8008c30:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c32:	6979      	ldr	r1, [r7, #20]
 8008c34:	69ba      	ldr	r2, [r7, #24]
 8008c36:	e841 2300 	strex	r3, r2, [r1]
 8008c3a:	613b      	str	r3, [r7, #16]
   return(result);
 8008c3c:	693b      	ldr	r3, [r7, #16]
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d1e6      	bne.n	8008c10 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	2220      	movs	r2, #32
 8008c46:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	2200      	movs	r2, #0
 8008c4e:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008c50:	6878      	ldr	r0, [r7, #4]
 8008c52:	f7fe fde1 	bl	8007818 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008c56:	bf00      	nop
 8008c58:	3720      	adds	r7, #32
 8008c5a:	46bd      	mov	sp, r7
 8008c5c:	bd80      	pop	{r7, pc}
	...

08008c60 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008c60:	b580      	push	{r7, lr}
 8008c62:	b09c      	sub	sp, #112	@ 0x70
 8008c64:	af00      	add	r7, sp, #0
 8008c66:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8008c6e:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008c78:	2b22      	cmp	r3, #34	@ 0x22
 8008c7a:	f040 80be 	bne.w	8008dfa <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c84:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008c88:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8008c8c:	b2d9      	uxtb	r1, r3
 8008c8e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8008c92:	b2da      	uxtb	r2, r3
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008c98:	400a      	ands	r2, r1
 8008c9a:	b2d2      	uxtb	r2, r2
 8008c9c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008ca2:	1c5a      	adds	r2, r3, #1
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008cae:	b29b      	uxth	r3, r3
 8008cb0:	3b01      	subs	r3, #1
 8008cb2:	b29a      	uxth	r2, r3
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008cc0:	b29b      	uxth	r3, r3
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	f040 80a1 	bne.w	8008e0a <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cce:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008cd0:	e853 3f00 	ldrex	r3, [r3]
 8008cd4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008cd6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008cd8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008cdc:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	461a      	mov	r2, r3
 8008ce4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008ce6:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008ce8:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cea:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008cec:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008cee:	e841 2300 	strex	r3, r2, [r1]
 8008cf2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008cf4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d1e6      	bne.n	8008cc8 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	3308      	adds	r3, #8
 8008d00:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d04:	e853 3f00 	ldrex	r3, [r3]
 8008d08:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008d0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008d0c:	f023 0301 	bic.w	r3, r3, #1
 8008d10:	667b      	str	r3, [r7, #100]	@ 0x64
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	3308      	adds	r3, #8
 8008d18:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8008d1a:	647a      	str	r2, [r7, #68]	@ 0x44
 8008d1c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d1e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008d20:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008d22:	e841 2300 	strex	r3, r2, [r1]
 8008d26:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008d28:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d1e5      	bne.n	8008cfa <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	2220      	movs	r2, #32
 8008d32:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	2200      	movs	r2, #0
 8008d3a:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	2200      	movs	r2, #0
 8008d40:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	4a33      	ldr	r2, [pc, #204]	@ (8008e14 <UART_RxISR_8BIT+0x1b4>)
 8008d48:	4293      	cmp	r3, r2
 8008d4a:	d01f      	beq.n	8008d8c <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	685b      	ldr	r3, [r3, #4]
 8008d52:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d018      	beq.n	8008d8c <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d62:	e853 3f00 	ldrex	r3, [r3]
 8008d66:	623b      	str	r3, [r7, #32]
   return(result);
 8008d68:	6a3b      	ldr	r3, [r7, #32]
 8008d6a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008d6e:	663b      	str	r3, [r7, #96]	@ 0x60
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	461a      	mov	r2, r3
 8008d76:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008d78:	633b      	str	r3, [r7, #48]	@ 0x30
 8008d7a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d7c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008d7e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008d80:	e841 2300 	strex	r3, r2, [r1]
 8008d84:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008d86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d1e6      	bne.n	8008d5a <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008d90:	2b01      	cmp	r3, #1
 8008d92:	d12e      	bne.n	8008df2 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	2200      	movs	r2, #0
 8008d98:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008da0:	693b      	ldr	r3, [r7, #16]
 8008da2:	e853 3f00 	ldrex	r3, [r3]
 8008da6:	60fb      	str	r3, [r7, #12]
   return(result);
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	f023 0310 	bic.w	r3, r3, #16
 8008dae:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	461a      	mov	r2, r3
 8008db6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008db8:	61fb      	str	r3, [r7, #28]
 8008dba:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008dbc:	69b9      	ldr	r1, [r7, #24]
 8008dbe:	69fa      	ldr	r2, [r7, #28]
 8008dc0:	e841 2300 	strex	r3, r2, [r1]
 8008dc4:	617b      	str	r3, [r7, #20]
   return(result);
 8008dc6:	697b      	ldr	r3, [r7, #20]
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d1e6      	bne.n	8008d9a <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	69db      	ldr	r3, [r3, #28]
 8008dd2:	f003 0310 	and.w	r3, r3, #16
 8008dd6:	2b10      	cmp	r3, #16
 8008dd8:	d103      	bne.n	8008de2 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	2210      	movs	r2, #16
 8008de0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008de8:	4619      	mov	r1, r3
 8008dea:	6878      	ldr	r0, [r7, #4]
 8008dec:	f7fe fd32 	bl	8007854 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008df0:	e00b      	b.n	8008e0a <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8008df2:	6878      	ldr	r0, [r7, #4]
 8008df4:	f7f8 f93c 	bl	8001070 <HAL_UART_RxCpltCallback>
}
 8008df8:	e007      	b.n	8008e0a <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	699a      	ldr	r2, [r3, #24]
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	f042 0208 	orr.w	r2, r2, #8
 8008e08:	619a      	str	r2, [r3, #24]
}
 8008e0a:	bf00      	nop
 8008e0c:	3770      	adds	r7, #112	@ 0x70
 8008e0e:	46bd      	mov	sp, r7
 8008e10:	bd80      	pop	{r7, pc}
 8008e12:	bf00      	nop
 8008e14:	40008000 	.word	0x40008000

08008e18 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008e18:	b580      	push	{r7, lr}
 8008e1a:	b09c      	sub	sp, #112	@ 0x70
 8008e1c:	af00      	add	r7, sp, #0
 8008e1e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8008e26:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008e30:	2b22      	cmp	r3, #34	@ 0x22
 8008e32:	f040 80be 	bne.w	8008fb2 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e3c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008e44:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8008e46:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8008e4a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8008e4e:	4013      	ands	r3, r2
 8008e50:	b29a      	uxth	r2, r3
 8008e52:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008e54:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008e5a:	1c9a      	adds	r2, r3, #2
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008e66:	b29b      	uxth	r3, r3
 8008e68:	3b01      	subs	r3, #1
 8008e6a:	b29a      	uxth	r2, r3
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008e78:	b29b      	uxth	r3, r3
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	f040 80a1 	bne.w	8008fc2 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e86:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008e88:	e853 3f00 	ldrex	r3, [r3]
 8008e8c:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8008e8e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008e90:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008e94:	667b      	str	r3, [r7, #100]	@ 0x64
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	461a      	mov	r2, r3
 8008e9c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008e9e:	657b      	str	r3, [r7, #84]	@ 0x54
 8008ea0:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ea2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8008ea4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8008ea6:	e841 2300 	strex	r3, r2, [r1]
 8008eaa:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8008eac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d1e6      	bne.n	8008e80 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	3308      	adds	r3, #8
 8008eb8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008eba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008ebc:	e853 3f00 	ldrex	r3, [r3]
 8008ec0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008ec2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ec4:	f023 0301 	bic.w	r3, r3, #1
 8008ec8:	663b      	str	r3, [r7, #96]	@ 0x60
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	3308      	adds	r3, #8
 8008ed0:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8008ed2:	643a      	str	r2, [r7, #64]	@ 0x40
 8008ed4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ed6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008ed8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008eda:	e841 2300 	strex	r3, r2, [r1]
 8008ede:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008ee0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d1e5      	bne.n	8008eb2 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	2220      	movs	r2, #32
 8008eea:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	2200      	movs	r2, #0
 8008ef2:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	2200      	movs	r2, #0
 8008ef8:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	4a33      	ldr	r2, [pc, #204]	@ (8008fcc <UART_RxISR_16BIT+0x1b4>)
 8008f00:	4293      	cmp	r3, r2
 8008f02:	d01f      	beq.n	8008f44 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	685b      	ldr	r3, [r3, #4]
 8008f0a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d018      	beq.n	8008f44 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f18:	6a3b      	ldr	r3, [r7, #32]
 8008f1a:	e853 3f00 	ldrex	r3, [r3]
 8008f1e:	61fb      	str	r3, [r7, #28]
   return(result);
 8008f20:	69fb      	ldr	r3, [r7, #28]
 8008f22:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008f26:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	461a      	mov	r2, r3
 8008f2e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008f30:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008f32:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f34:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008f36:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008f38:	e841 2300 	strex	r3, r2, [r1]
 8008f3c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008f3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d1e6      	bne.n	8008f12 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008f48:	2b01      	cmp	r3, #1
 8008f4a:	d12e      	bne.n	8008faa <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	2200      	movs	r2, #0
 8008f50:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	e853 3f00 	ldrex	r3, [r3]
 8008f5e:	60bb      	str	r3, [r7, #8]
   return(result);
 8008f60:	68bb      	ldr	r3, [r7, #8]
 8008f62:	f023 0310 	bic.w	r3, r3, #16
 8008f66:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	461a      	mov	r2, r3
 8008f6e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008f70:	61bb      	str	r3, [r7, #24]
 8008f72:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f74:	6979      	ldr	r1, [r7, #20]
 8008f76:	69ba      	ldr	r2, [r7, #24]
 8008f78:	e841 2300 	strex	r3, r2, [r1]
 8008f7c:	613b      	str	r3, [r7, #16]
   return(result);
 8008f7e:	693b      	ldr	r3, [r7, #16]
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d1e6      	bne.n	8008f52 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	69db      	ldr	r3, [r3, #28]
 8008f8a:	f003 0310 	and.w	r3, r3, #16
 8008f8e:	2b10      	cmp	r3, #16
 8008f90:	d103      	bne.n	8008f9a <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	2210      	movs	r2, #16
 8008f98:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008fa0:	4619      	mov	r1, r3
 8008fa2:	6878      	ldr	r0, [r7, #4]
 8008fa4:	f7fe fc56 	bl	8007854 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008fa8:	e00b      	b.n	8008fc2 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8008faa:	6878      	ldr	r0, [r7, #4]
 8008fac:	f7f8 f860 	bl	8001070 <HAL_UART_RxCpltCallback>
}
 8008fb0:	e007      	b.n	8008fc2 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	699a      	ldr	r2, [r3, #24]
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	f042 0208 	orr.w	r2, r2, #8
 8008fc0:	619a      	str	r2, [r3, #24]
}
 8008fc2:	bf00      	nop
 8008fc4:	3770      	adds	r7, #112	@ 0x70
 8008fc6:	46bd      	mov	sp, r7
 8008fc8:	bd80      	pop	{r7, pc}
 8008fca:	bf00      	nop
 8008fcc:	40008000 	.word	0x40008000

08008fd0 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008fd0:	b580      	push	{r7, lr}
 8008fd2:	b0ac      	sub	sp, #176	@ 0xb0
 8008fd4:	af00      	add	r7, sp, #0
 8008fd6:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8008fde:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	69db      	ldr	r3, [r3, #28]
 8008fe8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	689b      	ldr	r3, [r3, #8]
 8008ffc:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009006:	2b22      	cmp	r3, #34	@ 0x22
 8009008:	f040 8183 	bne.w	8009312 <UART_RxISR_8BIT_FIFOEN+0x342>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8009012:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009016:	e126      	b.n	8009266 <UART_RxISR_8BIT_FIFOEN+0x296>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800901e:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8009022:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 8009026:	b2d9      	uxtb	r1, r3
 8009028:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 800902c:	b2da      	uxtb	r2, r3
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009032:	400a      	ands	r2, r1
 8009034:	b2d2      	uxtb	r2, r2
 8009036:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800903c:	1c5a      	adds	r2, r3, #1
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009048:	b29b      	uxth	r3, r3
 800904a:	3b01      	subs	r3, #1
 800904c:	b29a      	uxth	r2, r3
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	69db      	ldr	r3, [r3, #28]
 800905a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800905e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009062:	f003 0307 	and.w	r3, r3, #7
 8009066:	2b00      	cmp	r3, #0
 8009068:	d053      	beq.n	8009112 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800906a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800906e:	f003 0301 	and.w	r3, r3, #1
 8009072:	2b00      	cmp	r3, #0
 8009074:	d011      	beq.n	800909a <UART_RxISR_8BIT_FIFOEN+0xca>
 8009076:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800907a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800907e:	2b00      	cmp	r3, #0
 8009080:	d00b      	beq.n	800909a <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	2201      	movs	r2, #1
 8009088:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009090:	f043 0201 	orr.w	r2, r3, #1
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800909a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800909e:	f003 0302 	and.w	r3, r3, #2
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d011      	beq.n	80090ca <UART_RxISR_8BIT_FIFOEN+0xfa>
 80090a6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80090aa:	f003 0301 	and.w	r3, r3, #1
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d00b      	beq.n	80090ca <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	2202      	movs	r2, #2
 80090b8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80090c0:	f043 0204 	orr.w	r2, r3, #4
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80090ca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80090ce:	f003 0304 	and.w	r3, r3, #4
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d011      	beq.n	80090fa <UART_RxISR_8BIT_FIFOEN+0x12a>
 80090d6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80090da:	f003 0301 	and.w	r3, r3, #1
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d00b      	beq.n	80090fa <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	2204      	movs	r2, #4
 80090e8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80090f0:	f043 0202 	orr.w	r2, r3, #2
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009100:	2b00      	cmp	r3, #0
 8009102:	d006      	beq.n	8009112 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009104:	6878      	ldr	r0, [r7, #4]
 8009106:	f7fe fb9b 	bl	8007840 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	2200      	movs	r2, #0
 800910e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009118:	b29b      	uxth	r3, r3
 800911a:	2b00      	cmp	r3, #0
 800911c:	f040 80a3 	bne.w	8009266 <UART_RxISR_8BIT_FIFOEN+0x296>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009126:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009128:	e853 3f00 	ldrex	r3, [r3]
 800912c:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 800912e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009130:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009134:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	461a      	mov	r2, r3
 800913e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009142:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8009144:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009146:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8009148:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800914a:	e841 2300 	strex	r3, r2, [r1]
 800914e:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 8009150:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009152:	2b00      	cmp	r3, #0
 8009154:	d1e4      	bne.n	8009120 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	3308      	adds	r3, #8
 800915c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800915e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009160:	e853 3f00 	ldrex	r3, [r3]
 8009164:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 8009166:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009168:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800916c:	f023 0301 	bic.w	r3, r3, #1
 8009170:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	3308      	adds	r3, #8
 800917a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800917e:	66ba      	str	r2, [r7, #104]	@ 0x68
 8009180:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009182:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8009184:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8009186:	e841 2300 	strex	r3, r2, [r1]
 800918a:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800918c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800918e:	2b00      	cmp	r3, #0
 8009190:	d1e1      	bne.n	8009156 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	2220      	movs	r2, #32
 8009196:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	2200      	movs	r2, #0
 800919e:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	2200      	movs	r2, #0
 80091a4:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	4a60      	ldr	r2, [pc, #384]	@ (800932c <UART_RxISR_8BIT_FIFOEN+0x35c>)
 80091ac:	4293      	cmp	r3, r2
 80091ae:	d021      	beq.n	80091f4 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	685b      	ldr	r3, [r3, #4]
 80091b6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	d01a      	beq.n	80091f4 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091c4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80091c6:	e853 3f00 	ldrex	r3, [r3]
 80091ca:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80091cc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80091ce:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80091d2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	461a      	mov	r2, r3
 80091dc:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80091e0:	657b      	str	r3, [r7, #84]	@ 0x54
 80091e2:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091e4:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80091e6:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80091e8:	e841 2300 	strex	r3, r2, [r1]
 80091ec:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80091ee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d1e4      	bne.n	80091be <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80091f8:	2b01      	cmp	r3, #1
 80091fa:	d130      	bne.n	800925e <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	2200      	movs	r2, #0
 8009200:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009208:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800920a:	e853 3f00 	ldrex	r3, [r3]
 800920e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009210:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009212:	f023 0310 	bic.w	r3, r3, #16
 8009216:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	461a      	mov	r2, r3
 8009220:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009224:	643b      	str	r3, [r7, #64]	@ 0x40
 8009226:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009228:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800922a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800922c:	e841 2300 	strex	r3, r2, [r1]
 8009230:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009232:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009234:	2b00      	cmp	r3, #0
 8009236:	d1e4      	bne.n	8009202 <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	69db      	ldr	r3, [r3, #28]
 800923e:	f003 0310 	and.w	r3, r3, #16
 8009242:	2b10      	cmp	r3, #16
 8009244:	d103      	bne.n	800924e <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	2210      	movs	r2, #16
 800924c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009254:	4619      	mov	r1, r3
 8009256:	6878      	ldr	r0, [r7, #4]
 8009258:	f7fe fafc 	bl	8007854 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 800925c:	e00e      	b.n	800927c <UART_RxISR_8BIT_FIFOEN+0x2ac>
          HAL_UART_RxCpltCallback(huart);
 800925e:	6878      	ldr	r0, [r7, #4]
 8009260:	f7f7 ff06 	bl	8001070 <HAL_UART_RxCpltCallback>
        break;
 8009264:	e00a      	b.n	800927c <UART_RxISR_8BIT_FIFOEN+0x2ac>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009266:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 800926a:	2b00      	cmp	r3, #0
 800926c:	d006      	beq.n	800927c <UART_RxISR_8BIT_FIFOEN+0x2ac>
 800926e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009272:	f003 0320 	and.w	r3, r3, #32
 8009276:	2b00      	cmp	r3, #0
 8009278:	f47f aece 	bne.w	8009018 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009282:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8009286:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800928a:	2b00      	cmp	r3, #0
 800928c:	d049      	beq.n	8009322 <UART_RxISR_8BIT_FIFOEN+0x352>
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8009294:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 8009298:	429a      	cmp	r2, r3
 800929a:	d242      	bcs.n	8009322 <UART_RxISR_8BIT_FIFOEN+0x352>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	3308      	adds	r3, #8
 80092a2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092a4:	6a3b      	ldr	r3, [r7, #32]
 80092a6:	e853 3f00 	ldrex	r3, [r3]
 80092aa:	61fb      	str	r3, [r7, #28]
   return(result);
 80092ac:	69fb      	ldr	r3, [r7, #28]
 80092ae:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80092b2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	3308      	adds	r3, #8
 80092bc:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 80092c0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80092c2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092c4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80092c6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80092c8:	e841 2300 	strex	r3, r2, [r1]
 80092cc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80092ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	d1e3      	bne.n	800929c <UART_RxISR_8BIT_FIFOEN+0x2cc>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	4a16      	ldr	r2, [pc, #88]	@ (8009330 <UART_RxISR_8BIT_FIFOEN+0x360>)
 80092d8:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	e853 3f00 	ldrex	r3, [r3]
 80092e6:	60bb      	str	r3, [r7, #8]
   return(result);
 80092e8:	68bb      	ldr	r3, [r7, #8]
 80092ea:	f043 0320 	orr.w	r3, r3, #32
 80092ee:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	461a      	mov	r2, r3
 80092f8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80092fc:	61bb      	str	r3, [r7, #24]
 80092fe:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009300:	6979      	ldr	r1, [r7, #20]
 8009302:	69ba      	ldr	r2, [r7, #24]
 8009304:	e841 2300 	strex	r3, r2, [r1]
 8009308:	613b      	str	r3, [r7, #16]
   return(result);
 800930a:	693b      	ldr	r3, [r7, #16]
 800930c:	2b00      	cmp	r3, #0
 800930e:	d1e4      	bne.n	80092da <UART_RxISR_8BIT_FIFOEN+0x30a>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009310:	e007      	b.n	8009322 <UART_RxISR_8BIT_FIFOEN+0x352>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	699a      	ldr	r2, [r3, #24]
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	f042 0208 	orr.w	r2, r2, #8
 8009320:	619a      	str	r2, [r3, #24]
}
 8009322:	bf00      	nop
 8009324:	37b0      	adds	r7, #176	@ 0xb0
 8009326:	46bd      	mov	sp, r7
 8009328:	bd80      	pop	{r7, pc}
 800932a:	bf00      	nop
 800932c:	40008000 	.word	0x40008000
 8009330:	08008c61 	.word	0x08008c61

08009334 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009334:	b580      	push	{r7, lr}
 8009336:	b0ae      	sub	sp, #184	@ 0xb8
 8009338:	af00      	add	r7, sp, #0
 800933a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8009342:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	69db      	ldr	r3, [r3, #28]
 800934c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	689b      	ldr	r3, [r3, #8]
 8009360:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800936a:	2b22      	cmp	r3, #34	@ 0x22
 800936c:	f040 8187 	bne.w	800967e <UART_RxISR_16BIT_FIFOEN+0x34a>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8009376:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800937a:	e12a      	b.n	80095d2 <UART_RxISR_16BIT_FIFOEN+0x29e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009382:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800938a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800938e:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 8009392:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 8009396:	4013      	ands	r3, r2
 8009398:	b29a      	uxth	r2, r3
 800939a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800939e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80093a4:	1c9a      	adds	r2, r3, #2
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80093b0:	b29b      	uxth	r3, r3
 80093b2:	3b01      	subs	r3, #1
 80093b4:	b29a      	uxth	r2, r3
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	69db      	ldr	r3, [r3, #28]
 80093c2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80093c6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80093ca:	f003 0307 	and.w	r3, r3, #7
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d053      	beq.n	800947a <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80093d2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80093d6:	f003 0301 	and.w	r3, r3, #1
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d011      	beq.n	8009402 <UART_RxISR_16BIT_FIFOEN+0xce>
 80093de:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80093e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d00b      	beq.n	8009402 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	2201      	movs	r2, #1
 80093f0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80093f8:	f043 0201 	orr.w	r2, r3, #1
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009402:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009406:	f003 0302 	and.w	r3, r3, #2
 800940a:	2b00      	cmp	r3, #0
 800940c:	d011      	beq.n	8009432 <UART_RxISR_16BIT_FIFOEN+0xfe>
 800940e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009412:	f003 0301 	and.w	r3, r3, #1
 8009416:	2b00      	cmp	r3, #0
 8009418:	d00b      	beq.n	8009432 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	2202      	movs	r2, #2
 8009420:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009428:	f043 0204 	orr.w	r2, r3, #4
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009432:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009436:	f003 0304 	and.w	r3, r3, #4
 800943a:	2b00      	cmp	r3, #0
 800943c:	d011      	beq.n	8009462 <UART_RxISR_16BIT_FIFOEN+0x12e>
 800943e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009442:	f003 0301 	and.w	r3, r3, #1
 8009446:	2b00      	cmp	r3, #0
 8009448:	d00b      	beq.n	8009462 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	2204      	movs	r2, #4
 8009450:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009458:	f043 0202 	orr.w	r2, r3, #2
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009468:	2b00      	cmp	r3, #0
 800946a:	d006      	beq.n	800947a <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800946c:	6878      	ldr	r0, [r7, #4]
 800946e:	f7fe f9e7 	bl	8007840 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	2200      	movs	r2, #0
 8009476:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009480:	b29b      	uxth	r3, r3
 8009482:	2b00      	cmp	r3, #0
 8009484:	f040 80a5 	bne.w	80095d2 <UART_RxISR_16BIT_FIFOEN+0x29e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800948e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009490:	e853 3f00 	ldrex	r3, [r3]
 8009494:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8009496:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009498:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800949c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	461a      	mov	r2, r3
 80094a6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80094aa:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80094ae:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094b0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80094b2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80094b6:	e841 2300 	strex	r3, r2, [r1]
 80094ba:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80094bc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d1e2      	bne.n	8009488 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	3308      	adds	r3, #8
 80094c8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094ca:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80094cc:	e853 3f00 	ldrex	r3, [r3]
 80094d0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80094d2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80094d4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80094d8:	f023 0301 	bic.w	r3, r3, #1
 80094dc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	3308      	adds	r3, #8
 80094e6:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 80094ea:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80094ec:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094ee:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80094f0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80094f2:	e841 2300 	strex	r3, r2, [r1]
 80094f6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80094f8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d1e1      	bne.n	80094c2 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	2220      	movs	r2, #32
 8009502:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	2200      	movs	r2, #0
 800950a:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	2200      	movs	r2, #0
 8009510:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	4a60      	ldr	r2, [pc, #384]	@ (8009698 <UART_RxISR_16BIT_FIFOEN+0x364>)
 8009518:	4293      	cmp	r3, r2
 800951a:	d021      	beq.n	8009560 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	685b      	ldr	r3, [r3, #4]
 8009522:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009526:	2b00      	cmp	r3, #0
 8009528:	d01a      	beq.n	8009560 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009530:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009532:	e853 3f00 	ldrex	r3, [r3]
 8009536:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009538:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800953a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800953e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	461a      	mov	r2, r3
 8009548:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800954c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800954e:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009550:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009552:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009554:	e841 2300 	strex	r3, r2, [r1]
 8009558:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800955a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800955c:	2b00      	cmp	r3, #0
 800955e:	d1e4      	bne.n	800952a <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009564:	2b01      	cmp	r3, #1
 8009566:	d130      	bne.n	80095ca <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	2200      	movs	r2, #0
 800956c:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009574:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009576:	e853 3f00 	ldrex	r3, [r3]
 800957a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800957c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800957e:	f023 0310 	bic.w	r3, r3, #16
 8009582:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	461a      	mov	r2, r3
 800958c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8009590:	647b      	str	r3, [r7, #68]	@ 0x44
 8009592:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009594:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009596:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009598:	e841 2300 	strex	r3, r2, [r1]
 800959c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800959e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	d1e4      	bne.n	800956e <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	69db      	ldr	r3, [r3, #28]
 80095aa:	f003 0310 	and.w	r3, r3, #16
 80095ae:	2b10      	cmp	r3, #16
 80095b0:	d103      	bne.n	80095ba <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	2210      	movs	r2, #16
 80095b8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80095c0:	4619      	mov	r1, r3
 80095c2:	6878      	ldr	r0, [r7, #4]
 80095c4:	f7fe f946 	bl	8007854 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 80095c8:	e00e      	b.n	80095e8 <UART_RxISR_16BIT_FIFOEN+0x2b4>
          HAL_UART_RxCpltCallback(huart);
 80095ca:	6878      	ldr	r0, [r7, #4]
 80095cc:	f7f7 fd50 	bl	8001070 <HAL_UART_RxCpltCallback>
        break;
 80095d0:	e00a      	b.n	80095e8 <UART_RxISR_16BIT_FIFOEN+0x2b4>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80095d2:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	d006      	beq.n	80095e8 <UART_RxISR_16BIT_FIFOEN+0x2b4>
 80095da:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80095de:	f003 0320 	and.w	r3, r3, #32
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	f47f aeca 	bne.w	800937c <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80095ee:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80095f2:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	d049      	beq.n	800968e <UART_RxISR_16BIT_FIFOEN+0x35a>
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8009600:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 8009604:	429a      	cmp	r2, r3
 8009606:	d242      	bcs.n	800968e <UART_RxISR_16BIT_FIFOEN+0x35a>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	3308      	adds	r3, #8
 800960e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009610:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009612:	e853 3f00 	ldrex	r3, [r3]
 8009616:	623b      	str	r3, [r7, #32]
   return(result);
 8009618:	6a3b      	ldr	r3, [r7, #32]
 800961a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800961e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	3308      	adds	r3, #8
 8009628:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800962c:	633a      	str	r2, [r7, #48]	@ 0x30
 800962e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009630:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009632:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009634:	e841 2300 	strex	r3, r2, [r1]
 8009638:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800963a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800963c:	2b00      	cmp	r3, #0
 800963e:	d1e3      	bne.n	8009608 <UART_RxISR_16BIT_FIFOEN+0x2d4>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	4a16      	ldr	r2, [pc, #88]	@ (800969c <UART_RxISR_16BIT_FIFOEN+0x368>)
 8009644:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800964c:	693b      	ldr	r3, [r7, #16]
 800964e:	e853 3f00 	ldrex	r3, [r3]
 8009652:	60fb      	str	r3, [r7, #12]
   return(result);
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	f043 0320 	orr.w	r3, r3, #32
 800965a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	461a      	mov	r2, r3
 8009664:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009668:	61fb      	str	r3, [r7, #28]
 800966a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800966c:	69b9      	ldr	r1, [r7, #24]
 800966e:	69fa      	ldr	r2, [r7, #28]
 8009670:	e841 2300 	strex	r3, r2, [r1]
 8009674:	617b      	str	r3, [r7, #20]
   return(result);
 8009676:	697b      	ldr	r3, [r7, #20]
 8009678:	2b00      	cmp	r3, #0
 800967a:	d1e4      	bne.n	8009646 <UART_RxISR_16BIT_FIFOEN+0x312>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800967c:	e007      	b.n	800968e <UART_RxISR_16BIT_FIFOEN+0x35a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	699a      	ldr	r2, [r3, #24]
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	f042 0208 	orr.w	r2, r2, #8
 800968c:	619a      	str	r2, [r3, #24]
}
 800968e:	bf00      	nop
 8009690:	37b8      	adds	r7, #184	@ 0xb8
 8009692:	46bd      	mov	sp, r7
 8009694:	bd80      	pop	{r7, pc}
 8009696:	bf00      	nop
 8009698:	40008000 	.word	0x40008000
 800969c:	08008e19 	.word	0x08008e19

080096a0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80096a0:	b480      	push	{r7}
 80096a2:	b083      	sub	sp, #12
 80096a4:	af00      	add	r7, sp, #0
 80096a6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80096a8:	bf00      	nop
 80096aa:	370c      	adds	r7, #12
 80096ac:	46bd      	mov	sp, r7
 80096ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096b2:	4770      	bx	lr

080096b4 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80096b4:	b480      	push	{r7}
 80096b6:	b083      	sub	sp, #12
 80096b8:	af00      	add	r7, sp, #0
 80096ba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80096bc:	bf00      	nop
 80096be:	370c      	adds	r7, #12
 80096c0:	46bd      	mov	sp, r7
 80096c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096c6:	4770      	bx	lr

080096c8 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80096c8:	b480      	push	{r7}
 80096ca:	b083      	sub	sp, #12
 80096cc:	af00      	add	r7, sp, #0
 80096ce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80096d0:	bf00      	nop
 80096d2:	370c      	adds	r7, #12
 80096d4:	46bd      	mov	sp, r7
 80096d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096da:	4770      	bx	lr

080096dc <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80096dc:	b480      	push	{r7}
 80096de:	b085      	sub	sp, #20
 80096e0:	af00      	add	r7, sp, #0
 80096e2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80096ea:	2b01      	cmp	r3, #1
 80096ec:	d101      	bne.n	80096f2 <HAL_UARTEx_DisableFifoMode+0x16>
 80096ee:	2302      	movs	r3, #2
 80096f0:	e027      	b.n	8009742 <HAL_UARTEx_DisableFifoMode+0x66>
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	2201      	movs	r2, #1
 80096f6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	2224      	movs	r2, #36	@ 0x24
 80096fe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	681a      	ldr	r2, [r3, #0]
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	f022 0201 	bic.w	r2, r2, #1
 8009718:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8009720:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	2200      	movs	r2, #0
 8009726:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	68fa      	ldr	r2, [r7, #12]
 800972e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	2220      	movs	r2, #32
 8009734:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	2200      	movs	r2, #0
 800973c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009740:	2300      	movs	r3, #0
}
 8009742:	4618      	mov	r0, r3
 8009744:	3714      	adds	r7, #20
 8009746:	46bd      	mov	sp, r7
 8009748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800974c:	4770      	bx	lr

0800974e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800974e:	b580      	push	{r7, lr}
 8009750:	b084      	sub	sp, #16
 8009752:	af00      	add	r7, sp, #0
 8009754:	6078      	str	r0, [r7, #4]
 8009756:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800975e:	2b01      	cmp	r3, #1
 8009760:	d101      	bne.n	8009766 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009762:	2302      	movs	r3, #2
 8009764:	e02d      	b.n	80097c2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	2201      	movs	r2, #1
 800976a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	2224      	movs	r2, #36	@ 0x24
 8009772:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	681a      	ldr	r2, [r3, #0]
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	f022 0201 	bic.w	r2, r2, #1
 800978c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	689b      	ldr	r3, [r3, #8]
 8009794:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	683a      	ldr	r2, [r7, #0]
 800979e:	430a      	orrs	r2, r1
 80097a0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80097a2:	6878      	ldr	r0, [r7, #4]
 80097a4:	f000 f850 	bl	8009848 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	68fa      	ldr	r2, [r7, #12]
 80097ae:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	2220      	movs	r2, #32
 80097b4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	2200      	movs	r2, #0
 80097bc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80097c0:	2300      	movs	r3, #0
}
 80097c2:	4618      	mov	r0, r3
 80097c4:	3710      	adds	r7, #16
 80097c6:	46bd      	mov	sp, r7
 80097c8:	bd80      	pop	{r7, pc}

080097ca <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80097ca:	b580      	push	{r7, lr}
 80097cc:	b084      	sub	sp, #16
 80097ce:	af00      	add	r7, sp, #0
 80097d0:	6078      	str	r0, [r7, #4]
 80097d2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80097da:	2b01      	cmp	r3, #1
 80097dc:	d101      	bne.n	80097e2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80097de:	2302      	movs	r3, #2
 80097e0:	e02d      	b.n	800983e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	2201      	movs	r2, #1
 80097e6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	2224      	movs	r2, #36	@ 0x24
 80097ee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	681a      	ldr	r2, [r3, #0]
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	f022 0201 	bic.w	r2, r2, #1
 8009808:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	689b      	ldr	r3, [r3, #8]
 8009810:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	683a      	ldr	r2, [r7, #0]
 800981a:	430a      	orrs	r2, r1
 800981c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800981e:	6878      	ldr	r0, [r7, #4]
 8009820:	f000 f812 	bl	8009848 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	68fa      	ldr	r2, [r7, #12]
 800982a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	2220      	movs	r2, #32
 8009830:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	2200      	movs	r2, #0
 8009838:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800983c:	2300      	movs	r3, #0
}
 800983e:	4618      	mov	r0, r3
 8009840:	3710      	adds	r7, #16
 8009842:	46bd      	mov	sp, r7
 8009844:	bd80      	pop	{r7, pc}
	...

08009848 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009848:	b480      	push	{r7}
 800984a:	b085      	sub	sp, #20
 800984c:	af00      	add	r7, sp, #0
 800984e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009854:	2b00      	cmp	r3, #0
 8009856:	d108      	bne.n	800986a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	2201      	movs	r2, #1
 800985c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	2201      	movs	r2, #1
 8009864:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009868:	e031      	b.n	80098ce <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800986a:	2308      	movs	r3, #8
 800986c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800986e:	2308      	movs	r3, #8
 8009870:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	689b      	ldr	r3, [r3, #8]
 8009878:	0e5b      	lsrs	r3, r3, #25
 800987a:	b2db      	uxtb	r3, r3
 800987c:	f003 0307 	and.w	r3, r3, #7
 8009880:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	689b      	ldr	r3, [r3, #8]
 8009888:	0f5b      	lsrs	r3, r3, #29
 800988a:	b2db      	uxtb	r3, r3
 800988c:	f003 0307 	and.w	r3, r3, #7
 8009890:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009892:	7bbb      	ldrb	r3, [r7, #14]
 8009894:	7b3a      	ldrb	r2, [r7, #12]
 8009896:	4911      	ldr	r1, [pc, #68]	@ (80098dc <UARTEx_SetNbDataToProcess+0x94>)
 8009898:	5c8a      	ldrb	r2, [r1, r2]
 800989a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800989e:	7b3a      	ldrb	r2, [r7, #12]
 80098a0:	490f      	ldr	r1, [pc, #60]	@ (80098e0 <UARTEx_SetNbDataToProcess+0x98>)
 80098a2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80098a4:	fb93 f3f2 	sdiv	r3, r3, r2
 80098a8:	b29a      	uxth	r2, r3
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80098b0:	7bfb      	ldrb	r3, [r7, #15]
 80098b2:	7b7a      	ldrb	r2, [r7, #13]
 80098b4:	4909      	ldr	r1, [pc, #36]	@ (80098dc <UARTEx_SetNbDataToProcess+0x94>)
 80098b6:	5c8a      	ldrb	r2, [r1, r2]
 80098b8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80098bc:	7b7a      	ldrb	r2, [r7, #13]
 80098be:	4908      	ldr	r1, [pc, #32]	@ (80098e0 <UARTEx_SetNbDataToProcess+0x98>)
 80098c0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80098c2:	fb93 f3f2 	sdiv	r3, r3, r2
 80098c6:	b29a      	uxth	r2, r3
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80098ce:	bf00      	nop
 80098d0:	3714      	adds	r7, #20
 80098d2:	46bd      	mov	sp, r7
 80098d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098d8:	4770      	bx	lr
 80098da:	bf00      	nop
 80098dc:	080105a8 	.word	0x080105a8
 80098e0:	080105b0 	.word	0x080105b0

080098e4 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80098e4:	b480      	push	{r7}
 80098e6:	b085      	sub	sp, #20
 80098e8:	af00      	add	r7, sp, #0
 80098ea:	4603      	mov	r3, r0
 80098ec:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80098ee:	2300      	movs	r3, #0
 80098f0:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80098f2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80098f6:	2b84      	cmp	r3, #132	@ 0x84
 80098f8:	d005      	beq.n	8009906 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80098fa:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	4413      	add	r3, r2
 8009902:	3303      	adds	r3, #3
 8009904:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8009906:	68fb      	ldr	r3, [r7, #12]
}
 8009908:	4618      	mov	r0, r3
 800990a:	3714      	adds	r7, #20
 800990c:	46bd      	mov	sp, r7
 800990e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009912:	4770      	bx	lr

08009914 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8009914:	b480      	push	{r7}
 8009916:	b083      	sub	sp, #12
 8009918:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800991a:	f3ef 8305 	mrs	r3, IPSR
 800991e:	607b      	str	r3, [r7, #4]
  return(result);
 8009920:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8009922:	2b00      	cmp	r3, #0
 8009924:	bf14      	ite	ne
 8009926:	2301      	movne	r3, #1
 8009928:	2300      	moveq	r3, #0
 800992a:	b2db      	uxtb	r3, r3
}
 800992c:	4618      	mov	r0, r3
 800992e:	370c      	adds	r7, #12
 8009930:	46bd      	mov	sp, r7
 8009932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009936:	4770      	bx	lr

08009938 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8009938:	b580      	push	{r7, lr}
 800993a:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800993c:	f001 f80a 	bl	800a954 <vTaskStartScheduler>
  
  return osOK;
 8009940:	2300      	movs	r3, #0
}
 8009942:	4618      	mov	r0, r3
 8009944:	bd80      	pop	{r7, pc}

08009946 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8009946:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009948:	b087      	sub	sp, #28
 800994a:	af02      	add	r7, sp, #8
 800994c:	6078      	str	r0, [r7, #4]
 800994e:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	685c      	ldr	r4, [r3, #4]
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800995c:	b29e      	uxth	r6, r3
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009964:	4618      	mov	r0, r3
 8009966:	f7ff ffbd 	bl	80098e4 <makeFreeRtosPriority>
 800996a:	4602      	mov	r2, r0
 800996c:	f107 030c 	add.w	r3, r7, #12
 8009970:	9301      	str	r3, [sp, #4]
 8009972:	9200      	str	r2, [sp, #0]
 8009974:	683b      	ldr	r3, [r7, #0]
 8009976:	4632      	mov	r2, r6
 8009978:	4629      	mov	r1, r5
 800997a:	4620      	mov	r0, r4
 800997c:	f000 fe80 	bl	800a680 <xTaskCreate>
 8009980:	4603      	mov	r3, r0
 8009982:	2b01      	cmp	r3, #1
 8009984:	d001      	beq.n	800998a <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 8009986:	2300      	movs	r3, #0
 8009988:	e000      	b.n	800998c <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 800998a:	68fb      	ldr	r3, [r7, #12]
}
 800998c:	4618      	mov	r0, r3
 800998e:	3714      	adds	r7, #20
 8009990:	46bd      	mov	sp, r7
 8009992:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009994 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8009994:	b580      	push	{r7, lr}
 8009996:	b084      	sub	sp, #16
 8009998:	af00      	add	r7, sp, #0
 800999a:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	d001      	beq.n	80099aa <osDelay+0x16>
 80099a6:	68fb      	ldr	r3, [r7, #12]
 80099a8:	e000      	b.n	80099ac <osDelay+0x18>
 80099aa:	2301      	movs	r3, #1
 80099ac:	4618      	mov	r0, r3
 80099ae:	f000 ff9b 	bl	800a8e8 <vTaskDelay>
  
  return osOK;
 80099b2:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80099b4:	4618      	mov	r0, r3
 80099b6:	3710      	adds	r7, #16
 80099b8:	46bd      	mov	sp, r7
 80099ba:	bd80      	pop	{r7, pc}

080099bc <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 80099bc:	b580      	push	{r7, lr}
 80099be:	b084      	sub	sp, #16
 80099c0:	af00      	add	r7, sp, #0
 80099c2:	6078      	str	r0, [r7, #4]
 80099c4:	6039      	str	r1, [r7, #0]
#endif    
  }
#else  // configSUPPORT_STATIC_ALLOCATION == 0  && configSUPPORT_DYNAMIC_ALLOCATION == 1
  osSemaphoreId sema;
 
  if (count == 1) {
 80099c6:	683b      	ldr	r3, [r7, #0]
 80099c8:	2b01      	cmp	r3, #1
 80099ca:	d110      	bne.n	80099ee <osSemaphoreCreate+0x32>
    vSemaphoreCreateBinary(sema);
 80099cc:	2203      	movs	r2, #3
 80099ce:	2100      	movs	r1, #0
 80099d0:	2001      	movs	r0, #1
 80099d2:	f000 f9b3 	bl	8009d3c <xQueueGenericCreate>
 80099d6:	60f8      	str	r0, [r7, #12]
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d005      	beq.n	80099ea <osSemaphoreCreate+0x2e>
 80099de:	2300      	movs	r3, #0
 80099e0:	2200      	movs	r2, #0
 80099e2:	2100      	movs	r1, #0
 80099e4:	68f8      	ldr	r0, [r7, #12]
 80099e6:	f000 f9ff 	bl	8009de8 <xQueueGenericSend>
    return sema;
 80099ea:	68fb      	ldr	r3, [r7, #12]
 80099ec:	e000      	b.n	80099f0 <osSemaphoreCreate+0x34>
  }
  else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
    return xSemaphoreCreateCounting(count, count);
#else
    return NULL;
 80099ee:	2300      	movs	r3, #0
#endif
  }
#endif
}
 80099f0:	4618      	mov	r0, r3
 80099f2:	3710      	adds	r7, #16
 80099f4:	46bd      	mov	sp, r7
 80099f6:	bd80      	pop	{r7, pc}

080099f8 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 80099f8:	b580      	push	{r7, lr}
 80099fa:	b084      	sub	sp, #16
 80099fc:	af00      	add	r7, sp, #0
 80099fe:	6078      	str	r0, [r7, #4]
 8009a00:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8009a02:	2300      	movs	r3, #0
 8009a04:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	d101      	bne.n	8009a10 <osSemaphoreWait+0x18>
    return osErrorParameter;
 8009a0c:	2380      	movs	r3, #128	@ 0x80
 8009a0e:	e03a      	b.n	8009a86 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8009a10:	2300      	movs	r3, #0
 8009a12:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8009a14:	683b      	ldr	r3, [r7, #0]
 8009a16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a1a:	d103      	bne.n	8009a24 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8009a1c:	f04f 33ff 	mov.w	r3, #4294967295
 8009a20:	60fb      	str	r3, [r7, #12]
 8009a22:	e009      	b.n	8009a38 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8009a24:	683b      	ldr	r3, [r7, #0]
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d006      	beq.n	8009a38 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8009a2a:	683b      	ldr	r3, [r7, #0]
 8009a2c:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8009a2e:	68fb      	ldr	r3, [r7, #12]
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	d101      	bne.n	8009a38 <osSemaphoreWait+0x40>
      ticks = 1;
 8009a34:	2301      	movs	r3, #1
 8009a36:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8009a38:	f7ff ff6c 	bl	8009914 <inHandlerMode>
 8009a3c:	4603      	mov	r3, r0
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	d017      	beq.n	8009a72 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8009a42:	f107 0308 	add.w	r3, r7, #8
 8009a46:	461a      	mov	r2, r3
 8009a48:	2100      	movs	r1, #0
 8009a4a:	6878      	ldr	r0, [r7, #4]
 8009a4c:	f000 fc6e 	bl	800a32c <xQueueReceiveFromISR>
 8009a50:	4603      	mov	r3, r0
 8009a52:	2b01      	cmp	r3, #1
 8009a54:	d001      	beq.n	8009a5a <osSemaphoreWait+0x62>
      return osErrorOS;
 8009a56:	23ff      	movs	r3, #255	@ 0xff
 8009a58:	e015      	b.n	8009a86 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8009a5a:	68bb      	ldr	r3, [r7, #8]
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	d011      	beq.n	8009a84 <osSemaphoreWait+0x8c>
 8009a60:	4b0b      	ldr	r3, [pc, #44]	@ (8009a90 <osSemaphoreWait+0x98>)
 8009a62:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009a66:	601a      	str	r2, [r3, #0]
 8009a68:	f3bf 8f4f 	dsb	sy
 8009a6c:	f3bf 8f6f 	isb	sy
 8009a70:	e008      	b.n	8009a84 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8009a72:	68f9      	ldr	r1, [r7, #12]
 8009a74:	6878      	ldr	r0, [r7, #4]
 8009a76:	f000 fb49 	bl	800a10c <xQueueSemaphoreTake>
 8009a7a:	4603      	mov	r3, r0
 8009a7c:	2b01      	cmp	r3, #1
 8009a7e:	d001      	beq.n	8009a84 <osSemaphoreWait+0x8c>
    return osErrorOS;
 8009a80:	23ff      	movs	r3, #255	@ 0xff
 8009a82:	e000      	b.n	8009a86 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8009a84:	2300      	movs	r3, #0
}
 8009a86:	4618      	mov	r0, r3
 8009a88:	3710      	adds	r7, #16
 8009a8a:	46bd      	mov	sp, r7
 8009a8c:	bd80      	pop	{r7, pc}
 8009a8e:	bf00      	nop
 8009a90:	e000ed04 	.word	0xe000ed04

08009a94 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8009a94:	b580      	push	{r7, lr}
 8009a96:	b084      	sub	sp, #16
 8009a98:	af00      	add	r7, sp, #0
 8009a9a:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8009a9c:	2300      	movs	r3, #0
 8009a9e:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8009aa0:	2300      	movs	r3, #0
 8009aa2:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8009aa4:	f7ff ff36 	bl	8009914 <inHandlerMode>
 8009aa8:	4603      	mov	r3, r0
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d016      	beq.n	8009adc <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8009aae:	f107 0308 	add.w	r3, r7, #8
 8009ab2:	4619      	mov	r1, r3
 8009ab4:	6878      	ldr	r0, [r7, #4]
 8009ab6:	f000 fa99 	bl	8009fec <xQueueGiveFromISR>
 8009aba:	4603      	mov	r3, r0
 8009abc:	2b01      	cmp	r3, #1
 8009abe:	d001      	beq.n	8009ac4 <osSemaphoreRelease+0x30>
      return osErrorOS;
 8009ac0:	23ff      	movs	r3, #255	@ 0xff
 8009ac2:	e017      	b.n	8009af4 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8009ac4:	68bb      	ldr	r3, [r7, #8]
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	d013      	beq.n	8009af2 <osSemaphoreRelease+0x5e>
 8009aca:	4b0c      	ldr	r3, [pc, #48]	@ (8009afc <osSemaphoreRelease+0x68>)
 8009acc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009ad0:	601a      	str	r2, [r3, #0]
 8009ad2:	f3bf 8f4f 	dsb	sy
 8009ad6:	f3bf 8f6f 	isb	sy
 8009ada:	e00a      	b.n	8009af2 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8009adc:	2300      	movs	r3, #0
 8009ade:	2200      	movs	r2, #0
 8009ae0:	2100      	movs	r1, #0
 8009ae2:	6878      	ldr	r0, [r7, #4]
 8009ae4:	f000 f980 	bl	8009de8 <xQueueGenericSend>
 8009ae8:	4603      	mov	r3, r0
 8009aea:	2b01      	cmp	r3, #1
 8009aec:	d001      	beq.n	8009af2 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 8009aee:	23ff      	movs	r3, #255	@ 0xff
 8009af0:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8009af2:	68fb      	ldr	r3, [r7, #12]
}
 8009af4:	4618      	mov	r0, r3
 8009af6:	3710      	adds	r7, #16
 8009af8:	46bd      	mov	sp, r7
 8009afa:	bd80      	pop	{r7, pc}
 8009afc:	e000ed04 	.word	0xe000ed04

08009b00 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009b00:	b480      	push	{r7}
 8009b02:	b083      	sub	sp, #12
 8009b04:	af00      	add	r7, sp, #0
 8009b06:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	f103 0208 	add.w	r2, r3, #8
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	f04f 32ff 	mov.w	r2, #4294967295
 8009b18:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	f103 0208 	add.w	r2, r3, #8
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	f103 0208 	add.w	r2, r3, #8
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	2200      	movs	r2, #0
 8009b32:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009b34:	bf00      	nop
 8009b36:	370c      	adds	r7, #12
 8009b38:	46bd      	mov	sp, r7
 8009b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b3e:	4770      	bx	lr

08009b40 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009b40:	b480      	push	{r7}
 8009b42:	b083      	sub	sp, #12
 8009b44:	af00      	add	r7, sp, #0
 8009b46:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	2200      	movs	r2, #0
 8009b4c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009b4e:	bf00      	nop
 8009b50:	370c      	adds	r7, #12
 8009b52:	46bd      	mov	sp, r7
 8009b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b58:	4770      	bx	lr

08009b5a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009b5a:	b480      	push	{r7}
 8009b5c:	b085      	sub	sp, #20
 8009b5e:	af00      	add	r7, sp, #0
 8009b60:	6078      	str	r0, [r7, #4]
 8009b62:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	685b      	ldr	r3, [r3, #4]
 8009b68:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009b6a:	683b      	ldr	r3, [r7, #0]
 8009b6c:	68fa      	ldr	r2, [r7, #12]
 8009b6e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009b70:	68fb      	ldr	r3, [r7, #12]
 8009b72:	689a      	ldr	r2, [r3, #8]
 8009b74:	683b      	ldr	r3, [r7, #0]
 8009b76:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	689b      	ldr	r3, [r3, #8]
 8009b7c:	683a      	ldr	r2, [r7, #0]
 8009b7e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009b80:	68fb      	ldr	r3, [r7, #12]
 8009b82:	683a      	ldr	r2, [r7, #0]
 8009b84:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009b86:	683b      	ldr	r3, [r7, #0]
 8009b88:	687a      	ldr	r2, [r7, #4]
 8009b8a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	1c5a      	adds	r2, r3, #1
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	601a      	str	r2, [r3, #0]
}
 8009b96:	bf00      	nop
 8009b98:	3714      	adds	r7, #20
 8009b9a:	46bd      	mov	sp, r7
 8009b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ba0:	4770      	bx	lr

08009ba2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009ba2:	b480      	push	{r7}
 8009ba4:	b085      	sub	sp, #20
 8009ba6:	af00      	add	r7, sp, #0
 8009ba8:	6078      	str	r0, [r7, #4]
 8009baa:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009bac:	683b      	ldr	r3, [r7, #0]
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009bb2:	68bb      	ldr	r3, [r7, #8]
 8009bb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009bb8:	d103      	bne.n	8009bc2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	691b      	ldr	r3, [r3, #16]
 8009bbe:	60fb      	str	r3, [r7, #12]
 8009bc0:	e00c      	b.n	8009bdc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	3308      	adds	r3, #8
 8009bc6:	60fb      	str	r3, [r7, #12]
 8009bc8:	e002      	b.n	8009bd0 <vListInsert+0x2e>
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	685b      	ldr	r3, [r3, #4]
 8009bce:	60fb      	str	r3, [r7, #12]
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	685b      	ldr	r3, [r3, #4]
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	68ba      	ldr	r2, [r7, #8]
 8009bd8:	429a      	cmp	r2, r3
 8009bda:	d2f6      	bcs.n	8009bca <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009bdc:	68fb      	ldr	r3, [r7, #12]
 8009bde:	685a      	ldr	r2, [r3, #4]
 8009be0:	683b      	ldr	r3, [r7, #0]
 8009be2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009be4:	683b      	ldr	r3, [r7, #0]
 8009be6:	685b      	ldr	r3, [r3, #4]
 8009be8:	683a      	ldr	r2, [r7, #0]
 8009bea:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009bec:	683b      	ldr	r3, [r7, #0]
 8009bee:	68fa      	ldr	r2, [r7, #12]
 8009bf0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	683a      	ldr	r2, [r7, #0]
 8009bf6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009bf8:	683b      	ldr	r3, [r7, #0]
 8009bfa:	687a      	ldr	r2, [r7, #4]
 8009bfc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	1c5a      	adds	r2, r3, #1
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	601a      	str	r2, [r3, #0]
}
 8009c08:	bf00      	nop
 8009c0a:	3714      	adds	r7, #20
 8009c0c:	46bd      	mov	sp, r7
 8009c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c12:	4770      	bx	lr

08009c14 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009c14:	b480      	push	{r7}
 8009c16:	b085      	sub	sp, #20
 8009c18:	af00      	add	r7, sp, #0
 8009c1a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	691b      	ldr	r3, [r3, #16]
 8009c20:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	685b      	ldr	r3, [r3, #4]
 8009c26:	687a      	ldr	r2, [r7, #4]
 8009c28:	6892      	ldr	r2, [r2, #8]
 8009c2a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	689b      	ldr	r3, [r3, #8]
 8009c30:	687a      	ldr	r2, [r7, #4]
 8009c32:	6852      	ldr	r2, [r2, #4]
 8009c34:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009c36:	68fb      	ldr	r3, [r7, #12]
 8009c38:	685b      	ldr	r3, [r3, #4]
 8009c3a:	687a      	ldr	r2, [r7, #4]
 8009c3c:	429a      	cmp	r2, r3
 8009c3e:	d103      	bne.n	8009c48 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	689a      	ldr	r2, [r3, #8]
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	2200      	movs	r2, #0
 8009c4c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009c4e:	68fb      	ldr	r3, [r7, #12]
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	1e5a      	subs	r2, r3, #1
 8009c54:	68fb      	ldr	r3, [r7, #12]
 8009c56:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009c58:	68fb      	ldr	r3, [r7, #12]
 8009c5a:	681b      	ldr	r3, [r3, #0]
}
 8009c5c:	4618      	mov	r0, r3
 8009c5e:	3714      	adds	r7, #20
 8009c60:	46bd      	mov	sp, r7
 8009c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c66:	4770      	bx	lr

08009c68 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009c68:	b580      	push	{r7, lr}
 8009c6a:	b084      	sub	sp, #16
 8009c6c:	af00      	add	r7, sp, #0
 8009c6e:	6078      	str	r0, [r7, #4]
 8009c70:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009c76:	68fb      	ldr	r3, [r7, #12]
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d10b      	bne.n	8009c94 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009c7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c80:	f383 8811 	msr	BASEPRI, r3
 8009c84:	f3bf 8f6f 	isb	sy
 8009c88:	f3bf 8f4f 	dsb	sy
 8009c8c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8009c8e:	bf00      	nop
 8009c90:	bf00      	nop
 8009c92:	e7fd      	b.n	8009c90 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8009c94:	f001 fd88 	bl	800b7a8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	681a      	ldr	r2, [r3, #0]
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009ca0:	68f9      	ldr	r1, [r7, #12]
 8009ca2:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8009ca4:	fb01 f303 	mul.w	r3, r1, r3
 8009ca8:	441a      	add	r2, r3
 8009caa:	68fb      	ldr	r3, [r7, #12]
 8009cac:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009cae:	68fb      	ldr	r3, [r7, #12]
 8009cb0:	2200      	movs	r2, #0
 8009cb2:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009cb4:	68fb      	ldr	r3, [r7, #12]
 8009cb6:	681a      	ldr	r2, [r3, #0]
 8009cb8:	68fb      	ldr	r3, [r7, #12]
 8009cba:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009cbc:	68fb      	ldr	r3, [r7, #12]
 8009cbe:	681a      	ldr	r2, [r3, #0]
 8009cc0:	68fb      	ldr	r3, [r7, #12]
 8009cc2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009cc4:	3b01      	subs	r3, #1
 8009cc6:	68f9      	ldr	r1, [r7, #12]
 8009cc8:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8009cca:	fb01 f303 	mul.w	r3, r1, r3
 8009cce:	441a      	add	r2, r3
 8009cd0:	68fb      	ldr	r3, [r7, #12]
 8009cd2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009cd4:	68fb      	ldr	r3, [r7, #12]
 8009cd6:	22ff      	movs	r2, #255	@ 0xff
 8009cd8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	22ff      	movs	r2, #255	@ 0xff
 8009ce0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8009ce4:	683b      	ldr	r3, [r7, #0]
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	d114      	bne.n	8009d14 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009cea:	68fb      	ldr	r3, [r7, #12]
 8009cec:	691b      	ldr	r3, [r3, #16]
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	d01a      	beq.n	8009d28 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009cf2:	68fb      	ldr	r3, [r7, #12]
 8009cf4:	3310      	adds	r3, #16
 8009cf6:	4618      	mov	r0, r3
 8009cf8:	f001 f85e 	bl	800adb8 <xTaskRemoveFromEventList>
 8009cfc:	4603      	mov	r3, r0
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d012      	beq.n	8009d28 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8009d02:	4b0d      	ldr	r3, [pc, #52]	@ (8009d38 <xQueueGenericReset+0xd0>)
 8009d04:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009d08:	601a      	str	r2, [r3, #0]
 8009d0a:	f3bf 8f4f 	dsb	sy
 8009d0e:	f3bf 8f6f 	isb	sy
 8009d12:	e009      	b.n	8009d28 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	3310      	adds	r3, #16
 8009d18:	4618      	mov	r0, r3
 8009d1a:	f7ff fef1 	bl	8009b00 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8009d1e:	68fb      	ldr	r3, [r7, #12]
 8009d20:	3324      	adds	r3, #36	@ 0x24
 8009d22:	4618      	mov	r0, r3
 8009d24:	f7ff feec 	bl	8009b00 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8009d28:	f001 fd70 	bl	800b80c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8009d2c:	2301      	movs	r3, #1
}
 8009d2e:	4618      	mov	r0, r3
 8009d30:	3710      	adds	r7, #16
 8009d32:	46bd      	mov	sp, r7
 8009d34:	bd80      	pop	{r7, pc}
 8009d36:	bf00      	nop
 8009d38:	e000ed04 	.word	0xe000ed04

08009d3c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8009d3c:	b580      	push	{r7, lr}
 8009d3e:	b08a      	sub	sp, #40	@ 0x28
 8009d40:	af02      	add	r7, sp, #8
 8009d42:	60f8      	str	r0, [r7, #12]
 8009d44:	60b9      	str	r1, [r7, #8]
 8009d46:	4613      	mov	r3, r2
 8009d48:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009d4a:	68fb      	ldr	r3, [r7, #12]
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	d10b      	bne.n	8009d68 <xQueueGenericCreate+0x2c>
	__asm volatile
 8009d50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d54:	f383 8811 	msr	BASEPRI, r3
 8009d58:	f3bf 8f6f 	isb	sy
 8009d5c:	f3bf 8f4f 	dsb	sy
 8009d60:	613b      	str	r3, [r7, #16]
}
 8009d62:	bf00      	nop
 8009d64:	bf00      	nop
 8009d66:	e7fd      	b.n	8009d64 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	68ba      	ldr	r2, [r7, #8]
 8009d6c:	fb02 f303 	mul.w	r3, r2, r3
 8009d70:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8009d72:	69fb      	ldr	r3, [r7, #28]
 8009d74:	3348      	adds	r3, #72	@ 0x48
 8009d76:	4618      	mov	r0, r3
 8009d78:	f001 fe38 	bl	800b9ec <pvPortMalloc>
 8009d7c:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8009d7e:	69bb      	ldr	r3, [r7, #24]
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	d00d      	beq.n	8009da0 <xQueueGenericCreate+0x64>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8009d84:	69bb      	ldr	r3, [r7, #24]
 8009d86:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009d88:	697b      	ldr	r3, [r7, #20]
 8009d8a:	3348      	adds	r3, #72	@ 0x48
 8009d8c:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009d8e:	79fa      	ldrb	r2, [r7, #7]
 8009d90:	69bb      	ldr	r3, [r7, #24]
 8009d92:	9300      	str	r3, [sp, #0]
 8009d94:	4613      	mov	r3, r2
 8009d96:	697a      	ldr	r2, [r7, #20]
 8009d98:	68b9      	ldr	r1, [r7, #8]
 8009d9a:	68f8      	ldr	r0, [r7, #12]
 8009d9c:	f000 f805 	bl	8009daa <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009da0:	69bb      	ldr	r3, [r7, #24]
	}
 8009da2:	4618      	mov	r0, r3
 8009da4:	3720      	adds	r7, #32
 8009da6:	46bd      	mov	sp, r7
 8009da8:	bd80      	pop	{r7, pc}

08009daa <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8009daa:	b580      	push	{r7, lr}
 8009dac:	b084      	sub	sp, #16
 8009dae:	af00      	add	r7, sp, #0
 8009db0:	60f8      	str	r0, [r7, #12]
 8009db2:	60b9      	str	r1, [r7, #8]
 8009db4:	607a      	str	r2, [r7, #4]
 8009db6:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8009db8:	68bb      	ldr	r3, [r7, #8]
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	d103      	bne.n	8009dc6 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009dbe:	69bb      	ldr	r3, [r7, #24]
 8009dc0:	69ba      	ldr	r2, [r7, #24]
 8009dc2:	601a      	str	r2, [r3, #0]
 8009dc4:	e002      	b.n	8009dcc <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8009dc6:	69bb      	ldr	r3, [r7, #24]
 8009dc8:	687a      	ldr	r2, [r7, #4]
 8009dca:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8009dcc:	69bb      	ldr	r3, [r7, #24]
 8009dce:	68fa      	ldr	r2, [r7, #12]
 8009dd0:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8009dd2:	69bb      	ldr	r3, [r7, #24]
 8009dd4:	68ba      	ldr	r2, [r7, #8]
 8009dd6:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8009dd8:	2101      	movs	r1, #1
 8009dda:	69b8      	ldr	r0, [r7, #24]
 8009ddc:	f7ff ff44 	bl	8009c68 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8009de0:	bf00      	nop
 8009de2:	3710      	adds	r7, #16
 8009de4:	46bd      	mov	sp, r7
 8009de6:	bd80      	pop	{r7, pc}

08009de8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8009de8:	b580      	push	{r7, lr}
 8009dea:	b08e      	sub	sp, #56	@ 0x38
 8009dec:	af00      	add	r7, sp, #0
 8009dee:	60f8      	str	r0, [r7, #12]
 8009df0:	60b9      	str	r1, [r7, #8]
 8009df2:	607a      	str	r2, [r7, #4]
 8009df4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8009df6:	2300      	movs	r3, #0
 8009df8:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009dfa:	68fb      	ldr	r3, [r7, #12]
 8009dfc:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8009dfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	d10b      	bne.n	8009e1c <xQueueGenericSend+0x34>
	__asm volatile
 8009e04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e08:	f383 8811 	msr	BASEPRI, r3
 8009e0c:	f3bf 8f6f 	isb	sy
 8009e10:	f3bf 8f4f 	dsb	sy
 8009e14:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8009e16:	bf00      	nop
 8009e18:	bf00      	nop
 8009e1a:	e7fd      	b.n	8009e18 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009e1c:	68bb      	ldr	r3, [r7, #8]
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	d103      	bne.n	8009e2a <xQueueGenericSend+0x42>
 8009e22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d101      	bne.n	8009e2e <xQueueGenericSend+0x46>
 8009e2a:	2301      	movs	r3, #1
 8009e2c:	e000      	b.n	8009e30 <xQueueGenericSend+0x48>
 8009e2e:	2300      	movs	r3, #0
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	d10b      	bne.n	8009e4c <xQueueGenericSend+0x64>
	__asm volatile
 8009e34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e38:	f383 8811 	msr	BASEPRI, r3
 8009e3c:	f3bf 8f6f 	isb	sy
 8009e40:	f3bf 8f4f 	dsb	sy
 8009e44:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8009e46:	bf00      	nop
 8009e48:	bf00      	nop
 8009e4a:	e7fd      	b.n	8009e48 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009e4c:	683b      	ldr	r3, [r7, #0]
 8009e4e:	2b02      	cmp	r3, #2
 8009e50:	d103      	bne.n	8009e5a <xQueueGenericSend+0x72>
 8009e52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e54:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009e56:	2b01      	cmp	r3, #1
 8009e58:	d101      	bne.n	8009e5e <xQueueGenericSend+0x76>
 8009e5a:	2301      	movs	r3, #1
 8009e5c:	e000      	b.n	8009e60 <xQueueGenericSend+0x78>
 8009e5e:	2300      	movs	r3, #0
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	d10b      	bne.n	8009e7c <xQueueGenericSend+0x94>
	__asm volatile
 8009e64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e68:	f383 8811 	msr	BASEPRI, r3
 8009e6c:	f3bf 8f6f 	isb	sy
 8009e70:	f3bf 8f4f 	dsb	sy
 8009e74:	623b      	str	r3, [r7, #32]
}
 8009e76:	bf00      	nop
 8009e78:	bf00      	nop
 8009e7a:	e7fd      	b.n	8009e78 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009e7c:	f001 f93c 	bl	800b0f8 <xTaskGetSchedulerState>
 8009e80:	4603      	mov	r3, r0
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	d102      	bne.n	8009e8c <xQueueGenericSend+0xa4>
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	d101      	bne.n	8009e90 <xQueueGenericSend+0xa8>
 8009e8c:	2301      	movs	r3, #1
 8009e8e:	e000      	b.n	8009e92 <xQueueGenericSend+0xaa>
 8009e90:	2300      	movs	r3, #0
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d10b      	bne.n	8009eae <xQueueGenericSend+0xc6>
	__asm volatile
 8009e96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e9a:	f383 8811 	msr	BASEPRI, r3
 8009e9e:	f3bf 8f6f 	isb	sy
 8009ea2:	f3bf 8f4f 	dsb	sy
 8009ea6:	61fb      	str	r3, [r7, #28]
}
 8009ea8:	bf00      	nop
 8009eaa:	bf00      	nop
 8009eac:	e7fd      	b.n	8009eaa <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009eae:	f001 fc7b 	bl	800b7a8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009eb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009eb4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009eb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009eb8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009eba:	429a      	cmp	r2, r3
 8009ebc:	d302      	bcc.n	8009ec4 <xQueueGenericSend+0xdc>
 8009ebe:	683b      	ldr	r3, [r7, #0]
 8009ec0:	2b02      	cmp	r3, #2
 8009ec2:	d129      	bne.n	8009f18 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009ec4:	683a      	ldr	r2, [r7, #0]
 8009ec6:	68b9      	ldr	r1, [r7, #8]
 8009ec8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009eca:	f000 fac9 	bl	800a460 <prvCopyDataToQueue>
 8009ece:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009ed0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ed2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	d010      	beq.n	8009efa <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009ed8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009eda:	3324      	adds	r3, #36	@ 0x24
 8009edc:	4618      	mov	r0, r3
 8009ede:	f000 ff6b 	bl	800adb8 <xTaskRemoveFromEventList>
 8009ee2:	4603      	mov	r3, r0
 8009ee4:	2b00      	cmp	r3, #0
 8009ee6:	d013      	beq.n	8009f10 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8009ee8:	4b3f      	ldr	r3, [pc, #252]	@ (8009fe8 <xQueueGenericSend+0x200>)
 8009eea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009eee:	601a      	str	r2, [r3, #0]
 8009ef0:	f3bf 8f4f 	dsb	sy
 8009ef4:	f3bf 8f6f 	isb	sy
 8009ef8:	e00a      	b.n	8009f10 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8009efa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	d007      	beq.n	8009f10 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8009f00:	4b39      	ldr	r3, [pc, #228]	@ (8009fe8 <xQueueGenericSend+0x200>)
 8009f02:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009f06:	601a      	str	r2, [r3, #0]
 8009f08:	f3bf 8f4f 	dsb	sy
 8009f0c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8009f10:	f001 fc7c 	bl	800b80c <vPortExitCritical>
				return pdPASS;
 8009f14:	2301      	movs	r3, #1
 8009f16:	e063      	b.n	8009fe0 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	d103      	bne.n	8009f26 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009f1e:	f001 fc75 	bl	800b80c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8009f22:	2300      	movs	r3, #0
 8009f24:	e05c      	b.n	8009fe0 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009f26:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	d106      	bne.n	8009f3a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009f2c:	f107 0314 	add.w	r3, r7, #20
 8009f30:	4618      	mov	r0, r3
 8009f32:	f000 ffa5 	bl	800ae80 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009f36:	2301      	movs	r3, #1
 8009f38:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009f3a:	f001 fc67 	bl	800b80c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009f3e:	f000 fd53 	bl	800a9e8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009f42:	f001 fc31 	bl	800b7a8 <vPortEnterCritical>
 8009f46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f48:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009f4c:	b25b      	sxtb	r3, r3
 8009f4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f52:	d103      	bne.n	8009f5c <xQueueGenericSend+0x174>
 8009f54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f56:	2200      	movs	r2, #0
 8009f58:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009f5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f5e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009f62:	b25b      	sxtb	r3, r3
 8009f64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f68:	d103      	bne.n	8009f72 <xQueueGenericSend+0x18a>
 8009f6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f6c:	2200      	movs	r2, #0
 8009f6e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009f72:	f001 fc4b 	bl	800b80c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009f76:	1d3a      	adds	r2, r7, #4
 8009f78:	f107 0314 	add.w	r3, r7, #20
 8009f7c:	4611      	mov	r1, r2
 8009f7e:	4618      	mov	r0, r3
 8009f80:	f000 ff94 	bl	800aeac <xTaskCheckForTimeOut>
 8009f84:	4603      	mov	r3, r0
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	d124      	bne.n	8009fd4 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8009f8a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009f8c:	f000 fb60 	bl	800a650 <prvIsQueueFull>
 8009f90:	4603      	mov	r3, r0
 8009f92:	2b00      	cmp	r3, #0
 8009f94:	d018      	beq.n	8009fc8 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8009f96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f98:	3310      	adds	r3, #16
 8009f9a:	687a      	ldr	r2, [r7, #4]
 8009f9c:	4611      	mov	r1, r2
 8009f9e:	4618      	mov	r0, r3
 8009fa0:	f000 fee4 	bl	800ad6c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8009fa4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009fa6:	f000 faeb 	bl	800a580 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8009faa:	f000 fd2b 	bl	800aa04 <xTaskResumeAll>
 8009fae:	4603      	mov	r3, r0
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	f47f af7c 	bne.w	8009eae <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8009fb6:	4b0c      	ldr	r3, [pc, #48]	@ (8009fe8 <xQueueGenericSend+0x200>)
 8009fb8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009fbc:	601a      	str	r2, [r3, #0]
 8009fbe:	f3bf 8f4f 	dsb	sy
 8009fc2:	f3bf 8f6f 	isb	sy
 8009fc6:	e772      	b.n	8009eae <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8009fc8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009fca:	f000 fad9 	bl	800a580 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009fce:	f000 fd19 	bl	800aa04 <xTaskResumeAll>
 8009fd2:	e76c      	b.n	8009eae <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8009fd4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009fd6:	f000 fad3 	bl	800a580 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009fda:	f000 fd13 	bl	800aa04 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8009fde:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8009fe0:	4618      	mov	r0, r3
 8009fe2:	3738      	adds	r7, #56	@ 0x38
 8009fe4:	46bd      	mov	sp, r7
 8009fe6:	bd80      	pop	{r7, pc}
 8009fe8:	e000ed04 	.word	0xe000ed04

08009fec <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8009fec:	b580      	push	{r7, lr}
 8009fee:	b08e      	sub	sp, #56	@ 0x38
 8009ff0:	af00      	add	r7, sp, #0
 8009ff2:	6078      	str	r0, [r7, #4]
 8009ff4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8009ffa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ffc:	2b00      	cmp	r3, #0
 8009ffe:	d10b      	bne.n	800a018 <xQueueGiveFromISR+0x2c>
	__asm volatile
 800a000:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a004:	f383 8811 	msr	BASEPRI, r3
 800a008:	f3bf 8f6f 	isb	sy
 800a00c:	f3bf 8f4f 	dsb	sy
 800a010:	623b      	str	r3, [r7, #32]
}
 800a012:	bf00      	nop
 800a014:	bf00      	nop
 800a016:	e7fd      	b.n	800a014 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800a018:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a01a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	d00b      	beq.n	800a038 <xQueueGiveFromISR+0x4c>
	__asm volatile
 800a020:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a024:	f383 8811 	msr	BASEPRI, r3
 800a028:	f3bf 8f6f 	isb	sy
 800a02c:	f3bf 8f4f 	dsb	sy
 800a030:	61fb      	str	r3, [r7, #28]
}
 800a032:	bf00      	nop
 800a034:	bf00      	nop
 800a036:	e7fd      	b.n	800a034 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800a038:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	2b00      	cmp	r3, #0
 800a03e:	d103      	bne.n	800a048 <xQueueGiveFromISR+0x5c>
 800a040:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a042:	689b      	ldr	r3, [r3, #8]
 800a044:	2b00      	cmp	r3, #0
 800a046:	d101      	bne.n	800a04c <xQueueGiveFromISR+0x60>
 800a048:	2301      	movs	r3, #1
 800a04a:	e000      	b.n	800a04e <xQueueGiveFromISR+0x62>
 800a04c:	2300      	movs	r3, #0
 800a04e:	2b00      	cmp	r3, #0
 800a050:	d10b      	bne.n	800a06a <xQueueGiveFromISR+0x7e>
	__asm volatile
 800a052:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a056:	f383 8811 	msr	BASEPRI, r3
 800a05a:	f3bf 8f6f 	isb	sy
 800a05e:	f3bf 8f4f 	dsb	sy
 800a062:	61bb      	str	r3, [r7, #24]
}
 800a064:	bf00      	nop
 800a066:	bf00      	nop
 800a068:	e7fd      	b.n	800a066 <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a06a:	f001 fc7d 	bl	800b968 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800a06e:	f3ef 8211 	mrs	r2, BASEPRI
 800a072:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a076:	f383 8811 	msr	BASEPRI, r3
 800a07a:	f3bf 8f6f 	isb	sy
 800a07e:	f3bf 8f4f 	dsb	sy
 800a082:	617a      	str	r2, [r7, #20]
 800a084:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800a086:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a088:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a08a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a08c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a08e:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800a090:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a092:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a094:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a096:	429a      	cmp	r2, r3
 800a098:	d22b      	bcs.n	800a0f2 <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a09a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a09c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a0a0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a0a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a0a6:	1c5a      	adds	r2, r3, #1
 800a0a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a0aa:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a0ac:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800a0b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a0b4:	d112      	bne.n	800a0dc <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a0b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a0b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	d016      	beq.n	800a0ec <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a0be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a0c0:	3324      	adds	r3, #36	@ 0x24
 800a0c2:	4618      	mov	r0, r3
 800a0c4:	f000 fe78 	bl	800adb8 <xTaskRemoveFromEventList>
 800a0c8:	4603      	mov	r3, r0
 800a0ca:	2b00      	cmp	r3, #0
 800a0cc:	d00e      	beq.n	800a0ec <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a0ce:	683b      	ldr	r3, [r7, #0]
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	d00b      	beq.n	800a0ec <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a0d4:	683b      	ldr	r3, [r7, #0]
 800a0d6:	2201      	movs	r2, #1
 800a0d8:	601a      	str	r2, [r3, #0]
 800a0da:	e007      	b.n	800a0ec <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a0dc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a0e0:	3301      	adds	r3, #1
 800a0e2:	b2db      	uxtb	r3, r3
 800a0e4:	b25a      	sxtb	r2, r3
 800a0e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a0e8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800a0ec:	2301      	movs	r3, #1
 800a0ee:	637b      	str	r3, [r7, #52]	@ 0x34
 800a0f0:	e001      	b.n	800a0f6 <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a0f2:	2300      	movs	r3, #0
 800a0f4:	637b      	str	r3, [r7, #52]	@ 0x34
 800a0f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a0f8:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a0fa:	68fb      	ldr	r3, [r7, #12]
 800a0fc:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800a100:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a102:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800a104:	4618      	mov	r0, r3
 800a106:	3738      	adds	r7, #56	@ 0x38
 800a108:	46bd      	mov	sp, r7
 800a10a:	bd80      	pop	{r7, pc}

0800a10c <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800a10c:	b580      	push	{r7, lr}
 800a10e:	b08e      	sub	sp, #56	@ 0x38
 800a110:	af00      	add	r7, sp, #0
 800a112:	6078      	str	r0, [r7, #4]
 800a114:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800a116:	2300      	movs	r3, #0
 800a118:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800a11e:	2300      	movs	r3, #0
 800a120:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a122:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a124:	2b00      	cmp	r3, #0
 800a126:	d10b      	bne.n	800a140 <xQueueSemaphoreTake+0x34>
	__asm volatile
 800a128:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a12c:	f383 8811 	msr	BASEPRI, r3
 800a130:	f3bf 8f6f 	isb	sy
 800a134:	f3bf 8f4f 	dsb	sy
 800a138:	623b      	str	r3, [r7, #32]
}
 800a13a:	bf00      	nop
 800a13c:	bf00      	nop
 800a13e:	e7fd      	b.n	800a13c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800a140:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a142:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a144:	2b00      	cmp	r3, #0
 800a146:	d00b      	beq.n	800a160 <xQueueSemaphoreTake+0x54>
	__asm volatile
 800a148:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a14c:	f383 8811 	msr	BASEPRI, r3
 800a150:	f3bf 8f6f 	isb	sy
 800a154:	f3bf 8f4f 	dsb	sy
 800a158:	61fb      	str	r3, [r7, #28]
}
 800a15a:	bf00      	nop
 800a15c:	bf00      	nop
 800a15e:	e7fd      	b.n	800a15c <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a160:	f000 ffca 	bl	800b0f8 <xTaskGetSchedulerState>
 800a164:	4603      	mov	r3, r0
 800a166:	2b00      	cmp	r3, #0
 800a168:	d102      	bne.n	800a170 <xQueueSemaphoreTake+0x64>
 800a16a:	683b      	ldr	r3, [r7, #0]
 800a16c:	2b00      	cmp	r3, #0
 800a16e:	d101      	bne.n	800a174 <xQueueSemaphoreTake+0x68>
 800a170:	2301      	movs	r3, #1
 800a172:	e000      	b.n	800a176 <xQueueSemaphoreTake+0x6a>
 800a174:	2300      	movs	r3, #0
 800a176:	2b00      	cmp	r3, #0
 800a178:	d10b      	bne.n	800a192 <xQueueSemaphoreTake+0x86>
	__asm volatile
 800a17a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a17e:	f383 8811 	msr	BASEPRI, r3
 800a182:	f3bf 8f6f 	isb	sy
 800a186:	f3bf 8f4f 	dsb	sy
 800a18a:	61bb      	str	r3, [r7, #24]
}
 800a18c:	bf00      	nop
 800a18e:	bf00      	nop
 800a190:	e7fd      	b.n	800a18e <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a192:	f001 fb09 	bl	800b7a8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800a196:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a198:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a19a:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800a19c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	d024      	beq.n	800a1ec <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800a1a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a1a4:	1e5a      	subs	r2, r3, #1
 800a1a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a1a8:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a1aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a1ac:	681b      	ldr	r3, [r3, #0]
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d104      	bne.n	800a1bc <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800a1b2:	f001 f94d 	bl	800b450 <pvTaskIncrementMutexHeldCount>
 800a1b6:	4602      	mov	r2, r0
 800a1b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a1ba:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a1bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a1be:	691b      	ldr	r3, [r3, #16]
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	d00f      	beq.n	800a1e4 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a1c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a1c6:	3310      	adds	r3, #16
 800a1c8:	4618      	mov	r0, r3
 800a1ca:	f000 fdf5 	bl	800adb8 <xTaskRemoveFromEventList>
 800a1ce:	4603      	mov	r3, r0
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	d007      	beq.n	800a1e4 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a1d4:	4b54      	ldr	r3, [pc, #336]	@ (800a328 <xQueueSemaphoreTake+0x21c>)
 800a1d6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a1da:	601a      	str	r2, [r3, #0]
 800a1dc:	f3bf 8f4f 	dsb	sy
 800a1e0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a1e4:	f001 fb12 	bl	800b80c <vPortExitCritical>
				return pdPASS;
 800a1e8:	2301      	movs	r3, #1
 800a1ea:	e098      	b.n	800a31e <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a1ec:	683b      	ldr	r3, [r7, #0]
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	d112      	bne.n	800a218 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800a1f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1f4:	2b00      	cmp	r3, #0
 800a1f6:	d00b      	beq.n	800a210 <xQueueSemaphoreTake+0x104>
	__asm volatile
 800a1f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a1fc:	f383 8811 	msr	BASEPRI, r3
 800a200:	f3bf 8f6f 	isb	sy
 800a204:	f3bf 8f4f 	dsb	sy
 800a208:	617b      	str	r3, [r7, #20]
}
 800a20a:	bf00      	nop
 800a20c:	bf00      	nop
 800a20e:	e7fd      	b.n	800a20c <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800a210:	f001 fafc 	bl	800b80c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a214:	2300      	movs	r3, #0
 800a216:	e082      	b.n	800a31e <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a218:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	d106      	bne.n	800a22c <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a21e:	f107 030c 	add.w	r3, r7, #12
 800a222:	4618      	mov	r0, r3
 800a224:	f000 fe2c 	bl	800ae80 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a228:	2301      	movs	r3, #1
 800a22a:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a22c:	f001 faee 	bl	800b80c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a230:	f000 fbda 	bl	800a9e8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a234:	f001 fab8 	bl	800b7a8 <vPortEnterCritical>
 800a238:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a23a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a23e:	b25b      	sxtb	r3, r3
 800a240:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a244:	d103      	bne.n	800a24e <xQueueSemaphoreTake+0x142>
 800a246:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a248:	2200      	movs	r2, #0
 800a24a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a24e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a250:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a254:	b25b      	sxtb	r3, r3
 800a256:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a25a:	d103      	bne.n	800a264 <xQueueSemaphoreTake+0x158>
 800a25c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a25e:	2200      	movs	r2, #0
 800a260:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a264:	f001 fad2 	bl	800b80c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a268:	463a      	mov	r2, r7
 800a26a:	f107 030c 	add.w	r3, r7, #12
 800a26e:	4611      	mov	r1, r2
 800a270:	4618      	mov	r0, r3
 800a272:	f000 fe1b 	bl	800aeac <xTaskCheckForTimeOut>
 800a276:	4603      	mov	r3, r0
 800a278:	2b00      	cmp	r3, #0
 800a27a:	d132      	bne.n	800a2e2 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a27c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800a27e:	f000 f9d1 	bl	800a624 <prvIsQueueEmpty>
 800a282:	4603      	mov	r3, r0
 800a284:	2b00      	cmp	r3, #0
 800a286:	d026      	beq.n	800a2d6 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a288:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	2b00      	cmp	r3, #0
 800a28e:	d109      	bne.n	800a2a4 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 800a290:	f001 fa8a 	bl	800b7a8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a294:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a296:	689b      	ldr	r3, [r3, #8]
 800a298:	4618      	mov	r0, r3
 800a29a:	f000 ff4b 	bl	800b134 <xTaskPriorityInherit>
 800a29e:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 800a2a0:	f001 fab4 	bl	800b80c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a2a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a2a6:	3324      	adds	r3, #36	@ 0x24
 800a2a8:	683a      	ldr	r2, [r7, #0]
 800a2aa:	4611      	mov	r1, r2
 800a2ac:	4618      	mov	r0, r3
 800a2ae:	f000 fd5d 	bl	800ad6c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a2b2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800a2b4:	f000 f964 	bl	800a580 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a2b8:	f000 fba4 	bl	800aa04 <xTaskResumeAll>
 800a2bc:	4603      	mov	r3, r0
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	f47f af67 	bne.w	800a192 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 800a2c4:	4b18      	ldr	r3, [pc, #96]	@ (800a328 <xQueueSemaphoreTake+0x21c>)
 800a2c6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a2ca:	601a      	str	r2, [r3, #0]
 800a2cc:	f3bf 8f4f 	dsb	sy
 800a2d0:	f3bf 8f6f 	isb	sy
 800a2d4:	e75d      	b.n	800a192 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800a2d6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800a2d8:	f000 f952 	bl	800a580 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a2dc:	f000 fb92 	bl	800aa04 <xTaskResumeAll>
 800a2e0:	e757      	b.n	800a192 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800a2e2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800a2e4:	f000 f94c 	bl	800a580 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a2e8:	f000 fb8c 	bl	800aa04 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a2ec:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800a2ee:	f000 f999 	bl	800a624 <prvIsQueueEmpty>
 800a2f2:	4603      	mov	r3, r0
 800a2f4:	2b00      	cmp	r3, #0
 800a2f6:	f43f af4c 	beq.w	800a192 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800a2fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	d00d      	beq.n	800a31c <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 800a300:	f001 fa52 	bl	800b7a8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800a304:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800a306:	f000 f893 	bl	800a430 <prvGetDisinheritPriorityAfterTimeout>
 800a30a:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800a30c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a30e:	689b      	ldr	r3, [r3, #8]
 800a310:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800a312:	4618      	mov	r0, r3
 800a314:	f001 f80c 	bl	800b330 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800a318:	f001 fa78 	bl	800b80c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a31c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a31e:	4618      	mov	r0, r3
 800a320:	3738      	adds	r7, #56	@ 0x38
 800a322:	46bd      	mov	sp, r7
 800a324:	bd80      	pop	{r7, pc}
 800a326:	bf00      	nop
 800a328:	e000ed04 	.word	0xe000ed04

0800a32c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800a32c:	b580      	push	{r7, lr}
 800a32e:	b08e      	sub	sp, #56	@ 0x38
 800a330:	af00      	add	r7, sp, #0
 800a332:	60f8      	str	r0, [r7, #12]
 800a334:	60b9      	str	r1, [r7, #8]
 800a336:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a338:	68fb      	ldr	r3, [r7, #12]
 800a33a:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800a33c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a33e:	2b00      	cmp	r3, #0
 800a340:	d10b      	bne.n	800a35a <xQueueReceiveFromISR+0x2e>
	__asm volatile
 800a342:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a346:	f383 8811 	msr	BASEPRI, r3
 800a34a:	f3bf 8f6f 	isb	sy
 800a34e:	f3bf 8f4f 	dsb	sy
 800a352:	623b      	str	r3, [r7, #32]
}
 800a354:	bf00      	nop
 800a356:	bf00      	nop
 800a358:	e7fd      	b.n	800a356 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a35a:	68bb      	ldr	r3, [r7, #8]
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	d103      	bne.n	800a368 <xQueueReceiveFromISR+0x3c>
 800a360:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a362:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a364:	2b00      	cmp	r3, #0
 800a366:	d101      	bne.n	800a36c <xQueueReceiveFromISR+0x40>
 800a368:	2301      	movs	r3, #1
 800a36a:	e000      	b.n	800a36e <xQueueReceiveFromISR+0x42>
 800a36c:	2300      	movs	r3, #0
 800a36e:	2b00      	cmp	r3, #0
 800a370:	d10b      	bne.n	800a38a <xQueueReceiveFromISR+0x5e>
	__asm volatile
 800a372:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a376:	f383 8811 	msr	BASEPRI, r3
 800a37a:	f3bf 8f6f 	isb	sy
 800a37e:	f3bf 8f4f 	dsb	sy
 800a382:	61fb      	str	r3, [r7, #28]
}
 800a384:	bf00      	nop
 800a386:	bf00      	nop
 800a388:	e7fd      	b.n	800a386 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a38a:	f001 faed 	bl	800b968 <vPortValidateInterruptPriority>
	__asm volatile
 800a38e:	f3ef 8211 	mrs	r2, BASEPRI
 800a392:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a396:	f383 8811 	msr	BASEPRI, r3
 800a39a:	f3bf 8f6f 	isb	sy
 800a39e:	f3bf 8f4f 	dsb	sy
 800a3a2:	61ba      	str	r2, [r7, #24]
 800a3a4:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800a3a6:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a3a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a3aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a3ae:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a3b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	d02f      	beq.n	800a416 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800a3b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3b8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a3bc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a3c0:	68b9      	ldr	r1, [r7, #8]
 800a3c2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a3c4:	f000 f8b6 	bl	800a534 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a3c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a3ca:	1e5a      	subs	r2, r3, #1
 800a3cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3ce:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800a3d0:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800a3d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a3d8:	d112      	bne.n	800a400 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a3da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3dc:	691b      	ldr	r3, [r3, #16]
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	d016      	beq.n	800a410 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a3e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3e4:	3310      	adds	r3, #16
 800a3e6:	4618      	mov	r0, r3
 800a3e8:	f000 fce6 	bl	800adb8 <xTaskRemoveFromEventList>
 800a3ec:	4603      	mov	r3, r0
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	d00e      	beq.n	800a410 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	d00b      	beq.n	800a410 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	2201      	movs	r2, #1
 800a3fc:	601a      	str	r2, [r3, #0]
 800a3fe:	e007      	b.n	800a410 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800a400:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a404:	3301      	adds	r3, #1
 800a406:	b2db      	uxtb	r3, r3
 800a408:	b25a      	sxtb	r2, r3
 800a40a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a40c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 800a410:	2301      	movs	r3, #1
 800a412:	637b      	str	r3, [r7, #52]	@ 0x34
 800a414:	e001      	b.n	800a41a <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 800a416:	2300      	movs	r3, #0
 800a418:	637b      	str	r3, [r7, #52]	@ 0x34
 800a41a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a41c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800a41e:	693b      	ldr	r3, [r7, #16]
 800a420:	f383 8811 	msr	BASEPRI, r3
}
 800a424:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a426:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800a428:	4618      	mov	r0, r3
 800a42a:	3738      	adds	r7, #56	@ 0x38
 800a42c:	46bd      	mov	sp, r7
 800a42e:	bd80      	pop	{r7, pc}

0800a430 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800a430:	b480      	push	{r7}
 800a432:	b085      	sub	sp, #20
 800a434:	af00      	add	r7, sp, #0
 800a436:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a43c:	2b00      	cmp	r3, #0
 800a43e:	d006      	beq.n	800a44e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	f1c3 0307 	rsb	r3, r3, #7
 800a44a:	60fb      	str	r3, [r7, #12]
 800a44c:	e001      	b.n	800a452 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800a44e:	2300      	movs	r3, #0
 800a450:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800a452:	68fb      	ldr	r3, [r7, #12]
	}
 800a454:	4618      	mov	r0, r3
 800a456:	3714      	adds	r7, #20
 800a458:	46bd      	mov	sp, r7
 800a45a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a45e:	4770      	bx	lr

0800a460 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800a460:	b580      	push	{r7, lr}
 800a462:	b086      	sub	sp, #24
 800a464:	af00      	add	r7, sp, #0
 800a466:	60f8      	str	r0, [r7, #12]
 800a468:	60b9      	str	r1, [r7, #8]
 800a46a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800a46c:	2300      	movs	r3, #0
 800a46e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a470:	68fb      	ldr	r3, [r7, #12]
 800a472:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a474:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800a476:	68fb      	ldr	r3, [r7, #12]
 800a478:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	d10d      	bne.n	800a49a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a47e:	68fb      	ldr	r3, [r7, #12]
 800a480:	681b      	ldr	r3, [r3, #0]
 800a482:	2b00      	cmp	r3, #0
 800a484:	d14d      	bne.n	800a522 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a486:	68fb      	ldr	r3, [r7, #12]
 800a488:	689b      	ldr	r3, [r3, #8]
 800a48a:	4618      	mov	r0, r3
 800a48c:	f000 fec8 	bl	800b220 <xTaskPriorityDisinherit>
 800a490:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800a492:	68fb      	ldr	r3, [r7, #12]
 800a494:	2200      	movs	r2, #0
 800a496:	609a      	str	r2, [r3, #8]
 800a498:	e043      	b.n	800a522 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	d119      	bne.n	800a4d4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a4a0:	68fb      	ldr	r3, [r7, #12]
 800a4a2:	6858      	ldr	r0, [r3, #4]
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a4a8:	461a      	mov	r2, r3
 800a4aa:	68b9      	ldr	r1, [r7, #8]
 800a4ac:	f003 f94d 	bl	800d74a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a4b0:	68fb      	ldr	r3, [r7, #12]
 800a4b2:	685a      	ldr	r2, [r3, #4]
 800a4b4:	68fb      	ldr	r3, [r7, #12]
 800a4b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a4b8:	441a      	add	r2, r3
 800a4ba:	68fb      	ldr	r3, [r7, #12]
 800a4bc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a4be:	68fb      	ldr	r3, [r7, #12]
 800a4c0:	685a      	ldr	r2, [r3, #4]
 800a4c2:	68fb      	ldr	r3, [r7, #12]
 800a4c4:	689b      	ldr	r3, [r3, #8]
 800a4c6:	429a      	cmp	r2, r3
 800a4c8:	d32b      	bcc.n	800a522 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800a4ca:	68fb      	ldr	r3, [r7, #12]
 800a4cc:	681a      	ldr	r2, [r3, #0]
 800a4ce:	68fb      	ldr	r3, [r7, #12]
 800a4d0:	605a      	str	r2, [r3, #4]
 800a4d2:	e026      	b.n	800a522 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800a4d4:	68fb      	ldr	r3, [r7, #12]
 800a4d6:	68d8      	ldr	r0, [r3, #12]
 800a4d8:	68fb      	ldr	r3, [r7, #12]
 800a4da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a4dc:	461a      	mov	r2, r3
 800a4de:	68b9      	ldr	r1, [r7, #8]
 800a4e0:	f003 f933 	bl	800d74a <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800a4e4:	68fb      	ldr	r3, [r7, #12]
 800a4e6:	68da      	ldr	r2, [r3, #12]
 800a4e8:	68fb      	ldr	r3, [r7, #12]
 800a4ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a4ec:	425b      	negs	r3, r3
 800a4ee:	441a      	add	r2, r3
 800a4f0:	68fb      	ldr	r3, [r7, #12]
 800a4f2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a4f4:	68fb      	ldr	r3, [r7, #12]
 800a4f6:	68da      	ldr	r2, [r3, #12]
 800a4f8:	68fb      	ldr	r3, [r7, #12]
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	429a      	cmp	r2, r3
 800a4fe:	d207      	bcs.n	800a510 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800a500:	68fb      	ldr	r3, [r7, #12]
 800a502:	689a      	ldr	r2, [r3, #8]
 800a504:	68fb      	ldr	r3, [r7, #12]
 800a506:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a508:	425b      	negs	r3, r3
 800a50a:	441a      	add	r2, r3
 800a50c:	68fb      	ldr	r3, [r7, #12]
 800a50e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	2b02      	cmp	r3, #2
 800a514:	d105      	bne.n	800a522 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a516:	693b      	ldr	r3, [r7, #16]
 800a518:	2b00      	cmp	r3, #0
 800a51a:	d002      	beq.n	800a522 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800a51c:	693b      	ldr	r3, [r7, #16]
 800a51e:	3b01      	subs	r3, #1
 800a520:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a522:	693b      	ldr	r3, [r7, #16]
 800a524:	1c5a      	adds	r2, r3, #1
 800a526:	68fb      	ldr	r3, [r7, #12]
 800a528:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800a52a:	697b      	ldr	r3, [r7, #20]
}
 800a52c:	4618      	mov	r0, r3
 800a52e:	3718      	adds	r7, #24
 800a530:	46bd      	mov	sp, r7
 800a532:	bd80      	pop	{r7, pc}

0800a534 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800a534:	b580      	push	{r7, lr}
 800a536:	b082      	sub	sp, #8
 800a538:	af00      	add	r7, sp, #0
 800a53a:	6078      	str	r0, [r7, #4]
 800a53c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a542:	2b00      	cmp	r3, #0
 800a544:	d018      	beq.n	800a578 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	68da      	ldr	r2, [r3, #12]
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a54e:	441a      	add	r2, r3
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	68da      	ldr	r2, [r3, #12]
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	689b      	ldr	r3, [r3, #8]
 800a55c:	429a      	cmp	r2, r3
 800a55e:	d303      	bcc.n	800a568 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	681a      	ldr	r2, [r3, #0]
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	68d9      	ldr	r1, [r3, #12]
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a570:	461a      	mov	r2, r3
 800a572:	6838      	ldr	r0, [r7, #0]
 800a574:	f003 f8e9 	bl	800d74a <memcpy>
	}
}
 800a578:	bf00      	nop
 800a57a:	3708      	adds	r7, #8
 800a57c:	46bd      	mov	sp, r7
 800a57e:	bd80      	pop	{r7, pc}

0800a580 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800a580:	b580      	push	{r7, lr}
 800a582:	b084      	sub	sp, #16
 800a584:	af00      	add	r7, sp, #0
 800a586:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800a588:	f001 f90e 	bl	800b7a8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a592:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a594:	e011      	b.n	800a5ba <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	d012      	beq.n	800a5c4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	3324      	adds	r3, #36	@ 0x24
 800a5a2:	4618      	mov	r0, r3
 800a5a4:	f000 fc08 	bl	800adb8 <xTaskRemoveFromEventList>
 800a5a8:	4603      	mov	r3, r0
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	d001      	beq.n	800a5b2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800a5ae:	f000 fce1 	bl	800af74 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800a5b2:	7bfb      	ldrb	r3, [r7, #15]
 800a5b4:	3b01      	subs	r3, #1
 800a5b6:	b2db      	uxtb	r3, r3
 800a5b8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a5ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	dce9      	bgt.n	800a596 <prvUnlockQueue+0x16>
 800a5c2:	e000      	b.n	800a5c6 <prvUnlockQueue+0x46>
					break;
 800a5c4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	22ff      	movs	r2, #255	@ 0xff
 800a5ca:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800a5ce:	f001 f91d 	bl	800b80c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800a5d2:	f001 f8e9 	bl	800b7a8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a5dc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a5de:	e011      	b.n	800a604 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	691b      	ldr	r3, [r3, #16]
 800a5e4:	2b00      	cmp	r3, #0
 800a5e6:	d012      	beq.n	800a60e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	3310      	adds	r3, #16
 800a5ec:	4618      	mov	r0, r3
 800a5ee:	f000 fbe3 	bl	800adb8 <xTaskRemoveFromEventList>
 800a5f2:	4603      	mov	r3, r0
 800a5f4:	2b00      	cmp	r3, #0
 800a5f6:	d001      	beq.n	800a5fc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800a5f8:	f000 fcbc 	bl	800af74 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800a5fc:	7bbb      	ldrb	r3, [r7, #14]
 800a5fe:	3b01      	subs	r3, #1
 800a600:	b2db      	uxtb	r3, r3
 800a602:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a604:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a608:	2b00      	cmp	r3, #0
 800a60a:	dce9      	bgt.n	800a5e0 <prvUnlockQueue+0x60>
 800a60c:	e000      	b.n	800a610 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800a60e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	22ff      	movs	r2, #255	@ 0xff
 800a614:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800a618:	f001 f8f8 	bl	800b80c <vPortExitCritical>
}
 800a61c:	bf00      	nop
 800a61e:	3710      	adds	r7, #16
 800a620:	46bd      	mov	sp, r7
 800a622:	bd80      	pop	{r7, pc}

0800a624 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800a624:	b580      	push	{r7, lr}
 800a626:	b084      	sub	sp, #16
 800a628:	af00      	add	r7, sp, #0
 800a62a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a62c:	f001 f8bc 	bl	800b7a8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a634:	2b00      	cmp	r3, #0
 800a636:	d102      	bne.n	800a63e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800a638:	2301      	movs	r3, #1
 800a63a:	60fb      	str	r3, [r7, #12]
 800a63c:	e001      	b.n	800a642 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800a63e:	2300      	movs	r3, #0
 800a640:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a642:	f001 f8e3 	bl	800b80c <vPortExitCritical>

	return xReturn;
 800a646:	68fb      	ldr	r3, [r7, #12]
}
 800a648:	4618      	mov	r0, r3
 800a64a:	3710      	adds	r7, #16
 800a64c:	46bd      	mov	sp, r7
 800a64e:	bd80      	pop	{r7, pc}

0800a650 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800a650:	b580      	push	{r7, lr}
 800a652:	b084      	sub	sp, #16
 800a654:	af00      	add	r7, sp, #0
 800a656:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a658:	f001 f8a6 	bl	800b7a8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a664:	429a      	cmp	r2, r3
 800a666:	d102      	bne.n	800a66e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800a668:	2301      	movs	r3, #1
 800a66a:	60fb      	str	r3, [r7, #12]
 800a66c:	e001      	b.n	800a672 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800a66e:	2300      	movs	r3, #0
 800a670:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a672:	f001 f8cb 	bl	800b80c <vPortExitCritical>

	return xReturn;
 800a676:	68fb      	ldr	r3, [r7, #12]
}
 800a678:	4618      	mov	r0, r3
 800a67a:	3710      	adds	r7, #16
 800a67c:	46bd      	mov	sp, r7
 800a67e:	bd80      	pop	{r7, pc}

0800a680 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800a680:	b580      	push	{r7, lr}
 800a682:	b08c      	sub	sp, #48	@ 0x30
 800a684:	af04      	add	r7, sp, #16
 800a686:	60f8      	str	r0, [r7, #12]
 800a688:	60b9      	str	r1, [r7, #8]
 800a68a:	603b      	str	r3, [r7, #0]
 800a68c:	4613      	mov	r3, r2
 800a68e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800a690:	88fb      	ldrh	r3, [r7, #6]
 800a692:	009b      	lsls	r3, r3, #2
 800a694:	4618      	mov	r0, r3
 800a696:	f001 f9a9 	bl	800b9ec <pvPortMalloc>
 800a69a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800a69c:	697b      	ldr	r3, [r7, #20]
 800a69e:	2b00      	cmp	r3, #0
 800a6a0:	d00e      	beq.n	800a6c0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800a6a2:	2054      	movs	r0, #84	@ 0x54
 800a6a4:	f001 f9a2 	bl	800b9ec <pvPortMalloc>
 800a6a8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800a6aa:	69fb      	ldr	r3, [r7, #28]
 800a6ac:	2b00      	cmp	r3, #0
 800a6ae:	d003      	beq.n	800a6b8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800a6b0:	69fb      	ldr	r3, [r7, #28]
 800a6b2:	697a      	ldr	r2, [r7, #20]
 800a6b4:	631a      	str	r2, [r3, #48]	@ 0x30
 800a6b6:	e005      	b.n	800a6c4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800a6b8:	6978      	ldr	r0, [r7, #20]
 800a6ba:	f001 fa65 	bl	800bb88 <vPortFree>
 800a6be:	e001      	b.n	800a6c4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800a6c0:	2300      	movs	r3, #0
 800a6c2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800a6c4:	69fb      	ldr	r3, [r7, #28]
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	d013      	beq.n	800a6f2 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800a6ca:	88fa      	ldrh	r2, [r7, #6]
 800a6cc:	2300      	movs	r3, #0
 800a6ce:	9303      	str	r3, [sp, #12]
 800a6d0:	69fb      	ldr	r3, [r7, #28]
 800a6d2:	9302      	str	r3, [sp, #8]
 800a6d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a6d6:	9301      	str	r3, [sp, #4]
 800a6d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a6da:	9300      	str	r3, [sp, #0]
 800a6dc:	683b      	ldr	r3, [r7, #0]
 800a6de:	68b9      	ldr	r1, [r7, #8]
 800a6e0:	68f8      	ldr	r0, [r7, #12]
 800a6e2:	f000 f80e 	bl	800a702 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a6e6:	69f8      	ldr	r0, [r7, #28]
 800a6e8:	f000 f894 	bl	800a814 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800a6ec:	2301      	movs	r3, #1
 800a6ee:	61bb      	str	r3, [r7, #24]
 800a6f0:	e002      	b.n	800a6f8 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800a6f2:	f04f 33ff 	mov.w	r3, #4294967295
 800a6f6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800a6f8:	69bb      	ldr	r3, [r7, #24]
	}
 800a6fa:	4618      	mov	r0, r3
 800a6fc:	3720      	adds	r7, #32
 800a6fe:	46bd      	mov	sp, r7
 800a700:	bd80      	pop	{r7, pc}

0800a702 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800a702:	b580      	push	{r7, lr}
 800a704:	b088      	sub	sp, #32
 800a706:	af00      	add	r7, sp, #0
 800a708:	60f8      	str	r0, [r7, #12]
 800a70a:	60b9      	str	r1, [r7, #8]
 800a70c:	607a      	str	r2, [r7, #4]
 800a70e:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800a710:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a712:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800a71a:	3b01      	subs	r3, #1
 800a71c:	009b      	lsls	r3, r3, #2
 800a71e:	4413      	add	r3, r2
 800a720:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800a722:	69bb      	ldr	r3, [r7, #24]
 800a724:	f023 0307 	bic.w	r3, r3, #7
 800a728:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800a72a:	69bb      	ldr	r3, [r7, #24]
 800a72c:	f003 0307 	and.w	r3, r3, #7
 800a730:	2b00      	cmp	r3, #0
 800a732:	d00b      	beq.n	800a74c <prvInitialiseNewTask+0x4a>
	__asm volatile
 800a734:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a738:	f383 8811 	msr	BASEPRI, r3
 800a73c:	f3bf 8f6f 	isb	sy
 800a740:	f3bf 8f4f 	dsb	sy
 800a744:	617b      	str	r3, [r7, #20]
}
 800a746:	bf00      	nop
 800a748:	bf00      	nop
 800a74a:	e7fd      	b.n	800a748 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800a74c:	68bb      	ldr	r3, [r7, #8]
 800a74e:	2b00      	cmp	r3, #0
 800a750:	d01f      	beq.n	800a792 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a752:	2300      	movs	r3, #0
 800a754:	61fb      	str	r3, [r7, #28]
 800a756:	e012      	b.n	800a77e <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800a758:	68ba      	ldr	r2, [r7, #8]
 800a75a:	69fb      	ldr	r3, [r7, #28]
 800a75c:	4413      	add	r3, r2
 800a75e:	7819      	ldrb	r1, [r3, #0]
 800a760:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a762:	69fb      	ldr	r3, [r7, #28]
 800a764:	4413      	add	r3, r2
 800a766:	3334      	adds	r3, #52	@ 0x34
 800a768:	460a      	mov	r2, r1
 800a76a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800a76c:	68ba      	ldr	r2, [r7, #8]
 800a76e:	69fb      	ldr	r3, [r7, #28]
 800a770:	4413      	add	r3, r2
 800a772:	781b      	ldrb	r3, [r3, #0]
 800a774:	2b00      	cmp	r3, #0
 800a776:	d006      	beq.n	800a786 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a778:	69fb      	ldr	r3, [r7, #28]
 800a77a:	3301      	adds	r3, #1
 800a77c:	61fb      	str	r3, [r7, #28]
 800a77e:	69fb      	ldr	r3, [r7, #28]
 800a780:	2b0f      	cmp	r3, #15
 800a782:	d9e9      	bls.n	800a758 <prvInitialiseNewTask+0x56>
 800a784:	e000      	b.n	800a788 <prvInitialiseNewTask+0x86>
			{
				break;
 800a786:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800a788:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a78a:	2200      	movs	r2, #0
 800a78c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800a790:	e003      	b.n	800a79a <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800a792:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a794:	2200      	movs	r2, #0
 800a796:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800a79a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a79c:	2b06      	cmp	r3, #6
 800a79e:	d901      	bls.n	800a7a4 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800a7a0:	2306      	movs	r3, #6
 800a7a2:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800a7a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7a6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a7a8:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800a7aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7ac:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a7ae:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800a7b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7b2:	2200      	movs	r2, #0
 800a7b4:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800a7b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7b8:	3304      	adds	r3, #4
 800a7ba:	4618      	mov	r0, r3
 800a7bc:	f7ff f9c0 	bl	8009b40 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800a7c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7c2:	3318      	adds	r3, #24
 800a7c4:	4618      	mov	r0, r3
 800a7c6:	f7ff f9bb 	bl	8009b40 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800a7ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7cc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a7ce:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a7d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a7d2:	f1c3 0207 	rsb	r2, r3, #7
 800a7d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7d8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800a7da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7dc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a7de:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800a7e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7e2:	2200      	movs	r2, #0
 800a7e4:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a7e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7e8:	2200      	movs	r2, #0
 800a7ea:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a7ee:	683a      	ldr	r2, [r7, #0]
 800a7f0:	68f9      	ldr	r1, [r7, #12]
 800a7f2:	69b8      	ldr	r0, [r7, #24]
 800a7f4:	f000 fea6 	bl	800b544 <pxPortInitialiseStack>
 800a7f8:	4602      	mov	r2, r0
 800a7fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7fc:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800a7fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a800:	2b00      	cmp	r3, #0
 800a802:	d002      	beq.n	800a80a <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800a804:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a806:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a808:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a80a:	bf00      	nop
 800a80c:	3720      	adds	r7, #32
 800a80e:	46bd      	mov	sp, r7
 800a810:	bd80      	pop	{r7, pc}
	...

0800a814 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800a814:	b580      	push	{r7, lr}
 800a816:	b082      	sub	sp, #8
 800a818:	af00      	add	r7, sp, #0
 800a81a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800a81c:	f000 ffc4 	bl	800b7a8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800a820:	4b2a      	ldr	r3, [pc, #168]	@ (800a8cc <prvAddNewTaskToReadyList+0xb8>)
 800a822:	681b      	ldr	r3, [r3, #0]
 800a824:	3301      	adds	r3, #1
 800a826:	4a29      	ldr	r2, [pc, #164]	@ (800a8cc <prvAddNewTaskToReadyList+0xb8>)
 800a828:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800a82a:	4b29      	ldr	r3, [pc, #164]	@ (800a8d0 <prvAddNewTaskToReadyList+0xbc>)
 800a82c:	681b      	ldr	r3, [r3, #0]
 800a82e:	2b00      	cmp	r3, #0
 800a830:	d109      	bne.n	800a846 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800a832:	4a27      	ldr	r2, [pc, #156]	@ (800a8d0 <prvAddNewTaskToReadyList+0xbc>)
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800a838:	4b24      	ldr	r3, [pc, #144]	@ (800a8cc <prvAddNewTaskToReadyList+0xb8>)
 800a83a:	681b      	ldr	r3, [r3, #0]
 800a83c:	2b01      	cmp	r3, #1
 800a83e:	d110      	bne.n	800a862 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800a840:	f000 fbbc 	bl	800afbc <prvInitialiseTaskLists>
 800a844:	e00d      	b.n	800a862 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800a846:	4b23      	ldr	r3, [pc, #140]	@ (800a8d4 <prvAddNewTaskToReadyList+0xc0>)
 800a848:	681b      	ldr	r3, [r3, #0]
 800a84a:	2b00      	cmp	r3, #0
 800a84c:	d109      	bne.n	800a862 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800a84e:	4b20      	ldr	r3, [pc, #128]	@ (800a8d0 <prvAddNewTaskToReadyList+0xbc>)
 800a850:	681b      	ldr	r3, [r3, #0]
 800a852:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a858:	429a      	cmp	r2, r3
 800a85a:	d802      	bhi.n	800a862 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800a85c:	4a1c      	ldr	r2, [pc, #112]	@ (800a8d0 <prvAddNewTaskToReadyList+0xbc>)
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800a862:	4b1d      	ldr	r3, [pc, #116]	@ (800a8d8 <prvAddNewTaskToReadyList+0xc4>)
 800a864:	681b      	ldr	r3, [r3, #0]
 800a866:	3301      	adds	r3, #1
 800a868:	4a1b      	ldr	r2, [pc, #108]	@ (800a8d8 <prvAddNewTaskToReadyList+0xc4>)
 800a86a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a870:	2201      	movs	r2, #1
 800a872:	409a      	lsls	r2, r3
 800a874:	4b19      	ldr	r3, [pc, #100]	@ (800a8dc <prvAddNewTaskToReadyList+0xc8>)
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	4313      	orrs	r3, r2
 800a87a:	4a18      	ldr	r2, [pc, #96]	@ (800a8dc <prvAddNewTaskToReadyList+0xc8>)
 800a87c:	6013      	str	r3, [r2, #0]
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a882:	4613      	mov	r3, r2
 800a884:	009b      	lsls	r3, r3, #2
 800a886:	4413      	add	r3, r2
 800a888:	009b      	lsls	r3, r3, #2
 800a88a:	4a15      	ldr	r2, [pc, #84]	@ (800a8e0 <prvAddNewTaskToReadyList+0xcc>)
 800a88c:	441a      	add	r2, r3
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	3304      	adds	r3, #4
 800a892:	4619      	mov	r1, r3
 800a894:	4610      	mov	r0, r2
 800a896:	f7ff f960 	bl	8009b5a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800a89a:	f000 ffb7 	bl	800b80c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800a89e:	4b0d      	ldr	r3, [pc, #52]	@ (800a8d4 <prvAddNewTaskToReadyList+0xc0>)
 800a8a0:	681b      	ldr	r3, [r3, #0]
 800a8a2:	2b00      	cmp	r3, #0
 800a8a4:	d00e      	beq.n	800a8c4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800a8a6:	4b0a      	ldr	r3, [pc, #40]	@ (800a8d0 <prvAddNewTaskToReadyList+0xbc>)
 800a8a8:	681b      	ldr	r3, [r3, #0]
 800a8aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a8b0:	429a      	cmp	r2, r3
 800a8b2:	d207      	bcs.n	800a8c4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800a8b4:	4b0b      	ldr	r3, [pc, #44]	@ (800a8e4 <prvAddNewTaskToReadyList+0xd0>)
 800a8b6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a8ba:	601a      	str	r2, [r3, #0]
 800a8bc:	f3bf 8f4f 	dsb	sy
 800a8c0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a8c4:	bf00      	nop
 800a8c6:	3708      	adds	r7, #8
 800a8c8:	46bd      	mov	sp, r7
 800a8ca:	bd80      	pop	{r7, pc}
 800a8cc:	20000a1c 	.word	0x20000a1c
 800a8d0:	2000091c 	.word	0x2000091c
 800a8d4:	20000a28 	.word	0x20000a28
 800a8d8:	20000a38 	.word	0x20000a38
 800a8dc:	20000a24 	.word	0x20000a24
 800a8e0:	20000920 	.word	0x20000920
 800a8e4:	e000ed04 	.word	0xe000ed04

0800a8e8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800a8e8:	b580      	push	{r7, lr}
 800a8ea:	b084      	sub	sp, #16
 800a8ec:	af00      	add	r7, sp, #0
 800a8ee:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800a8f0:	2300      	movs	r3, #0
 800a8f2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	2b00      	cmp	r3, #0
 800a8f8:	d018      	beq.n	800a92c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800a8fa:	4b14      	ldr	r3, [pc, #80]	@ (800a94c <vTaskDelay+0x64>)
 800a8fc:	681b      	ldr	r3, [r3, #0]
 800a8fe:	2b00      	cmp	r3, #0
 800a900:	d00b      	beq.n	800a91a <vTaskDelay+0x32>
	__asm volatile
 800a902:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a906:	f383 8811 	msr	BASEPRI, r3
 800a90a:	f3bf 8f6f 	isb	sy
 800a90e:	f3bf 8f4f 	dsb	sy
 800a912:	60bb      	str	r3, [r7, #8]
}
 800a914:	bf00      	nop
 800a916:	bf00      	nop
 800a918:	e7fd      	b.n	800a916 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800a91a:	f000 f865 	bl	800a9e8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800a91e:	2100      	movs	r1, #0
 800a920:	6878      	ldr	r0, [r7, #4]
 800a922:	f000 fda9 	bl	800b478 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800a926:	f000 f86d 	bl	800aa04 <xTaskResumeAll>
 800a92a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800a92c:	68fb      	ldr	r3, [r7, #12]
 800a92e:	2b00      	cmp	r3, #0
 800a930:	d107      	bne.n	800a942 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800a932:	4b07      	ldr	r3, [pc, #28]	@ (800a950 <vTaskDelay+0x68>)
 800a934:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a938:	601a      	str	r2, [r3, #0]
 800a93a:	f3bf 8f4f 	dsb	sy
 800a93e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a942:	bf00      	nop
 800a944:	3710      	adds	r7, #16
 800a946:	46bd      	mov	sp, r7
 800a948:	bd80      	pop	{r7, pc}
 800a94a:	bf00      	nop
 800a94c:	20000a44 	.word	0x20000a44
 800a950:	e000ed04 	.word	0xe000ed04

0800a954 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800a954:	b580      	push	{r7, lr}
 800a956:	b086      	sub	sp, #24
 800a958:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 800a95a:	4b1d      	ldr	r3, [pc, #116]	@ (800a9d0 <vTaskStartScheduler+0x7c>)
 800a95c:	9301      	str	r3, [sp, #4]
 800a95e:	2300      	movs	r3, #0
 800a960:	9300      	str	r3, [sp, #0]
 800a962:	2300      	movs	r3, #0
 800a964:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800a968:	491a      	ldr	r1, [pc, #104]	@ (800a9d4 <vTaskStartScheduler+0x80>)
 800a96a:	481b      	ldr	r0, [pc, #108]	@ (800a9d8 <vTaskStartScheduler+0x84>)
 800a96c:	f7ff fe88 	bl	800a680 <xTaskCreate>
 800a970:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800a972:	68fb      	ldr	r3, [r7, #12]
 800a974:	2b01      	cmp	r3, #1
 800a976:	d116      	bne.n	800a9a6 <vTaskStartScheduler+0x52>
	__asm volatile
 800a978:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a97c:	f383 8811 	msr	BASEPRI, r3
 800a980:	f3bf 8f6f 	isb	sy
 800a984:	f3bf 8f4f 	dsb	sy
 800a988:	60bb      	str	r3, [r7, #8]
}
 800a98a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800a98c:	4b13      	ldr	r3, [pc, #76]	@ (800a9dc <vTaskStartScheduler+0x88>)
 800a98e:	f04f 32ff 	mov.w	r2, #4294967295
 800a992:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a994:	4b12      	ldr	r3, [pc, #72]	@ (800a9e0 <vTaskStartScheduler+0x8c>)
 800a996:	2201      	movs	r2, #1
 800a998:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800a99a:	4b12      	ldr	r3, [pc, #72]	@ (800a9e4 <vTaskStartScheduler+0x90>)
 800a99c:	2200      	movs	r2, #0
 800a99e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800a9a0:	f000 fe5e 	bl	800b660 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800a9a4:	e00f      	b.n	800a9c6 <vTaskStartScheduler+0x72>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a9a6:	68fb      	ldr	r3, [r7, #12]
 800a9a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a9ac:	d10b      	bne.n	800a9c6 <vTaskStartScheduler+0x72>
	__asm volatile
 800a9ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a9b2:	f383 8811 	msr	BASEPRI, r3
 800a9b6:	f3bf 8f6f 	isb	sy
 800a9ba:	f3bf 8f4f 	dsb	sy
 800a9be:	607b      	str	r3, [r7, #4]
}
 800a9c0:	bf00      	nop
 800a9c2:	bf00      	nop
 800a9c4:	e7fd      	b.n	800a9c2 <vTaskStartScheduler+0x6e>
}
 800a9c6:	bf00      	nop
 800a9c8:	3710      	adds	r7, #16
 800a9ca:	46bd      	mov	sp, r7
 800a9cc:	bd80      	pop	{r7, pc}
 800a9ce:	bf00      	nop
 800a9d0:	20000a40 	.word	0x20000a40
 800a9d4:	08010570 	.word	0x08010570
 800a9d8:	0800af8d 	.word	0x0800af8d
 800a9dc:	20000a3c 	.word	0x20000a3c
 800a9e0:	20000a28 	.word	0x20000a28
 800a9e4:	20000a20 	.word	0x20000a20

0800a9e8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a9e8:	b480      	push	{r7}
 800a9ea:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800a9ec:	4b04      	ldr	r3, [pc, #16]	@ (800aa00 <vTaskSuspendAll+0x18>)
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	3301      	adds	r3, #1
 800a9f2:	4a03      	ldr	r2, [pc, #12]	@ (800aa00 <vTaskSuspendAll+0x18>)
 800a9f4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800a9f6:	bf00      	nop
 800a9f8:	46bd      	mov	sp, r7
 800a9fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9fe:	4770      	bx	lr
 800aa00:	20000a44 	.word	0x20000a44

0800aa04 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800aa04:	b580      	push	{r7, lr}
 800aa06:	b084      	sub	sp, #16
 800aa08:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800aa0a:	2300      	movs	r3, #0
 800aa0c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800aa0e:	2300      	movs	r3, #0
 800aa10:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800aa12:	4b42      	ldr	r3, [pc, #264]	@ (800ab1c <xTaskResumeAll+0x118>)
 800aa14:	681b      	ldr	r3, [r3, #0]
 800aa16:	2b00      	cmp	r3, #0
 800aa18:	d10b      	bne.n	800aa32 <xTaskResumeAll+0x2e>
	__asm volatile
 800aa1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa1e:	f383 8811 	msr	BASEPRI, r3
 800aa22:	f3bf 8f6f 	isb	sy
 800aa26:	f3bf 8f4f 	dsb	sy
 800aa2a:	603b      	str	r3, [r7, #0]
}
 800aa2c:	bf00      	nop
 800aa2e:	bf00      	nop
 800aa30:	e7fd      	b.n	800aa2e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800aa32:	f000 feb9 	bl	800b7a8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800aa36:	4b39      	ldr	r3, [pc, #228]	@ (800ab1c <xTaskResumeAll+0x118>)
 800aa38:	681b      	ldr	r3, [r3, #0]
 800aa3a:	3b01      	subs	r3, #1
 800aa3c:	4a37      	ldr	r2, [pc, #220]	@ (800ab1c <xTaskResumeAll+0x118>)
 800aa3e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800aa40:	4b36      	ldr	r3, [pc, #216]	@ (800ab1c <xTaskResumeAll+0x118>)
 800aa42:	681b      	ldr	r3, [r3, #0]
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	d161      	bne.n	800ab0c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800aa48:	4b35      	ldr	r3, [pc, #212]	@ (800ab20 <xTaskResumeAll+0x11c>)
 800aa4a:	681b      	ldr	r3, [r3, #0]
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	d05d      	beq.n	800ab0c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800aa50:	e02e      	b.n	800aab0 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aa52:	4b34      	ldr	r3, [pc, #208]	@ (800ab24 <xTaskResumeAll+0x120>)
 800aa54:	68db      	ldr	r3, [r3, #12]
 800aa56:	68db      	ldr	r3, [r3, #12]
 800aa58:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800aa5a:	68fb      	ldr	r3, [r7, #12]
 800aa5c:	3318      	adds	r3, #24
 800aa5e:	4618      	mov	r0, r3
 800aa60:	f7ff f8d8 	bl	8009c14 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800aa64:	68fb      	ldr	r3, [r7, #12]
 800aa66:	3304      	adds	r3, #4
 800aa68:	4618      	mov	r0, r3
 800aa6a:	f7ff f8d3 	bl	8009c14 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800aa6e:	68fb      	ldr	r3, [r7, #12]
 800aa70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aa72:	2201      	movs	r2, #1
 800aa74:	409a      	lsls	r2, r3
 800aa76:	4b2c      	ldr	r3, [pc, #176]	@ (800ab28 <xTaskResumeAll+0x124>)
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	4313      	orrs	r3, r2
 800aa7c:	4a2a      	ldr	r2, [pc, #168]	@ (800ab28 <xTaskResumeAll+0x124>)
 800aa7e:	6013      	str	r3, [r2, #0]
 800aa80:	68fb      	ldr	r3, [r7, #12]
 800aa82:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aa84:	4613      	mov	r3, r2
 800aa86:	009b      	lsls	r3, r3, #2
 800aa88:	4413      	add	r3, r2
 800aa8a:	009b      	lsls	r3, r3, #2
 800aa8c:	4a27      	ldr	r2, [pc, #156]	@ (800ab2c <xTaskResumeAll+0x128>)
 800aa8e:	441a      	add	r2, r3
 800aa90:	68fb      	ldr	r3, [r7, #12]
 800aa92:	3304      	adds	r3, #4
 800aa94:	4619      	mov	r1, r3
 800aa96:	4610      	mov	r0, r2
 800aa98:	f7ff f85f 	bl	8009b5a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800aa9c:	68fb      	ldr	r3, [r7, #12]
 800aa9e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aaa0:	4b23      	ldr	r3, [pc, #140]	@ (800ab30 <xTaskResumeAll+0x12c>)
 800aaa2:	681b      	ldr	r3, [r3, #0]
 800aaa4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aaa6:	429a      	cmp	r2, r3
 800aaa8:	d302      	bcc.n	800aab0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800aaaa:	4b22      	ldr	r3, [pc, #136]	@ (800ab34 <xTaskResumeAll+0x130>)
 800aaac:	2201      	movs	r2, #1
 800aaae:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800aab0:	4b1c      	ldr	r3, [pc, #112]	@ (800ab24 <xTaskResumeAll+0x120>)
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	d1cc      	bne.n	800aa52 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800aab8:	68fb      	ldr	r3, [r7, #12]
 800aaba:	2b00      	cmp	r3, #0
 800aabc:	d001      	beq.n	800aac2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800aabe:	f000 fafb 	bl	800b0b8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800aac2:	4b1d      	ldr	r3, [pc, #116]	@ (800ab38 <xTaskResumeAll+0x134>)
 800aac4:	681b      	ldr	r3, [r3, #0]
 800aac6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	2b00      	cmp	r3, #0
 800aacc:	d010      	beq.n	800aaf0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800aace:	f000 f837 	bl	800ab40 <xTaskIncrementTick>
 800aad2:	4603      	mov	r3, r0
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	d002      	beq.n	800aade <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800aad8:	4b16      	ldr	r3, [pc, #88]	@ (800ab34 <xTaskResumeAll+0x130>)
 800aada:	2201      	movs	r2, #1
 800aadc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	3b01      	subs	r3, #1
 800aae2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	2b00      	cmp	r3, #0
 800aae8:	d1f1      	bne.n	800aace <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800aaea:	4b13      	ldr	r3, [pc, #76]	@ (800ab38 <xTaskResumeAll+0x134>)
 800aaec:	2200      	movs	r2, #0
 800aaee:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800aaf0:	4b10      	ldr	r3, [pc, #64]	@ (800ab34 <xTaskResumeAll+0x130>)
 800aaf2:	681b      	ldr	r3, [r3, #0]
 800aaf4:	2b00      	cmp	r3, #0
 800aaf6:	d009      	beq.n	800ab0c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800aaf8:	2301      	movs	r3, #1
 800aafa:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800aafc:	4b0f      	ldr	r3, [pc, #60]	@ (800ab3c <xTaskResumeAll+0x138>)
 800aafe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ab02:	601a      	str	r2, [r3, #0]
 800ab04:	f3bf 8f4f 	dsb	sy
 800ab08:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ab0c:	f000 fe7e 	bl	800b80c <vPortExitCritical>

	return xAlreadyYielded;
 800ab10:	68bb      	ldr	r3, [r7, #8]
}
 800ab12:	4618      	mov	r0, r3
 800ab14:	3710      	adds	r7, #16
 800ab16:	46bd      	mov	sp, r7
 800ab18:	bd80      	pop	{r7, pc}
 800ab1a:	bf00      	nop
 800ab1c:	20000a44 	.word	0x20000a44
 800ab20:	20000a1c 	.word	0x20000a1c
 800ab24:	200009dc 	.word	0x200009dc
 800ab28:	20000a24 	.word	0x20000a24
 800ab2c:	20000920 	.word	0x20000920
 800ab30:	2000091c 	.word	0x2000091c
 800ab34:	20000a30 	.word	0x20000a30
 800ab38:	20000a2c 	.word	0x20000a2c
 800ab3c:	e000ed04 	.word	0xe000ed04

0800ab40 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800ab40:	b580      	push	{r7, lr}
 800ab42:	b086      	sub	sp, #24
 800ab44:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800ab46:	2300      	movs	r3, #0
 800ab48:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ab4a:	4b4f      	ldr	r3, [pc, #316]	@ (800ac88 <xTaskIncrementTick+0x148>)
 800ab4c:	681b      	ldr	r3, [r3, #0]
 800ab4e:	2b00      	cmp	r3, #0
 800ab50:	f040 808f 	bne.w	800ac72 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800ab54:	4b4d      	ldr	r3, [pc, #308]	@ (800ac8c <xTaskIncrementTick+0x14c>)
 800ab56:	681b      	ldr	r3, [r3, #0]
 800ab58:	3301      	adds	r3, #1
 800ab5a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800ab5c:	4a4b      	ldr	r2, [pc, #300]	@ (800ac8c <xTaskIncrementTick+0x14c>)
 800ab5e:	693b      	ldr	r3, [r7, #16]
 800ab60:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800ab62:	693b      	ldr	r3, [r7, #16]
 800ab64:	2b00      	cmp	r3, #0
 800ab66:	d121      	bne.n	800abac <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800ab68:	4b49      	ldr	r3, [pc, #292]	@ (800ac90 <xTaskIncrementTick+0x150>)
 800ab6a:	681b      	ldr	r3, [r3, #0]
 800ab6c:	681b      	ldr	r3, [r3, #0]
 800ab6e:	2b00      	cmp	r3, #0
 800ab70:	d00b      	beq.n	800ab8a <xTaskIncrementTick+0x4a>
	__asm volatile
 800ab72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab76:	f383 8811 	msr	BASEPRI, r3
 800ab7a:	f3bf 8f6f 	isb	sy
 800ab7e:	f3bf 8f4f 	dsb	sy
 800ab82:	603b      	str	r3, [r7, #0]
}
 800ab84:	bf00      	nop
 800ab86:	bf00      	nop
 800ab88:	e7fd      	b.n	800ab86 <xTaskIncrementTick+0x46>
 800ab8a:	4b41      	ldr	r3, [pc, #260]	@ (800ac90 <xTaskIncrementTick+0x150>)
 800ab8c:	681b      	ldr	r3, [r3, #0]
 800ab8e:	60fb      	str	r3, [r7, #12]
 800ab90:	4b40      	ldr	r3, [pc, #256]	@ (800ac94 <xTaskIncrementTick+0x154>)
 800ab92:	681b      	ldr	r3, [r3, #0]
 800ab94:	4a3e      	ldr	r2, [pc, #248]	@ (800ac90 <xTaskIncrementTick+0x150>)
 800ab96:	6013      	str	r3, [r2, #0]
 800ab98:	4a3e      	ldr	r2, [pc, #248]	@ (800ac94 <xTaskIncrementTick+0x154>)
 800ab9a:	68fb      	ldr	r3, [r7, #12]
 800ab9c:	6013      	str	r3, [r2, #0]
 800ab9e:	4b3e      	ldr	r3, [pc, #248]	@ (800ac98 <xTaskIncrementTick+0x158>)
 800aba0:	681b      	ldr	r3, [r3, #0]
 800aba2:	3301      	adds	r3, #1
 800aba4:	4a3c      	ldr	r2, [pc, #240]	@ (800ac98 <xTaskIncrementTick+0x158>)
 800aba6:	6013      	str	r3, [r2, #0]
 800aba8:	f000 fa86 	bl	800b0b8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800abac:	4b3b      	ldr	r3, [pc, #236]	@ (800ac9c <xTaskIncrementTick+0x15c>)
 800abae:	681b      	ldr	r3, [r3, #0]
 800abb0:	693a      	ldr	r2, [r7, #16]
 800abb2:	429a      	cmp	r2, r3
 800abb4:	d348      	bcc.n	800ac48 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800abb6:	4b36      	ldr	r3, [pc, #216]	@ (800ac90 <xTaskIncrementTick+0x150>)
 800abb8:	681b      	ldr	r3, [r3, #0]
 800abba:	681b      	ldr	r3, [r3, #0]
 800abbc:	2b00      	cmp	r3, #0
 800abbe:	d104      	bne.n	800abca <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800abc0:	4b36      	ldr	r3, [pc, #216]	@ (800ac9c <xTaskIncrementTick+0x15c>)
 800abc2:	f04f 32ff 	mov.w	r2, #4294967295
 800abc6:	601a      	str	r2, [r3, #0]
					break;
 800abc8:	e03e      	b.n	800ac48 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800abca:	4b31      	ldr	r3, [pc, #196]	@ (800ac90 <xTaskIncrementTick+0x150>)
 800abcc:	681b      	ldr	r3, [r3, #0]
 800abce:	68db      	ldr	r3, [r3, #12]
 800abd0:	68db      	ldr	r3, [r3, #12]
 800abd2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800abd4:	68bb      	ldr	r3, [r7, #8]
 800abd6:	685b      	ldr	r3, [r3, #4]
 800abd8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800abda:	693a      	ldr	r2, [r7, #16]
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	429a      	cmp	r2, r3
 800abe0:	d203      	bcs.n	800abea <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800abe2:	4a2e      	ldr	r2, [pc, #184]	@ (800ac9c <xTaskIncrementTick+0x15c>)
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800abe8:	e02e      	b.n	800ac48 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800abea:	68bb      	ldr	r3, [r7, #8]
 800abec:	3304      	adds	r3, #4
 800abee:	4618      	mov	r0, r3
 800abf0:	f7ff f810 	bl	8009c14 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800abf4:	68bb      	ldr	r3, [r7, #8]
 800abf6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	d004      	beq.n	800ac06 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800abfc:	68bb      	ldr	r3, [r7, #8]
 800abfe:	3318      	adds	r3, #24
 800ac00:	4618      	mov	r0, r3
 800ac02:	f7ff f807 	bl	8009c14 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800ac06:	68bb      	ldr	r3, [r7, #8]
 800ac08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ac0a:	2201      	movs	r2, #1
 800ac0c:	409a      	lsls	r2, r3
 800ac0e:	4b24      	ldr	r3, [pc, #144]	@ (800aca0 <xTaskIncrementTick+0x160>)
 800ac10:	681b      	ldr	r3, [r3, #0]
 800ac12:	4313      	orrs	r3, r2
 800ac14:	4a22      	ldr	r2, [pc, #136]	@ (800aca0 <xTaskIncrementTick+0x160>)
 800ac16:	6013      	str	r3, [r2, #0]
 800ac18:	68bb      	ldr	r3, [r7, #8]
 800ac1a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ac1c:	4613      	mov	r3, r2
 800ac1e:	009b      	lsls	r3, r3, #2
 800ac20:	4413      	add	r3, r2
 800ac22:	009b      	lsls	r3, r3, #2
 800ac24:	4a1f      	ldr	r2, [pc, #124]	@ (800aca4 <xTaskIncrementTick+0x164>)
 800ac26:	441a      	add	r2, r3
 800ac28:	68bb      	ldr	r3, [r7, #8]
 800ac2a:	3304      	adds	r3, #4
 800ac2c:	4619      	mov	r1, r3
 800ac2e:	4610      	mov	r0, r2
 800ac30:	f7fe ff93 	bl	8009b5a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ac34:	68bb      	ldr	r3, [r7, #8]
 800ac36:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ac38:	4b1b      	ldr	r3, [pc, #108]	@ (800aca8 <xTaskIncrementTick+0x168>)
 800ac3a:	681b      	ldr	r3, [r3, #0]
 800ac3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ac3e:	429a      	cmp	r2, r3
 800ac40:	d3b9      	bcc.n	800abb6 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800ac42:	2301      	movs	r3, #1
 800ac44:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ac46:	e7b6      	b.n	800abb6 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800ac48:	4b17      	ldr	r3, [pc, #92]	@ (800aca8 <xTaskIncrementTick+0x168>)
 800ac4a:	681b      	ldr	r3, [r3, #0]
 800ac4c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ac4e:	4915      	ldr	r1, [pc, #84]	@ (800aca4 <xTaskIncrementTick+0x164>)
 800ac50:	4613      	mov	r3, r2
 800ac52:	009b      	lsls	r3, r3, #2
 800ac54:	4413      	add	r3, r2
 800ac56:	009b      	lsls	r3, r3, #2
 800ac58:	440b      	add	r3, r1
 800ac5a:	681b      	ldr	r3, [r3, #0]
 800ac5c:	2b01      	cmp	r3, #1
 800ac5e:	d901      	bls.n	800ac64 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800ac60:	2301      	movs	r3, #1
 800ac62:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800ac64:	4b11      	ldr	r3, [pc, #68]	@ (800acac <xTaskIncrementTick+0x16c>)
 800ac66:	681b      	ldr	r3, [r3, #0]
 800ac68:	2b00      	cmp	r3, #0
 800ac6a:	d007      	beq.n	800ac7c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800ac6c:	2301      	movs	r3, #1
 800ac6e:	617b      	str	r3, [r7, #20]
 800ac70:	e004      	b.n	800ac7c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800ac72:	4b0f      	ldr	r3, [pc, #60]	@ (800acb0 <xTaskIncrementTick+0x170>)
 800ac74:	681b      	ldr	r3, [r3, #0]
 800ac76:	3301      	adds	r3, #1
 800ac78:	4a0d      	ldr	r2, [pc, #52]	@ (800acb0 <xTaskIncrementTick+0x170>)
 800ac7a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800ac7c:	697b      	ldr	r3, [r7, #20]
}
 800ac7e:	4618      	mov	r0, r3
 800ac80:	3718      	adds	r7, #24
 800ac82:	46bd      	mov	sp, r7
 800ac84:	bd80      	pop	{r7, pc}
 800ac86:	bf00      	nop
 800ac88:	20000a44 	.word	0x20000a44
 800ac8c:	20000a20 	.word	0x20000a20
 800ac90:	200009d4 	.word	0x200009d4
 800ac94:	200009d8 	.word	0x200009d8
 800ac98:	20000a34 	.word	0x20000a34
 800ac9c:	20000a3c 	.word	0x20000a3c
 800aca0:	20000a24 	.word	0x20000a24
 800aca4:	20000920 	.word	0x20000920
 800aca8:	2000091c 	.word	0x2000091c
 800acac:	20000a30 	.word	0x20000a30
 800acb0:	20000a2c 	.word	0x20000a2c

0800acb4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800acb4:	b480      	push	{r7}
 800acb6:	b087      	sub	sp, #28
 800acb8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800acba:	4b27      	ldr	r3, [pc, #156]	@ (800ad58 <vTaskSwitchContext+0xa4>)
 800acbc:	681b      	ldr	r3, [r3, #0]
 800acbe:	2b00      	cmp	r3, #0
 800acc0:	d003      	beq.n	800acca <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800acc2:	4b26      	ldr	r3, [pc, #152]	@ (800ad5c <vTaskSwitchContext+0xa8>)
 800acc4:	2201      	movs	r2, #1
 800acc6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800acc8:	e040      	b.n	800ad4c <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 800acca:	4b24      	ldr	r3, [pc, #144]	@ (800ad5c <vTaskSwitchContext+0xa8>)
 800accc:	2200      	movs	r2, #0
 800acce:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800acd0:	4b23      	ldr	r3, [pc, #140]	@ (800ad60 <vTaskSwitchContext+0xac>)
 800acd2:	681b      	ldr	r3, [r3, #0]
 800acd4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800acd6:	68fb      	ldr	r3, [r7, #12]
 800acd8:	fab3 f383 	clz	r3, r3
 800acdc:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800acde:	7afb      	ldrb	r3, [r7, #11]
 800ace0:	f1c3 031f 	rsb	r3, r3, #31
 800ace4:	617b      	str	r3, [r7, #20]
 800ace6:	491f      	ldr	r1, [pc, #124]	@ (800ad64 <vTaskSwitchContext+0xb0>)
 800ace8:	697a      	ldr	r2, [r7, #20]
 800acea:	4613      	mov	r3, r2
 800acec:	009b      	lsls	r3, r3, #2
 800acee:	4413      	add	r3, r2
 800acf0:	009b      	lsls	r3, r3, #2
 800acf2:	440b      	add	r3, r1
 800acf4:	681b      	ldr	r3, [r3, #0]
 800acf6:	2b00      	cmp	r3, #0
 800acf8:	d10b      	bne.n	800ad12 <vTaskSwitchContext+0x5e>
	__asm volatile
 800acfa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800acfe:	f383 8811 	msr	BASEPRI, r3
 800ad02:	f3bf 8f6f 	isb	sy
 800ad06:	f3bf 8f4f 	dsb	sy
 800ad0a:	607b      	str	r3, [r7, #4]
}
 800ad0c:	bf00      	nop
 800ad0e:	bf00      	nop
 800ad10:	e7fd      	b.n	800ad0e <vTaskSwitchContext+0x5a>
 800ad12:	697a      	ldr	r2, [r7, #20]
 800ad14:	4613      	mov	r3, r2
 800ad16:	009b      	lsls	r3, r3, #2
 800ad18:	4413      	add	r3, r2
 800ad1a:	009b      	lsls	r3, r3, #2
 800ad1c:	4a11      	ldr	r2, [pc, #68]	@ (800ad64 <vTaskSwitchContext+0xb0>)
 800ad1e:	4413      	add	r3, r2
 800ad20:	613b      	str	r3, [r7, #16]
 800ad22:	693b      	ldr	r3, [r7, #16]
 800ad24:	685b      	ldr	r3, [r3, #4]
 800ad26:	685a      	ldr	r2, [r3, #4]
 800ad28:	693b      	ldr	r3, [r7, #16]
 800ad2a:	605a      	str	r2, [r3, #4]
 800ad2c:	693b      	ldr	r3, [r7, #16]
 800ad2e:	685a      	ldr	r2, [r3, #4]
 800ad30:	693b      	ldr	r3, [r7, #16]
 800ad32:	3308      	adds	r3, #8
 800ad34:	429a      	cmp	r2, r3
 800ad36:	d104      	bne.n	800ad42 <vTaskSwitchContext+0x8e>
 800ad38:	693b      	ldr	r3, [r7, #16]
 800ad3a:	685b      	ldr	r3, [r3, #4]
 800ad3c:	685a      	ldr	r2, [r3, #4]
 800ad3e:	693b      	ldr	r3, [r7, #16]
 800ad40:	605a      	str	r2, [r3, #4]
 800ad42:	693b      	ldr	r3, [r7, #16]
 800ad44:	685b      	ldr	r3, [r3, #4]
 800ad46:	68db      	ldr	r3, [r3, #12]
 800ad48:	4a07      	ldr	r2, [pc, #28]	@ (800ad68 <vTaskSwitchContext+0xb4>)
 800ad4a:	6013      	str	r3, [r2, #0]
}
 800ad4c:	bf00      	nop
 800ad4e:	371c      	adds	r7, #28
 800ad50:	46bd      	mov	sp, r7
 800ad52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad56:	4770      	bx	lr
 800ad58:	20000a44 	.word	0x20000a44
 800ad5c:	20000a30 	.word	0x20000a30
 800ad60:	20000a24 	.word	0x20000a24
 800ad64:	20000920 	.word	0x20000920
 800ad68:	2000091c 	.word	0x2000091c

0800ad6c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800ad6c:	b580      	push	{r7, lr}
 800ad6e:	b084      	sub	sp, #16
 800ad70:	af00      	add	r7, sp, #0
 800ad72:	6078      	str	r0, [r7, #4]
 800ad74:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	2b00      	cmp	r3, #0
 800ad7a:	d10b      	bne.n	800ad94 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800ad7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad80:	f383 8811 	msr	BASEPRI, r3
 800ad84:	f3bf 8f6f 	isb	sy
 800ad88:	f3bf 8f4f 	dsb	sy
 800ad8c:	60fb      	str	r3, [r7, #12]
}
 800ad8e:	bf00      	nop
 800ad90:	bf00      	nop
 800ad92:	e7fd      	b.n	800ad90 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ad94:	4b07      	ldr	r3, [pc, #28]	@ (800adb4 <vTaskPlaceOnEventList+0x48>)
 800ad96:	681b      	ldr	r3, [r3, #0]
 800ad98:	3318      	adds	r3, #24
 800ad9a:	4619      	mov	r1, r3
 800ad9c:	6878      	ldr	r0, [r7, #4]
 800ad9e:	f7fe ff00 	bl	8009ba2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800ada2:	2101      	movs	r1, #1
 800ada4:	6838      	ldr	r0, [r7, #0]
 800ada6:	f000 fb67 	bl	800b478 <prvAddCurrentTaskToDelayedList>
}
 800adaa:	bf00      	nop
 800adac:	3710      	adds	r7, #16
 800adae:	46bd      	mov	sp, r7
 800adb0:	bd80      	pop	{r7, pc}
 800adb2:	bf00      	nop
 800adb4:	2000091c 	.word	0x2000091c

0800adb8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800adb8:	b580      	push	{r7, lr}
 800adba:	b086      	sub	sp, #24
 800adbc:	af00      	add	r7, sp, #0
 800adbe:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	68db      	ldr	r3, [r3, #12]
 800adc4:	68db      	ldr	r3, [r3, #12]
 800adc6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800adc8:	693b      	ldr	r3, [r7, #16]
 800adca:	2b00      	cmp	r3, #0
 800adcc:	d10b      	bne.n	800ade6 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800adce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800add2:	f383 8811 	msr	BASEPRI, r3
 800add6:	f3bf 8f6f 	isb	sy
 800adda:	f3bf 8f4f 	dsb	sy
 800adde:	60fb      	str	r3, [r7, #12]
}
 800ade0:	bf00      	nop
 800ade2:	bf00      	nop
 800ade4:	e7fd      	b.n	800ade2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800ade6:	693b      	ldr	r3, [r7, #16]
 800ade8:	3318      	adds	r3, #24
 800adea:	4618      	mov	r0, r3
 800adec:	f7fe ff12 	bl	8009c14 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800adf0:	4b1d      	ldr	r3, [pc, #116]	@ (800ae68 <xTaskRemoveFromEventList+0xb0>)
 800adf2:	681b      	ldr	r3, [r3, #0]
 800adf4:	2b00      	cmp	r3, #0
 800adf6:	d11c      	bne.n	800ae32 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800adf8:	693b      	ldr	r3, [r7, #16]
 800adfa:	3304      	adds	r3, #4
 800adfc:	4618      	mov	r0, r3
 800adfe:	f7fe ff09 	bl	8009c14 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800ae02:	693b      	ldr	r3, [r7, #16]
 800ae04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ae06:	2201      	movs	r2, #1
 800ae08:	409a      	lsls	r2, r3
 800ae0a:	4b18      	ldr	r3, [pc, #96]	@ (800ae6c <xTaskRemoveFromEventList+0xb4>)
 800ae0c:	681b      	ldr	r3, [r3, #0]
 800ae0e:	4313      	orrs	r3, r2
 800ae10:	4a16      	ldr	r2, [pc, #88]	@ (800ae6c <xTaskRemoveFromEventList+0xb4>)
 800ae12:	6013      	str	r3, [r2, #0]
 800ae14:	693b      	ldr	r3, [r7, #16]
 800ae16:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ae18:	4613      	mov	r3, r2
 800ae1a:	009b      	lsls	r3, r3, #2
 800ae1c:	4413      	add	r3, r2
 800ae1e:	009b      	lsls	r3, r3, #2
 800ae20:	4a13      	ldr	r2, [pc, #76]	@ (800ae70 <xTaskRemoveFromEventList+0xb8>)
 800ae22:	441a      	add	r2, r3
 800ae24:	693b      	ldr	r3, [r7, #16]
 800ae26:	3304      	adds	r3, #4
 800ae28:	4619      	mov	r1, r3
 800ae2a:	4610      	mov	r0, r2
 800ae2c:	f7fe fe95 	bl	8009b5a <vListInsertEnd>
 800ae30:	e005      	b.n	800ae3e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800ae32:	693b      	ldr	r3, [r7, #16]
 800ae34:	3318      	adds	r3, #24
 800ae36:	4619      	mov	r1, r3
 800ae38:	480e      	ldr	r0, [pc, #56]	@ (800ae74 <xTaskRemoveFromEventList+0xbc>)
 800ae3a:	f7fe fe8e 	bl	8009b5a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800ae3e:	693b      	ldr	r3, [r7, #16]
 800ae40:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ae42:	4b0d      	ldr	r3, [pc, #52]	@ (800ae78 <xTaskRemoveFromEventList+0xc0>)
 800ae44:	681b      	ldr	r3, [r3, #0]
 800ae46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ae48:	429a      	cmp	r2, r3
 800ae4a:	d905      	bls.n	800ae58 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800ae4c:	2301      	movs	r3, #1
 800ae4e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800ae50:	4b0a      	ldr	r3, [pc, #40]	@ (800ae7c <xTaskRemoveFromEventList+0xc4>)
 800ae52:	2201      	movs	r2, #1
 800ae54:	601a      	str	r2, [r3, #0]
 800ae56:	e001      	b.n	800ae5c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800ae58:	2300      	movs	r3, #0
 800ae5a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800ae5c:	697b      	ldr	r3, [r7, #20]
}
 800ae5e:	4618      	mov	r0, r3
 800ae60:	3718      	adds	r7, #24
 800ae62:	46bd      	mov	sp, r7
 800ae64:	bd80      	pop	{r7, pc}
 800ae66:	bf00      	nop
 800ae68:	20000a44 	.word	0x20000a44
 800ae6c:	20000a24 	.word	0x20000a24
 800ae70:	20000920 	.word	0x20000920
 800ae74:	200009dc 	.word	0x200009dc
 800ae78:	2000091c 	.word	0x2000091c
 800ae7c:	20000a30 	.word	0x20000a30

0800ae80 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800ae80:	b480      	push	{r7}
 800ae82:	b083      	sub	sp, #12
 800ae84:	af00      	add	r7, sp, #0
 800ae86:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800ae88:	4b06      	ldr	r3, [pc, #24]	@ (800aea4 <vTaskInternalSetTimeOutState+0x24>)
 800ae8a:	681a      	ldr	r2, [r3, #0]
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800ae90:	4b05      	ldr	r3, [pc, #20]	@ (800aea8 <vTaskInternalSetTimeOutState+0x28>)
 800ae92:	681a      	ldr	r2, [r3, #0]
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	605a      	str	r2, [r3, #4]
}
 800ae98:	bf00      	nop
 800ae9a:	370c      	adds	r7, #12
 800ae9c:	46bd      	mov	sp, r7
 800ae9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aea2:	4770      	bx	lr
 800aea4:	20000a34 	.word	0x20000a34
 800aea8:	20000a20 	.word	0x20000a20

0800aeac <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800aeac:	b580      	push	{r7, lr}
 800aeae:	b088      	sub	sp, #32
 800aeb0:	af00      	add	r7, sp, #0
 800aeb2:	6078      	str	r0, [r7, #4]
 800aeb4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	2b00      	cmp	r3, #0
 800aeba:	d10b      	bne.n	800aed4 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800aebc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aec0:	f383 8811 	msr	BASEPRI, r3
 800aec4:	f3bf 8f6f 	isb	sy
 800aec8:	f3bf 8f4f 	dsb	sy
 800aecc:	613b      	str	r3, [r7, #16]
}
 800aece:	bf00      	nop
 800aed0:	bf00      	nop
 800aed2:	e7fd      	b.n	800aed0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800aed4:	683b      	ldr	r3, [r7, #0]
 800aed6:	2b00      	cmp	r3, #0
 800aed8:	d10b      	bne.n	800aef2 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800aeda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aede:	f383 8811 	msr	BASEPRI, r3
 800aee2:	f3bf 8f6f 	isb	sy
 800aee6:	f3bf 8f4f 	dsb	sy
 800aeea:	60fb      	str	r3, [r7, #12]
}
 800aeec:	bf00      	nop
 800aeee:	bf00      	nop
 800aef0:	e7fd      	b.n	800aeee <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800aef2:	f000 fc59 	bl	800b7a8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800aef6:	4b1d      	ldr	r3, [pc, #116]	@ (800af6c <xTaskCheckForTimeOut+0xc0>)
 800aef8:	681b      	ldr	r3, [r3, #0]
 800aefa:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	685b      	ldr	r3, [r3, #4]
 800af00:	69ba      	ldr	r2, [r7, #24]
 800af02:	1ad3      	subs	r3, r2, r3
 800af04:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800af06:	683b      	ldr	r3, [r7, #0]
 800af08:	681b      	ldr	r3, [r3, #0]
 800af0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af0e:	d102      	bne.n	800af16 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800af10:	2300      	movs	r3, #0
 800af12:	61fb      	str	r3, [r7, #28]
 800af14:	e023      	b.n	800af5e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	681a      	ldr	r2, [r3, #0]
 800af1a:	4b15      	ldr	r3, [pc, #84]	@ (800af70 <xTaskCheckForTimeOut+0xc4>)
 800af1c:	681b      	ldr	r3, [r3, #0]
 800af1e:	429a      	cmp	r2, r3
 800af20:	d007      	beq.n	800af32 <xTaskCheckForTimeOut+0x86>
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	685b      	ldr	r3, [r3, #4]
 800af26:	69ba      	ldr	r2, [r7, #24]
 800af28:	429a      	cmp	r2, r3
 800af2a:	d302      	bcc.n	800af32 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800af2c:	2301      	movs	r3, #1
 800af2e:	61fb      	str	r3, [r7, #28]
 800af30:	e015      	b.n	800af5e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800af32:	683b      	ldr	r3, [r7, #0]
 800af34:	681b      	ldr	r3, [r3, #0]
 800af36:	697a      	ldr	r2, [r7, #20]
 800af38:	429a      	cmp	r2, r3
 800af3a:	d20b      	bcs.n	800af54 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800af3c:	683b      	ldr	r3, [r7, #0]
 800af3e:	681a      	ldr	r2, [r3, #0]
 800af40:	697b      	ldr	r3, [r7, #20]
 800af42:	1ad2      	subs	r2, r2, r3
 800af44:	683b      	ldr	r3, [r7, #0]
 800af46:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800af48:	6878      	ldr	r0, [r7, #4]
 800af4a:	f7ff ff99 	bl	800ae80 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800af4e:	2300      	movs	r3, #0
 800af50:	61fb      	str	r3, [r7, #28]
 800af52:	e004      	b.n	800af5e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800af54:	683b      	ldr	r3, [r7, #0]
 800af56:	2200      	movs	r2, #0
 800af58:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800af5a:	2301      	movs	r3, #1
 800af5c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800af5e:	f000 fc55 	bl	800b80c <vPortExitCritical>

	return xReturn;
 800af62:	69fb      	ldr	r3, [r7, #28]
}
 800af64:	4618      	mov	r0, r3
 800af66:	3720      	adds	r7, #32
 800af68:	46bd      	mov	sp, r7
 800af6a:	bd80      	pop	{r7, pc}
 800af6c:	20000a20 	.word	0x20000a20
 800af70:	20000a34 	.word	0x20000a34

0800af74 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800af74:	b480      	push	{r7}
 800af76:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800af78:	4b03      	ldr	r3, [pc, #12]	@ (800af88 <vTaskMissedYield+0x14>)
 800af7a:	2201      	movs	r2, #1
 800af7c:	601a      	str	r2, [r3, #0]
}
 800af7e:	bf00      	nop
 800af80:	46bd      	mov	sp, r7
 800af82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af86:	4770      	bx	lr
 800af88:	20000a30 	.word	0x20000a30

0800af8c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800af8c:	b580      	push	{r7, lr}
 800af8e:	b082      	sub	sp, #8
 800af90:	af00      	add	r7, sp, #0
 800af92:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800af94:	f000 f852 	bl	800b03c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800af98:	4b06      	ldr	r3, [pc, #24]	@ (800afb4 <prvIdleTask+0x28>)
 800af9a:	681b      	ldr	r3, [r3, #0]
 800af9c:	2b01      	cmp	r3, #1
 800af9e:	d9f9      	bls.n	800af94 <prvIdleTask+0x8>
			{
				taskYIELD();
 800afa0:	4b05      	ldr	r3, [pc, #20]	@ (800afb8 <prvIdleTask+0x2c>)
 800afa2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800afa6:	601a      	str	r2, [r3, #0]
 800afa8:	f3bf 8f4f 	dsb	sy
 800afac:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800afb0:	e7f0      	b.n	800af94 <prvIdleTask+0x8>
 800afb2:	bf00      	nop
 800afb4:	20000920 	.word	0x20000920
 800afb8:	e000ed04 	.word	0xe000ed04

0800afbc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800afbc:	b580      	push	{r7, lr}
 800afbe:	b082      	sub	sp, #8
 800afc0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800afc2:	2300      	movs	r3, #0
 800afc4:	607b      	str	r3, [r7, #4]
 800afc6:	e00c      	b.n	800afe2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800afc8:	687a      	ldr	r2, [r7, #4]
 800afca:	4613      	mov	r3, r2
 800afcc:	009b      	lsls	r3, r3, #2
 800afce:	4413      	add	r3, r2
 800afd0:	009b      	lsls	r3, r3, #2
 800afd2:	4a12      	ldr	r2, [pc, #72]	@ (800b01c <prvInitialiseTaskLists+0x60>)
 800afd4:	4413      	add	r3, r2
 800afd6:	4618      	mov	r0, r3
 800afd8:	f7fe fd92 	bl	8009b00 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	3301      	adds	r3, #1
 800afe0:	607b      	str	r3, [r7, #4]
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	2b06      	cmp	r3, #6
 800afe6:	d9ef      	bls.n	800afc8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800afe8:	480d      	ldr	r0, [pc, #52]	@ (800b020 <prvInitialiseTaskLists+0x64>)
 800afea:	f7fe fd89 	bl	8009b00 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800afee:	480d      	ldr	r0, [pc, #52]	@ (800b024 <prvInitialiseTaskLists+0x68>)
 800aff0:	f7fe fd86 	bl	8009b00 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800aff4:	480c      	ldr	r0, [pc, #48]	@ (800b028 <prvInitialiseTaskLists+0x6c>)
 800aff6:	f7fe fd83 	bl	8009b00 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800affa:	480c      	ldr	r0, [pc, #48]	@ (800b02c <prvInitialiseTaskLists+0x70>)
 800affc:	f7fe fd80 	bl	8009b00 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800b000:	480b      	ldr	r0, [pc, #44]	@ (800b030 <prvInitialiseTaskLists+0x74>)
 800b002:	f7fe fd7d 	bl	8009b00 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800b006:	4b0b      	ldr	r3, [pc, #44]	@ (800b034 <prvInitialiseTaskLists+0x78>)
 800b008:	4a05      	ldr	r2, [pc, #20]	@ (800b020 <prvInitialiseTaskLists+0x64>)
 800b00a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b00c:	4b0a      	ldr	r3, [pc, #40]	@ (800b038 <prvInitialiseTaskLists+0x7c>)
 800b00e:	4a05      	ldr	r2, [pc, #20]	@ (800b024 <prvInitialiseTaskLists+0x68>)
 800b010:	601a      	str	r2, [r3, #0]
}
 800b012:	bf00      	nop
 800b014:	3708      	adds	r7, #8
 800b016:	46bd      	mov	sp, r7
 800b018:	bd80      	pop	{r7, pc}
 800b01a:	bf00      	nop
 800b01c:	20000920 	.word	0x20000920
 800b020:	200009ac 	.word	0x200009ac
 800b024:	200009c0 	.word	0x200009c0
 800b028:	200009dc 	.word	0x200009dc
 800b02c:	200009f0 	.word	0x200009f0
 800b030:	20000a08 	.word	0x20000a08
 800b034:	200009d4 	.word	0x200009d4
 800b038:	200009d8 	.word	0x200009d8

0800b03c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800b03c:	b580      	push	{r7, lr}
 800b03e:	b082      	sub	sp, #8
 800b040:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b042:	e019      	b.n	800b078 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800b044:	f000 fbb0 	bl	800b7a8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b048:	4b10      	ldr	r3, [pc, #64]	@ (800b08c <prvCheckTasksWaitingTermination+0x50>)
 800b04a:	68db      	ldr	r3, [r3, #12]
 800b04c:	68db      	ldr	r3, [r3, #12]
 800b04e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	3304      	adds	r3, #4
 800b054:	4618      	mov	r0, r3
 800b056:	f7fe fddd 	bl	8009c14 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800b05a:	4b0d      	ldr	r3, [pc, #52]	@ (800b090 <prvCheckTasksWaitingTermination+0x54>)
 800b05c:	681b      	ldr	r3, [r3, #0]
 800b05e:	3b01      	subs	r3, #1
 800b060:	4a0b      	ldr	r2, [pc, #44]	@ (800b090 <prvCheckTasksWaitingTermination+0x54>)
 800b062:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800b064:	4b0b      	ldr	r3, [pc, #44]	@ (800b094 <prvCheckTasksWaitingTermination+0x58>)
 800b066:	681b      	ldr	r3, [r3, #0]
 800b068:	3b01      	subs	r3, #1
 800b06a:	4a0a      	ldr	r2, [pc, #40]	@ (800b094 <prvCheckTasksWaitingTermination+0x58>)
 800b06c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800b06e:	f000 fbcd 	bl	800b80c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800b072:	6878      	ldr	r0, [r7, #4]
 800b074:	f000 f810 	bl	800b098 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b078:	4b06      	ldr	r3, [pc, #24]	@ (800b094 <prvCheckTasksWaitingTermination+0x58>)
 800b07a:	681b      	ldr	r3, [r3, #0]
 800b07c:	2b00      	cmp	r3, #0
 800b07e:	d1e1      	bne.n	800b044 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800b080:	bf00      	nop
 800b082:	bf00      	nop
 800b084:	3708      	adds	r7, #8
 800b086:	46bd      	mov	sp, r7
 800b088:	bd80      	pop	{r7, pc}
 800b08a:	bf00      	nop
 800b08c:	200009f0 	.word	0x200009f0
 800b090:	20000a1c 	.word	0x20000a1c
 800b094:	20000a04 	.word	0x20000a04

0800b098 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800b098:	b580      	push	{r7, lr}
 800b09a:	b082      	sub	sp, #8
 800b09c:	af00      	add	r7, sp, #0
 800b09e:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b0a4:	4618      	mov	r0, r3
 800b0a6:	f000 fd6f 	bl	800bb88 <vPortFree>
			vPortFree( pxTCB );
 800b0aa:	6878      	ldr	r0, [r7, #4]
 800b0ac:	f000 fd6c 	bl	800bb88 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800b0b0:	bf00      	nop
 800b0b2:	3708      	adds	r7, #8
 800b0b4:	46bd      	mov	sp, r7
 800b0b6:	bd80      	pop	{r7, pc}

0800b0b8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b0b8:	b480      	push	{r7}
 800b0ba:	b083      	sub	sp, #12
 800b0bc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b0be:	4b0c      	ldr	r3, [pc, #48]	@ (800b0f0 <prvResetNextTaskUnblockTime+0x38>)
 800b0c0:	681b      	ldr	r3, [r3, #0]
 800b0c2:	681b      	ldr	r3, [r3, #0]
 800b0c4:	2b00      	cmp	r3, #0
 800b0c6:	d104      	bne.n	800b0d2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b0c8:	4b0a      	ldr	r3, [pc, #40]	@ (800b0f4 <prvResetNextTaskUnblockTime+0x3c>)
 800b0ca:	f04f 32ff 	mov.w	r2, #4294967295
 800b0ce:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800b0d0:	e008      	b.n	800b0e4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b0d2:	4b07      	ldr	r3, [pc, #28]	@ (800b0f0 <prvResetNextTaskUnblockTime+0x38>)
 800b0d4:	681b      	ldr	r3, [r3, #0]
 800b0d6:	68db      	ldr	r3, [r3, #12]
 800b0d8:	68db      	ldr	r3, [r3, #12]
 800b0da:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	685b      	ldr	r3, [r3, #4]
 800b0e0:	4a04      	ldr	r2, [pc, #16]	@ (800b0f4 <prvResetNextTaskUnblockTime+0x3c>)
 800b0e2:	6013      	str	r3, [r2, #0]
}
 800b0e4:	bf00      	nop
 800b0e6:	370c      	adds	r7, #12
 800b0e8:	46bd      	mov	sp, r7
 800b0ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0ee:	4770      	bx	lr
 800b0f0:	200009d4 	.word	0x200009d4
 800b0f4:	20000a3c 	.word	0x20000a3c

0800b0f8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800b0f8:	b480      	push	{r7}
 800b0fa:	b083      	sub	sp, #12
 800b0fc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800b0fe:	4b0b      	ldr	r3, [pc, #44]	@ (800b12c <xTaskGetSchedulerState+0x34>)
 800b100:	681b      	ldr	r3, [r3, #0]
 800b102:	2b00      	cmp	r3, #0
 800b104:	d102      	bne.n	800b10c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800b106:	2301      	movs	r3, #1
 800b108:	607b      	str	r3, [r7, #4]
 800b10a:	e008      	b.n	800b11e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b10c:	4b08      	ldr	r3, [pc, #32]	@ (800b130 <xTaskGetSchedulerState+0x38>)
 800b10e:	681b      	ldr	r3, [r3, #0]
 800b110:	2b00      	cmp	r3, #0
 800b112:	d102      	bne.n	800b11a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800b114:	2302      	movs	r3, #2
 800b116:	607b      	str	r3, [r7, #4]
 800b118:	e001      	b.n	800b11e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800b11a:	2300      	movs	r3, #0
 800b11c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800b11e:	687b      	ldr	r3, [r7, #4]
	}
 800b120:	4618      	mov	r0, r3
 800b122:	370c      	adds	r7, #12
 800b124:	46bd      	mov	sp, r7
 800b126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b12a:	4770      	bx	lr
 800b12c:	20000a28 	.word	0x20000a28
 800b130:	20000a44 	.word	0x20000a44

0800b134 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800b134:	b580      	push	{r7, lr}
 800b136:	b084      	sub	sp, #16
 800b138:	af00      	add	r7, sp, #0
 800b13a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800b140:	2300      	movs	r3, #0
 800b142:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	2b00      	cmp	r3, #0
 800b148:	d05e      	beq.n	800b208 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800b14a:	68bb      	ldr	r3, [r7, #8]
 800b14c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b14e:	4b31      	ldr	r3, [pc, #196]	@ (800b214 <xTaskPriorityInherit+0xe0>)
 800b150:	681b      	ldr	r3, [r3, #0]
 800b152:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b154:	429a      	cmp	r2, r3
 800b156:	d24e      	bcs.n	800b1f6 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800b158:	68bb      	ldr	r3, [r7, #8]
 800b15a:	699b      	ldr	r3, [r3, #24]
 800b15c:	2b00      	cmp	r3, #0
 800b15e:	db06      	blt.n	800b16e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b160:	4b2c      	ldr	r3, [pc, #176]	@ (800b214 <xTaskPriorityInherit+0xe0>)
 800b162:	681b      	ldr	r3, [r3, #0]
 800b164:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b166:	f1c3 0207 	rsb	r2, r3, #7
 800b16a:	68bb      	ldr	r3, [r7, #8]
 800b16c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800b16e:	68bb      	ldr	r3, [r7, #8]
 800b170:	6959      	ldr	r1, [r3, #20]
 800b172:	68bb      	ldr	r3, [r7, #8]
 800b174:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b176:	4613      	mov	r3, r2
 800b178:	009b      	lsls	r3, r3, #2
 800b17a:	4413      	add	r3, r2
 800b17c:	009b      	lsls	r3, r3, #2
 800b17e:	4a26      	ldr	r2, [pc, #152]	@ (800b218 <xTaskPriorityInherit+0xe4>)
 800b180:	4413      	add	r3, r2
 800b182:	4299      	cmp	r1, r3
 800b184:	d12f      	bne.n	800b1e6 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b186:	68bb      	ldr	r3, [r7, #8]
 800b188:	3304      	adds	r3, #4
 800b18a:	4618      	mov	r0, r3
 800b18c:	f7fe fd42 	bl	8009c14 <uxListRemove>
 800b190:	4603      	mov	r3, r0
 800b192:	2b00      	cmp	r3, #0
 800b194:	d10a      	bne.n	800b1ac <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800b196:	68bb      	ldr	r3, [r7, #8]
 800b198:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b19a:	2201      	movs	r2, #1
 800b19c:	fa02 f303 	lsl.w	r3, r2, r3
 800b1a0:	43da      	mvns	r2, r3
 800b1a2:	4b1e      	ldr	r3, [pc, #120]	@ (800b21c <xTaskPriorityInherit+0xe8>)
 800b1a4:	681b      	ldr	r3, [r3, #0]
 800b1a6:	4013      	ands	r3, r2
 800b1a8:	4a1c      	ldr	r2, [pc, #112]	@ (800b21c <xTaskPriorityInherit+0xe8>)
 800b1aa:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800b1ac:	4b19      	ldr	r3, [pc, #100]	@ (800b214 <xTaskPriorityInherit+0xe0>)
 800b1ae:	681b      	ldr	r3, [r3, #0]
 800b1b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b1b2:	68bb      	ldr	r3, [r7, #8]
 800b1b4:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800b1b6:	68bb      	ldr	r3, [r7, #8]
 800b1b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b1ba:	2201      	movs	r2, #1
 800b1bc:	409a      	lsls	r2, r3
 800b1be:	4b17      	ldr	r3, [pc, #92]	@ (800b21c <xTaskPriorityInherit+0xe8>)
 800b1c0:	681b      	ldr	r3, [r3, #0]
 800b1c2:	4313      	orrs	r3, r2
 800b1c4:	4a15      	ldr	r2, [pc, #84]	@ (800b21c <xTaskPriorityInherit+0xe8>)
 800b1c6:	6013      	str	r3, [r2, #0]
 800b1c8:	68bb      	ldr	r3, [r7, #8]
 800b1ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b1cc:	4613      	mov	r3, r2
 800b1ce:	009b      	lsls	r3, r3, #2
 800b1d0:	4413      	add	r3, r2
 800b1d2:	009b      	lsls	r3, r3, #2
 800b1d4:	4a10      	ldr	r2, [pc, #64]	@ (800b218 <xTaskPriorityInherit+0xe4>)
 800b1d6:	441a      	add	r2, r3
 800b1d8:	68bb      	ldr	r3, [r7, #8]
 800b1da:	3304      	adds	r3, #4
 800b1dc:	4619      	mov	r1, r3
 800b1de:	4610      	mov	r0, r2
 800b1e0:	f7fe fcbb 	bl	8009b5a <vListInsertEnd>
 800b1e4:	e004      	b.n	800b1f0 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800b1e6:	4b0b      	ldr	r3, [pc, #44]	@ (800b214 <xTaskPriorityInherit+0xe0>)
 800b1e8:	681b      	ldr	r3, [r3, #0]
 800b1ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b1ec:	68bb      	ldr	r3, [r7, #8]
 800b1ee:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800b1f0:	2301      	movs	r3, #1
 800b1f2:	60fb      	str	r3, [r7, #12]
 800b1f4:	e008      	b.n	800b208 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800b1f6:	68bb      	ldr	r3, [r7, #8]
 800b1f8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b1fa:	4b06      	ldr	r3, [pc, #24]	@ (800b214 <xTaskPriorityInherit+0xe0>)
 800b1fc:	681b      	ldr	r3, [r3, #0]
 800b1fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b200:	429a      	cmp	r2, r3
 800b202:	d201      	bcs.n	800b208 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800b204:	2301      	movs	r3, #1
 800b206:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b208:	68fb      	ldr	r3, [r7, #12]
	}
 800b20a:	4618      	mov	r0, r3
 800b20c:	3710      	adds	r7, #16
 800b20e:	46bd      	mov	sp, r7
 800b210:	bd80      	pop	{r7, pc}
 800b212:	bf00      	nop
 800b214:	2000091c 	.word	0x2000091c
 800b218:	20000920 	.word	0x20000920
 800b21c:	20000a24 	.word	0x20000a24

0800b220 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800b220:	b580      	push	{r7, lr}
 800b222:	b086      	sub	sp, #24
 800b224:	af00      	add	r7, sp, #0
 800b226:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800b22c:	2300      	movs	r3, #0
 800b22e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	2b00      	cmp	r3, #0
 800b234:	d070      	beq.n	800b318 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800b236:	4b3b      	ldr	r3, [pc, #236]	@ (800b324 <xTaskPriorityDisinherit+0x104>)
 800b238:	681b      	ldr	r3, [r3, #0]
 800b23a:	693a      	ldr	r2, [r7, #16]
 800b23c:	429a      	cmp	r2, r3
 800b23e:	d00b      	beq.n	800b258 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800b240:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b244:	f383 8811 	msr	BASEPRI, r3
 800b248:	f3bf 8f6f 	isb	sy
 800b24c:	f3bf 8f4f 	dsb	sy
 800b250:	60fb      	str	r3, [r7, #12]
}
 800b252:	bf00      	nop
 800b254:	bf00      	nop
 800b256:	e7fd      	b.n	800b254 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800b258:	693b      	ldr	r3, [r7, #16]
 800b25a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b25c:	2b00      	cmp	r3, #0
 800b25e:	d10b      	bne.n	800b278 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800b260:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b264:	f383 8811 	msr	BASEPRI, r3
 800b268:	f3bf 8f6f 	isb	sy
 800b26c:	f3bf 8f4f 	dsb	sy
 800b270:	60bb      	str	r3, [r7, #8]
}
 800b272:	bf00      	nop
 800b274:	bf00      	nop
 800b276:	e7fd      	b.n	800b274 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800b278:	693b      	ldr	r3, [r7, #16]
 800b27a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b27c:	1e5a      	subs	r2, r3, #1
 800b27e:	693b      	ldr	r3, [r7, #16]
 800b280:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800b282:	693b      	ldr	r3, [r7, #16]
 800b284:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b286:	693b      	ldr	r3, [r7, #16]
 800b288:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b28a:	429a      	cmp	r2, r3
 800b28c:	d044      	beq.n	800b318 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800b28e:	693b      	ldr	r3, [r7, #16]
 800b290:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b292:	2b00      	cmp	r3, #0
 800b294:	d140      	bne.n	800b318 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b296:	693b      	ldr	r3, [r7, #16]
 800b298:	3304      	adds	r3, #4
 800b29a:	4618      	mov	r0, r3
 800b29c:	f7fe fcba 	bl	8009c14 <uxListRemove>
 800b2a0:	4603      	mov	r3, r0
 800b2a2:	2b00      	cmp	r3, #0
 800b2a4:	d115      	bne.n	800b2d2 <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800b2a6:	693b      	ldr	r3, [r7, #16]
 800b2a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b2aa:	491f      	ldr	r1, [pc, #124]	@ (800b328 <xTaskPriorityDisinherit+0x108>)
 800b2ac:	4613      	mov	r3, r2
 800b2ae:	009b      	lsls	r3, r3, #2
 800b2b0:	4413      	add	r3, r2
 800b2b2:	009b      	lsls	r3, r3, #2
 800b2b4:	440b      	add	r3, r1
 800b2b6:	681b      	ldr	r3, [r3, #0]
 800b2b8:	2b00      	cmp	r3, #0
 800b2ba:	d10a      	bne.n	800b2d2 <xTaskPriorityDisinherit+0xb2>
 800b2bc:	693b      	ldr	r3, [r7, #16]
 800b2be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b2c0:	2201      	movs	r2, #1
 800b2c2:	fa02 f303 	lsl.w	r3, r2, r3
 800b2c6:	43da      	mvns	r2, r3
 800b2c8:	4b18      	ldr	r3, [pc, #96]	@ (800b32c <xTaskPriorityDisinherit+0x10c>)
 800b2ca:	681b      	ldr	r3, [r3, #0]
 800b2cc:	4013      	ands	r3, r2
 800b2ce:	4a17      	ldr	r2, [pc, #92]	@ (800b32c <xTaskPriorityDisinherit+0x10c>)
 800b2d0:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800b2d2:	693b      	ldr	r3, [r7, #16]
 800b2d4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b2d6:	693b      	ldr	r3, [r7, #16]
 800b2d8:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b2da:	693b      	ldr	r3, [r7, #16]
 800b2dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b2de:	f1c3 0207 	rsb	r2, r3, #7
 800b2e2:	693b      	ldr	r3, [r7, #16]
 800b2e4:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800b2e6:	693b      	ldr	r3, [r7, #16]
 800b2e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b2ea:	2201      	movs	r2, #1
 800b2ec:	409a      	lsls	r2, r3
 800b2ee:	4b0f      	ldr	r3, [pc, #60]	@ (800b32c <xTaskPriorityDisinherit+0x10c>)
 800b2f0:	681b      	ldr	r3, [r3, #0]
 800b2f2:	4313      	orrs	r3, r2
 800b2f4:	4a0d      	ldr	r2, [pc, #52]	@ (800b32c <xTaskPriorityDisinherit+0x10c>)
 800b2f6:	6013      	str	r3, [r2, #0]
 800b2f8:	693b      	ldr	r3, [r7, #16]
 800b2fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b2fc:	4613      	mov	r3, r2
 800b2fe:	009b      	lsls	r3, r3, #2
 800b300:	4413      	add	r3, r2
 800b302:	009b      	lsls	r3, r3, #2
 800b304:	4a08      	ldr	r2, [pc, #32]	@ (800b328 <xTaskPriorityDisinherit+0x108>)
 800b306:	441a      	add	r2, r3
 800b308:	693b      	ldr	r3, [r7, #16]
 800b30a:	3304      	adds	r3, #4
 800b30c:	4619      	mov	r1, r3
 800b30e:	4610      	mov	r0, r2
 800b310:	f7fe fc23 	bl	8009b5a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800b314:	2301      	movs	r3, #1
 800b316:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b318:	697b      	ldr	r3, [r7, #20]
	}
 800b31a:	4618      	mov	r0, r3
 800b31c:	3718      	adds	r7, #24
 800b31e:	46bd      	mov	sp, r7
 800b320:	bd80      	pop	{r7, pc}
 800b322:	bf00      	nop
 800b324:	2000091c 	.word	0x2000091c
 800b328:	20000920 	.word	0x20000920
 800b32c:	20000a24 	.word	0x20000a24

0800b330 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800b330:	b580      	push	{r7, lr}
 800b332:	b088      	sub	sp, #32
 800b334:	af00      	add	r7, sp, #0
 800b336:	6078      	str	r0, [r7, #4]
 800b338:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800b33e:	2301      	movs	r3, #1
 800b340:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	2b00      	cmp	r3, #0
 800b346:	d079      	beq.n	800b43c <vTaskPriorityDisinheritAfterTimeout+0x10c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800b348:	69bb      	ldr	r3, [r7, #24]
 800b34a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b34c:	2b00      	cmp	r3, #0
 800b34e:	d10b      	bne.n	800b368 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800b350:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b354:	f383 8811 	msr	BASEPRI, r3
 800b358:	f3bf 8f6f 	isb	sy
 800b35c:	f3bf 8f4f 	dsb	sy
 800b360:	60fb      	str	r3, [r7, #12]
}
 800b362:	bf00      	nop
 800b364:	bf00      	nop
 800b366:	e7fd      	b.n	800b364 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800b368:	69bb      	ldr	r3, [r7, #24]
 800b36a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b36c:	683a      	ldr	r2, [r7, #0]
 800b36e:	429a      	cmp	r2, r3
 800b370:	d902      	bls.n	800b378 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800b372:	683b      	ldr	r3, [r7, #0]
 800b374:	61fb      	str	r3, [r7, #28]
 800b376:	e002      	b.n	800b37e <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800b378:	69bb      	ldr	r3, [r7, #24]
 800b37a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b37c:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800b37e:	69bb      	ldr	r3, [r7, #24]
 800b380:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b382:	69fa      	ldr	r2, [r7, #28]
 800b384:	429a      	cmp	r2, r3
 800b386:	d059      	beq.n	800b43c <vTaskPriorityDisinheritAfterTimeout+0x10c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800b388:	69bb      	ldr	r3, [r7, #24]
 800b38a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b38c:	697a      	ldr	r2, [r7, #20]
 800b38e:	429a      	cmp	r2, r3
 800b390:	d154      	bne.n	800b43c <vTaskPriorityDisinheritAfterTimeout+0x10c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800b392:	4b2c      	ldr	r3, [pc, #176]	@ (800b444 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800b394:	681b      	ldr	r3, [r3, #0]
 800b396:	69ba      	ldr	r2, [r7, #24]
 800b398:	429a      	cmp	r2, r3
 800b39a:	d10b      	bne.n	800b3b4 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 800b39c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b3a0:	f383 8811 	msr	BASEPRI, r3
 800b3a4:	f3bf 8f6f 	isb	sy
 800b3a8:	f3bf 8f4f 	dsb	sy
 800b3ac:	60bb      	str	r3, [r7, #8]
}
 800b3ae:	bf00      	nop
 800b3b0:	bf00      	nop
 800b3b2:	e7fd      	b.n	800b3b0 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800b3b4:	69bb      	ldr	r3, [r7, #24]
 800b3b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b3b8:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800b3ba:	69bb      	ldr	r3, [r7, #24]
 800b3bc:	69fa      	ldr	r2, [r7, #28]
 800b3be:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800b3c0:	69bb      	ldr	r3, [r7, #24]
 800b3c2:	699b      	ldr	r3, [r3, #24]
 800b3c4:	2b00      	cmp	r3, #0
 800b3c6:	db04      	blt.n	800b3d2 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b3c8:	69fb      	ldr	r3, [r7, #28]
 800b3ca:	f1c3 0207 	rsb	r2, r3, #7
 800b3ce:	69bb      	ldr	r3, [r7, #24]
 800b3d0:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800b3d2:	69bb      	ldr	r3, [r7, #24]
 800b3d4:	6959      	ldr	r1, [r3, #20]
 800b3d6:	693a      	ldr	r2, [r7, #16]
 800b3d8:	4613      	mov	r3, r2
 800b3da:	009b      	lsls	r3, r3, #2
 800b3dc:	4413      	add	r3, r2
 800b3de:	009b      	lsls	r3, r3, #2
 800b3e0:	4a19      	ldr	r2, [pc, #100]	@ (800b448 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800b3e2:	4413      	add	r3, r2
 800b3e4:	4299      	cmp	r1, r3
 800b3e6:	d129      	bne.n	800b43c <vTaskPriorityDisinheritAfterTimeout+0x10c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b3e8:	69bb      	ldr	r3, [r7, #24]
 800b3ea:	3304      	adds	r3, #4
 800b3ec:	4618      	mov	r0, r3
 800b3ee:	f7fe fc11 	bl	8009c14 <uxListRemove>
 800b3f2:	4603      	mov	r3, r0
 800b3f4:	2b00      	cmp	r3, #0
 800b3f6:	d10a      	bne.n	800b40e <vTaskPriorityDisinheritAfterTimeout+0xde>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800b3f8:	69bb      	ldr	r3, [r7, #24]
 800b3fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b3fc:	2201      	movs	r2, #1
 800b3fe:	fa02 f303 	lsl.w	r3, r2, r3
 800b402:	43da      	mvns	r2, r3
 800b404:	4b11      	ldr	r3, [pc, #68]	@ (800b44c <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800b406:	681b      	ldr	r3, [r3, #0]
 800b408:	4013      	ands	r3, r2
 800b40a:	4a10      	ldr	r2, [pc, #64]	@ (800b44c <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800b40c:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800b40e:	69bb      	ldr	r3, [r7, #24]
 800b410:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b412:	2201      	movs	r2, #1
 800b414:	409a      	lsls	r2, r3
 800b416:	4b0d      	ldr	r3, [pc, #52]	@ (800b44c <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800b418:	681b      	ldr	r3, [r3, #0]
 800b41a:	4313      	orrs	r3, r2
 800b41c:	4a0b      	ldr	r2, [pc, #44]	@ (800b44c <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800b41e:	6013      	str	r3, [r2, #0]
 800b420:	69bb      	ldr	r3, [r7, #24]
 800b422:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b424:	4613      	mov	r3, r2
 800b426:	009b      	lsls	r3, r3, #2
 800b428:	4413      	add	r3, r2
 800b42a:	009b      	lsls	r3, r3, #2
 800b42c:	4a06      	ldr	r2, [pc, #24]	@ (800b448 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800b42e:	441a      	add	r2, r3
 800b430:	69bb      	ldr	r3, [r7, #24]
 800b432:	3304      	adds	r3, #4
 800b434:	4619      	mov	r1, r3
 800b436:	4610      	mov	r0, r2
 800b438:	f7fe fb8f 	bl	8009b5a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b43c:	bf00      	nop
 800b43e:	3720      	adds	r7, #32
 800b440:	46bd      	mov	sp, r7
 800b442:	bd80      	pop	{r7, pc}
 800b444:	2000091c 	.word	0x2000091c
 800b448:	20000920 	.word	0x20000920
 800b44c:	20000a24 	.word	0x20000a24

0800b450 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800b450:	b480      	push	{r7}
 800b452:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800b454:	4b07      	ldr	r3, [pc, #28]	@ (800b474 <pvTaskIncrementMutexHeldCount+0x24>)
 800b456:	681b      	ldr	r3, [r3, #0]
 800b458:	2b00      	cmp	r3, #0
 800b45a:	d004      	beq.n	800b466 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800b45c:	4b05      	ldr	r3, [pc, #20]	@ (800b474 <pvTaskIncrementMutexHeldCount+0x24>)
 800b45e:	681b      	ldr	r3, [r3, #0]
 800b460:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800b462:	3201      	adds	r2, #1
 800b464:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 800b466:	4b03      	ldr	r3, [pc, #12]	@ (800b474 <pvTaskIncrementMutexHeldCount+0x24>)
 800b468:	681b      	ldr	r3, [r3, #0]
	}
 800b46a:	4618      	mov	r0, r3
 800b46c:	46bd      	mov	sp, r7
 800b46e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b472:	4770      	bx	lr
 800b474:	2000091c 	.word	0x2000091c

0800b478 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800b478:	b580      	push	{r7, lr}
 800b47a:	b084      	sub	sp, #16
 800b47c:	af00      	add	r7, sp, #0
 800b47e:	6078      	str	r0, [r7, #4]
 800b480:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800b482:	4b29      	ldr	r3, [pc, #164]	@ (800b528 <prvAddCurrentTaskToDelayedList+0xb0>)
 800b484:	681b      	ldr	r3, [r3, #0]
 800b486:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b488:	4b28      	ldr	r3, [pc, #160]	@ (800b52c <prvAddCurrentTaskToDelayedList+0xb4>)
 800b48a:	681b      	ldr	r3, [r3, #0]
 800b48c:	3304      	adds	r3, #4
 800b48e:	4618      	mov	r0, r3
 800b490:	f7fe fbc0 	bl	8009c14 <uxListRemove>
 800b494:	4603      	mov	r3, r0
 800b496:	2b00      	cmp	r3, #0
 800b498:	d10b      	bne.n	800b4b2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800b49a:	4b24      	ldr	r3, [pc, #144]	@ (800b52c <prvAddCurrentTaskToDelayedList+0xb4>)
 800b49c:	681b      	ldr	r3, [r3, #0]
 800b49e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b4a0:	2201      	movs	r2, #1
 800b4a2:	fa02 f303 	lsl.w	r3, r2, r3
 800b4a6:	43da      	mvns	r2, r3
 800b4a8:	4b21      	ldr	r3, [pc, #132]	@ (800b530 <prvAddCurrentTaskToDelayedList+0xb8>)
 800b4aa:	681b      	ldr	r3, [r3, #0]
 800b4ac:	4013      	ands	r3, r2
 800b4ae:	4a20      	ldr	r2, [pc, #128]	@ (800b530 <prvAddCurrentTaskToDelayedList+0xb8>)
 800b4b0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b4b8:	d10a      	bne.n	800b4d0 <prvAddCurrentTaskToDelayedList+0x58>
 800b4ba:	683b      	ldr	r3, [r7, #0]
 800b4bc:	2b00      	cmp	r3, #0
 800b4be:	d007      	beq.n	800b4d0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b4c0:	4b1a      	ldr	r3, [pc, #104]	@ (800b52c <prvAddCurrentTaskToDelayedList+0xb4>)
 800b4c2:	681b      	ldr	r3, [r3, #0]
 800b4c4:	3304      	adds	r3, #4
 800b4c6:	4619      	mov	r1, r3
 800b4c8:	481a      	ldr	r0, [pc, #104]	@ (800b534 <prvAddCurrentTaskToDelayedList+0xbc>)
 800b4ca:	f7fe fb46 	bl	8009b5a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800b4ce:	e026      	b.n	800b51e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800b4d0:	68fa      	ldr	r2, [r7, #12]
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	4413      	add	r3, r2
 800b4d6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800b4d8:	4b14      	ldr	r3, [pc, #80]	@ (800b52c <prvAddCurrentTaskToDelayedList+0xb4>)
 800b4da:	681b      	ldr	r3, [r3, #0]
 800b4dc:	68ba      	ldr	r2, [r7, #8]
 800b4de:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800b4e0:	68ba      	ldr	r2, [r7, #8]
 800b4e2:	68fb      	ldr	r3, [r7, #12]
 800b4e4:	429a      	cmp	r2, r3
 800b4e6:	d209      	bcs.n	800b4fc <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b4e8:	4b13      	ldr	r3, [pc, #76]	@ (800b538 <prvAddCurrentTaskToDelayedList+0xc0>)
 800b4ea:	681a      	ldr	r2, [r3, #0]
 800b4ec:	4b0f      	ldr	r3, [pc, #60]	@ (800b52c <prvAddCurrentTaskToDelayedList+0xb4>)
 800b4ee:	681b      	ldr	r3, [r3, #0]
 800b4f0:	3304      	adds	r3, #4
 800b4f2:	4619      	mov	r1, r3
 800b4f4:	4610      	mov	r0, r2
 800b4f6:	f7fe fb54 	bl	8009ba2 <vListInsert>
}
 800b4fa:	e010      	b.n	800b51e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b4fc:	4b0f      	ldr	r3, [pc, #60]	@ (800b53c <prvAddCurrentTaskToDelayedList+0xc4>)
 800b4fe:	681a      	ldr	r2, [r3, #0]
 800b500:	4b0a      	ldr	r3, [pc, #40]	@ (800b52c <prvAddCurrentTaskToDelayedList+0xb4>)
 800b502:	681b      	ldr	r3, [r3, #0]
 800b504:	3304      	adds	r3, #4
 800b506:	4619      	mov	r1, r3
 800b508:	4610      	mov	r0, r2
 800b50a:	f7fe fb4a 	bl	8009ba2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800b50e:	4b0c      	ldr	r3, [pc, #48]	@ (800b540 <prvAddCurrentTaskToDelayedList+0xc8>)
 800b510:	681b      	ldr	r3, [r3, #0]
 800b512:	68ba      	ldr	r2, [r7, #8]
 800b514:	429a      	cmp	r2, r3
 800b516:	d202      	bcs.n	800b51e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800b518:	4a09      	ldr	r2, [pc, #36]	@ (800b540 <prvAddCurrentTaskToDelayedList+0xc8>)
 800b51a:	68bb      	ldr	r3, [r7, #8]
 800b51c:	6013      	str	r3, [r2, #0]
}
 800b51e:	bf00      	nop
 800b520:	3710      	adds	r7, #16
 800b522:	46bd      	mov	sp, r7
 800b524:	bd80      	pop	{r7, pc}
 800b526:	bf00      	nop
 800b528:	20000a20 	.word	0x20000a20
 800b52c:	2000091c 	.word	0x2000091c
 800b530:	20000a24 	.word	0x20000a24
 800b534:	20000a08 	.word	0x20000a08
 800b538:	200009d8 	.word	0x200009d8
 800b53c:	200009d4 	.word	0x200009d4
 800b540:	20000a3c 	.word	0x20000a3c

0800b544 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800b544:	b480      	push	{r7}
 800b546:	b085      	sub	sp, #20
 800b548:	af00      	add	r7, sp, #0
 800b54a:	60f8      	str	r0, [r7, #12]
 800b54c:	60b9      	str	r1, [r7, #8]
 800b54e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800b550:	68fb      	ldr	r3, [r7, #12]
 800b552:	3b04      	subs	r3, #4
 800b554:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b556:	68fb      	ldr	r3, [r7, #12]
 800b558:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800b55c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b55e:	68fb      	ldr	r3, [r7, #12]
 800b560:	3b04      	subs	r3, #4
 800b562:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b564:	68bb      	ldr	r3, [r7, #8]
 800b566:	f023 0201 	bic.w	r2, r3, #1
 800b56a:	68fb      	ldr	r3, [r7, #12]
 800b56c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b56e:	68fb      	ldr	r3, [r7, #12]
 800b570:	3b04      	subs	r3, #4
 800b572:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b574:	4a0c      	ldr	r2, [pc, #48]	@ (800b5a8 <pxPortInitialiseStack+0x64>)
 800b576:	68fb      	ldr	r3, [r7, #12]
 800b578:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800b57a:	68fb      	ldr	r3, [r7, #12]
 800b57c:	3b14      	subs	r3, #20
 800b57e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800b580:	687a      	ldr	r2, [r7, #4]
 800b582:	68fb      	ldr	r3, [r7, #12]
 800b584:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800b586:	68fb      	ldr	r3, [r7, #12]
 800b588:	3b04      	subs	r3, #4
 800b58a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800b58c:	68fb      	ldr	r3, [r7, #12]
 800b58e:	f06f 0202 	mvn.w	r2, #2
 800b592:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800b594:	68fb      	ldr	r3, [r7, #12]
 800b596:	3b20      	subs	r3, #32
 800b598:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800b59a:	68fb      	ldr	r3, [r7, #12]
}
 800b59c:	4618      	mov	r0, r3
 800b59e:	3714      	adds	r7, #20
 800b5a0:	46bd      	mov	sp, r7
 800b5a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5a6:	4770      	bx	lr
 800b5a8:	0800b5ad 	.word	0x0800b5ad

0800b5ac <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800b5ac:	b480      	push	{r7}
 800b5ae:	b085      	sub	sp, #20
 800b5b0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800b5b2:	2300      	movs	r3, #0
 800b5b4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800b5b6:	4b13      	ldr	r3, [pc, #76]	@ (800b604 <prvTaskExitError+0x58>)
 800b5b8:	681b      	ldr	r3, [r3, #0]
 800b5ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b5be:	d00b      	beq.n	800b5d8 <prvTaskExitError+0x2c>
	__asm volatile
 800b5c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b5c4:	f383 8811 	msr	BASEPRI, r3
 800b5c8:	f3bf 8f6f 	isb	sy
 800b5cc:	f3bf 8f4f 	dsb	sy
 800b5d0:	60fb      	str	r3, [r7, #12]
}
 800b5d2:	bf00      	nop
 800b5d4:	bf00      	nop
 800b5d6:	e7fd      	b.n	800b5d4 <prvTaskExitError+0x28>
	__asm volatile
 800b5d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b5dc:	f383 8811 	msr	BASEPRI, r3
 800b5e0:	f3bf 8f6f 	isb	sy
 800b5e4:	f3bf 8f4f 	dsb	sy
 800b5e8:	60bb      	str	r3, [r7, #8]
}
 800b5ea:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800b5ec:	bf00      	nop
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	2b00      	cmp	r3, #0
 800b5f2:	d0fc      	beq.n	800b5ee <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800b5f4:	bf00      	nop
 800b5f6:	bf00      	nop
 800b5f8:	3714      	adds	r7, #20
 800b5fa:	46bd      	mov	sp, r7
 800b5fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b600:	4770      	bx	lr
 800b602:	bf00      	nop
 800b604:	2000000c 	.word	0x2000000c
	...

0800b610 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800b610:	4b07      	ldr	r3, [pc, #28]	@ (800b630 <pxCurrentTCBConst2>)
 800b612:	6819      	ldr	r1, [r3, #0]
 800b614:	6808      	ldr	r0, [r1, #0]
 800b616:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b61a:	f380 8809 	msr	PSP, r0
 800b61e:	f3bf 8f6f 	isb	sy
 800b622:	f04f 0000 	mov.w	r0, #0
 800b626:	f380 8811 	msr	BASEPRI, r0
 800b62a:	4770      	bx	lr
 800b62c:	f3af 8000 	nop.w

0800b630 <pxCurrentTCBConst2>:
 800b630:	2000091c 	.word	0x2000091c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800b634:	bf00      	nop
 800b636:	bf00      	nop

0800b638 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800b638:	4808      	ldr	r0, [pc, #32]	@ (800b65c <prvPortStartFirstTask+0x24>)
 800b63a:	6800      	ldr	r0, [r0, #0]
 800b63c:	6800      	ldr	r0, [r0, #0]
 800b63e:	f380 8808 	msr	MSP, r0
 800b642:	f04f 0000 	mov.w	r0, #0
 800b646:	f380 8814 	msr	CONTROL, r0
 800b64a:	b662      	cpsie	i
 800b64c:	b661      	cpsie	f
 800b64e:	f3bf 8f4f 	dsb	sy
 800b652:	f3bf 8f6f 	isb	sy
 800b656:	df00      	svc	0
 800b658:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800b65a:	bf00      	nop
 800b65c:	e000ed08 	.word	0xe000ed08

0800b660 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800b660:	b580      	push	{r7, lr}
 800b662:	b086      	sub	sp, #24
 800b664:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800b666:	4b47      	ldr	r3, [pc, #284]	@ (800b784 <xPortStartScheduler+0x124>)
 800b668:	681b      	ldr	r3, [r3, #0]
 800b66a:	4a47      	ldr	r2, [pc, #284]	@ (800b788 <xPortStartScheduler+0x128>)
 800b66c:	4293      	cmp	r3, r2
 800b66e:	d10b      	bne.n	800b688 <xPortStartScheduler+0x28>
	__asm volatile
 800b670:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b674:	f383 8811 	msr	BASEPRI, r3
 800b678:	f3bf 8f6f 	isb	sy
 800b67c:	f3bf 8f4f 	dsb	sy
 800b680:	60fb      	str	r3, [r7, #12]
}
 800b682:	bf00      	nop
 800b684:	bf00      	nop
 800b686:	e7fd      	b.n	800b684 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800b688:	4b3e      	ldr	r3, [pc, #248]	@ (800b784 <xPortStartScheduler+0x124>)
 800b68a:	681b      	ldr	r3, [r3, #0]
 800b68c:	4a3f      	ldr	r2, [pc, #252]	@ (800b78c <xPortStartScheduler+0x12c>)
 800b68e:	4293      	cmp	r3, r2
 800b690:	d10b      	bne.n	800b6aa <xPortStartScheduler+0x4a>
	__asm volatile
 800b692:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b696:	f383 8811 	msr	BASEPRI, r3
 800b69a:	f3bf 8f6f 	isb	sy
 800b69e:	f3bf 8f4f 	dsb	sy
 800b6a2:	613b      	str	r3, [r7, #16]
}
 800b6a4:	bf00      	nop
 800b6a6:	bf00      	nop
 800b6a8:	e7fd      	b.n	800b6a6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800b6aa:	4b39      	ldr	r3, [pc, #228]	@ (800b790 <xPortStartScheduler+0x130>)
 800b6ac:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b6ae:	697b      	ldr	r3, [r7, #20]
 800b6b0:	781b      	ldrb	r3, [r3, #0]
 800b6b2:	b2db      	uxtb	r3, r3
 800b6b4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b6b6:	697b      	ldr	r3, [r7, #20]
 800b6b8:	22ff      	movs	r2, #255	@ 0xff
 800b6ba:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b6bc:	697b      	ldr	r3, [r7, #20]
 800b6be:	781b      	ldrb	r3, [r3, #0]
 800b6c0:	b2db      	uxtb	r3, r3
 800b6c2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b6c4:	78fb      	ldrb	r3, [r7, #3]
 800b6c6:	b2db      	uxtb	r3, r3
 800b6c8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800b6cc:	b2da      	uxtb	r2, r3
 800b6ce:	4b31      	ldr	r3, [pc, #196]	@ (800b794 <xPortStartScheduler+0x134>)
 800b6d0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b6d2:	4b31      	ldr	r3, [pc, #196]	@ (800b798 <xPortStartScheduler+0x138>)
 800b6d4:	2207      	movs	r2, #7
 800b6d6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b6d8:	e009      	b.n	800b6ee <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800b6da:	4b2f      	ldr	r3, [pc, #188]	@ (800b798 <xPortStartScheduler+0x138>)
 800b6dc:	681b      	ldr	r3, [r3, #0]
 800b6de:	3b01      	subs	r3, #1
 800b6e0:	4a2d      	ldr	r2, [pc, #180]	@ (800b798 <xPortStartScheduler+0x138>)
 800b6e2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b6e4:	78fb      	ldrb	r3, [r7, #3]
 800b6e6:	b2db      	uxtb	r3, r3
 800b6e8:	005b      	lsls	r3, r3, #1
 800b6ea:	b2db      	uxtb	r3, r3
 800b6ec:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b6ee:	78fb      	ldrb	r3, [r7, #3]
 800b6f0:	b2db      	uxtb	r3, r3
 800b6f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b6f6:	2b80      	cmp	r3, #128	@ 0x80
 800b6f8:	d0ef      	beq.n	800b6da <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800b6fa:	4b27      	ldr	r3, [pc, #156]	@ (800b798 <xPortStartScheduler+0x138>)
 800b6fc:	681b      	ldr	r3, [r3, #0]
 800b6fe:	f1c3 0307 	rsb	r3, r3, #7
 800b702:	2b04      	cmp	r3, #4
 800b704:	d00b      	beq.n	800b71e <xPortStartScheduler+0xbe>
	__asm volatile
 800b706:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b70a:	f383 8811 	msr	BASEPRI, r3
 800b70e:	f3bf 8f6f 	isb	sy
 800b712:	f3bf 8f4f 	dsb	sy
 800b716:	60bb      	str	r3, [r7, #8]
}
 800b718:	bf00      	nop
 800b71a:	bf00      	nop
 800b71c:	e7fd      	b.n	800b71a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800b71e:	4b1e      	ldr	r3, [pc, #120]	@ (800b798 <xPortStartScheduler+0x138>)
 800b720:	681b      	ldr	r3, [r3, #0]
 800b722:	021b      	lsls	r3, r3, #8
 800b724:	4a1c      	ldr	r2, [pc, #112]	@ (800b798 <xPortStartScheduler+0x138>)
 800b726:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b728:	4b1b      	ldr	r3, [pc, #108]	@ (800b798 <xPortStartScheduler+0x138>)
 800b72a:	681b      	ldr	r3, [r3, #0]
 800b72c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800b730:	4a19      	ldr	r2, [pc, #100]	@ (800b798 <xPortStartScheduler+0x138>)
 800b732:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	b2da      	uxtb	r2, r3
 800b738:	697b      	ldr	r3, [r7, #20]
 800b73a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b73c:	4b17      	ldr	r3, [pc, #92]	@ (800b79c <xPortStartScheduler+0x13c>)
 800b73e:	681b      	ldr	r3, [r3, #0]
 800b740:	4a16      	ldr	r2, [pc, #88]	@ (800b79c <xPortStartScheduler+0x13c>)
 800b742:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800b746:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800b748:	4b14      	ldr	r3, [pc, #80]	@ (800b79c <xPortStartScheduler+0x13c>)
 800b74a:	681b      	ldr	r3, [r3, #0]
 800b74c:	4a13      	ldr	r2, [pc, #76]	@ (800b79c <xPortStartScheduler+0x13c>)
 800b74e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800b752:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800b754:	f000 f8da 	bl	800b90c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800b758:	4b11      	ldr	r3, [pc, #68]	@ (800b7a0 <xPortStartScheduler+0x140>)
 800b75a:	2200      	movs	r2, #0
 800b75c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800b75e:	f000 f8f9 	bl	800b954 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800b762:	4b10      	ldr	r3, [pc, #64]	@ (800b7a4 <xPortStartScheduler+0x144>)
 800b764:	681b      	ldr	r3, [r3, #0]
 800b766:	4a0f      	ldr	r2, [pc, #60]	@ (800b7a4 <xPortStartScheduler+0x144>)
 800b768:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800b76c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800b76e:	f7ff ff63 	bl	800b638 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800b772:	f7ff fa9f 	bl	800acb4 <vTaskSwitchContext>
	prvTaskExitError();
 800b776:	f7ff ff19 	bl	800b5ac <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800b77a:	2300      	movs	r3, #0
}
 800b77c:	4618      	mov	r0, r3
 800b77e:	3718      	adds	r7, #24
 800b780:	46bd      	mov	sp, r7
 800b782:	bd80      	pop	{r7, pc}
 800b784:	e000ed00 	.word	0xe000ed00
 800b788:	410fc271 	.word	0x410fc271
 800b78c:	410fc270 	.word	0x410fc270
 800b790:	e000e400 	.word	0xe000e400
 800b794:	20000a48 	.word	0x20000a48
 800b798:	20000a4c 	.word	0x20000a4c
 800b79c:	e000ed20 	.word	0xe000ed20
 800b7a0:	2000000c 	.word	0x2000000c
 800b7a4:	e000ef34 	.word	0xe000ef34

0800b7a8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800b7a8:	b480      	push	{r7}
 800b7aa:	b083      	sub	sp, #12
 800b7ac:	af00      	add	r7, sp, #0
	__asm volatile
 800b7ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b7b2:	f383 8811 	msr	BASEPRI, r3
 800b7b6:	f3bf 8f6f 	isb	sy
 800b7ba:	f3bf 8f4f 	dsb	sy
 800b7be:	607b      	str	r3, [r7, #4]
}
 800b7c0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800b7c2:	4b10      	ldr	r3, [pc, #64]	@ (800b804 <vPortEnterCritical+0x5c>)
 800b7c4:	681b      	ldr	r3, [r3, #0]
 800b7c6:	3301      	adds	r3, #1
 800b7c8:	4a0e      	ldr	r2, [pc, #56]	@ (800b804 <vPortEnterCritical+0x5c>)
 800b7ca:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800b7cc:	4b0d      	ldr	r3, [pc, #52]	@ (800b804 <vPortEnterCritical+0x5c>)
 800b7ce:	681b      	ldr	r3, [r3, #0]
 800b7d0:	2b01      	cmp	r3, #1
 800b7d2:	d110      	bne.n	800b7f6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b7d4:	4b0c      	ldr	r3, [pc, #48]	@ (800b808 <vPortEnterCritical+0x60>)
 800b7d6:	681b      	ldr	r3, [r3, #0]
 800b7d8:	b2db      	uxtb	r3, r3
 800b7da:	2b00      	cmp	r3, #0
 800b7dc:	d00b      	beq.n	800b7f6 <vPortEnterCritical+0x4e>
	__asm volatile
 800b7de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b7e2:	f383 8811 	msr	BASEPRI, r3
 800b7e6:	f3bf 8f6f 	isb	sy
 800b7ea:	f3bf 8f4f 	dsb	sy
 800b7ee:	603b      	str	r3, [r7, #0]
}
 800b7f0:	bf00      	nop
 800b7f2:	bf00      	nop
 800b7f4:	e7fd      	b.n	800b7f2 <vPortEnterCritical+0x4a>
	}
}
 800b7f6:	bf00      	nop
 800b7f8:	370c      	adds	r7, #12
 800b7fa:	46bd      	mov	sp, r7
 800b7fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b800:	4770      	bx	lr
 800b802:	bf00      	nop
 800b804:	2000000c 	.word	0x2000000c
 800b808:	e000ed04 	.word	0xe000ed04

0800b80c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800b80c:	b480      	push	{r7}
 800b80e:	b083      	sub	sp, #12
 800b810:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800b812:	4b12      	ldr	r3, [pc, #72]	@ (800b85c <vPortExitCritical+0x50>)
 800b814:	681b      	ldr	r3, [r3, #0]
 800b816:	2b00      	cmp	r3, #0
 800b818:	d10b      	bne.n	800b832 <vPortExitCritical+0x26>
	__asm volatile
 800b81a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b81e:	f383 8811 	msr	BASEPRI, r3
 800b822:	f3bf 8f6f 	isb	sy
 800b826:	f3bf 8f4f 	dsb	sy
 800b82a:	607b      	str	r3, [r7, #4]
}
 800b82c:	bf00      	nop
 800b82e:	bf00      	nop
 800b830:	e7fd      	b.n	800b82e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800b832:	4b0a      	ldr	r3, [pc, #40]	@ (800b85c <vPortExitCritical+0x50>)
 800b834:	681b      	ldr	r3, [r3, #0]
 800b836:	3b01      	subs	r3, #1
 800b838:	4a08      	ldr	r2, [pc, #32]	@ (800b85c <vPortExitCritical+0x50>)
 800b83a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800b83c:	4b07      	ldr	r3, [pc, #28]	@ (800b85c <vPortExitCritical+0x50>)
 800b83e:	681b      	ldr	r3, [r3, #0]
 800b840:	2b00      	cmp	r3, #0
 800b842:	d105      	bne.n	800b850 <vPortExitCritical+0x44>
 800b844:	2300      	movs	r3, #0
 800b846:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b848:	683b      	ldr	r3, [r7, #0]
 800b84a:	f383 8811 	msr	BASEPRI, r3
}
 800b84e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800b850:	bf00      	nop
 800b852:	370c      	adds	r7, #12
 800b854:	46bd      	mov	sp, r7
 800b856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b85a:	4770      	bx	lr
 800b85c:	2000000c 	.word	0x2000000c

0800b860 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800b860:	f3ef 8009 	mrs	r0, PSP
 800b864:	f3bf 8f6f 	isb	sy
 800b868:	4b15      	ldr	r3, [pc, #84]	@ (800b8c0 <pxCurrentTCBConst>)
 800b86a:	681a      	ldr	r2, [r3, #0]
 800b86c:	f01e 0f10 	tst.w	lr, #16
 800b870:	bf08      	it	eq
 800b872:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800b876:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b87a:	6010      	str	r0, [r2, #0]
 800b87c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800b880:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800b884:	f380 8811 	msr	BASEPRI, r0
 800b888:	f3bf 8f4f 	dsb	sy
 800b88c:	f3bf 8f6f 	isb	sy
 800b890:	f7ff fa10 	bl	800acb4 <vTaskSwitchContext>
 800b894:	f04f 0000 	mov.w	r0, #0
 800b898:	f380 8811 	msr	BASEPRI, r0
 800b89c:	bc09      	pop	{r0, r3}
 800b89e:	6819      	ldr	r1, [r3, #0]
 800b8a0:	6808      	ldr	r0, [r1, #0]
 800b8a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b8a6:	f01e 0f10 	tst.w	lr, #16
 800b8aa:	bf08      	it	eq
 800b8ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800b8b0:	f380 8809 	msr	PSP, r0
 800b8b4:	f3bf 8f6f 	isb	sy
 800b8b8:	4770      	bx	lr
 800b8ba:	bf00      	nop
 800b8bc:	f3af 8000 	nop.w

0800b8c0 <pxCurrentTCBConst>:
 800b8c0:	2000091c 	.word	0x2000091c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800b8c4:	bf00      	nop
 800b8c6:	bf00      	nop

0800b8c8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800b8c8:	b580      	push	{r7, lr}
 800b8ca:	b082      	sub	sp, #8
 800b8cc:	af00      	add	r7, sp, #0
	__asm volatile
 800b8ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b8d2:	f383 8811 	msr	BASEPRI, r3
 800b8d6:	f3bf 8f6f 	isb	sy
 800b8da:	f3bf 8f4f 	dsb	sy
 800b8de:	607b      	str	r3, [r7, #4]
}
 800b8e0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800b8e2:	f7ff f92d 	bl	800ab40 <xTaskIncrementTick>
 800b8e6:	4603      	mov	r3, r0
 800b8e8:	2b00      	cmp	r3, #0
 800b8ea:	d003      	beq.n	800b8f4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b8ec:	4b06      	ldr	r3, [pc, #24]	@ (800b908 <xPortSysTickHandler+0x40>)
 800b8ee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b8f2:	601a      	str	r2, [r3, #0]
 800b8f4:	2300      	movs	r3, #0
 800b8f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b8f8:	683b      	ldr	r3, [r7, #0]
 800b8fa:	f383 8811 	msr	BASEPRI, r3
}
 800b8fe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800b900:	bf00      	nop
 800b902:	3708      	adds	r7, #8
 800b904:	46bd      	mov	sp, r7
 800b906:	bd80      	pop	{r7, pc}
 800b908:	e000ed04 	.word	0xe000ed04

0800b90c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800b90c:	b480      	push	{r7}
 800b90e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b910:	4b0b      	ldr	r3, [pc, #44]	@ (800b940 <vPortSetupTimerInterrupt+0x34>)
 800b912:	2200      	movs	r2, #0
 800b914:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b916:	4b0b      	ldr	r3, [pc, #44]	@ (800b944 <vPortSetupTimerInterrupt+0x38>)
 800b918:	2200      	movs	r2, #0
 800b91a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b91c:	4b0a      	ldr	r3, [pc, #40]	@ (800b948 <vPortSetupTimerInterrupt+0x3c>)
 800b91e:	681b      	ldr	r3, [r3, #0]
 800b920:	4a0a      	ldr	r2, [pc, #40]	@ (800b94c <vPortSetupTimerInterrupt+0x40>)
 800b922:	fba2 2303 	umull	r2, r3, r2, r3
 800b926:	099b      	lsrs	r3, r3, #6
 800b928:	4a09      	ldr	r2, [pc, #36]	@ (800b950 <vPortSetupTimerInterrupt+0x44>)
 800b92a:	3b01      	subs	r3, #1
 800b92c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b92e:	4b04      	ldr	r3, [pc, #16]	@ (800b940 <vPortSetupTimerInterrupt+0x34>)
 800b930:	2207      	movs	r2, #7
 800b932:	601a      	str	r2, [r3, #0]
}
 800b934:	bf00      	nop
 800b936:	46bd      	mov	sp, r7
 800b938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b93c:	4770      	bx	lr
 800b93e:	bf00      	nop
 800b940:	e000e010 	.word	0xe000e010
 800b944:	e000e018 	.word	0xe000e018
 800b948:	20000000 	.word	0x20000000
 800b94c:	10624dd3 	.word	0x10624dd3
 800b950:	e000e014 	.word	0xe000e014

0800b954 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800b954:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800b964 <vPortEnableVFP+0x10>
 800b958:	6801      	ldr	r1, [r0, #0]
 800b95a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800b95e:	6001      	str	r1, [r0, #0]
 800b960:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800b962:	bf00      	nop
 800b964:	e000ed88 	.word	0xe000ed88

0800b968 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800b968:	b480      	push	{r7}
 800b96a:	b085      	sub	sp, #20
 800b96c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800b96e:	f3ef 8305 	mrs	r3, IPSR
 800b972:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800b974:	68fb      	ldr	r3, [r7, #12]
 800b976:	2b0f      	cmp	r3, #15
 800b978:	d915      	bls.n	800b9a6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800b97a:	4a18      	ldr	r2, [pc, #96]	@ (800b9dc <vPortValidateInterruptPriority+0x74>)
 800b97c:	68fb      	ldr	r3, [r7, #12]
 800b97e:	4413      	add	r3, r2
 800b980:	781b      	ldrb	r3, [r3, #0]
 800b982:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800b984:	4b16      	ldr	r3, [pc, #88]	@ (800b9e0 <vPortValidateInterruptPriority+0x78>)
 800b986:	781b      	ldrb	r3, [r3, #0]
 800b988:	7afa      	ldrb	r2, [r7, #11]
 800b98a:	429a      	cmp	r2, r3
 800b98c:	d20b      	bcs.n	800b9a6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800b98e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b992:	f383 8811 	msr	BASEPRI, r3
 800b996:	f3bf 8f6f 	isb	sy
 800b99a:	f3bf 8f4f 	dsb	sy
 800b99e:	607b      	str	r3, [r7, #4]
}
 800b9a0:	bf00      	nop
 800b9a2:	bf00      	nop
 800b9a4:	e7fd      	b.n	800b9a2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800b9a6:	4b0f      	ldr	r3, [pc, #60]	@ (800b9e4 <vPortValidateInterruptPriority+0x7c>)
 800b9a8:	681b      	ldr	r3, [r3, #0]
 800b9aa:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800b9ae:	4b0e      	ldr	r3, [pc, #56]	@ (800b9e8 <vPortValidateInterruptPriority+0x80>)
 800b9b0:	681b      	ldr	r3, [r3, #0]
 800b9b2:	429a      	cmp	r2, r3
 800b9b4:	d90b      	bls.n	800b9ce <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800b9b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b9ba:	f383 8811 	msr	BASEPRI, r3
 800b9be:	f3bf 8f6f 	isb	sy
 800b9c2:	f3bf 8f4f 	dsb	sy
 800b9c6:	603b      	str	r3, [r7, #0]
}
 800b9c8:	bf00      	nop
 800b9ca:	bf00      	nop
 800b9cc:	e7fd      	b.n	800b9ca <vPortValidateInterruptPriority+0x62>
	}
 800b9ce:	bf00      	nop
 800b9d0:	3714      	adds	r7, #20
 800b9d2:	46bd      	mov	sp, r7
 800b9d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9d8:	4770      	bx	lr
 800b9da:	bf00      	nop
 800b9dc:	e000e3f0 	.word	0xe000e3f0
 800b9e0:	20000a48 	.word	0x20000a48
 800b9e4:	e000ed0c 	.word	0xe000ed0c
 800b9e8:	20000a4c 	.word	0x20000a4c

0800b9ec <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800b9ec:	b580      	push	{r7, lr}
 800b9ee:	b08a      	sub	sp, #40	@ 0x28
 800b9f0:	af00      	add	r7, sp, #0
 800b9f2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800b9f4:	2300      	movs	r3, #0
 800b9f6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800b9f8:	f7fe fff6 	bl	800a9e8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800b9fc:	4b5c      	ldr	r3, [pc, #368]	@ (800bb70 <pvPortMalloc+0x184>)
 800b9fe:	681b      	ldr	r3, [r3, #0]
 800ba00:	2b00      	cmp	r3, #0
 800ba02:	d101      	bne.n	800ba08 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800ba04:	f000 f924 	bl	800bc50 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800ba08:	4b5a      	ldr	r3, [pc, #360]	@ (800bb74 <pvPortMalloc+0x188>)
 800ba0a:	681a      	ldr	r2, [r3, #0]
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	4013      	ands	r3, r2
 800ba10:	2b00      	cmp	r3, #0
 800ba12:	f040 8095 	bne.w	800bb40 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	2b00      	cmp	r3, #0
 800ba1a:	d01e      	beq.n	800ba5a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800ba1c:	2208      	movs	r2, #8
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	4413      	add	r3, r2
 800ba22:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	f003 0307 	and.w	r3, r3, #7
 800ba2a:	2b00      	cmp	r3, #0
 800ba2c:	d015      	beq.n	800ba5a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	f023 0307 	bic.w	r3, r3, #7
 800ba34:	3308      	adds	r3, #8
 800ba36:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	f003 0307 	and.w	r3, r3, #7
 800ba3e:	2b00      	cmp	r3, #0
 800ba40:	d00b      	beq.n	800ba5a <pvPortMalloc+0x6e>
	__asm volatile
 800ba42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ba46:	f383 8811 	msr	BASEPRI, r3
 800ba4a:	f3bf 8f6f 	isb	sy
 800ba4e:	f3bf 8f4f 	dsb	sy
 800ba52:	617b      	str	r3, [r7, #20]
}
 800ba54:	bf00      	nop
 800ba56:	bf00      	nop
 800ba58:	e7fd      	b.n	800ba56 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	2b00      	cmp	r3, #0
 800ba5e:	d06f      	beq.n	800bb40 <pvPortMalloc+0x154>
 800ba60:	4b45      	ldr	r3, [pc, #276]	@ (800bb78 <pvPortMalloc+0x18c>)
 800ba62:	681b      	ldr	r3, [r3, #0]
 800ba64:	687a      	ldr	r2, [r7, #4]
 800ba66:	429a      	cmp	r2, r3
 800ba68:	d86a      	bhi.n	800bb40 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800ba6a:	4b44      	ldr	r3, [pc, #272]	@ (800bb7c <pvPortMalloc+0x190>)
 800ba6c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800ba6e:	4b43      	ldr	r3, [pc, #268]	@ (800bb7c <pvPortMalloc+0x190>)
 800ba70:	681b      	ldr	r3, [r3, #0]
 800ba72:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ba74:	e004      	b.n	800ba80 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800ba76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba78:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800ba7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba7c:	681b      	ldr	r3, [r3, #0]
 800ba7e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ba80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba82:	685b      	ldr	r3, [r3, #4]
 800ba84:	687a      	ldr	r2, [r7, #4]
 800ba86:	429a      	cmp	r2, r3
 800ba88:	d903      	bls.n	800ba92 <pvPortMalloc+0xa6>
 800ba8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba8c:	681b      	ldr	r3, [r3, #0]
 800ba8e:	2b00      	cmp	r3, #0
 800ba90:	d1f1      	bne.n	800ba76 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800ba92:	4b37      	ldr	r3, [pc, #220]	@ (800bb70 <pvPortMalloc+0x184>)
 800ba94:	681b      	ldr	r3, [r3, #0]
 800ba96:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ba98:	429a      	cmp	r2, r3
 800ba9a:	d051      	beq.n	800bb40 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800ba9c:	6a3b      	ldr	r3, [r7, #32]
 800ba9e:	681b      	ldr	r3, [r3, #0]
 800baa0:	2208      	movs	r2, #8
 800baa2:	4413      	add	r3, r2
 800baa4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800baa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800baa8:	681a      	ldr	r2, [r3, #0]
 800baaa:	6a3b      	ldr	r3, [r7, #32]
 800baac:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800baae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bab0:	685a      	ldr	r2, [r3, #4]
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	1ad2      	subs	r2, r2, r3
 800bab6:	2308      	movs	r3, #8
 800bab8:	005b      	lsls	r3, r3, #1
 800baba:	429a      	cmp	r2, r3
 800babc:	d920      	bls.n	800bb00 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800babe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	4413      	add	r3, r2
 800bac4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800bac6:	69bb      	ldr	r3, [r7, #24]
 800bac8:	f003 0307 	and.w	r3, r3, #7
 800bacc:	2b00      	cmp	r3, #0
 800bace:	d00b      	beq.n	800bae8 <pvPortMalloc+0xfc>
	__asm volatile
 800bad0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bad4:	f383 8811 	msr	BASEPRI, r3
 800bad8:	f3bf 8f6f 	isb	sy
 800badc:	f3bf 8f4f 	dsb	sy
 800bae0:	613b      	str	r3, [r7, #16]
}
 800bae2:	bf00      	nop
 800bae4:	bf00      	nop
 800bae6:	e7fd      	b.n	800bae4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800bae8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800baea:	685a      	ldr	r2, [r3, #4]
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	1ad2      	subs	r2, r2, r3
 800baf0:	69bb      	ldr	r3, [r7, #24]
 800baf2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800baf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800baf6:	687a      	ldr	r2, [r7, #4]
 800baf8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800bafa:	69b8      	ldr	r0, [r7, #24]
 800bafc:	f000 f90a 	bl	800bd14 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800bb00:	4b1d      	ldr	r3, [pc, #116]	@ (800bb78 <pvPortMalloc+0x18c>)
 800bb02:	681a      	ldr	r2, [r3, #0]
 800bb04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb06:	685b      	ldr	r3, [r3, #4]
 800bb08:	1ad3      	subs	r3, r2, r3
 800bb0a:	4a1b      	ldr	r2, [pc, #108]	@ (800bb78 <pvPortMalloc+0x18c>)
 800bb0c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800bb0e:	4b1a      	ldr	r3, [pc, #104]	@ (800bb78 <pvPortMalloc+0x18c>)
 800bb10:	681a      	ldr	r2, [r3, #0]
 800bb12:	4b1b      	ldr	r3, [pc, #108]	@ (800bb80 <pvPortMalloc+0x194>)
 800bb14:	681b      	ldr	r3, [r3, #0]
 800bb16:	429a      	cmp	r2, r3
 800bb18:	d203      	bcs.n	800bb22 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800bb1a:	4b17      	ldr	r3, [pc, #92]	@ (800bb78 <pvPortMalloc+0x18c>)
 800bb1c:	681b      	ldr	r3, [r3, #0]
 800bb1e:	4a18      	ldr	r2, [pc, #96]	@ (800bb80 <pvPortMalloc+0x194>)
 800bb20:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800bb22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb24:	685a      	ldr	r2, [r3, #4]
 800bb26:	4b13      	ldr	r3, [pc, #76]	@ (800bb74 <pvPortMalloc+0x188>)
 800bb28:	681b      	ldr	r3, [r3, #0]
 800bb2a:	431a      	orrs	r2, r3
 800bb2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb2e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800bb30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb32:	2200      	movs	r2, #0
 800bb34:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800bb36:	4b13      	ldr	r3, [pc, #76]	@ (800bb84 <pvPortMalloc+0x198>)
 800bb38:	681b      	ldr	r3, [r3, #0]
 800bb3a:	3301      	adds	r3, #1
 800bb3c:	4a11      	ldr	r2, [pc, #68]	@ (800bb84 <pvPortMalloc+0x198>)
 800bb3e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800bb40:	f7fe ff60 	bl	800aa04 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800bb44:	69fb      	ldr	r3, [r7, #28]
 800bb46:	f003 0307 	and.w	r3, r3, #7
 800bb4a:	2b00      	cmp	r3, #0
 800bb4c:	d00b      	beq.n	800bb66 <pvPortMalloc+0x17a>
	__asm volatile
 800bb4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb52:	f383 8811 	msr	BASEPRI, r3
 800bb56:	f3bf 8f6f 	isb	sy
 800bb5a:	f3bf 8f4f 	dsb	sy
 800bb5e:	60fb      	str	r3, [r7, #12]
}
 800bb60:	bf00      	nop
 800bb62:	bf00      	nop
 800bb64:	e7fd      	b.n	800bb62 <pvPortMalloc+0x176>
	return pvReturn;
 800bb66:	69fb      	ldr	r3, [r7, #28]
}
 800bb68:	4618      	mov	r0, r3
 800bb6a:	3728      	adds	r7, #40	@ 0x28
 800bb6c:	46bd      	mov	sp, r7
 800bb6e:	bd80      	pop	{r7, pc}
 800bb70:	20001de0 	.word	0x20001de0
 800bb74:	20001df4 	.word	0x20001df4
 800bb78:	20001de4 	.word	0x20001de4
 800bb7c:	20001dd8 	.word	0x20001dd8
 800bb80:	20001de8 	.word	0x20001de8
 800bb84:	20001dec 	.word	0x20001dec

0800bb88 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800bb88:	b580      	push	{r7, lr}
 800bb8a:	b086      	sub	sp, #24
 800bb8c:	af00      	add	r7, sp, #0
 800bb8e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	2b00      	cmp	r3, #0
 800bb98:	d04f      	beq.n	800bc3a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800bb9a:	2308      	movs	r3, #8
 800bb9c:	425b      	negs	r3, r3
 800bb9e:	697a      	ldr	r2, [r7, #20]
 800bba0:	4413      	add	r3, r2
 800bba2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800bba4:	697b      	ldr	r3, [r7, #20]
 800bba6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800bba8:	693b      	ldr	r3, [r7, #16]
 800bbaa:	685a      	ldr	r2, [r3, #4]
 800bbac:	4b25      	ldr	r3, [pc, #148]	@ (800bc44 <vPortFree+0xbc>)
 800bbae:	681b      	ldr	r3, [r3, #0]
 800bbb0:	4013      	ands	r3, r2
 800bbb2:	2b00      	cmp	r3, #0
 800bbb4:	d10b      	bne.n	800bbce <vPortFree+0x46>
	__asm volatile
 800bbb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bbba:	f383 8811 	msr	BASEPRI, r3
 800bbbe:	f3bf 8f6f 	isb	sy
 800bbc2:	f3bf 8f4f 	dsb	sy
 800bbc6:	60fb      	str	r3, [r7, #12]
}
 800bbc8:	bf00      	nop
 800bbca:	bf00      	nop
 800bbcc:	e7fd      	b.n	800bbca <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800bbce:	693b      	ldr	r3, [r7, #16]
 800bbd0:	681b      	ldr	r3, [r3, #0]
 800bbd2:	2b00      	cmp	r3, #0
 800bbd4:	d00b      	beq.n	800bbee <vPortFree+0x66>
	__asm volatile
 800bbd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bbda:	f383 8811 	msr	BASEPRI, r3
 800bbde:	f3bf 8f6f 	isb	sy
 800bbe2:	f3bf 8f4f 	dsb	sy
 800bbe6:	60bb      	str	r3, [r7, #8]
}
 800bbe8:	bf00      	nop
 800bbea:	bf00      	nop
 800bbec:	e7fd      	b.n	800bbea <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800bbee:	693b      	ldr	r3, [r7, #16]
 800bbf0:	685a      	ldr	r2, [r3, #4]
 800bbf2:	4b14      	ldr	r3, [pc, #80]	@ (800bc44 <vPortFree+0xbc>)
 800bbf4:	681b      	ldr	r3, [r3, #0]
 800bbf6:	4013      	ands	r3, r2
 800bbf8:	2b00      	cmp	r3, #0
 800bbfa:	d01e      	beq.n	800bc3a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800bbfc:	693b      	ldr	r3, [r7, #16]
 800bbfe:	681b      	ldr	r3, [r3, #0]
 800bc00:	2b00      	cmp	r3, #0
 800bc02:	d11a      	bne.n	800bc3a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800bc04:	693b      	ldr	r3, [r7, #16]
 800bc06:	685a      	ldr	r2, [r3, #4]
 800bc08:	4b0e      	ldr	r3, [pc, #56]	@ (800bc44 <vPortFree+0xbc>)
 800bc0a:	681b      	ldr	r3, [r3, #0]
 800bc0c:	43db      	mvns	r3, r3
 800bc0e:	401a      	ands	r2, r3
 800bc10:	693b      	ldr	r3, [r7, #16]
 800bc12:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800bc14:	f7fe fee8 	bl	800a9e8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800bc18:	693b      	ldr	r3, [r7, #16]
 800bc1a:	685a      	ldr	r2, [r3, #4]
 800bc1c:	4b0a      	ldr	r3, [pc, #40]	@ (800bc48 <vPortFree+0xc0>)
 800bc1e:	681b      	ldr	r3, [r3, #0]
 800bc20:	4413      	add	r3, r2
 800bc22:	4a09      	ldr	r2, [pc, #36]	@ (800bc48 <vPortFree+0xc0>)
 800bc24:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800bc26:	6938      	ldr	r0, [r7, #16]
 800bc28:	f000 f874 	bl	800bd14 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800bc2c:	4b07      	ldr	r3, [pc, #28]	@ (800bc4c <vPortFree+0xc4>)
 800bc2e:	681b      	ldr	r3, [r3, #0]
 800bc30:	3301      	adds	r3, #1
 800bc32:	4a06      	ldr	r2, [pc, #24]	@ (800bc4c <vPortFree+0xc4>)
 800bc34:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800bc36:	f7fe fee5 	bl	800aa04 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800bc3a:	bf00      	nop
 800bc3c:	3718      	adds	r7, #24
 800bc3e:	46bd      	mov	sp, r7
 800bc40:	bd80      	pop	{r7, pc}
 800bc42:	bf00      	nop
 800bc44:	20001df4 	.word	0x20001df4
 800bc48:	20001de4 	.word	0x20001de4
 800bc4c:	20001df0 	.word	0x20001df0

0800bc50 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800bc50:	b480      	push	{r7}
 800bc52:	b085      	sub	sp, #20
 800bc54:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800bc56:	f241 3388 	movw	r3, #5000	@ 0x1388
 800bc5a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800bc5c:	4b27      	ldr	r3, [pc, #156]	@ (800bcfc <prvHeapInit+0xac>)
 800bc5e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800bc60:	68fb      	ldr	r3, [r7, #12]
 800bc62:	f003 0307 	and.w	r3, r3, #7
 800bc66:	2b00      	cmp	r3, #0
 800bc68:	d00c      	beq.n	800bc84 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800bc6a:	68fb      	ldr	r3, [r7, #12]
 800bc6c:	3307      	adds	r3, #7
 800bc6e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800bc70:	68fb      	ldr	r3, [r7, #12]
 800bc72:	f023 0307 	bic.w	r3, r3, #7
 800bc76:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800bc78:	68ba      	ldr	r2, [r7, #8]
 800bc7a:	68fb      	ldr	r3, [r7, #12]
 800bc7c:	1ad3      	subs	r3, r2, r3
 800bc7e:	4a1f      	ldr	r2, [pc, #124]	@ (800bcfc <prvHeapInit+0xac>)
 800bc80:	4413      	add	r3, r2
 800bc82:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800bc84:	68fb      	ldr	r3, [r7, #12]
 800bc86:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800bc88:	4a1d      	ldr	r2, [pc, #116]	@ (800bd00 <prvHeapInit+0xb0>)
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800bc8e:	4b1c      	ldr	r3, [pc, #112]	@ (800bd00 <prvHeapInit+0xb0>)
 800bc90:	2200      	movs	r2, #0
 800bc92:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	68ba      	ldr	r2, [r7, #8]
 800bc98:	4413      	add	r3, r2
 800bc9a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800bc9c:	2208      	movs	r2, #8
 800bc9e:	68fb      	ldr	r3, [r7, #12]
 800bca0:	1a9b      	subs	r3, r3, r2
 800bca2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800bca4:	68fb      	ldr	r3, [r7, #12]
 800bca6:	f023 0307 	bic.w	r3, r3, #7
 800bcaa:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800bcac:	68fb      	ldr	r3, [r7, #12]
 800bcae:	4a15      	ldr	r2, [pc, #84]	@ (800bd04 <prvHeapInit+0xb4>)
 800bcb0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800bcb2:	4b14      	ldr	r3, [pc, #80]	@ (800bd04 <prvHeapInit+0xb4>)
 800bcb4:	681b      	ldr	r3, [r3, #0]
 800bcb6:	2200      	movs	r2, #0
 800bcb8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800bcba:	4b12      	ldr	r3, [pc, #72]	@ (800bd04 <prvHeapInit+0xb4>)
 800bcbc:	681b      	ldr	r3, [r3, #0]
 800bcbe:	2200      	movs	r2, #0
 800bcc0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800bcc6:	683b      	ldr	r3, [r7, #0]
 800bcc8:	68fa      	ldr	r2, [r7, #12]
 800bcca:	1ad2      	subs	r2, r2, r3
 800bccc:	683b      	ldr	r3, [r7, #0]
 800bcce:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800bcd0:	4b0c      	ldr	r3, [pc, #48]	@ (800bd04 <prvHeapInit+0xb4>)
 800bcd2:	681a      	ldr	r2, [r3, #0]
 800bcd4:	683b      	ldr	r3, [r7, #0]
 800bcd6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800bcd8:	683b      	ldr	r3, [r7, #0]
 800bcda:	685b      	ldr	r3, [r3, #4]
 800bcdc:	4a0a      	ldr	r2, [pc, #40]	@ (800bd08 <prvHeapInit+0xb8>)
 800bcde:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800bce0:	683b      	ldr	r3, [r7, #0]
 800bce2:	685b      	ldr	r3, [r3, #4]
 800bce4:	4a09      	ldr	r2, [pc, #36]	@ (800bd0c <prvHeapInit+0xbc>)
 800bce6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800bce8:	4b09      	ldr	r3, [pc, #36]	@ (800bd10 <prvHeapInit+0xc0>)
 800bcea:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800bcee:	601a      	str	r2, [r3, #0]
}
 800bcf0:	bf00      	nop
 800bcf2:	3714      	adds	r7, #20
 800bcf4:	46bd      	mov	sp, r7
 800bcf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcfa:	4770      	bx	lr
 800bcfc:	20000a50 	.word	0x20000a50
 800bd00:	20001dd8 	.word	0x20001dd8
 800bd04:	20001de0 	.word	0x20001de0
 800bd08:	20001de8 	.word	0x20001de8
 800bd0c:	20001de4 	.word	0x20001de4
 800bd10:	20001df4 	.word	0x20001df4

0800bd14 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800bd14:	b480      	push	{r7}
 800bd16:	b085      	sub	sp, #20
 800bd18:	af00      	add	r7, sp, #0
 800bd1a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800bd1c:	4b28      	ldr	r3, [pc, #160]	@ (800bdc0 <prvInsertBlockIntoFreeList+0xac>)
 800bd1e:	60fb      	str	r3, [r7, #12]
 800bd20:	e002      	b.n	800bd28 <prvInsertBlockIntoFreeList+0x14>
 800bd22:	68fb      	ldr	r3, [r7, #12]
 800bd24:	681b      	ldr	r3, [r3, #0]
 800bd26:	60fb      	str	r3, [r7, #12]
 800bd28:	68fb      	ldr	r3, [r7, #12]
 800bd2a:	681b      	ldr	r3, [r3, #0]
 800bd2c:	687a      	ldr	r2, [r7, #4]
 800bd2e:	429a      	cmp	r2, r3
 800bd30:	d8f7      	bhi.n	800bd22 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800bd32:	68fb      	ldr	r3, [r7, #12]
 800bd34:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800bd36:	68fb      	ldr	r3, [r7, #12]
 800bd38:	685b      	ldr	r3, [r3, #4]
 800bd3a:	68ba      	ldr	r2, [r7, #8]
 800bd3c:	4413      	add	r3, r2
 800bd3e:	687a      	ldr	r2, [r7, #4]
 800bd40:	429a      	cmp	r2, r3
 800bd42:	d108      	bne.n	800bd56 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800bd44:	68fb      	ldr	r3, [r7, #12]
 800bd46:	685a      	ldr	r2, [r3, #4]
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	685b      	ldr	r3, [r3, #4]
 800bd4c:	441a      	add	r2, r3
 800bd4e:	68fb      	ldr	r3, [r7, #12]
 800bd50:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800bd52:	68fb      	ldr	r3, [r7, #12]
 800bd54:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	685b      	ldr	r3, [r3, #4]
 800bd5e:	68ba      	ldr	r2, [r7, #8]
 800bd60:	441a      	add	r2, r3
 800bd62:	68fb      	ldr	r3, [r7, #12]
 800bd64:	681b      	ldr	r3, [r3, #0]
 800bd66:	429a      	cmp	r2, r3
 800bd68:	d118      	bne.n	800bd9c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800bd6a:	68fb      	ldr	r3, [r7, #12]
 800bd6c:	681a      	ldr	r2, [r3, #0]
 800bd6e:	4b15      	ldr	r3, [pc, #84]	@ (800bdc4 <prvInsertBlockIntoFreeList+0xb0>)
 800bd70:	681b      	ldr	r3, [r3, #0]
 800bd72:	429a      	cmp	r2, r3
 800bd74:	d00d      	beq.n	800bd92 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	685a      	ldr	r2, [r3, #4]
 800bd7a:	68fb      	ldr	r3, [r7, #12]
 800bd7c:	681b      	ldr	r3, [r3, #0]
 800bd7e:	685b      	ldr	r3, [r3, #4]
 800bd80:	441a      	add	r2, r3
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800bd86:	68fb      	ldr	r3, [r7, #12]
 800bd88:	681b      	ldr	r3, [r3, #0]
 800bd8a:	681a      	ldr	r2, [r3, #0]
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	601a      	str	r2, [r3, #0]
 800bd90:	e008      	b.n	800bda4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800bd92:	4b0c      	ldr	r3, [pc, #48]	@ (800bdc4 <prvInsertBlockIntoFreeList+0xb0>)
 800bd94:	681a      	ldr	r2, [r3, #0]
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	601a      	str	r2, [r3, #0]
 800bd9a:	e003      	b.n	800bda4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800bd9c:	68fb      	ldr	r3, [r7, #12]
 800bd9e:	681a      	ldr	r2, [r3, #0]
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800bda4:	68fa      	ldr	r2, [r7, #12]
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	429a      	cmp	r2, r3
 800bdaa:	d002      	beq.n	800bdb2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800bdac:	68fb      	ldr	r3, [r7, #12]
 800bdae:	687a      	ldr	r2, [r7, #4]
 800bdb0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800bdb2:	bf00      	nop
 800bdb4:	3714      	adds	r7, #20
 800bdb6:	46bd      	mov	sp, r7
 800bdb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdbc:	4770      	bx	lr
 800bdbe:	bf00      	nop
 800bdc0:	20001dd8 	.word	0x20001dd8
 800bdc4:	20001de0 	.word	0x20001de0

0800bdc8 <atof>:
 800bdc8:	2100      	movs	r1, #0
 800bdca:	f000 be09 	b.w	800c9e0 <strtod>

0800bdce <atoi>:
 800bdce:	220a      	movs	r2, #10
 800bdd0:	2100      	movs	r1, #0
 800bdd2:	f000 be8b 	b.w	800caec <strtol>

0800bdd6 <sulp>:
 800bdd6:	b570      	push	{r4, r5, r6, lr}
 800bdd8:	4604      	mov	r4, r0
 800bdda:	460d      	mov	r5, r1
 800bddc:	ec45 4b10 	vmov	d0, r4, r5
 800bde0:	4616      	mov	r6, r2
 800bde2:	f003 fad9 	bl	800f398 <__ulp>
 800bde6:	ec51 0b10 	vmov	r0, r1, d0
 800bdea:	b17e      	cbz	r6, 800be0c <sulp+0x36>
 800bdec:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800bdf0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800bdf4:	2b00      	cmp	r3, #0
 800bdf6:	dd09      	ble.n	800be0c <sulp+0x36>
 800bdf8:	051b      	lsls	r3, r3, #20
 800bdfa:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800bdfe:	2400      	movs	r4, #0
 800be00:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800be04:	4622      	mov	r2, r4
 800be06:	462b      	mov	r3, r5
 800be08:	f7f4 fc1e 	bl	8000648 <__aeabi_dmul>
 800be0c:	ec41 0b10 	vmov	d0, r0, r1
 800be10:	bd70      	pop	{r4, r5, r6, pc}
 800be12:	0000      	movs	r0, r0
 800be14:	0000      	movs	r0, r0
	...

0800be18 <_strtod_l>:
 800be18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be1c:	b09f      	sub	sp, #124	@ 0x7c
 800be1e:	460c      	mov	r4, r1
 800be20:	9217      	str	r2, [sp, #92]	@ 0x5c
 800be22:	2200      	movs	r2, #0
 800be24:	921a      	str	r2, [sp, #104]	@ 0x68
 800be26:	9005      	str	r0, [sp, #20]
 800be28:	f04f 0a00 	mov.w	sl, #0
 800be2c:	f04f 0b00 	mov.w	fp, #0
 800be30:	460a      	mov	r2, r1
 800be32:	9219      	str	r2, [sp, #100]	@ 0x64
 800be34:	7811      	ldrb	r1, [r2, #0]
 800be36:	292b      	cmp	r1, #43	@ 0x2b
 800be38:	d04a      	beq.n	800bed0 <_strtod_l+0xb8>
 800be3a:	d838      	bhi.n	800beae <_strtod_l+0x96>
 800be3c:	290d      	cmp	r1, #13
 800be3e:	d832      	bhi.n	800bea6 <_strtod_l+0x8e>
 800be40:	2908      	cmp	r1, #8
 800be42:	d832      	bhi.n	800beaa <_strtod_l+0x92>
 800be44:	2900      	cmp	r1, #0
 800be46:	d03b      	beq.n	800bec0 <_strtod_l+0xa8>
 800be48:	2200      	movs	r2, #0
 800be4a:	920e      	str	r2, [sp, #56]	@ 0x38
 800be4c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800be4e:	782a      	ldrb	r2, [r5, #0]
 800be50:	2a30      	cmp	r2, #48	@ 0x30
 800be52:	f040 80b2 	bne.w	800bfba <_strtod_l+0x1a2>
 800be56:	786a      	ldrb	r2, [r5, #1]
 800be58:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800be5c:	2a58      	cmp	r2, #88	@ 0x58
 800be5e:	d16e      	bne.n	800bf3e <_strtod_l+0x126>
 800be60:	9302      	str	r3, [sp, #8]
 800be62:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800be64:	9301      	str	r3, [sp, #4]
 800be66:	ab1a      	add	r3, sp, #104	@ 0x68
 800be68:	9300      	str	r3, [sp, #0]
 800be6a:	4a8f      	ldr	r2, [pc, #572]	@ (800c0a8 <_strtod_l+0x290>)
 800be6c:	9805      	ldr	r0, [sp, #20]
 800be6e:	ab1b      	add	r3, sp, #108	@ 0x6c
 800be70:	a919      	add	r1, sp, #100	@ 0x64
 800be72:	f002 fb8b 	bl	800e58c <__gethex>
 800be76:	f010 060f 	ands.w	r6, r0, #15
 800be7a:	4604      	mov	r4, r0
 800be7c:	d005      	beq.n	800be8a <_strtod_l+0x72>
 800be7e:	2e06      	cmp	r6, #6
 800be80:	d128      	bne.n	800bed4 <_strtod_l+0xbc>
 800be82:	3501      	adds	r5, #1
 800be84:	2300      	movs	r3, #0
 800be86:	9519      	str	r5, [sp, #100]	@ 0x64
 800be88:	930e      	str	r3, [sp, #56]	@ 0x38
 800be8a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800be8c:	2b00      	cmp	r3, #0
 800be8e:	f040 858e 	bne.w	800c9ae <_strtod_l+0xb96>
 800be92:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800be94:	b1cb      	cbz	r3, 800beca <_strtod_l+0xb2>
 800be96:	4652      	mov	r2, sl
 800be98:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800be9c:	ec43 2b10 	vmov	d0, r2, r3
 800bea0:	b01f      	add	sp, #124	@ 0x7c
 800bea2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bea6:	2920      	cmp	r1, #32
 800bea8:	d1ce      	bne.n	800be48 <_strtod_l+0x30>
 800beaa:	3201      	adds	r2, #1
 800beac:	e7c1      	b.n	800be32 <_strtod_l+0x1a>
 800beae:	292d      	cmp	r1, #45	@ 0x2d
 800beb0:	d1ca      	bne.n	800be48 <_strtod_l+0x30>
 800beb2:	2101      	movs	r1, #1
 800beb4:	910e      	str	r1, [sp, #56]	@ 0x38
 800beb6:	1c51      	adds	r1, r2, #1
 800beb8:	9119      	str	r1, [sp, #100]	@ 0x64
 800beba:	7852      	ldrb	r2, [r2, #1]
 800bebc:	2a00      	cmp	r2, #0
 800bebe:	d1c5      	bne.n	800be4c <_strtod_l+0x34>
 800bec0:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800bec2:	9419      	str	r4, [sp, #100]	@ 0x64
 800bec4:	2b00      	cmp	r3, #0
 800bec6:	f040 8570 	bne.w	800c9aa <_strtod_l+0xb92>
 800beca:	4652      	mov	r2, sl
 800becc:	465b      	mov	r3, fp
 800bece:	e7e5      	b.n	800be9c <_strtod_l+0x84>
 800bed0:	2100      	movs	r1, #0
 800bed2:	e7ef      	b.n	800beb4 <_strtod_l+0x9c>
 800bed4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800bed6:	b13a      	cbz	r2, 800bee8 <_strtod_l+0xd0>
 800bed8:	2135      	movs	r1, #53	@ 0x35
 800beda:	a81c      	add	r0, sp, #112	@ 0x70
 800bedc:	f003 fb56 	bl	800f58c <__copybits>
 800bee0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800bee2:	9805      	ldr	r0, [sp, #20]
 800bee4:	f002 ff2c 	bl	800ed40 <_Bfree>
 800bee8:	3e01      	subs	r6, #1
 800beea:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800beec:	2e04      	cmp	r6, #4
 800beee:	d806      	bhi.n	800befe <_strtod_l+0xe6>
 800bef0:	e8df f006 	tbb	[pc, r6]
 800bef4:	201d0314 	.word	0x201d0314
 800bef8:	14          	.byte	0x14
 800bef9:	00          	.byte	0x00
 800befa:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800befe:	05e1      	lsls	r1, r4, #23
 800bf00:	bf48      	it	mi
 800bf02:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800bf06:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800bf0a:	0d1b      	lsrs	r3, r3, #20
 800bf0c:	051b      	lsls	r3, r3, #20
 800bf0e:	2b00      	cmp	r3, #0
 800bf10:	d1bb      	bne.n	800be8a <_strtod_l+0x72>
 800bf12:	f001 fbe5 	bl	800d6e0 <__errno>
 800bf16:	2322      	movs	r3, #34	@ 0x22
 800bf18:	6003      	str	r3, [r0, #0]
 800bf1a:	e7b6      	b.n	800be8a <_strtod_l+0x72>
 800bf1c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800bf20:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800bf24:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800bf28:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800bf2c:	e7e7      	b.n	800befe <_strtod_l+0xe6>
 800bf2e:	f8df b180 	ldr.w	fp, [pc, #384]	@ 800c0b0 <_strtod_l+0x298>
 800bf32:	e7e4      	b.n	800befe <_strtod_l+0xe6>
 800bf34:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800bf38:	f04f 3aff 	mov.w	sl, #4294967295
 800bf3c:	e7df      	b.n	800befe <_strtod_l+0xe6>
 800bf3e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800bf40:	1c5a      	adds	r2, r3, #1
 800bf42:	9219      	str	r2, [sp, #100]	@ 0x64
 800bf44:	785b      	ldrb	r3, [r3, #1]
 800bf46:	2b30      	cmp	r3, #48	@ 0x30
 800bf48:	d0f9      	beq.n	800bf3e <_strtod_l+0x126>
 800bf4a:	2b00      	cmp	r3, #0
 800bf4c:	d09d      	beq.n	800be8a <_strtod_l+0x72>
 800bf4e:	2301      	movs	r3, #1
 800bf50:	2700      	movs	r7, #0
 800bf52:	9308      	str	r3, [sp, #32]
 800bf54:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800bf56:	930c      	str	r3, [sp, #48]	@ 0x30
 800bf58:	970b      	str	r7, [sp, #44]	@ 0x2c
 800bf5a:	46b9      	mov	r9, r7
 800bf5c:	220a      	movs	r2, #10
 800bf5e:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800bf60:	7805      	ldrb	r5, [r0, #0]
 800bf62:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800bf66:	b2d9      	uxtb	r1, r3
 800bf68:	2909      	cmp	r1, #9
 800bf6a:	d928      	bls.n	800bfbe <_strtod_l+0x1a6>
 800bf6c:	494f      	ldr	r1, [pc, #316]	@ (800c0ac <_strtod_l+0x294>)
 800bf6e:	2201      	movs	r2, #1
 800bf70:	f001 fb5a 	bl	800d628 <strncmp>
 800bf74:	2800      	cmp	r0, #0
 800bf76:	d032      	beq.n	800bfde <_strtod_l+0x1c6>
 800bf78:	2000      	movs	r0, #0
 800bf7a:	462a      	mov	r2, r5
 800bf7c:	900a      	str	r0, [sp, #40]	@ 0x28
 800bf7e:	464d      	mov	r5, r9
 800bf80:	4603      	mov	r3, r0
 800bf82:	2a65      	cmp	r2, #101	@ 0x65
 800bf84:	d001      	beq.n	800bf8a <_strtod_l+0x172>
 800bf86:	2a45      	cmp	r2, #69	@ 0x45
 800bf88:	d114      	bne.n	800bfb4 <_strtod_l+0x19c>
 800bf8a:	b91d      	cbnz	r5, 800bf94 <_strtod_l+0x17c>
 800bf8c:	9a08      	ldr	r2, [sp, #32]
 800bf8e:	4302      	orrs	r2, r0
 800bf90:	d096      	beq.n	800bec0 <_strtod_l+0xa8>
 800bf92:	2500      	movs	r5, #0
 800bf94:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800bf96:	1c62      	adds	r2, r4, #1
 800bf98:	9219      	str	r2, [sp, #100]	@ 0x64
 800bf9a:	7862      	ldrb	r2, [r4, #1]
 800bf9c:	2a2b      	cmp	r2, #43	@ 0x2b
 800bf9e:	d07a      	beq.n	800c096 <_strtod_l+0x27e>
 800bfa0:	2a2d      	cmp	r2, #45	@ 0x2d
 800bfa2:	d07e      	beq.n	800c0a2 <_strtod_l+0x28a>
 800bfa4:	f04f 0c00 	mov.w	ip, #0
 800bfa8:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800bfac:	2909      	cmp	r1, #9
 800bfae:	f240 8085 	bls.w	800c0bc <_strtod_l+0x2a4>
 800bfb2:	9419      	str	r4, [sp, #100]	@ 0x64
 800bfb4:	f04f 0800 	mov.w	r8, #0
 800bfb8:	e0a5      	b.n	800c106 <_strtod_l+0x2ee>
 800bfba:	2300      	movs	r3, #0
 800bfbc:	e7c8      	b.n	800bf50 <_strtod_l+0x138>
 800bfbe:	f1b9 0f08 	cmp.w	r9, #8
 800bfc2:	bfd8      	it	le
 800bfc4:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 800bfc6:	f100 0001 	add.w	r0, r0, #1
 800bfca:	bfda      	itte	le
 800bfcc:	fb02 3301 	mlale	r3, r2, r1, r3
 800bfd0:	930b      	strle	r3, [sp, #44]	@ 0x2c
 800bfd2:	fb02 3707 	mlagt	r7, r2, r7, r3
 800bfd6:	f109 0901 	add.w	r9, r9, #1
 800bfda:	9019      	str	r0, [sp, #100]	@ 0x64
 800bfdc:	e7bf      	b.n	800bf5e <_strtod_l+0x146>
 800bfde:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800bfe0:	1c5a      	adds	r2, r3, #1
 800bfe2:	9219      	str	r2, [sp, #100]	@ 0x64
 800bfe4:	785a      	ldrb	r2, [r3, #1]
 800bfe6:	f1b9 0f00 	cmp.w	r9, #0
 800bfea:	d03b      	beq.n	800c064 <_strtod_l+0x24c>
 800bfec:	900a      	str	r0, [sp, #40]	@ 0x28
 800bfee:	464d      	mov	r5, r9
 800bff0:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800bff4:	2b09      	cmp	r3, #9
 800bff6:	d912      	bls.n	800c01e <_strtod_l+0x206>
 800bff8:	2301      	movs	r3, #1
 800bffa:	e7c2      	b.n	800bf82 <_strtod_l+0x16a>
 800bffc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800bffe:	1c5a      	adds	r2, r3, #1
 800c000:	9219      	str	r2, [sp, #100]	@ 0x64
 800c002:	785a      	ldrb	r2, [r3, #1]
 800c004:	3001      	adds	r0, #1
 800c006:	2a30      	cmp	r2, #48	@ 0x30
 800c008:	d0f8      	beq.n	800bffc <_strtod_l+0x1e4>
 800c00a:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800c00e:	2b08      	cmp	r3, #8
 800c010:	f200 84d2 	bhi.w	800c9b8 <_strtod_l+0xba0>
 800c014:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c016:	900a      	str	r0, [sp, #40]	@ 0x28
 800c018:	2000      	movs	r0, #0
 800c01a:	930c      	str	r3, [sp, #48]	@ 0x30
 800c01c:	4605      	mov	r5, r0
 800c01e:	3a30      	subs	r2, #48	@ 0x30
 800c020:	f100 0301 	add.w	r3, r0, #1
 800c024:	d018      	beq.n	800c058 <_strtod_l+0x240>
 800c026:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800c028:	4419      	add	r1, r3
 800c02a:	910a      	str	r1, [sp, #40]	@ 0x28
 800c02c:	462e      	mov	r6, r5
 800c02e:	f04f 0e0a 	mov.w	lr, #10
 800c032:	1c71      	adds	r1, r6, #1
 800c034:	eba1 0c05 	sub.w	ip, r1, r5
 800c038:	4563      	cmp	r3, ip
 800c03a:	dc15      	bgt.n	800c068 <_strtod_l+0x250>
 800c03c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 800c040:	182b      	adds	r3, r5, r0
 800c042:	2b08      	cmp	r3, #8
 800c044:	f105 0501 	add.w	r5, r5, #1
 800c048:	4405      	add	r5, r0
 800c04a:	dc1a      	bgt.n	800c082 <_strtod_l+0x26a>
 800c04c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800c04e:	230a      	movs	r3, #10
 800c050:	fb03 2301 	mla	r3, r3, r1, r2
 800c054:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c056:	2300      	movs	r3, #0
 800c058:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800c05a:	1c51      	adds	r1, r2, #1
 800c05c:	9119      	str	r1, [sp, #100]	@ 0x64
 800c05e:	7852      	ldrb	r2, [r2, #1]
 800c060:	4618      	mov	r0, r3
 800c062:	e7c5      	b.n	800bff0 <_strtod_l+0x1d8>
 800c064:	4648      	mov	r0, r9
 800c066:	e7ce      	b.n	800c006 <_strtod_l+0x1ee>
 800c068:	2e08      	cmp	r6, #8
 800c06a:	dc05      	bgt.n	800c078 <_strtod_l+0x260>
 800c06c:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800c06e:	fb0e f606 	mul.w	r6, lr, r6
 800c072:	960b      	str	r6, [sp, #44]	@ 0x2c
 800c074:	460e      	mov	r6, r1
 800c076:	e7dc      	b.n	800c032 <_strtod_l+0x21a>
 800c078:	2910      	cmp	r1, #16
 800c07a:	bfd8      	it	le
 800c07c:	fb0e f707 	mulle.w	r7, lr, r7
 800c080:	e7f8      	b.n	800c074 <_strtod_l+0x25c>
 800c082:	2b0f      	cmp	r3, #15
 800c084:	bfdc      	itt	le
 800c086:	230a      	movle	r3, #10
 800c088:	fb03 2707 	mlale	r7, r3, r7, r2
 800c08c:	e7e3      	b.n	800c056 <_strtod_l+0x23e>
 800c08e:	2300      	movs	r3, #0
 800c090:	930a      	str	r3, [sp, #40]	@ 0x28
 800c092:	2301      	movs	r3, #1
 800c094:	e77a      	b.n	800bf8c <_strtod_l+0x174>
 800c096:	f04f 0c00 	mov.w	ip, #0
 800c09a:	1ca2      	adds	r2, r4, #2
 800c09c:	9219      	str	r2, [sp, #100]	@ 0x64
 800c09e:	78a2      	ldrb	r2, [r4, #2]
 800c0a0:	e782      	b.n	800bfa8 <_strtod_l+0x190>
 800c0a2:	f04f 0c01 	mov.w	ip, #1
 800c0a6:	e7f8      	b.n	800c09a <_strtod_l+0x282>
 800c0a8:	080107a0 	.word	0x080107a0
 800c0ac:	080105b8 	.word	0x080105b8
 800c0b0:	7ff00000 	.word	0x7ff00000
 800c0b4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800c0b6:	1c51      	adds	r1, r2, #1
 800c0b8:	9119      	str	r1, [sp, #100]	@ 0x64
 800c0ba:	7852      	ldrb	r2, [r2, #1]
 800c0bc:	2a30      	cmp	r2, #48	@ 0x30
 800c0be:	d0f9      	beq.n	800c0b4 <_strtod_l+0x29c>
 800c0c0:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800c0c4:	2908      	cmp	r1, #8
 800c0c6:	f63f af75 	bhi.w	800bfb4 <_strtod_l+0x19c>
 800c0ca:	3a30      	subs	r2, #48	@ 0x30
 800c0cc:	9209      	str	r2, [sp, #36]	@ 0x24
 800c0ce:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800c0d0:	920f      	str	r2, [sp, #60]	@ 0x3c
 800c0d2:	f04f 080a 	mov.w	r8, #10
 800c0d6:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800c0d8:	1c56      	adds	r6, r2, #1
 800c0da:	9619      	str	r6, [sp, #100]	@ 0x64
 800c0dc:	7852      	ldrb	r2, [r2, #1]
 800c0de:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800c0e2:	f1be 0f09 	cmp.w	lr, #9
 800c0e6:	d939      	bls.n	800c15c <_strtod_l+0x344>
 800c0e8:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800c0ea:	1a76      	subs	r6, r6, r1
 800c0ec:	2e08      	cmp	r6, #8
 800c0ee:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800c0f2:	dc03      	bgt.n	800c0fc <_strtod_l+0x2e4>
 800c0f4:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c0f6:	4588      	cmp	r8, r1
 800c0f8:	bfa8      	it	ge
 800c0fa:	4688      	movge	r8, r1
 800c0fc:	f1bc 0f00 	cmp.w	ip, #0
 800c100:	d001      	beq.n	800c106 <_strtod_l+0x2ee>
 800c102:	f1c8 0800 	rsb	r8, r8, #0
 800c106:	2d00      	cmp	r5, #0
 800c108:	d14e      	bne.n	800c1a8 <_strtod_l+0x390>
 800c10a:	9908      	ldr	r1, [sp, #32]
 800c10c:	4308      	orrs	r0, r1
 800c10e:	f47f aebc 	bne.w	800be8a <_strtod_l+0x72>
 800c112:	2b00      	cmp	r3, #0
 800c114:	f47f aed4 	bne.w	800bec0 <_strtod_l+0xa8>
 800c118:	2a69      	cmp	r2, #105	@ 0x69
 800c11a:	d028      	beq.n	800c16e <_strtod_l+0x356>
 800c11c:	dc25      	bgt.n	800c16a <_strtod_l+0x352>
 800c11e:	2a49      	cmp	r2, #73	@ 0x49
 800c120:	d025      	beq.n	800c16e <_strtod_l+0x356>
 800c122:	2a4e      	cmp	r2, #78	@ 0x4e
 800c124:	f47f aecc 	bne.w	800bec0 <_strtod_l+0xa8>
 800c128:	499a      	ldr	r1, [pc, #616]	@ (800c394 <_strtod_l+0x57c>)
 800c12a:	a819      	add	r0, sp, #100	@ 0x64
 800c12c:	f002 fc50 	bl	800e9d0 <__match>
 800c130:	2800      	cmp	r0, #0
 800c132:	f43f aec5 	beq.w	800bec0 <_strtod_l+0xa8>
 800c136:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c138:	781b      	ldrb	r3, [r3, #0]
 800c13a:	2b28      	cmp	r3, #40	@ 0x28
 800c13c:	d12e      	bne.n	800c19c <_strtod_l+0x384>
 800c13e:	4996      	ldr	r1, [pc, #600]	@ (800c398 <_strtod_l+0x580>)
 800c140:	aa1c      	add	r2, sp, #112	@ 0x70
 800c142:	a819      	add	r0, sp, #100	@ 0x64
 800c144:	f002 fc58 	bl	800e9f8 <__hexnan>
 800c148:	2805      	cmp	r0, #5
 800c14a:	d127      	bne.n	800c19c <_strtod_l+0x384>
 800c14c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800c14e:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800c152:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800c156:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800c15a:	e696      	b.n	800be8a <_strtod_l+0x72>
 800c15c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c15e:	fb08 2101 	mla	r1, r8, r1, r2
 800c162:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800c166:	9209      	str	r2, [sp, #36]	@ 0x24
 800c168:	e7b5      	b.n	800c0d6 <_strtod_l+0x2be>
 800c16a:	2a6e      	cmp	r2, #110	@ 0x6e
 800c16c:	e7da      	b.n	800c124 <_strtod_l+0x30c>
 800c16e:	498b      	ldr	r1, [pc, #556]	@ (800c39c <_strtod_l+0x584>)
 800c170:	a819      	add	r0, sp, #100	@ 0x64
 800c172:	f002 fc2d 	bl	800e9d0 <__match>
 800c176:	2800      	cmp	r0, #0
 800c178:	f43f aea2 	beq.w	800bec0 <_strtod_l+0xa8>
 800c17c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c17e:	4988      	ldr	r1, [pc, #544]	@ (800c3a0 <_strtod_l+0x588>)
 800c180:	3b01      	subs	r3, #1
 800c182:	a819      	add	r0, sp, #100	@ 0x64
 800c184:	9319      	str	r3, [sp, #100]	@ 0x64
 800c186:	f002 fc23 	bl	800e9d0 <__match>
 800c18a:	b910      	cbnz	r0, 800c192 <_strtod_l+0x37a>
 800c18c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c18e:	3301      	adds	r3, #1
 800c190:	9319      	str	r3, [sp, #100]	@ 0x64
 800c192:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 800c3b0 <_strtod_l+0x598>
 800c196:	f04f 0a00 	mov.w	sl, #0
 800c19a:	e676      	b.n	800be8a <_strtod_l+0x72>
 800c19c:	4881      	ldr	r0, [pc, #516]	@ (800c3a4 <_strtod_l+0x58c>)
 800c19e:	f001 fae3 	bl	800d768 <nan>
 800c1a2:	ec5b ab10 	vmov	sl, fp, d0
 800c1a6:	e670      	b.n	800be8a <_strtod_l+0x72>
 800c1a8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c1aa:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800c1ac:	eba8 0303 	sub.w	r3, r8, r3
 800c1b0:	f1b9 0f00 	cmp.w	r9, #0
 800c1b4:	bf08      	it	eq
 800c1b6:	46a9      	moveq	r9, r5
 800c1b8:	2d10      	cmp	r5, #16
 800c1ba:	9309      	str	r3, [sp, #36]	@ 0x24
 800c1bc:	462c      	mov	r4, r5
 800c1be:	bfa8      	it	ge
 800c1c0:	2410      	movge	r4, #16
 800c1c2:	f7f4 f9c7 	bl	8000554 <__aeabi_ui2d>
 800c1c6:	2d09      	cmp	r5, #9
 800c1c8:	4682      	mov	sl, r0
 800c1ca:	468b      	mov	fp, r1
 800c1cc:	dc13      	bgt.n	800c1f6 <_strtod_l+0x3de>
 800c1ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c1d0:	2b00      	cmp	r3, #0
 800c1d2:	f43f ae5a 	beq.w	800be8a <_strtod_l+0x72>
 800c1d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c1d8:	dd78      	ble.n	800c2cc <_strtod_l+0x4b4>
 800c1da:	2b16      	cmp	r3, #22
 800c1dc:	dc5f      	bgt.n	800c29e <_strtod_l+0x486>
 800c1de:	4972      	ldr	r1, [pc, #456]	@ (800c3a8 <_strtod_l+0x590>)
 800c1e0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800c1e4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c1e8:	4652      	mov	r2, sl
 800c1ea:	465b      	mov	r3, fp
 800c1ec:	f7f4 fa2c 	bl	8000648 <__aeabi_dmul>
 800c1f0:	4682      	mov	sl, r0
 800c1f2:	468b      	mov	fp, r1
 800c1f4:	e649      	b.n	800be8a <_strtod_l+0x72>
 800c1f6:	4b6c      	ldr	r3, [pc, #432]	@ (800c3a8 <_strtod_l+0x590>)
 800c1f8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c1fc:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800c200:	f7f4 fa22 	bl	8000648 <__aeabi_dmul>
 800c204:	4682      	mov	sl, r0
 800c206:	4638      	mov	r0, r7
 800c208:	468b      	mov	fp, r1
 800c20a:	f7f4 f9a3 	bl	8000554 <__aeabi_ui2d>
 800c20e:	4602      	mov	r2, r0
 800c210:	460b      	mov	r3, r1
 800c212:	4650      	mov	r0, sl
 800c214:	4659      	mov	r1, fp
 800c216:	f7f4 f861 	bl	80002dc <__adddf3>
 800c21a:	2d0f      	cmp	r5, #15
 800c21c:	4682      	mov	sl, r0
 800c21e:	468b      	mov	fp, r1
 800c220:	ddd5      	ble.n	800c1ce <_strtod_l+0x3b6>
 800c222:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c224:	1b2c      	subs	r4, r5, r4
 800c226:	441c      	add	r4, r3
 800c228:	2c00      	cmp	r4, #0
 800c22a:	f340 8093 	ble.w	800c354 <_strtod_l+0x53c>
 800c22e:	f014 030f 	ands.w	r3, r4, #15
 800c232:	d00a      	beq.n	800c24a <_strtod_l+0x432>
 800c234:	495c      	ldr	r1, [pc, #368]	@ (800c3a8 <_strtod_l+0x590>)
 800c236:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800c23a:	4652      	mov	r2, sl
 800c23c:	465b      	mov	r3, fp
 800c23e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c242:	f7f4 fa01 	bl	8000648 <__aeabi_dmul>
 800c246:	4682      	mov	sl, r0
 800c248:	468b      	mov	fp, r1
 800c24a:	f034 040f 	bics.w	r4, r4, #15
 800c24e:	d073      	beq.n	800c338 <_strtod_l+0x520>
 800c250:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800c254:	dd49      	ble.n	800c2ea <_strtod_l+0x4d2>
 800c256:	2400      	movs	r4, #0
 800c258:	46a0      	mov	r8, r4
 800c25a:	940b      	str	r4, [sp, #44]	@ 0x2c
 800c25c:	46a1      	mov	r9, r4
 800c25e:	9a05      	ldr	r2, [sp, #20]
 800c260:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 800c3b0 <_strtod_l+0x598>
 800c264:	2322      	movs	r3, #34	@ 0x22
 800c266:	6013      	str	r3, [r2, #0]
 800c268:	f04f 0a00 	mov.w	sl, #0
 800c26c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c26e:	2b00      	cmp	r3, #0
 800c270:	f43f ae0b 	beq.w	800be8a <_strtod_l+0x72>
 800c274:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c276:	9805      	ldr	r0, [sp, #20]
 800c278:	f002 fd62 	bl	800ed40 <_Bfree>
 800c27c:	9805      	ldr	r0, [sp, #20]
 800c27e:	4649      	mov	r1, r9
 800c280:	f002 fd5e 	bl	800ed40 <_Bfree>
 800c284:	9805      	ldr	r0, [sp, #20]
 800c286:	4641      	mov	r1, r8
 800c288:	f002 fd5a 	bl	800ed40 <_Bfree>
 800c28c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800c28e:	9805      	ldr	r0, [sp, #20]
 800c290:	f002 fd56 	bl	800ed40 <_Bfree>
 800c294:	9805      	ldr	r0, [sp, #20]
 800c296:	4621      	mov	r1, r4
 800c298:	f002 fd52 	bl	800ed40 <_Bfree>
 800c29c:	e5f5      	b.n	800be8a <_strtod_l+0x72>
 800c29e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c2a0:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800c2a4:	4293      	cmp	r3, r2
 800c2a6:	dbbc      	blt.n	800c222 <_strtod_l+0x40a>
 800c2a8:	4c3f      	ldr	r4, [pc, #252]	@ (800c3a8 <_strtod_l+0x590>)
 800c2aa:	f1c5 050f 	rsb	r5, r5, #15
 800c2ae:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800c2b2:	4652      	mov	r2, sl
 800c2b4:	465b      	mov	r3, fp
 800c2b6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c2ba:	f7f4 f9c5 	bl	8000648 <__aeabi_dmul>
 800c2be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c2c0:	1b5d      	subs	r5, r3, r5
 800c2c2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800c2c6:	e9d4 2300 	ldrd	r2, r3, [r4]
 800c2ca:	e78f      	b.n	800c1ec <_strtod_l+0x3d4>
 800c2cc:	3316      	adds	r3, #22
 800c2ce:	dba8      	blt.n	800c222 <_strtod_l+0x40a>
 800c2d0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c2d2:	eba3 0808 	sub.w	r8, r3, r8
 800c2d6:	4b34      	ldr	r3, [pc, #208]	@ (800c3a8 <_strtod_l+0x590>)
 800c2d8:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800c2dc:	e9d8 2300 	ldrd	r2, r3, [r8]
 800c2e0:	4650      	mov	r0, sl
 800c2e2:	4659      	mov	r1, fp
 800c2e4:	f7f4 fada 	bl	800089c <__aeabi_ddiv>
 800c2e8:	e782      	b.n	800c1f0 <_strtod_l+0x3d8>
 800c2ea:	2300      	movs	r3, #0
 800c2ec:	4f2f      	ldr	r7, [pc, #188]	@ (800c3ac <_strtod_l+0x594>)
 800c2ee:	1124      	asrs	r4, r4, #4
 800c2f0:	4650      	mov	r0, sl
 800c2f2:	4659      	mov	r1, fp
 800c2f4:	461e      	mov	r6, r3
 800c2f6:	2c01      	cmp	r4, #1
 800c2f8:	dc21      	bgt.n	800c33e <_strtod_l+0x526>
 800c2fa:	b10b      	cbz	r3, 800c300 <_strtod_l+0x4e8>
 800c2fc:	4682      	mov	sl, r0
 800c2fe:	468b      	mov	fp, r1
 800c300:	492a      	ldr	r1, [pc, #168]	@ (800c3ac <_strtod_l+0x594>)
 800c302:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800c306:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800c30a:	4652      	mov	r2, sl
 800c30c:	465b      	mov	r3, fp
 800c30e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c312:	f7f4 f999 	bl	8000648 <__aeabi_dmul>
 800c316:	4b26      	ldr	r3, [pc, #152]	@ (800c3b0 <_strtod_l+0x598>)
 800c318:	460a      	mov	r2, r1
 800c31a:	400b      	ands	r3, r1
 800c31c:	4925      	ldr	r1, [pc, #148]	@ (800c3b4 <_strtod_l+0x59c>)
 800c31e:	428b      	cmp	r3, r1
 800c320:	4682      	mov	sl, r0
 800c322:	d898      	bhi.n	800c256 <_strtod_l+0x43e>
 800c324:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800c328:	428b      	cmp	r3, r1
 800c32a:	bf86      	itte	hi
 800c32c:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 800c3b8 <_strtod_l+0x5a0>
 800c330:	f04f 3aff 	movhi.w	sl, #4294967295
 800c334:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800c338:	2300      	movs	r3, #0
 800c33a:	9308      	str	r3, [sp, #32]
 800c33c:	e076      	b.n	800c42c <_strtod_l+0x614>
 800c33e:	07e2      	lsls	r2, r4, #31
 800c340:	d504      	bpl.n	800c34c <_strtod_l+0x534>
 800c342:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c346:	f7f4 f97f 	bl	8000648 <__aeabi_dmul>
 800c34a:	2301      	movs	r3, #1
 800c34c:	3601      	adds	r6, #1
 800c34e:	1064      	asrs	r4, r4, #1
 800c350:	3708      	adds	r7, #8
 800c352:	e7d0      	b.n	800c2f6 <_strtod_l+0x4de>
 800c354:	d0f0      	beq.n	800c338 <_strtod_l+0x520>
 800c356:	4264      	negs	r4, r4
 800c358:	f014 020f 	ands.w	r2, r4, #15
 800c35c:	d00a      	beq.n	800c374 <_strtod_l+0x55c>
 800c35e:	4b12      	ldr	r3, [pc, #72]	@ (800c3a8 <_strtod_l+0x590>)
 800c360:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c364:	4650      	mov	r0, sl
 800c366:	4659      	mov	r1, fp
 800c368:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c36c:	f7f4 fa96 	bl	800089c <__aeabi_ddiv>
 800c370:	4682      	mov	sl, r0
 800c372:	468b      	mov	fp, r1
 800c374:	1124      	asrs	r4, r4, #4
 800c376:	d0df      	beq.n	800c338 <_strtod_l+0x520>
 800c378:	2c1f      	cmp	r4, #31
 800c37a:	dd1f      	ble.n	800c3bc <_strtod_l+0x5a4>
 800c37c:	2400      	movs	r4, #0
 800c37e:	46a0      	mov	r8, r4
 800c380:	940b      	str	r4, [sp, #44]	@ 0x2c
 800c382:	46a1      	mov	r9, r4
 800c384:	9a05      	ldr	r2, [sp, #20]
 800c386:	2322      	movs	r3, #34	@ 0x22
 800c388:	f04f 0a00 	mov.w	sl, #0
 800c38c:	f04f 0b00 	mov.w	fp, #0
 800c390:	6013      	str	r3, [r2, #0]
 800c392:	e76b      	b.n	800c26c <_strtod_l+0x454>
 800c394:	080105c7 	.word	0x080105c7
 800c398:	0801078c 	.word	0x0801078c
 800c39c:	080105bf 	.word	0x080105bf
 800c3a0:	080105f9 	.word	0x080105f9
 800c3a4:	08010788 	.word	0x08010788
 800c3a8:	08010918 	.word	0x08010918
 800c3ac:	080108f0 	.word	0x080108f0
 800c3b0:	7ff00000 	.word	0x7ff00000
 800c3b4:	7ca00000 	.word	0x7ca00000
 800c3b8:	7fefffff 	.word	0x7fefffff
 800c3bc:	f014 0310 	ands.w	r3, r4, #16
 800c3c0:	bf18      	it	ne
 800c3c2:	236a      	movne	r3, #106	@ 0x6a
 800c3c4:	4ea9      	ldr	r6, [pc, #676]	@ (800c66c <_strtod_l+0x854>)
 800c3c6:	9308      	str	r3, [sp, #32]
 800c3c8:	4650      	mov	r0, sl
 800c3ca:	4659      	mov	r1, fp
 800c3cc:	2300      	movs	r3, #0
 800c3ce:	07e7      	lsls	r7, r4, #31
 800c3d0:	d504      	bpl.n	800c3dc <_strtod_l+0x5c4>
 800c3d2:	e9d6 2300 	ldrd	r2, r3, [r6]
 800c3d6:	f7f4 f937 	bl	8000648 <__aeabi_dmul>
 800c3da:	2301      	movs	r3, #1
 800c3dc:	1064      	asrs	r4, r4, #1
 800c3de:	f106 0608 	add.w	r6, r6, #8
 800c3e2:	d1f4      	bne.n	800c3ce <_strtod_l+0x5b6>
 800c3e4:	b10b      	cbz	r3, 800c3ea <_strtod_l+0x5d2>
 800c3e6:	4682      	mov	sl, r0
 800c3e8:	468b      	mov	fp, r1
 800c3ea:	9b08      	ldr	r3, [sp, #32]
 800c3ec:	b1b3      	cbz	r3, 800c41c <_strtod_l+0x604>
 800c3ee:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800c3f2:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800c3f6:	2b00      	cmp	r3, #0
 800c3f8:	4659      	mov	r1, fp
 800c3fa:	dd0f      	ble.n	800c41c <_strtod_l+0x604>
 800c3fc:	2b1f      	cmp	r3, #31
 800c3fe:	dd56      	ble.n	800c4ae <_strtod_l+0x696>
 800c400:	2b34      	cmp	r3, #52	@ 0x34
 800c402:	bfde      	ittt	le
 800c404:	f04f 33ff 	movle.w	r3, #4294967295
 800c408:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800c40c:	4093      	lslle	r3, r2
 800c40e:	f04f 0a00 	mov.w	sl, #0
 800c412:	bfcc      	ite	gt
 800c414:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800c418:	ea03 0b01 	andle.w	fp, r3, r1
 800c41c:	2200      	movs	r2, #0
 800c41e:	2300      	movs	r3, #0
 800c420:	4650      	mov	r0, sl
 800c422:	4659      	mov	r1, fp
 800c424:	f7f4 fb78 	bl	8000b18 <__aeabi_dcmpeq>
 800c428:	2800      	cmp	r0, #0
 800c42a:	d1a7      	bne.n	800c37c <_strtod_l+0x564>
 800c42c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c42e:	9300      	str	r3, [sp, #0]
 800c430:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800c432:	9805      	ldr	r0, [sp, #20]
 800c434:	462b      	mov	r3, r5
 800c436:	464a      	mov	r2, r9
 800c438:	f002 fcea 	bl	800ee10 <__s2b>
 800c43c:	900b      	str	r0, [sp, #44]	@ 0x2c
 800c43e:	2800      	cmp	r0, #0
 800c440:	f43f af09 	beq.w	800c256 <_strtod_l+0x43e>
 800c444:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c446:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c448:	2a00      	cmp	r2, #0
 800c44a:	eba3 0308 	sub.w	r3, r3, r8
 800c44e:	bfa8      	it	ge
 800c450:	2300      	movge	r3, #0
 800c452:	9312      	str	r3, [sp, #72]	@ 0x48
 800c454:	2400      	movs	r4, #0
 800c456:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800c45a:	9316      	str	r3, [sp, #88]	@ 0x58
 800c45c:	46a0      	mov	r8, r4
 800c45e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c460:	9805      	ldr	r0, [sp, #20]
 800c462:	6859      	ldr	r1, [r3, #4]
 800c464:	f002 fc2c 	bl	800ecc0 <_Balloc>
 800c468:	4681      	mov	r9, r0
 800c46a:	2800      	cmp	r0, #0
 800c46c:	f43f aef7 	beq.w	800c25e <_strtod_l+0x446>
 800c470:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c472:	691a      	ldr	r2, [r3, #16]
 800c474:	3202      	adds	r2, #2
 800c476:	f103 010c 	add.w	r1, r3, #12
 800c47a:	0092      	lsls	r2, r2, #2
 800c47c:	300c      	adds	r0, #12
 800c47e:	f001 f964 	bl	800d74a <memcpy>
 800c482:	ec4b ab10 	vmov	d0, sl, fp
 800c486:	9805      	ldr	r0, [sp, #20]
 800c488:	aa1c      	add	r2, sp, #112	@ 0x70
 800c48a:	a91b      	add	r1, sp, #108	@ 0x6c
 800c48c:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800c490:	f002 fff2 	bl	800f478 <__d2b>
 800c494:	901a      	str	r0, [sp, #104]	@ 0x68
 800c496:	2800      	cmp	r0, #0
 800c498:	f43f aee1 	beq.w	800c25e <_strtod_l+0x446>
 800c49c:	9805      	ldr	r0, [sp, #20]
 800c49e:	2101      	movs	r1, #1
 800c4a0:	f002 fd4c 	bl	800ef3c <__i2b>
 800c4a4:	4680      	mov	r8, r0
 800c4a6:	b948      	cbnz	r0, 800c4bc <_strtod_l+0x6a4>
 800c4a8:	f04f 0800 	mov.w	r8, #0
 800c4ac:	e6d7      	b.n	800c25e <_strtod_l+0x446>
 800c4ae:	f04f 32ff 	mov.w	r2, #4294967295
 800c4b2:	fa02 f303 	lsl.w	r3, r2, r3
 800c4b6:	ea03 0a0a 	and.w	sl, r3, sl
 800c4ba:	e7af      	b.n	800c41c <_strtod_l+0x604>
 800c4bc:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800c4be:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800c4c0:	2d00      	cmp	r5, #0
 800c4c2:	bfab      	itete	ge
 800c4c4:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800c4c6:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800c4c8:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800c4ca:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800c4cc:	bfac      	ite	ge
 800c4ce:	18ef      	addge	r7, r5, r3
 800c4d0:	1b5e      	sublt	r6, r3, r5
 800c4d2:	9b08      	ldr	r3, [sp, #32]
 800c4d4:	1aed      	subs	r5, r5, r3
 800c4d6:	4415      	add	r5, r2
 800c4d8:	4b65      	ldr	r3, [pc, #404]	@ (800c670 <_strtod_l+0x858>)
 800c4da:	3d01      	subs	r5, #1
 800c4dc:	429d      	cmp	r5, r3
 800c4de:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800c4e2:	da50      	bge.n	800c586 <_strtod_l+0x76e>
 800c4e4:	1b5b      	subs	r3, r3, r5
 800c4e6:	2b1f      	cmp	r3, #31
 800c4e8:	eba2 0203 	sub.w	r2, r2, r3
 800c4ec:	f04f 0101 	mov.w	r1, #1
 800c4f0:	dc3d      	bgt.n	800c56e <_strtod_l+0x756>
 800c4f2:	fa01 f303 	lsl.w	r3, r1, r3
 800c4f6:	9313      	str	r3, [sp, #76]	@ 0x4c
 800c4f8:	2300      	movs	r3, #0
 800c4fa:	9310      	str	r3, [sp, #64]	@ 0x40
 800c4fc:	18bd      	adds	r5, r7, r2
 800c4fe:	9b08      	ldr	r3, [sp, #32]
 800c500:	42af      	cmp	r7, r5
 800c502:	4416      	add	r6, r2
 800c504:	441e      	add	r6, r3
 800c506:	463b      	mov	r3, r7
 800c508:	bfa8      	it	ge
 800c50a:	462b      	movge	r3, r5
 800c50c:	42b3      	cmp	r3, r6
 800c50e:	bfa8      	it	ge
 800c510:	4633      	movge	r3, r6
 800c512:	2b00      	cmp	r3, #0
 800c514:	bfc2      	ittt	gt
 800c516:	1aed      	subgt	r5, r5, r3
 800c518:	1af6      	subgt	r6, r6, r3
 800c51a:	1aff      	subgt	r7, r7, r3
 800c51c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800c51e:	2b00      	cmp	r3, #0
 800c520:	dd16      	ble.n	800c550 <_strtod_l+0x738>
 800c522:	4641      	mov	r1, r8
 800c524:	9805      	ldr	r0, [sp, #20]
 800c526:	461a      	mov	r2, r3
 800c528:	f002 fdc0 	bl	800f0ac <__pow5mult>
 800c52c:	4680      	mov	r8, r0
 800c52e:	2800      	cmp	r0, #0
 800c530:	d0ba      	beq.n	800c4a8 <_strtod_l+0x690>
 800c532:	4601      	mov	r1, r0
 800c534:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800c536:	9805      	ldr	r0, [sp, #20]
 800c538:	f002 fd16 	bl	800ef68 <__multiply>
 800c53c:	900a      	str	r0, [sp, #40]	@ 0x28
 800c53e:	2800      	cmp	r0, #0
 800c540:	f43f ae8d 	beq.w	800c25e <_strtod_l+0x446>
 800c544:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c546:	9805      	ldr	r0, [sp, #20]
 800c548:	f002 fbfa 	bl	800ed40 <_Bfree>
 800c54c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c54e:	931a      	str	r3, [sp, #104]	@ 0x68
 800c550:	2d00      	cmp	r5, #0
 800c552:	dc1d      	bgt.n	800c590 <_strtod_l+0x778>
 800c554:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c556:	2b00      	cmp	r3, #0
 800c558:	dd23      	ble.n	800c5a2 <_strtod_l+0x78a>
 800c55a:	4649      	mov	r1, r9
 800c55c:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800c55e:	9805      	ldr	r0, [sp, #20]
 800c560:	f002 fda4 	bl	800f0ac <__pow5mult>
 800c564:	4681      	mov	r9, r0
 800c566:	b9e0      	cbnz	r0, 800c5a2 <_strtod_l+0x78a>
 800c568:	f04f 0900 	mov.w	r9, #0
 800c56c:	e677      	b.n	800c25e <_strtod_l+0x446>
 800c56e:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800c572:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800c576:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800c57a:	35e2      	adds	r5, #226	@ 0xe2
 800c57c:	fa01 f305 	lsl.w	r3, r1, r5
 800c580:	9310      	str	r3, [sp, #64]	@ 0x40
 800c582:	9113      	str	r1, [sp, #76]	@ 0x4c
 800c584:	e7ba      	b.n	800c4fc <_strtod_l+0x6e4>
 800c586:	2300      	movs	r3, #0
 800c588:	9310      	str	r3, [sp, #64]	@ 0x40
 800c58a:	2301      	movs	r3, #1
 800c58c:	9313      	str	r3, [sp, #76]	@ 0x4c
 800c58e:	e7b5      	b.n	800c4fc <_strtod_l+0x6e4>
 800c590:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c592:	9805      	ldr	r0, [sp, #20]
 800c594:	462a      	mov	r2, r5
 800c596:	f002 fde3 	bl	800f160 <__lshift>
 800c59a:	901a      	str	r0, [sp, #104]	@ 0x68
 800c59c:	2800      	cmp	r0, #0
 800c59e:	d1d9      	bne.n	800c554 <_strtod_l+0x73c>
 800c5a0:	e65d      	b.n	800c25e <_strtod_l+0x446>
 800c5a2:	2e00      	cmp	r6, #0
 800c5a4:	dd07      	ble.n	800c5b6 <_strtod_l+0x79e>
 800c5a6:	4649      	mov	r1, r9
 800c5a8:	9805      	ldr	r0, [sp, #20]
 800c5aa:	4632      	mov	r2, r6
 800c5ac:	f002 fdd8 	bl	800f160 <__lshift>
 800c5b0:	4681      	mov	r9, r0
 800c5b2:	2800      	cmp	r0, #0
 800c5b4:	d0d8      	beq.n	800c568 <_strtod_l+0x750>
 800c5b6:	2f00      	cmp	r7, #0
 800c5b8:	dd08      	ble.n	800c5cc <_strtod_l+0x7b4>
 800c5ba:	4641      	mov	r1, r8
 800c5bc:	9805      	ldr	r0, [sp, #20]
 800c5be:	463a      	mov	r2, r7
 800c5c0:	f002 fdce 	bl	800f160 <__lshift>
 800c5c4:	4680      	mov	r8, r0
 800c5c6:	2800      	cmp	r0, #0
 800c5c8:	f43f ae49 	beq.w	800c25e <_strtod_l+0x446>
 800c5cc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c5ce:	9805      	ldr	r0, [sp, #20]
 800c5d0:	464a      	mov	r2, r9
 800c5d2:	f002 fe4d 	bl	800f270 <__mdiff>
 800c5d6:	4604      	mov	r4, r0
 800c5d8:	2800      	cmp	r0, #0
 800c5da:	f43f ae40 	beq.w	800c25e <_strtod_l+0x446>
 800c5de:	68c3      	ldr	r3, [r0, #12]
 800c5e0:	930f      	str	r3, [sp, #60]	@ 0x3c
 800c5e2:	2300      	movs	r3, #0
 800c5e4:	60c3      	str	r3, [r0, #12]
 800c5e6:	4641      	mov	r1, r8
 800c5e8:	f002 fe26 	bl	800f238 <__mcmp>
 800c5ec:	2800      	cmp	r0, #0
 800c5ee:	da45      	bge.n	800c67c <_strtod_l+0x864>
 800c5f0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c5f2:	ea53 030a 	orrs.w	r3, r3, sl
 800c5f6:	d16b      	bne.n	800c6d0 <_strtod_l+0x8b8>
 800c5f8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c5fc:	2b00      	cmp	r3, #0
 800c5fe:	d167      	bne.n	800c6d0 <_strtod_l+0x8b8>
 800c600:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800c604:	0d1b      	lsrs	r3, r3, #20
 800c606:	051b      	lsls	r3, r3, #20
 800c608:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800c60c:	d960      	bls.n	800c6d0 <_strtod_l+0x8b8>
 800c60e:	6963      	ldr	r3, [r4, #20]
 800c610:	b913      	cbnz	r3, 800c618 <_strtod_l+0x800>
 800c612:	6923      	ldr	r3, [r4, #16]
 800c614:	2b01      	cmp	r3, #1
 800c616:	dd5b      	ble.n	800c6d0 <_strtod_l+0x8b8>
 800c618:	4621      	mov	r1, r4
 800c61a:	2201      	movs	r2, #1
 800c61c:	9805      	ldr	r0, [sp, #20]
 800c61e:	f002 fd9f 	bl	800f160 <__lshift>
 800c622:	4641      	mov	r1, r8
 800c624:	4604      	mov	r4, r0
 800c626:	f002 fe07 	bl	800f238 <__mcmp>
 800c62a:	2800      	cmp	r0, #0
 800c62c:	dd50      	ble.n	800c6d0 <_strtod_l+0x8b8>
 800c62e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800c632:	9a08      	ldr	r2, [sp, #32]
 800c634:	0d1b      	lsrs	r3, r3, #20
 800c636:	051b      	lsls	r3, r3, #20
 800c638:	2a00      	cmp	r2, #0
 800c63a:	d06a      	beq.n	800c712 <_strtod_l+0x8fa>
 800c63c:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800c640:	d867      	bhi.n	800c712 <_strtod_l+0x8fa>
 800c642:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800c646:	f67f ae9d 	bls.w	800c384 <_strtod_l+0x56c>
 800c64a:	4b0a      	ldr	r3, [pc, #40]	@ (800c674 <_strtod_l+0x85c>)
 800c64c:	4650      	mov	r0, sl
 800c64e:	4659      	mov	r1, fp
 800c650:	2200      	movs	r2, #0
 800c652:	f7f3 fff9 	bl	8000648 <__aeabi_dmul>
 800c656:	4b08      	ldr	r3, [pc, #32]	@ (800c678 <_strtod_l+0x860>)
 800c658:	400b      	ands	r3, r1
 800c65a:	4682      	mov	sl, r0
 800c65c:	468b      	mov	fp, r1
 800c65e:	2b00      	cmp	r3, #0
 800c660:	f47f ae08 	bne.w	800c274 <_strtod_l+0x45c>
 800c664:	9a05      	ldr	r2, [sp, #20]
 800c666:	2322      	movs	r3, #34	@ 0x22
 800c668:	6013      	str	r3, [r2, #0]
 800c66a:	e603      	b.n	800c274 <_strtod_l+0x45c>
 800c66c:	080107b8 	.word	0x080107b8
 800c670:	fffffc02 	.word	0xfffffc02
 800c674:	39500000 	.word	0x39500000
 800c678:	7ff00000 	.word	0x7ff00000
 800c67c:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800c680:	d165      	bne.n	800c74e <_strtod_l+0x936>
 800c682:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800c684:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c688:	b35a      	cbz	r2, 800c6e2 <_strtod_l+0x8ca>
 800c68a:	4a9f      	ldr	r2, [pc, #636]	@ (800c908 <_strtod_l+0xaf0>)
 800c68c:	4293      	cmp	r3, r2
 800c68e:	d12b      	bne.n	800c6e8 <_strtod_l+0x8d0>
 800c690:	9b08      	ldr	r3, [sp, #32]
 800c692:	4651      	mov	r1, sl
 800c694:	b303      	cbz	r3, 800c6d8 <_strtod_l+0x8c0>
 800c696:	4b9d      	ldr	r3, [pc, #628]	@ (800c90c <_strtod_l+0xaf4>)
 800c698:	465a      	mov	r2, fp
 800c69a:	4013      	ands	r3, r2
 800c69c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800c6a0:	f04f 32ff 	mov.w	r2, #4294967295
 800c6a4:	d81b      	bhi.n	800c6de <_strtod_l+0x8c6>
 800c6a6:	0d1b      	lsrs	r3, r3, #20
 800c6a8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800c6ac:	fa02 f303 	lsl.w	r3, r2, r3
 800c6b0:	4299      	cmp	r1, r3
 800c6b2:	d119      	bne.n	800c6e8 <_strtod_l+0x8d0>
 800c6b4:	4b96      	ldr	r3, [pc, #600]	@ (800c910 <_strtod_l+0xaf8>)
 800c6b6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c6b8:	429a      	cmp	r2, r3
 800c6ba:	d102      	bne.n	800c6c2 <_strtod_l+0x8aa>
 800c6bc:	3101      	adds	r1, #1
 800c6be:	f43f adce 	beq.w	800c25e <_strtod_l+0x446>
 800c6c2:	4b92      	ldr	r3, [pc, #584]	@ (800c90c <_strtod_l+0xaf4>)
 800c6c4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c6c6:	401a      	ands	r2, r3
 800c6c8:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800c6cc:	f04f 0a00 	mov.w	sl, #0
 800c6d0:	9b08      	ldr	r3, [sp, #32]
 800c6d2:	2b00      	cmp	r3, #0
 800c6d4:	d1b9      	bne.n	800c64a <_strtod_l+0x832>
 800c6d6:	e5cd      	b.n	800c274 <_strtod_l+0x45c>
 800c6d8:	f04f 33ff 	mov.w	r3, #4294967295
 800c6dc:	e7e8      	b.n	800c6b0 <_strtod_l+0x898>
 800c6de:	4613      	mov	r3, r2
 800c6e0:	e7e6      	b.n	800c6b0 <_strtod_l+0x898>
 800c6e2:	ea53 030a 	orrs.w	r3, r3, sl
 800c6e6:	d0a2      	beq.n	800c62e <_strtod_l+0x816>
 800c6e8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800c6ea:	b1db      	cbz	r3, 800c724 <_strtod_l+0x90c>
 800c6ec:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c6ee:	4213      	tst	r3, r2
 800c6f0:	d0ee      	beq.n	800c6d0 <_strtod_l+0x8b8>
 800c6f2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c6f4:	9a08      	ldr	r2, [sp, #32]
 800c6f6:	4650      	mov	r0, sl
 800c6f8:	4659      	mov	r1, fp
 800c6fa:	b1bb      	cbz	r3, 800c72c <_strtod_l+0x914>
 800c6fc:	f7ff fb6b 	bl	800bdd6 <sulp>
 800c700:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c704:	ec53 2b10 	vmov	r2, r3, d0
 800c708:	f7f3 fde8 	bl	80002dc <__adddf3>
 800c70c:	4682      	mov	sl, r0
 800c70e:	468b      	mov	fp, r1
 800c710:	e7de      	b.n	800c6d0 <_strtod_l+0x8b8>
 800c712:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800c716:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800c71a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800c71e:	f04f 3aff 	mov.w	sl, #4294967295
 800c722:	e7d5      	b.n	800c6d0 <_strtod_l+0x8b8>
 800c724:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800c726:	ea13 0f0a 	tst.w	r3, sl
 800c72a:	e7e1      	b.n	800c6f0 <_strtod_l+0x8d8>
 800c72c:	f7ff fb53 	bl	800bdd6 <sulp>
 800c730:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c734:	ec53 2b10 	vmov	r2, r3, d0
 800c738:	f7f3 fdce 	bl	80002d8 <__aeabi_dsub>
 800c73c:	2200      	movs	r2, #0
 800c73e:	2300      	movs	r3, #0
 800c740:	4682      	mov	sl, r0
 800c742:	468b      	mov	fp, r1
 800c744:	f7f4 f9e8 	bl	8000b18 <__aeabi_dcmpeq>
 800c748:	2800      	cmp	r0, #0
 800c74a:	d0c1      	beq.n	800c6d0 <_strtod_l+0x8b8>
 800c74c:	e61a      	b.n	800c384 <_strtod_l+0x56c>
 800c74e:	4641      	mov	r1, r8
 800c750:	4620      	mov	r0, r4
 800c752:	f002 fee9 	bl	800f528 <__ratio>
 800c756:	ec57 6b10 	vmov	r6, r7, d0
 800c75a:	2200      	movs	r2, #0
 800c75c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800c760:	4630      	mov	r0, r6
 800c762:	4639      	mov	r1, r7
 800c764:	f7f4 f9ec 	bl	8000b40 <__aeabi_dcmple>
 800c768:	2800      	cmp	r0, #0
 800c76a:	d06f      	beq.n	800c84c <_strtod_l+0xa34>
 800c76c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c76e:	2b00      	cmp	r3, #0
 800c770:	d17a      	bne.n	800c868 <_strtod_l+0xa50>
 800c772:	f1ba 0f00 	cmp.w	sl, #0
 800c776:	d158      	bne.n	800c82a <_strtod_l+0xa12>
 800c778:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c77a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c77e:	2b00      	cmp	r3, #0
 800c780:	d15a      	bne.n	800c838 <_strtod_l+0xa20>
 800c782:	4b64      	ldr	r3, [pc, #400]	@ (800c914 <_strtod_l+0xafc>)
 800c784:	2200      	movs	r2, #0
 800c786:	4630      	mov	r0, r6
 800c788:	4639      	mov	r1, r7
 800c78a:	f7f4 f9cf 	bl	8000b2c <__aeabi_dcmplt>
 800c78e:	2800      	cmp	r0, #0
 800c790:	d159      	bne.n	800c846 <_strtod_l+0xa2e>
 800c792:	4630      	mov	r0, r6
 800c794:	4639      	mov	r1, r7
 800c796:	4b60      	ldr	r3, [pc, #384]	@ (800c918 <_strtod_l+0xb00>)
 800c798:	2200      	movs	r2, #0
 800c79a:	f7f3 ff55 	bl	8000648 <__aeabi_dmul>
 800c79e:	4606      	mov	r6, r0
 800c7a0:	460f      	mov	r7, r1
 800c7a2:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800c7a6:	9606      	str	r6, [sp, #24]
 800c7a8:	9307      	str	r3, [sp, #28]
 800c7aa:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c7ae:	4d57      	ldr	r5, [pc, #348]	@ (800c90c <_strtod_l+0xaf4>)
 800c7b0:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800c7b4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c7b6:	401d      	ands	r5, r3
 800c7b8:	4b58      	ldr	r3, [pc, #352]	@ (800c91c <_strtod_l+0xb04>)
 800c7ba:	429d      	cmp	r5, r3
 800c7bc:	f040 80b2 	bne.w	800c924 <_strtod_l+0xb0c>
 800c7c0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c7c2:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800c7c6:	ec4b ab10 	vmov	d0, sl, fp
 800c7ca:	f002 fde5 	bl	800f398 <__ulp>
 800c7ce:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c7d2:	ec51 0b10 	vmov	r0, r1, d0
 800c7d6:	f7f3 ff37 	bl	8000648 <__aeabi_dmul>
 800c7da:	4652      	mov	r2, sl
 800c7dc:	465b      	mov	r3, fp
 800c7de:	f7f3 fd7d 	bl	80002dc <__adddf3>
 800c7e2:	460b      	mov	r3, r1
 800c7e4:	4949      	ldr	r1, [pc, #292]	@ (800c90c <_strtod_l+0xaf4>)
 800c7e6:	4a4e      	ldr	r2, [pc, #312]	@ (800c920 <_strtod_l+0xb08>)
 800c7e8:	4019      	ands	r1, r3
 800c7ea:	4291      	cmp	r1, r2
 800c7ec:	4682      	mov	sl, r0
 800c7ee:	d942      	bls.n	800c876 <_strtod_l+0xa5e>
 800c7f0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800c7f2:	4b47      	ldr	r3, [pc, #284]	@ (800c910 <_strtod_l+0xaf8>)
 800c7f4:	429a      	cmp	r2, r3
 800c7f6:	d103      	bne.n	800c800 <_strtod_l+0x9e8>
 800c7f8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c7fa:	3301      	adds	r3, #1
 800c7fc:	f43f ad2f 	beq.w	800c25e <_strtod_l+0x446>
 800c800:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800c910 <_strtod_l+0xaf8>
 800c804:	f04f 3aff 	mov.w	sl, #4294967295
 800c808:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c80a:	9805      	ldr	r0, [sp, #20]
 800c80c:	f002 fa98 	bl	800ed40 <_Bfree>
 800c810:	9805      	ldr	r0, [sp, #20]
 800c812:	4649      	mov	r1, r9
 800c814:	f002 fa94 	bl	800ed40 <_Bfree>
 800c818:	9805      	ldr	r0, [sp, #20]
 800c81a:	4641      	mov	r1, r8
 800c81c:	f002 fa90 	bl	800ed40 <_Bfree>
 800c820:	9805      	ldr	r0, [sp, #20]
 800c822:	4621      	mov	r1, r4
 800c824:	f002 fa8c 	bl	800ed40 <_Bfree>
 800c828:	e619      	b.n	800c45e <_strtod_l+0x646>
 800c82a:	f1ba 0f01 	cmp.w	sl, #1
 800c82e:	d103      	bne.n	800c838 <_strtod_l+0xa20>
 800c830:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c832:	2b00      	cmp	r3, #0
 800c834:	f43f ada6 	beq.w	800c384 <_strtod_l+0x56c>
 800c838:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800c8e8 <_strtod_l+0xad0>
 800c83c:	4f35      	ldr	r7, [pc, #212]	@ (800c914 <_strtod_l+0xafc>)
 800c83e:	ed8d 7b06 	vstr	d7, [sp, #24]
 800c842:	2600      	movs	r6, #0
 800c844:	e7b1      	b.n	800c7aa <_strtod_l+0x992>
 800c846:	4f34      	ldr	r7, [pc, #208]	@ (800c918 <_strtod_l+0xb00>)
 800c848:	2600      	movs	r6, #0
 800c84a:	e7aa      	b.n	800c7a2 <_strtod_l+0x98a>
 800c84c:	4b32      	ldr	r3, [pc, #200]	@ (800c918 <_strtod_l+0xb00>)
 800c84e:	4630      	mov	r0, r6
 800c850:	4639      	mov	r1, r7
 800c852:	2200      	movs	r2, #0
 800c854:	f7f3 fef8 	bl	8000648 <__aeabi_dmul>
 800c858:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c85a:	4606      	mov	r6, r0
 800c85c:	460f      	mov	r7, r1
 800c85e:	2b00      	cmp	r3, #0
 800c860:	d09f      	beq.n	800c7a2 <_strtod_l+0x98a>
 800c862:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800c866:	e7a0      	b.n	800c7aa <_strtod_l+0x992>
 800c868:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800c8f0 <_strtod_l+0xad8>
 800c86c:	ed8d 7b06 	vstr	d7, [sp, #24]
 800c870:	ec57 6b17 	vmov	r6, r7, d7
 800c874:	e799      	b.n	800c7aa <_strtod_l+0x992>
 800c876:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800c87a:	9b08      	ldr	r3, [sp, #32]
 800c87c:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800c880:	2b00      	cmp	r3, #0
 800c882:	d1c1      	bne.n	800c808 <_strtod_l+0x9f0>
 800c884:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800c888:	0d1b      	lsrs	r3, r3, #20
 800c88a:	051b      	lsls	r3, r3, #20
 800c88c:	429d      	cmp	r5, r3
 800c88e:	d1bb      	bne.n	800c808 <_strtod_l+0x9f0>
 800c890:	4630      	mov	r0, r6
 800c892:	4639      	mov	r1, r7
 800c894:	f7f4 fa38 	bl	8000d08 <__aeabi_d2lz>
 800c898:	f7f3 fea8 	bl	80005ec <__aeabi_l2d>
 800c89c:	4602      	mov	r2, r0
 800c89e:	460b      	mov	r3, r1
 800c8a0:	4630      	mov	r0, r6
 800c8a2:	4639      	mov	r1, r7
 800c8a4:	f7f3 fd18 	bl	80002d8 <__aeabi_dsub>
 800c8a8:	460b      	mov	r3, r1
 800c8aa:	4602      	mov	r2, r0
 800c8ac:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800c8b0:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800c8b4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c8b6:	ea46 060a 	orr.w	r6, r6, sl
 800c8ba:	431e      	orrs	r6, r3
 800c8bc:	d06f      	beq.n	800c99e <_strtod_l+0xb86>
 800c8be:	a30e      	add	r3, pc, #56	@ (adr r3, 800c8f8 <_strtod_l+0xae0>)
 800c8c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8c4:	f7f4 f932 	bl	8000b2c <__aeabi_dcmplt>
 800c8c8:	2800      	cmp	r0, #0
 800c8ca:	f47f acd3 	bne.w	800c274 <_strtod_l+0x45c>
 800c8ce:	a30c      	add	r3, pc, #48	@ (adr r3, 800c900 <_strtod_l+0xae8>)
 800c8d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8d4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c8d8:	f7f4 f946 	bl	8000b68 <__aeabi_dcmpgt>
 800c8dc:	2800      	cmp	r0, #0
 800c8de:	d093      	beq.n	800c808 <_strtod_l+0x9f0>
 800c8e0:	e4c8      	b.n	800c274 <_strtod_l+0x45c>
 800c8e2:	bf00      	nop
 800c8e4:	f3af 8000 	nop.w
 800c8e8:	00000000 	.word	0x00000000
 800c8ec:	bff00000 	.word	0xbff00000
 800c8f0:	00000000 	.word	0x00000000
 800c8f4:	3ff00000 	.word	0x3ff00000
 800c8f8:	94a03595 	.word	0x94a03595
 800c8fc:	3fdfffff 	.word	0x3fdfffff
 800c900:	35afe535 	.word	0x35afe535
 800c904:	3fe00000 	.word	0x3fe00000
 800c908:	000fffff 	.word	0x000fffff
 800c90c:	7ff00000 	.word	0x7ff00000
 800c910:	7fefffff 	.word	0x7fefffff
 800c914:	3ff00000 	.word	0x3ff00000
 800c918:	3fe00000 	.word	0x3fe00000
 800c91c:	7fe00000 	.word	0x7fe00000
 800c920:	7c9fffff 	.word	0x7c9fffff
 800c924:	9b08      	ldr	r3, [sp, #32]
 800c926:	b323      	cbz	r3, 800c972 <_strtod_l+0xb5a>
 800c928:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800c92c:	d821      	bhi.n	800c972 <_strtod_l+0xb5a>
 800c92e:	a328      	add	r3, pc, #160	@ (adr r3, 800c9d0 <_strtod_l+0xbb8>)
 800c930:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c934:	4630      	mov	r0, r6
 800c936:	4639      	mov	r1, r7
 800c938:	f7f4 f902 	bl	8000b40 <__aeabi_dcmple>
 800c93c:	b1a0      	cbz	r0, 800c968 <_strtod_l+0xb50>
 800c93e:	4639      	mov	r1, r7
 800c940:	4630      	mov	r0, r6
 800c942:	f7f4 f959 	bl	8000bf8 <__aeabi_d2uiz>
 800c946:	2801      	cmp	r0, #1
 800c948:	bf38      	it	cc
 800c94a:	2001      	movcc	r0, #1
 800c94c:	f7f3 fe02 	bl	8000554 <__aeabi_ui2d>
 800c950:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c952:	4606      	mov	r6, r0
 800c954:	460f      	mov	r7, r1
 800c956:	b9fb      	cbnz	r3, 800c998 <_strtod_l+0xb80>
 800c958:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800c95c:	9014      	str	r0, [sp, #80]	@ 0x50
 800c95e:	9315      	str	r3, [sp, #84]	@ 0x54
 800c960:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800c964:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800c968:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800c96a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800c96e:	1b5b      	subs	r3, r3, r5
 800c970:	9311      	str	r3, [sp, #68]	@ 0x44
 800c972:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800c976:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800c97a:	f002 fd0d 	bl	800f398 <__ulp>
 800c97e:	4650      	mov	r0, sl
 800c980:	ec53 2b10 	vmov	r2, r3, d0
 800c984:	4659      	mov	r1, fp
 800c986:	f7f3 fe5f 	bl	8000648 <__aeabi_dmul>
 800c98a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800c98e:	f7f3 fca5 	bl	80002dc <__adddf3>
 800c992:	4682      	mov	sl, r0
 800c994:	468b      	mov	fp, r1
 800c996:	e770      	b.n	800c87a <_strtod_l+0xa62>
 800c998:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800c99c:	e7e0      	b.n	800c960 <_strtod_l+0xb48>
 800c99e:	a30e      	add	r3, pc, #56	@ (adr r3, 800c9d8 <_strtod_l+0xbc0>)
 800c9a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9a4:	f7f4 f8c2 	bl	8000b2c <__aeabi_dcmplt>
 800c9a8:	e798      	b.n	800c8dc <_strtod_l+0xac4>
 800c9aa:	2300      	movs	r3, #0
 800c9ac:	930e      	str	r3, [sp, #56]	@ 0x38
 800c9ae:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800c9b0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c9b2:	6013      	str	r3, [r2, #0]
 800c9b4:	f7ff ba6d 	b.w	800be92 <_strtod_l+0x7a>
 800c9b8:	2a65      	cmp	r2, #101	@ 0x65
 800c9ba:	f43f ab68 	beq.w	800c08e <_strtod_l+0x276>
 800c9be:	2a45      	cmp	r2, #69	@ 0x45
 800c9c0:	f43f ab65 	beq.w	800c08e <_strtod_l+0x276>
 800c9c4:	2301      	movs	r3, #1
 800c9c6:	f7ff bba0 	b.w	800c10a <_strtod_l+0x2f2>
 800c9ca:	bf00      	nop
 800c9cc:	f3af 8000 	nop.w
 800c9d0:	ffc00000 	.word	0xffc00000
 800c9d4:	41dfffff 	.word	0x41dfffff
 800c9d8:	94a03595 	.word	0x94a03595
 800c9dc:	3fcfffff 	.word	0x3fcfffff

0800c9e0 <strtod>:
 800c9e0:	460a      	mov	r2, r1
 800c9e2:	4601      	mov	r1, r0
 800c9e4:	4802      	ldr	r0, [pc, #8]	@ (800c9f0 <strtod+0x10>)
 800c9e6:	4b03      	ldr	r3, [pc, #12]	@ (800c9f4 <strtod+0x14>)
 800c9e8:	6800      	ldr	r0, [r0, #0]
 800c9ea:	f7ff ba15 	b.w	800be18 <_strtod_l>
 800c9ee:	bf00      	nop
 800c9f0:	20000188 	.word	0x20000188
 800c9f4:	2000001c 	.word	0x2000001c

0800c9f8 <_strtol_l.isra.0>:
 800c9f8:	2b24      	cmp	r3, #36	@ 0x24
 800c9fa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c9fe:	4686      	mov	lr, r0
 800ca00:	4690      	mov	r8, r2
 800ca02:	d801      	bhi.n	800ca08 <_strtol_l.isra.0+0x10>
 800ca04:	2b01      	cmp	r3, #1
 800ca06:	d106      	bne.n	800ca16 <_strtol_l.isra.0+0x1e>
 800ca08:	f000 fe6a 	bl	800d6e0 <__errno>
 800ca0c:	2316      	movs	r3, #22
 800ca0e:	6003      	str	r3, [r0, #0]
 800ca10:	2000      	movs	r0, #0
 800ca12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ca16:	4834      	ldr	r0, [pc, #208]	@ (800cae8 <_strtol_l.isra.0+0xf0>)
 800ca18:	460d      	mov	r5, r1
 800ca1a:	462a      	mov	r2, r5
 800ca1c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ca20:	5d06      	ldrb	r6, [r0, r4]
 800ca22:	f016 0608 	ands.w	r6, r6, #8
 800ca26:	d1f8      	bne.n	800ca1a <_strtol_l.isra.0+0x22>
 800ca28:	2c2d      	cmp	r4, #45	@ 0x2d
 800ca2a:	d110      	bne.n	800ca4e <_strtol_l.isra.0+0x56>
 800ca2c:	782c      	ldrb	r4, [r5, #0]
 800ca2e:	2601      	movs	r6, #1
 800ca30:	1c95      	adds	r5, r2, #2
 800ca32:	f033 0210 	bics.w	r2, r3, #16
 800ca36:	d115      	bne.n	800ca64 <_strtol_l.isra.0+0x6c>
 800ca38:	2c30      	cmp	r4, #48	@ 0x30
 800ca3a:	d10d      	bne.n	800ca58 <_strtol_l.isra.0+0x60>
 800ca3c:	782a      	ldrb	r2, [r5, #0]
 800ca3e:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800ca42:	2a58      	cmp	r2, #88	@ 0x58
 800ca44:	d108      	bne.n	800ca58 <_strtol_l.isra.0+0x60>
 800ca46:	786c      	ldrb	r4, [r5, #1]
 800ca48:	3502      	adds	r5, #2
 800ca4a:	2310      	movs	r3, #16
 800ca4c:	e00a      	b.n	800ca64 <_strtol_l.isra.0+0x6c>
 800ca4e:	2c2b      	cmp	r4, #43	@ 0x2b
 800ca50:	bf04      	itt	eq
 800ca52:	782c      	ldrbeq	r4, [r5, #0]
 800ca54:	1c95      	addeq	r5, r2, #2
 800ca56:	e7ec      	b.n	800ca32 <_strtol_l.isra.0+0x3a>
 800ca58:	2b00      	cmp	r3, #0
 800ca5a:	d1f6      	bne.n	800ca4a <_strtol_l.isra.0+0x52>
 800ca5c:	2c30      	cmp	r4, #48	@ 0x30
 800ca5e:	bf14      	ite	ne
 800ca60:	230a      	movne	r3, #10
 800ca62:	2308      	moveq	r3, #8
 800ca64:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800ca68:	f10c 3cff 	add.w	ip, ip, #4294967295
 800ca6c:	2200      	movs	r2, #0
 800ca6e:	fbbc f9f3 	udiv	r9, ip, r3
 800ca72:	4610      	mov	r0, r2
 800ca74:	fb03 ca19 	mls	sl, r3, r9, ip
 800ca78:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800ca7c:	2f09      	cmp	r7, #9
 800ca7e:	d80f      	bhi.n	800caa0 <_strtol_l.isra.0+0xa8>
 800ca80:	463c      	mov	r4, r7
 800ca82:	42a3      	cmp	r3, r4
 800ca84:	dd1b      	ble.n	800cabe <_strtol_l.isra.0+0xc6>
 800ca86:	1c57      	adds	r7, r2, #1
 800ca88:	d007      	beq.n	800ca9a <_strtol_l.isra.0+0xa2>
 800ca8a:	4581      	cmp	r9, r0
 800ca8c:	d314      	bcc.n	800cab8 <_strtol_l.isra.0+0xc0>
 800ca8e:	d101      	bne.n	800ca94 <_strtol_l.isra.0+0x9c>
 800ca90:	45a2      	cmp	sl, r4
 800ca92:	db11      	blt.n	800cab8 <_strtol_l.isra.0+0xc0>
 800ca94:	fb00 4003 	mla	r0, r0, r3, r4
 800ca98:	2201      	movs	r2, #1
 800ca9a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ca9e:	e7eb      	b.n	800ca78 <_strtol_l.isra.0+0x80>
 800caa0:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800caa4:	2f19      	cmp	r7, #25
 800caa6:	d801      	bhi.n	800caac <_strtol_l.isra.0+0xb4>
 800caa8:	3c37      	subs	r4, #55	@ 0x37
 800caaa:	e7ea      	b.n	800ca82 <_strtol_l.isra.0+0x8a>
 800caac:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800cab0:	2f19      	cmp	r7, #25
 800cab2:	d804      	bhi.n	800cabe <_strtol_l.isra.0+0xc6>
 800cab4:	3c57      	subs	r4, #87	@ 0x57
 800cab6:	e7e4      	b.n	800ca82 <_strtol_l.isra.0+0x8a>
 800cab8:	f04f 32ff 	mov.w	r2, #4294967295
 800cabc:	e7ed      	b.n	800ca9a <_strtol_l.isra.0+0xa2>
 800cabe:	1c53      	adds	r3, r2, #1
 800cac0:	d108      	bne.n	800cad4 <_strtol_l.isra.0+0xdc>
 800cac2:	2322      	movs	r3, #34	@ 0x22
 800cac4:	f8ce 3000 	str.w	r3, [lr]
 800cac8:	4660      	mov	r0, ip
 800caca:	f1b8 0f00 	cmp.w	r8, #0
 800cace:	d0a0      	beq.n	800ca12 <_strtol_l.isra.0+0x1a>
 800cad0:	1e69      	subs	r1, r5, #1
 800cad2:	e006      	b.n	800cae2 <_strtol_l.isra.0+0xea>
 800cad4:	b106      	cbz	r6, 800cad8 <_strtol_l.isra.0+0xe0>
 800cad6:	4240      	negs	r0, r0
 800cad8:	f1b8 0f00 	cmp.w	r8, #0
 800cadc:	d099      	beq.n	800ca12 <_strtol_l.isra.0+0x1a>
 800cade:	2a00      	cmp	r2, #0
 800cae0:	d1f6      	bne.n	800cad0 <_strtol_l.isra.0+0xd8>
 800cae2:	f8c8 1000 	str.w	r1, [r8]
 800cae6:	e794      	b.n	800ca12 <_strtol_l.isra.0+0x1a>
 800cae8:	080107e1 	.word	0x080107e1

0800caec <strtol>:
 800caec:	4613      	mov	r3, r2
 800caee:	460a      	mov	r2, r1
 800caf0:	4601      	mov	r1, r0
 800caf2:	4802      	ldr	r0, [pc, #8]	@ (800cafc <strtol+0x10>)
 800caf4:	6800      	ldr	r0, [r0, #0]
 800caf6:	f7ff bf7f 	b.w	800c9f8 <_strtol_l.isra.0>
 800cafa:	bf00      	nop
 800cafc:	20000188 	.word	0x20000188

0800cb00 <__cvt>:
 800cb00:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800cb04:	ec57 6b10 	vmov	r6, r7, d0
 800cb08:	2f00      	cmp	r7, #0
 800cb0a:	460c      	mov	r4, r1
 800cb0c:	4619      	mov	r1, r3
 800cb0e:	463b      	mov	r3, r7
 800cb10:	bfbb      	ittet	lt
 800cb12:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800cb16:	461f      	movlt	r7, r3
 800cb18:	2300      	movge	r3, #0
 800cb1a:	232d      	movlt	r3, #45	@ 0x2d
 800cb1c:	700b      	strb	r3, [r1, #0]
 800cb1e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800cb20:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800cb24:	4691      	mov	r9, r2
 800cb26:	f023 0820 	bic.w	r8, r3, #32
 800cb2a:	bfbc      	itt	lt
 800cb2c:	4632      	movlt	r2, r6
 800cb2e:	4616      	movlt	r6, r2
 800cb30:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800cb34:	d005      	beq.n	800cb42 <__cvt+0x42>
 800cb36:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800cb3a:	d100      	bne.n	800cb3e <__cvt+0x3e>
 800cb3c:	3401      	adds	r4, #1
 800cb3e:	2102      	movs	r1, #2
 800cb40:	e000      	b.n	800cb44 <__cvt+0x44>
 800cb42:	2103      	movs	r1, #3
 800cb44:	ab03      	add	r3, sp, #12
 800cb46:	9301      	str	r3, [sp, #4]
 800cb48:	ab02      	add	r3, sp, #8
 800cb4a:	9300      	str	r3, [sp, #0]
 800cb4c:	ec47 6b10 	vmov	d0, r6, r7
 800cb50:	4653      	mov	r3, sl
 800cb52:	4622      	mov	r2, r4
 800cb54:	f000 fe98 	bl	800d888 <_dtoa_r>
 800cb58:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800cb5c:	4605      	mov	r5, r0
 800cb5e:	d119      	bne.n	800cb94 <__cvt+0x94>
 800cb60:	f019 0f01 	tst.w	r9, #1
 800cb64:	d00e      	beq.n	800cb84 <__cvt+0x84>
 800cb66:	eb00 0904 	add.w	r9, r0, r4
 800cb6a:	2200      	movs	r2, #0
 800cb6c:	2300      	movs	r3, #0
 800cb6e:	4630      	mov	r0, r6
 800cb70:	4639      	mov	r1, r7
 800cb72:	f7f3 ffd1 	bl	8000b18 <__aeabi_dcmpeq>
 800cb76:	b108      	cbz	r0, 800cb7c <__cvt+0x7c>
 800cb78:	f8cd 900c 	str.w	r9, [sp, #12]
 800cb7c:	2230      	movs	r2, #48	@ 0x30
 800cb7e:	9b03      	ldr	r3, [sp, #12]
 800cb80:	454b      	cmp	r3, r9
 800cb82:	d31e      	bcc.n	800cbc2 <__cvt+0xc2>
 800cb84:	9b03      	ldr	r3, [sp, #12]
 800cb86:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800cb88:	1b5b      	subs	r3, r3, r5
 800cb8a:	4628      	mov	r0, r5
 800cb8c:	6013      	str	r3, [r2, #0]
 800cb8e:	b004      	add	sp, #16
 800cb90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cb94:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800cb98:	eb00 0904 	add.w	r9, r0, r4
 800cb9c:	d1e5      	bne.n	800cb6a <__cvt+0x6a>
 800cb9e:	7803      	ldrb	r3, [r0, #0]
 800cba0:	2b30      	cmp	r3, #48	@ 0x30
 800cba2:	d10a      	bne.n	800cbba <__cvt+0xba>
 800cba4:	2200      	movs	r2, #0
 800cba6:	2300      	movs	r3, #0
 800cba8:	4630      	mov	r0, r6
 800cbaa:	4639      	mov	r1, r7
 800cbac:	f7f3 ffb4 	bl	8000b18 <__aeabi_dcmpeq>
 800cbb0:	b918      	cbnz	r0, 800cbba <__cvt+0xba>
 800cbb2:	f1c4 0401 	rsb	r4, r4, #1
 800cbb6:	f8ca 4000 	str.w	r4, [sl]
 800cbba:	f8da 3000 	ldr.w	r3, [sl]
 800cbbe:	4499      	add	r9, r3
 800cbc0:	e7d3      	b.n	800cb6a <__cvt+0x6a>
 800cbc2:	1c59      	adds	r1, r3, #1
 800cbc4:	9103      	str	r1, [sp, #12]
 800cbc6:	701a      	strb	r2, [r3, #0]
 800cbc8:	e7d9      	b.n	800cb7e <__cvt+0x7e>

0800cbca <__exponent>:
 800cbca:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cbcc:	2900      	cmp	r1, #0
 800cbce:	bfba      	itte	lt
 800cbd0:	4249      	neglt	r1, r1
 800cbd2:	232d      	movlt	r3, #45	@ 0x2d
 800cbd4:	232b      	movge	r3, #43	@ 0x2b
 800cbd6:	2909      	cmp	r1, #9
 800cbd8:	7002      	strb	r2, [r0, #0]
 800cbda:	7043      	strb	r3, [r0, #1]
 800cbdc:	dd29      	ble.n	800cc32 <__exponent+0x68>
 800cbde:	f10d 0307 	add.w	r3, sp, #7
 800cbe2:	461d      	mov	r5, r3
 800cbe4:	270a      	movs	r7, #10
 800cbe6:	461a      	mov	r2, r3
 800cbe8:	fbb1 f6f7 	udiv	r6, r1, r7
 800cbec:	fb07 1416 	mls	r4, r7, r6, r1
 800cbf0:	3430      	adds	r4, #48	@ 0x30
 800cbf2:	f802 4c01 	strb.w	r4, [r2, #-1]
 800cbf6:	460c      	mov	r4, r1
 800cbf8:	2c63      	cmp	r4, #99	@ 0x63
 800cbfa:	f103 33ff 	add.w	r3, r3, #4294967295
 800cbfe:	4631      	mov	r1, r6
 800cc00:	dcf1      	bgt.n	800cbe6 <__exponent+0x1c>
 800cc02:	3130      	adds	r1, #48	@ 0x30
 800cc04:	1e94      	subs	r4, r2, #2
 800cc06:	f803 1c01 	strb.w	r1, [r3, #-1]
 800cc0a:	1c41      	adds	r1, r0, #1
 800cc0c:	4623      	mov	r3, r4
 800cc0e:	42ab      	cmp	r3, r5
 800cc10:	d30a      	bcc.n	800cc28 <__exponent+0x5e>
 800cc12:	f10d 0309 	add.w	r3, sp, #9
 800cc16:	1a9b      	subs	r3, r3, r2
 800cc18:	42ac      	cmp	r4, r5
 800cc1a:	bf88      	it	hi
 800cc1c:	2300      	movhi	r3, #0
 800cc1e:	3302      	adds	r3, #2
 800cc20:	4403      	add	r3, r0
 800cc22:	1a18      	subs	r0, r3, r0
 800cc24:	b003      	add	sp, #12
 800cc26:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cc28:	f813 6b01 	ldrb.w	r6, [r3], #1
 800cc2c:	f801 6f01 	strb.w	r6, [r1, #1]!
 800cc30:	e7ed      	b.n	800cc0e <__exponent+0x44>
 800cc32:	2330      	movs	r3, #48	@ 0x30
 800cc34:	3130      	adds	r1, #48	@ 0x30
 800cc36:	7083      	strb	r3, [r0, #2]
 800cc38:	70c1      	strb	r1, [r0, #3]
 800cc3a:	1d03      	adds	r3, r0, #4
 800cc3c:	e7f1      	b.n	800cc22 <__exponent+0x58>
	...

0800cc40 <_printf_float>:
 800cc40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc44:	b08d      	sub	sp, #52	@ 0x34
 800cc46:	460c      	mov	r4, r1
 800cc48:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800cc4c:	4616      	mov	r6, r2
 800cc4e:	461f      	mov	r7, r3
 800cc50:	4605      	mov	r5, r0
 800cc52:	f000 fcfb 	bl	800d64c <_localeconv_r>
 800cc56:	6803      	ldr	r3, [r0, #0]
 800cc58:	9304      	str	r3, [sp, #16]
 800cc5a:	4618      	mov	r0, r3
 800cc5c:	f7f3 fb30 	bl	80002c0 <strlen>
 800cc60:	2300      	movs	r3, #0
 800cc62:	930a      	str	r3, [sp, #40]	@ 0x28
 800cc64:	f8d8 3000 	ldr.w	r3, [r8]
 800cc68:	9005      	str	r0, [sp, #20]
 800cc6a:	3307      	adds	r3, #7
 800cc6c:	f023 0307 	bic.w	r3, r3, #7
 800cc70:	f103 0208 	add.w	r2, r3, #8
 800cc74:	f894 a018 	ldrb.w	sl, [r4, #24]
 800cc78:	f8d4 b000 	ldr.w	fp, [r4]
 800cc7c:	f8c8 2000 	str.w	r2, [r8]
 800cc80:	e9d3 8900 	ldrd	r8, r9, [r3]
 800cc84:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800cc88:	9307      	str	r3, [sp, #28]
 800cc8a:	f8cd 8018 	str.w	r8, [sp, #24]
 800cc8e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800cc92:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800cc96:	4b9c      	ldr	r3, [pc, #624]	@ (800cf08 <_printf_float+0x2c8>)
 800cc98:	f04f 32ff 	mov.w	r2, #4294967295
 800cc9c:	f7f3 ff6e 	bl	8000b7c <__aeabi_dcmpun>
 800cca0:	bb70      	cbnz	r0, 800cd00 <_printf_float+0xc0>
 800cca2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800cca6:	4b98      	ldr	r3, [pc, #608]	@ (800cf08 <_printf_float+0x2c8>)
 800cca8:	f04f 32ff 	mov.w	r2, #4294967295
 800ccac:	f7f3 ff48 	bl	8000b40 <__aeabi_dcmple>
 800ccb0:	bb30      	cbnz	r0, 800cd00 <_printf_float+0xc0>
 800ccb2:	2200      	movs	r2, #0
 800ccb4:	2300      	movs	r3, #0
 800ccb6:	4640      	mov	r0, r8
 800ccb8:	4649      	mov	r1, r9
 800ccba:	f7f3 ff37 	bl	8000b2c <__aeabi_dcmplt>
 800ccbe:	b110      	cbz	r0, 800ccc6 <_printf_float+0x86>
 800ccc0:	232d      	movs	r3, #45	@ 0x2d
 800ccc2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ccc6:	4a91      	ldr	r2, [pc, #580]	@ (800cf0c <_printf_float+0x2cc>)
 800ccc8:	4b91      	ldr	r3, [pc, #580]	@ (800cf10 <_printf_float+0x2d0>)
 800ccca:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800ccce:	bf8c      	ite	hi
 800ccd0:	4690      	movhi	r8, r2
 800ccd2:	4698      	movls	r8, r3
 800ccd4:	2303      	movs	r3, #3
 800ccd6:	6123      	str	r3, [r4, #16]
 800ccd8:	f02b 0304 	bic.w	r3, fp, #4
 800ccdc:	6023      	str	r3, [r4, #0]
 800ccde:	f04f 0900 	mov.w	r9, #0
 800cce2:	9700      	str	r7, [sp, #0]
 800cce4:	4633      	mov	r3, r6
 800cce6:	aa0b      	add	r2, sp, #44	@ 0x2c
 800cce8:	4621      	mov	r1, r4
 800ccea:	4628      	mov	r0, r5
 800ccec:	f000 f9d2 	bl	800d094 <_printf_common>
 800ccf0:	3001      	adds	r0, #1
 800ccf2:	f040 808d 	bne.w	800ce10 <_printf_float+0x1d0>
 800ccf6:	f04f 30ff 	mov.w	r0, #4294967295
 800ccfa:	b00d      	add	sp, #52	@ 0x34
 800ccfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cd00:	4642      	mov	r2, r8
 800cd02:	464b      	mov	r3, r9
 800cd04:	4640      	mov	r0, r8
 800cd06:	4649      	mov	r1, r9
 800cd08:	f7f3 ff38 	bl	8000b7c <__aeabi_dcmpun>
 800cd0c:	b140      	cbz	r0, 800cd20 <_printf_float+0xe0>
 800cd0e:	464b      	mov	r3, r9
 800cd10:	2b00      	cmp	r3, #0
 800cd12:	bfbc      	itt	lt
 800cd14:	232d      	movlt	r3, #45	@ 0x2d
 800cd16:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800cd1a:	4a7e      	ldr	r2, [pc, #504]	@ (800cf14 <_printf_float+0x2d4>)
 800cd1c:	4b7e      	ldr	r3, [pc, #504]	@ (800cf18 <_printf_float+0x2d8>)
 800cd1e:	e7d4      	b.n	800ccca <_printf_float+0x8a>
 800cd20:	6863      	ldr	r3, [r4, #4]
 800cd22:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800cd26:	9206      	str	r2, [sp, #24]
 800cd28:	1c5a      	adds	r2, r3, #1
 800cd2a:	d13b      	bne.n	800cda4 <_printf_float+0x164>
 800cd2c:	2306      	movs	r3, #6
 800cd2e:	6063      	str	r3, [r4, #4]
 800cd30:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800cd34:	2300      	movs	r3, #0
 800cd36:	6022      	str	r2, [r4, #0]
 800cd38:	9303      	str	r3, [sp, #12]
 800cd3a:	ab0a      	add	r3, sp, #40	@ 0x28
 800cd3c:	e9cd a301 	strd	sl, r3, [sp, #4]
 800cd40:	ab09      	add	r3, sp, #36	@ 0x24
 800cd42:	9300      	str	r3, [sp, #0]
 800cd44:	6861      	ldr	r1, [r4, #4]
 800cd46:	ec49 8b10 	vmov	d0, r8, r9
 800cd4a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800cd4e:	4628      	mov	r0, r5
 800cd50:	f7ff fed6 	bl	800cb00 <__cvt>
 800cd54:	9b06      	ldr	r3, [sp, #24]
 800cd56:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800cd58:	2b47      	cmp	r3, #71	@ 0x47
 800cd5a:	4680      	mov	r8, r0
 800cd5c:	d129      	bne.n	800cdb2 <_printf_float+0x172>
 800cd5e:	1cc8      	adds	r0, r1, #3
 800cd60:	db02      	blt.n	800cd68 <_printf_float+0x128>
 800cd62:	6863      	ldr	r3, [r4, #4]
 800cd64:	4299      	cmp	r1, r3
 800cd66:	dd41      	ble.n	800cdec <_printf_float+0x1ac>
 800cd68:	f1aa 0a02 	sub.w	sl, sl, #2
 800cd6c:	fa5f fa8a 	uxtb.w	sl, sl
 800cd70:	3901      	subs	r1, #1
 800cd72:	4652      	mov	r2, sl
 800cd74:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800cd78:	9109      	str	r1, [sp, #36]	@ 0x24
 800cd7a:	f7ff ff26 	bl	800cbca <__exponent>
 800cd7e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800cd80:	1813      	adds	r3, r2, r0
 800cd82:	2a01      	cmp	r2, #1
 800cd84:	4681      	mov	r9, r0
 800cd86:	6123      	str	r3, [r4, #16]
 800cd88:	dc02      	bgt.n	800cd90 <_printf_float+0x150>
 800cd8a:	6822      	ldr	r2, [r4, #0]
 800cd8c:	07d2      	lsls	r2, r2, #31
 800cd8e:	d501      	bpl.n	800cd94 <_printf_float+0x154>
 800cd90:	3301      	adds	r3, #1
 800cd92:	6123      	str	r3, [r4, #16]
 800cd94:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800cd98:	2b00      	cmp	r3, #0
 800cd9a:	d0a2      	beq.n	800cce2 <_printf_float+0xa2>
 800cd9c:	232d      	movs	r3, #45	@ 0x2d
 800cd9e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800cda2:	e79e      	b.n	800cce2 <_printf_float+0xa2>
 800cda4:	9a06      	ldr	r2, [sp, #24]
 800cda6:	2a47      	cmp	r2, #71	@ 0x47
 800cda8:	d1c2      	bne.n	800cd30 <_printf_float+0xf0>
 800cdaa:	2b00      	cmp	r3, #0
 800cdac:	d1c0      	bne.n	800cd30 <_printf_float+0xf0>
 800cdae:	2301      	movs	r3, #1
 800cdb0:	e7bd      	b.n	800cd2e <_printf_float+0xee>
 800cdb2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800cdb6:	d9db      	bls.n	800cd70 <_printf_float+0x130>
 800cdb8:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800cdbc:	d118      	bne.n	800cdf0 <_printf_float+0x1b0>
 800cdbe:	2900      	cmp	r1, #0
 800cdc0:	6863      	ldr	r3, [r4, #4]
 800cdc2:	dd0b      	ble.n	800cddc <_printf_float+0x19c>
 800cdc4:	6121      	str	r1, [r4, #16]
 800cdc6:	b913      	cbnz	r3, 800cdce <_printf_float+0x18e>
 800cdc8:	6822      	ldr	r2, [r4, #0]
 800cdca:	07d0      	lsls	r0, r2, #31
 800cdcc:	d502      	bpl.n	800cdd4 <_printf_float+0x194>
 800cdce:	3301      	adds	r3, #1
 800cdd0:	440b      	add	r3, r1
 800cdd2:	6123      	str	r3, [r4, #16]
 800cdd4:	65a1      	str	r1, [r4, #88]	@ 0x58
 800cdd6:	f04f 0900 	mov.w	r9, #0
 800cdda:	e7db      	b.n	800cd94 <_printf_float+0x154>
 800cddc:	b913      	cbnz	r3, 800cde4 <_printf_float+0x1a4>
 800cdde:	6822      	ldr	r2, [r4, #0]
 800cde0:	07d2      	lsls	r2, r2, #31
 800cde2:	d501      	bpl.n	800cde8 <_printf_float+0x1a8>
 800cde4:	3302      	adds	r3, #2
 800cde6:	e7f4      	b.n	800cdd2 <_printf_float+0x192>
 800cde8:	2301      	movs	r3, #1
 800cdea:	e7f2      	b.n	800cdd2 <_printf_float+0x192>
 800cdec:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800cdf0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cdf2:	4299      	cmp	r1, r3
 800cdf4:	db05      	blt.n	800ce02 <_printf_float+0x1c2>
 800cdf6:	6823      	ldr	r3, [r4, #0]
 800cdf8:	6121      	str	r1, [r4, #16]
 800cdfa:	07d8      	lsls	r0, r3, #31
 800cdfc:	d5ea      	bpl.n	800cdd4 <_printf_float+0x194>
 800cdfe:	1c4b      	adds	r3, r1, #1
 800ce00:	e7e7      	b.n	800cdd2 <_printf_float+0x192>
 800ce02:	2900      	cmp	r1, #0
 800ce04:	bfd4      	ite	le
 800ce06:	f1c1 0202 	rsble	r2, r1, #2
 800ce0a:	2201      	movgt	r2, #1
 800ce0c:	4413      	add	r3, r2
 800ce0e:	e7e0      	b.n	800cdd2 <_printf_float+0x192>
 800ce10:	6823      	ldr	r3, [r4, #0]
 800ce12:	055a      	lsls	r2, r3, #21
 800ce14:	d407      	bmi.n	800ce26 <_printf_float+0x1e6>
 800ce16:	6923      	ldr	r3, [r4, #16]
 800ce18:	4642      	mov	r2, r8
 800ce1a:	4631      	mov	r1, r6
 800ce1c:	4628      	mov	r0, r5
 800ce1e:	47b8      	blx	r7
 800ce20:	3001      	adds	r0, #1
 800ce22:	d12b      	bne.n	800ce7c <_printf_float+0x23c>
 800ce24:	e767      	b.n	800ccf6 <_printf_float+0xb6>
 800ce26:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800ce2a:	f240 80dd 	bls.w	800cfe8 <_printf_float+0x3a8>
 800ce2e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800ce32:	2200      	movs	r2, #0
 800ce34:	2300      	movs	r3, #0
 800ce36:	f7f3 fe6f 	bl	8000b18 <__aeabi_dcmpeq>
 800ce3a:	2800      	cmp	r0, #0
 800ce3c:	d033      	beq.n	800cea6 <_printf_float+0x266>
 800ce3e:	4a37      	ldr	r2, [pc, #220]	@ (800cf1c <_printf_float+0x2dc>)
 800ce40:	2301      	movs	r3, #1
 800ce42:	4631      	mov	r1, r6
 800ce44:	4628      	mov	r0, r5
 800ce46:	47b8      	blx	r7
 800ce48:	3001      	adds	r0, #1
 800ce4a:	f43f af54 	beq.w	800ccf6 <_printf_float+0xb6>
 800ce4e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800ce52:	4543      	cmp	r3, r8
 800ce54:	db02      	blt.n	800ce5c <_printf_float+0x21c>
 800ce56:	6823      	ldr	r3, [r4, #0]
 800ce58:	07d8      	lsls	r0, r3, #31
 800ce5a:	d50f      	bpl.n	800ce7c <_printf_float+0x23c>
 800ce5c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ce60:	4631      	mov	r1, r6
 800ce62:	4628      	mov	r0, r5
 800ce64:	47b8      	blx	r7
 800ce66:	3001      	adds	r0, #1
 800ce68:	f43f af45 	beq.w	800ccf6 <_printf_float+0xb6>
 800ce6c:	f04f 0900 	mov.w	r9, #0
 800ce70:	f108 38ff 	add.w	r8, r8, #4294967295
 800ce74:	f104 0a1a 	add.w	sl, r4, #26
 800ce78:	45c8      	cmp	r8, r9
 800ce7a:	dc09      	bgt.n	800ce90 <_printf_float+0x250>
 800ce7c:	6823      	ldr	r3, [r4, #0]
 800ce7e:	079b      	lsls	r3, r3, #30
 800ce80:	f100 8103 	bmi.w	800d08a <_printf_float+0x44a>
 800ce84:	68e0      	ldr	r0, [r4, #12]
 800ce86:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ce88:	4298      	cmp	r0, r3
 800ce8a:	bfb8      	it	lt
 800ce8c:	4618      	movlt	r0, r3
 800ce8e:	e734      	b.n	800ccfa <_printf_float+0xba>
 800ce90:	2301      	movs	r3, #1
 800ce92:	4652      	mov	r2, sl
 800ce94:	4631      	mov	r1, r6
 800ce96:	4628      	mov	r0, r5
 800ce98:	47b8      	blx	r7
 800ce9a:	3001      	adds	r0, #1
 800ce9c:	f43f af2b 	beq.w	800ccf6 <_printf_float+0xb6>
 800cea0:	f109 0901 	add.w	r9, r9, #1
 800cea4:	e7e8      	b.n	800ce78 <_printf_float+0x238>
 800cea6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cea8:	2b00      	cmp	r3, #0
 800ceaa:	dc39      	bgt.n	800cf20 <_printf_float+0x2e0>
 800ceac:	4a1b      	ldr	r2, [pc, #108]	@ (800cf1c <_printf_float+0x2dc>)
 800ceae:	2301      	movs	r3, #1
 800ceb0:	4631      	mov	r1, r6
 800ceb2:	4628      	mov	r0, r5
 800ceb4:	47b8      	blx	r7
 800ceb6:	3001      	adds	r0, #1
 800ceb8:	f43f af1d 	beq.w	800ccf6 <_printf_float+0xb6>
 800cebc:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800cec0:	ea59 0303 	orrs.w	r3, r9, r3
 800cec4:	d102      	bne.n	800cecc <_printf_float+0x28c>
 800cec6:	6823      	ldr	r3, [r4, #0]
 800cec8:	07d9      	lsls	r1, r3, #31
 800ceca:	d5d7      	bpl.n	800ce7c <_printf_float+0x23c>
 800cecc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ced0:	4631      	mov	r1, r6
 800ced2:	4628      	mov	r0, r5
 800ced4:	47b8      	blx	r7
 800ced6:	3001      	adds	r0, #1
 800ced8:	f43f af0d 	beq.w	800ccf6 <_printf_float+0xb6>
 800cedc:	f04f 0a00 	mov.w	sl, #0
 800cee0:	f104 0b1a 	add.w	fp, r4, #26
 800cee4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cee6:	425b      	negs	r3, r3
 800cee8:	4553      	cmp	r3, sl
 800ceea:	dc01      	bgt.n	800cef0 <_printf_float+0x2b0>
 800ceec:	464b      	mov	r3, r9
 800ceee:	e793      	b.n	800ce18 <_printf_float+0x1d8>
 800cef0:	2301      	movs	r3, #1
 800cef2:	465a      	mov	r2, fp
 800cef4:	4631      	mov	r1, r6
 800cef6:	4628      	mov	r0, r5
 800cef8:	47b8      	blx	r7
 800cefa:	3001      	adds	r0, #1
 800cefc:	f43f aefb 	beq.w	800ccf6 <_printf_float+0xb6>
 800cf00:	f10a 0a01 	add.w	sl, sl, #1
 800cf04:	e7ee      	b.n	800cee4 <_printf_float+0x2a4>
 800cf06:	bf00      	nop
 800cf08:	7fefffff 	.word	0x7fefffff
 800cf0c:	080105be 	.word	0x080105be
 800cf10:	080105ba 	.word	0x080105ba
 800cf14:	080105c6 	.word	0x080105c6
 800cf18:	080105c2 	.word	0x080105c2
 800cf1c:	080105ca 	.word	0x080105ca
 800cf20:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800cf22:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800cf26:	4553      	cmp	r3, sl
 800cf28:	bfa8      	it	ge
 800cf2a:	4653      	movge	r3, sl
 800cf2c:	2b00      	cmp	r3, #0
 800cf2e:	4699      	mov	r9, r3
 800cf30:	dc36      	bgt.n	800cfa0 <_printf_float+0x360>
 800cf32:	f04f 0b00 	mov.w	fp, #0
 800cf36:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800cf3a:	f104 021a 	add.w	r2, r4, #26
 800cf3e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800cf40:	9306      	str	r3, [sp, #24]
 800cf42:	eba3 0309 	sub.w	r3, r3, r9
 800cf46:	455b      	cmp	r3, fp
 800cf48:	dc31      	bgt.n	800cfae <_printf_float+0x36e>
 800cf4a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cf4c:	459a      	cmp	sl, r3
 800cf4e:	dc3a      	bgt.n	800cfc6 <_printf_float+0x386>
 800cf50:	6823      	ldr	r3, [r4, #0]
 800cf52:	07da      	lsls	r2, r3, #31
 800cf54:	d437      	bmi.n	800cfc6 <_printf_float+0x386>
 800cf56:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cf58:	ebaa 0903 	sub.w	r9, sl, r3
 800cf5c:	9b06      	ldr	r3, [sp, #24]
 800cf5e:	ebaa 0303 	sub.w	r3, sl, r3
 800cf62:	4599      	cmp	r9, r3
 800cf64:	bfa8      	it	ge
 800cf66:	4699      	movge	r9, r3
 800cf68:	f1b9 0f00 	cmp.w	r9, #0
 800cf6c:	dc33      	bgt.n	800cfd6 <_printf_float+0x396>
 800cf6e:	f04f 0800 	mov.w	r8, #0
 800cf72:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800cf76:	f104 0b1a 	add.w	fp, r4, #26
 800cf7a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cf7c:	ebaa 0303 	sub.w	r3, sl, r3
 800cf80:	eba3 0309 	sub.w	r3, r3, r9
 800cf84:	4543      	cmp	r3, r8
 800cf86:	f77f af79 	ble.w	800ce7c <_printf_float+0x23c>
 800cf8a:	2301      	movs	r3, #1
 800cf8c:	465a      	mov	r2, fp
 800cf8e:	4631      	mov	r1, r6
 800cf90:	4628      	mov	r0, r5
 800cf92:	47b8      	blx	r7
 800cf94:	3001      	adds	r0, #1
 800cf96:	f43f aeae 	beq.w	800ccf6 <_printf_float+0xb6>
 800cf9a:	f108 0801 	add.w	r8, r8, #1
 800cf9e:	e7ec      	b.n	800cf7a <_printf_float+0x33a>
 800cfa0:	4642      	mov	r2, r8
 800cfa2:	4631      	mov	r1, r6
 800cfa4:	4628      	mov	r0, r5
 800cfa6:	47b8      	blx	r7
 800cfa8:	3001      	adds	r0, #1
 800cfaa:	d1c2      	bne.n	800cf32 <_printf_float+0x2f2>
 800cfac:	e6a3      	b.n	800ccf6 <_printf_float+0xb6>
 800cfae:	2301      	movs	r3, #1
 800cfb0:	4631      	mov	r1, r6
 800cfb2:	4628      	mov	r0, r5
 800cfb4:	9206      	str	r2, [sp, #24]
 800cfb6:	47b8      	blx	r7
 800cfb8:	3001      	adds	r0, #1
 800cfba:	f43f ae9c 	beq.w	800ccf6 <_printf_float+0xb6>
 800cfbe:	9a06      	ldr	r2, [sp, #24]
 800cfc0:	f10b 0b01 	add.w	fp, fp, #1
 800cfc4:	e7bb      	b.n	800cf3e <_printf_float+0x2fe>
 800cfc6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cfca:	4631      	mov	r1, r6
 800cfcc:	4628      	mov	r0, r5
 800cfce:	47b8      	blx	r7
 800cfd0:	3001      	adds	r0, #1
 800cfd2:	d1c0      	bne.n	800cf56 <_printf_float+0x316>
 800cfd4:	e68f      	b.n	800ccf6 <_printf_float+0xb6>
 800cfd6:	9a06      	ldr	r2, [sp, #24]
 800cfd8:	464b      	mov	r3, r9
 800cfda:	4442      	add	r2, r8
 800cfdc:	4631      	mov	r1, r6
 800cfde:	4628      	mov	r0, r5
 800cfe0:	47b8      	blx	r7
 800cfe2:	3001      	adds	r0, #1
 800cfe4:	d1c3      	bne.n	800cf6e <_printf_float+0x32e>
 800cfe6:	e686      	b.n	800ccf6 <_printf_float+0xb6>
 800cfe8:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800cfec:	f1ba 0f01 	cmp.w	sl, #1
 800cff0:	dc01      	bgt.n	800cff6 <_printf_float+0x3b6>
 800cff2:	07db      	lsls	r3, r3, #31
 800cff4:	d536      	bpl.n	800d064 <_printf_float+0x424>
 800cff6:	2301      	movs	r3, #1
 800cff8:	4642      	mov	r2, r8
 800cffa:	4631      	mov	r1, r6
 800cffc:	4628      	mov	r0, r5
 800cffe:	47b8      	blx	r7
 800d000:	3001      	adds	r0, #1
 800d002:	f43f ae78 	beq.w	800ccf6 <_printf_float+0xb6>
 800d006:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d00a:	4631      	mov	r1, r6
 800d00c:	4628      	mov	r0, r5
 800d00e:	47b8      	blx	r7
 800d010:	3001      	adds	r0, #1
 800d012:	f43f ae70 	beq.w	800ccf6 <_printf_float+0xb6>
 800d016:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800d01a:	2200      	movs	r2, #0
 800d01c:	2300      	movs	r3, #0
 800d01e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d022:	f7f3 fd79 	bl	8000b18 <__aeabi_dcmpeq>
 800d026:	b9c0      	cbnz	r0, 800d05a <_printf_float+0x41a>
 800d028:	4653      	mov	r3, sl
 800d02a:	f108 0201 	add.w	r2, r8, #1
 800d02e:	4631      	mov	r1, r6
 800d030:	4628      	mov	r0, r5
 800d032:	47b8      	blx	r7
 800d034:	3001      	adds	r0, #1
 800d036:	d10c      	bne.n	800d052 <_printf_float+0x412>
 800d038:	e65d      	b.n	800ccf6 <_printf_float+0xb6>
 800d03a:	2301      	movs	r3, #1
 800d03c:	465a      	mov	r2, fp
 800d03e:	4631      	mov	r1, r6
 800d040:	4628      	mov	r0, r5
 800d042:	47b8      	blx	r7
 800d044:	3001      	adds	r0, #1
 800d046:	f43f ae56 	beq.w	800ccf6 <_printf_float+0xb6>
 800d04a:	f108 0801 	add.w	r8, r8, #1
 800d04e:	45d0      	cmp	r8, sl
 800d050:	dbf3      	blt.n	800d03a <_printf_float+0x3fa>
 800d052:	464b      	mov	r3, r9
 800d054:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800d058:	e6df      	b.n	800ce1a <_printf_float+0x1da>
 800d05a:	f04f 0800 	mov.w	r8, #0
 800d05e:	f104 0b1a 	add.w	fp, r4, #26
 800d062:	e7f4      	b.n	800d04e <_printf_float+0x40e>
 800d064:	2301      	movs	r3, #1
 800d066:	4642      	mov	r2, r8
 800d068:	e7e1      	b.n	800d02e <_printf_float+0x3ee>
 800d06a:	2301      	movs	r3, #1
 800d06c:	464a      	mov	r2, r9
 800d06e:	4631      	mov	r1, r6
 800d070:	4628      	mov	r0, r5
 800d072:	47b8      	blx	r7
 800d074:	3001      	adds	r0, #1
 800d076:	f43f ae3e 	beq.w	800ccf6 <_printf_float+0xb6>
 800d07a:	f108 0801 	add.w	r8, r8, #1
 800d07e:	68e3      	ldr	r3, [r4, #12]
 800d080:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800d082:	1a5b      	subs	r3, r3, r1
 800d084:	4543      	cmp	r3, r8
 800d086:	dcf0      	bgt.n	800d06a <_printf_float+0x42a>
 800d088:	e6fc      	b.n	800ce84 <_printf_float+0x244>
 800d08a:	f04f 0800 	mov.w	r8, #0
 800d08e:	f104 0919 	add.w	r9, r4, #25
 800d092:	e7f4      	b.n	800d07e <_printf_float+0x43e>

0800d094 <_printf_common>:
 800d094:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d098:	4616      	mov	r6, r2
 800d09a:	4698      	mov	r8, r3
 800d09c:	688a      	ldr	r2, [r1, #8]
 800d09e:	690b      	ldr	r3, [r1, #16]
 800d0a0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800d0a4:	4293      	cmp	r3, r2
 800d0a6:	bfb8      	it	lt
 800d0a8:	4613      	movlt	r3, r2
 800d0aa:	6033      	str	r3, [r6, #0]
 800d0ac:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800d0b0:	4607      	mov	r7, r0
 800d0b2:	460c      	mov	r4, r1
 800d0b4:	b10a      	cbz	r2, 800d0ba <_printf_common+0x26>
 800d0b6:	3301      	adds	r3, #1
 800d0b8:	6033      	str	r3, [r6, #0]
 800d0ba:	6823      	ldr	r3, [r4, #0]
 800d0bc:	0699      	lsls	r1, r3, #26
 800d0be:	bf42      	ittt	mi
 800d0c0:	6833      	ldrmi	r3, [r6, #0]
 800d0c2:	3302      	addmi	r3, #2
 800d0c4:	6033      	strmi	r3, [r6, #0]
 800d0c6:	6825      	ldr	r5, [r4, #0]
 800d0c8:	f015 0506 	ands.w	r5, r5, #6
 800d0cc:	d106      	bne.n	800d0dc <_printf_common+0x48>
 800d0ce:	f104 0a19 	add.w	sl, r4, #25
 800d0d2:	68e3      	ldr	r3, [r4, #12]
 800d0d4:	6832      	ldr	r2, [r6, #0]
 800d0d6:	1a9b      	subs	r3, r3, r2
 800d0d8:	42ab      	cmp	r3, r5
 800d0da:	dc26      	bgt.n	800d12a <_printf_common+0x96>
 800d0dc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800d0e0:	6822      	ldr	r2, [r4, #0]
 800d0e2:	3b00      	subs	r3, #0
 800d0e4:	bf18      	it	ne
 800d0e6:	2301      	movne	r3, #1
 800d0e8:	0692      	lsls	r2, r2, #26
 800d0ea:	d42b      	bmi.n	800d144 <_printf_common+0xb0>
 800d0ec:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800d0f0:	4641      	mov	r1, r8
 800d0f2:	4638      	mov	r0, r7
 800d0f4:	47c8      	blx	r9
 800d0f6:	3001      	adds	r0, #1
 800d0f8:	d01e      	beq.n	800d138 <_printf_common+0xa4>
 800d0fa:	6823      	ldr	r3, [r4, #0]
 800d0fc:	6922      	ldr	r2, [r4, #16]
 800d0fe:	f003 0306 	and.w	r3, r3, #6
 800d102:	2b04      	cmp	r3, #4
 800d104:	bf02      	ittt	eq
 800d106:	68e5      	ldreq	r5, [r4, #12]
 800d108:	6833      	ldreq	r3, [r6, #0]
 800d10a:	1aed      	subeq	r5, r5, r3
 800d10c:	68a3      	ldr	r3, [r4, #8]
 800d10e:	bf0c      	ite	eq
 800d110:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d114:	2500      	movne	r5, #0
 800d116:	4293      	cmp	r3, r2
 800d118:	bfc4      	itt	gt
 800d11a:	1a9b      	subgt	r3, r3, r2
 800d11c:	18ed      	addgt	r5, r5, r3
 800d11e:	2600      	movs	r6, #0
 800d120:	341a      	adds	r4, #26
 800d122:	42b5      	cmp	r5, r6
 800d124:	d11a      	bne.n	800d15c <_printf_common+0xc8>
 800d126:	2000      	movs	r0, #0
 800d128:	e008      	b.n	800d13c <_printf_common+0xa8>
 800d12a:	2301      	movs	r3, #1
 800d12c:	4652      	mov	r2, sl
 800d12e:	4641      	mov	r1, r8
 800d130:	4638      	mov	r0, r7
 800d132:	47c8      	blx	r9
 800d134:	3001      	adds	r0, #1
 800d136:	d103      	bne.n	800d140 <_printf_common+0xac>
 800d138:	f04f 30ff 	mov.w	r0, #4294967295
 800d13c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d140:	3501      	adds	r5, #1
 800d142:	e7c6      	b.n	800d0d2 <_printf_common+0x3e>
 800d144:	18e1      	adds	r1, r4, r3
 800d146:	1c5a      	adds	r2, r3, #1
 800d148:	2030      	movs	r0, #48	@ 0x30
 800d14a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800d14e:	4422      	add	r2, r4
 800d150:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800d154:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800d158:	3302      	adds	r3, #2
 800d15a:	e7c7      	b.n	800d0ec <_printf_common+0x58>
 800d15c:	2301      	movs	r3, #1
 800d15e:	4622      	mov	r2, r4
 800d160:	4641      	mov	r1, r8
 800d162:	4638      	mov	r0, r7
 800d164:	47c8      	blx	r9
 800d166:	3001      	adds	r0, #1
 800d168:	d0e6      	beq.n	800d138 <_printf_common+0xa4>
 800d16a:	3601      	adds	r6, #1
 800d16c:	e7d9      	b.n	800d122 <_printf_common+0x8e>
	...

0800d170 <_printf_i>:
 800d170:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d174:	7e0f      	ldrb	r7, [r1, #24]
 800d176:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800d178:	2f78      	cmp	r7, #120	@ 0x78
 800d17a:	4691      	mov	r9, r2
 800d17c:	4680      	mov	r8, r0
 800d17e:	460c      	mov	r4, r1
 800d180:	469a      	mov	sl, r3
 800d182:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800d186:	d807      	bhi.n	800d198 <_printf_i+0x28>
 800d188:	2f62      	cmp	r7, #98	@ 0x62
 800d18a:	d80a      	bhi.n	800d1a2 <_printf_i+0x32>
 800d18c:	2f00      	cmp	r7, #0
 800d18e:	f000 80d1 	beq.w	800d334 <_printf_i+0x1c4>
 800d192:	2f58      	cmp	r7, #88	@ 0x58
 800d194:	f000 80b8 	beq.w	800d308 <_printf_i+0x198>
 800d198:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d19c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800d1a0:	e03a      	b.n	800d218 <_printf_i+0xa8>
 800d1a2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800d1a6:	2b15      	cmp	r3, #21
 800d1a8:	d8f6      	bhi.n	800d198 <_printf_i+0x28>
 800d1aa:	a101      	add	r1, pc, #4	@ (adr r1, 800d1b0 <_printf_i+0x40>)
 800d1ac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d1b0:	0800d209 	.word	0x0800d209
 800d1b4:	0800d21d 	.word	0x0800d21d
 800d1b8:	0800d199 	.word	0x0800d199
 800d1bc:	0800d199 	.word	0x0800d199
 800d1c0:	0800d199 	.word	0x0800d199
 800d1c4:	0800d199 	.word	0x0800d199
 800d1c8:	0800d21d 	.word	0x0800d21d
 800d1cc:	0800d199 	.word	0x0800d199
 800d1d0:	0800d199 	.word	0x0800d199
 800d1d4:	0800d199 	.word	0x0800d199
 800d1d8:	0800d199 	.word	0x0800d199
 800d1dc:	0800d31b 	.word	0x0800d31b
 800d1e0:	0800d247 	.word	0x0800d247
 800d1e4:	0800d2d5 	.word	0x0800d2d5
 800d1e8:	0800d199 	.word	0x0800d199
 800d1ec:	0800d199 	.word	0x0800d199
 800d1f0:	0800d33d 	.word	0x0800d33d
 800d1f4:	0800d199 	.word	0x0800d199
 800d1f8:	0800d247 	.word	0x0800d247
 800d1fc:	0800d199 	.word	0x0800d199
 800d200:	0800d199 	.word	0x0800d199
 800d204:	0800d2dd 	.word	0x0800d2dd
 800d208:	6833      	ldr	r3, [r6, #0]
 800d20a:	1d1a      	adds	r2, r3, #4
 800d20c:	681b      	ldr	r3, [r3, #0]
 800d20e:	6032      	str	r2, [r6, #0]
 800d210:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d214:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800d218:	2301      	movs	r3, #1
 800d21a:	e09c      	b.n	800d356 <_printf_i+0x1e6>
 800d21c:	6833      	ldr	r3, [r6, #0]
 800d21e:	6820      	ldr	r0, [r4, #0]
 800d220:	1d19      	adds	r1, r3, #4
 800d222:	6031      	str	r1, [r6, #0]
 800d224:	0606      	lsls	r6, r0, #24
 800d226:	d501      	bpl.n	800d22c <_printf_i+0xbc>
 800d228:	681d      	ldr	r5, [r3, #0]
 800d22a:	e003      	b.n	800d234 <_printf_i+0xc4>
 800d22c:	0645      	lsls	r5, r0, #25
 800d22e:	d5fb      	bpl.n	800d228 <_printf_i+0xb8>
 800d230:	f9b3 5000 	ldrsh.w	r5, [r3]
 800d234:	2d00      	cmp	r5, #0
 800d236:	da03      	bge.n	800d240 <_printf_i+0xd0>
 800d238:	232d      	movs	r3, #45	@ 0x2d
 800d23a:	426d      	negs	r5, r5
 800d23c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d240:	4858      	ldr	r0, [pc, #352]	@ (800d3a4 <_printf_i+0x234>)
 800d242:	230a      	movs	r3, #10
 800d244:	e011      	b.n	800d26a <_printf_i+0xfa>
 800d246:	6821      	ldr	r1, [r4, #0]
 800d248:	6833      	ldr	r3, [r6, #0]
 800d24a:	0608      	lsls	r0, r1, #24
 800d24c:	f853 5b04 	ldr.w	r5, [r3], #4
 800d250:	d402      	bmi.n	800d258 <_printf_i+0xe8>
 800d252:	0649      	lsls	r1, r1, #25
 800d254:	bf48      	it	mi
 800d256:	b2ad      	uxthmi	r5, r5
 800d258:	2f6f      	cmp	r7, #111	@ 0x6f
 800d25a:	4852      	ldr	r0, [pc, #328]	@ (800d3a4 <_printf_i+0x234>)
 800d25c:	6033      	str	r3, [r6, #0]
 800d25e:	bf14      	ite	ne
 800d260:	230a      	movne	r3, #10
 800d262:	2308      	moveq	r3, #8
 800d264:	2100      	movs	r1, #0
 800d266:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800d26a:	6866      	ldr	r6, [r4, #4]
 800d26c:	60a6      	str	r6, [r4, #8]
 800d26e:	2e00      	cmp	r6, #0
 800d270:	db05      	blt.n	800d27e <_printf_i+0x10e>
 800d272:	6821      	ldr	r1, [r4, #0]
 800d274:	432e      	orrs	r6, r5
 800d276:	f021 0104 	bic.w	r1, r1, #4
 800d27a:	6021      	str	r1, [r4, #0]
 800d27c:	d04b      	beq.n	800d316 <_printf_i+0x1a6>
 800d27e:	4616      	mov	r6, r2
 800d280:	fbb5 f1f3 	udiv	r1, r5, r3
 800d284:	fb03 5711 	mls	r7, r3, r1, r5
 800d288:	5dc7      	ldrb	r7, [r0, r7]
 800d28a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800d28e:	462f      	mov	r7, r5
 800d290:	42bb      	cmp	r3, r7
 800d292:	460d      	mov	r5, r1
 800d294:	d9f4      	bls.n	800d280 <_printf_i+0x110>
 800d296:	2b08      	cmp	r3, #8
 800d298:	d10b      	bne.n	800d2b2 <_printf_i+0x142>
 800d29a:	6823      	ldr	r3, [r4, #0]
 800d29c:	07df      	lsls	r7, r3, #31
 800d29e:	d508      	bpl.n	800d2b2 <_printf_i+0x142>
 800d2a0:	6923      	ldr	r3, [r4, #16]
 800d2a2:	6861      	ldr	r1, [r4, #4]
 800d2a4:	4299      	cmp	r1, r3
 800d2a6:	bfde      	ittt	le
 800d2a8:	2330      	movle	r3, #48	@ 0x30
 800d2aa:	f806 3c01 	strble.w	r3, [r6, #-1]
 800d2ae:	f106 36ff 	addle.w	r6, r6, #4294967295
 800d2b2:	1b92      	subs	r2, r2, r6
 800d2b4:	6122      	str	r2, [r4, #16]
 800d2b6:	f8cd a000 	str.w	sl, [sp]
 800d2ba:	464b      	mov	r3, r9
 800d2bc:	aa03      	add	r2, sp, #12
 800d2be:	4621      	mov	r1, r4
 800d2c0:	4640      	mov	r0, r8
 800d2c2:	f7ff fee7 	bl	800d094 <_printf_common>
 800d2c6:	3001      	adds	r0, #1
 800d2c8:	d14a      	bne.n	800d360 <_printf_i+0x1f0>
 800d2ca:	f04f 30ff 	mov.w	r0, #4294967295
 800d2ce:	b004      	add	sp, #16
 800d2d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d2d4:	6823      	ldr	r3, [r4, #0]
 800d2d6:	f043 0320 	orr.w	r3, r3, #32
 800d2da:	6023      	str	r3, [r4, #0]
 800d2dc:	4832      	ldr	r0, [pc, #200]	@ (800d3a8 <_printf_i+0x238>)
 800d2de:	2778      	movs	r7, #120	@ 0x78
 800d2e0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800d2e4:	6823      	ldr	r3, [r4, #0]
 800d2e6:	6831      	ldr	r1, [r6, #0]
 800d2e8:	061f      	lsls	r7, r3, #24
 800d2ea:	f851 5b04 	ldr.w	r5, [r1], #4
 800d2ee:	d402      	bmi.n	800d2f6 <_printf_i+0x186>
 800d2f0:	065f      	lsls	r7, r3, #25
 800d2f2:	bf48      	it	mi
 800d2f4:	b2ad      	uxthmi	r5, r5
 800d2f6:	6031      	str	r1, [r6, #0]
 800d2f8:	07d9      	lsls	r1, r3, #31
 800d2fa:	bf44      	itt	mi
 800d2fc:	f043 0320 	orrmi.w	r3, r3, #32
 800d300:	6023      	strmi	r3, [r4, #0]
 800d302:	b11d      	cbz	r5, 800d30c <_printf_i+0x19c>
 800d304:	2310      	movs	r3, #16
 800d306:	e7ad      	b.n	800d264 <_printf_i+0xf4>
 800d308:	4826      	ldr	r0, [pc, #152]	@ (800d3a4 <_printf_i+0x234>)
 800d30a:	e7e9      	b.n	800d2e0 <_printf_i+0x170>
 800d30c:	6823      	ldr	r3, [r4, #0]
 800d30e:	f023 0320 	bic.w	r3, r3, #32
 800d312:	6023      	str	r3, [r4, #0]
 800d314:	e7f6      	b.n	800d304 <_printf_i+0x194>
 800d316:	4616      	mov	r6, r2
 800d318:	e7bd      	b.n	800d296 <_printf_i+0x126>
 800d31a:	6833      	ldr	r3, [r6, #0]
 800d31c:	6825      	ldr	r5, [r4, #0]
 800d31e:	6961      	ldr	r1, [r4, #20]
 800d320:	1d18      	adds	r0, r3, #4
 800d322:	6030      	str	r0, [r6, #0]
 800d324:	062e      	lsls	r6, r5, #24
 800d326:	681b      	ldr	r3, [r3, #0]
 800d328:	d501      	bpl.n	800d32e <_printf_i+0x1be>
 800d32a:	6019      	str	r1, [r3, #0]
 800d32c:	e002      	b.n	800d334 <_printf_i+0x1c4>
 800d32e:	0668      	lsls	r0, r5, #25
 800d330:	d5fb      	bpl.n	800d32a <_printf_i+0x1ba>
 800d332:	8019      	strh	r1, [r3, #0]
 800d334:	2300      	movs	r3, #0
 800d336:	6123      	str	r3, [r4, #16]
 800d338:	4616      	mov	r6, r2
 800d33a:	e7bc      	b.n	800d2b6 <_printf_i+0x146>
 800d33c:	6833      	ldr	r3, [r6, #0]
 800d33e:	1d1a      	adds	r2, r3, #4
 800d340:	6032      	str	r2, [r6, #0]
 800d342:	681e      	ldr	r6, [r3, #0]
 800d344:	6862      	ldr	r2, [r4, #4]
 800d346:	2100      	movs	r1, #0
 800d348:	4630      	mov	r0, r6
 800d34a:	f7f2 ff69 	bl	8000220 <memchr>
 800d34e:	b108      	cbz	r0, 800d354 <_printf_i+0x1e4>
 800d350:	1b80      	subs	r0, r0, r6
 800d352:	6060      	str	r0, [r4, #4]
 800d354:	6863      	ldr	r3, [r4, #4]
 800d356:	6123      	str	r3, [r4, #16]
 800d358:	2300      	movs	r3, #0
 800d35a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d35e:	e7aa      	b.n	800d2b6 <_printf_i+0x146>
 800d360:	6923      	ldr	r3, [r4, #16]
 800d362:	4632      	mov	r2, r6
 800d364:	4649      	mov	r1, r9
 800d366:	4640      	mov	r0, r8
 800d368:	47d0      	blx	sl
 800d36a:	3001      	adds	r0, #1
 800d36c:	d0ad      	beq.n	800d2ca <_printf_i+0x15a>
 800d36e:	6823      	ldr	r3, [r4, #0]
 800d370:	079b      	lsls	r3, r3, #30
 800d372:	d413      	bmi.n	800d39c <_printf_i+0x22c>
 800d374:	68e0      	ldr	r0, [r4, #12]
 800d376:	9b03      	ldr	r3, [sp, #12]
 800d378:	4298      	cmp	r0, r3
 800d37a:	bfb8      	it	lt
 800d37c:	4618      	movlt	r0, r3
 800d37e:	e7a6      	b.n	800d2ce <_printf_i+0x15e>
 800d380:	2301      	movs	r3, #1
 800d382:	4632      	mov	r2, r6
 800d384:	4649      	mov	r1, r9
 800d386:	4640      	mov	r0, r8
 800d388:	47d0      	blx	sl
 800d38a:	3001      	adds	r0, #1
 800d38c:	d09d      	beq.n	800d2ca <_printf_i+0x15a>
 800d38e:	3501      	adds	r5, #1
 800d390:	68e3      	ldr	r3, [r4, #12]
 800d392:	9903      	ldr	r1, [sp, #12]
 800d394:	1a5b      	subs	r3, r3, r1
 800d396:	42ab      	cmp	r3, r5
 800d398:	dcf2      	bgt.n	800d380 <_printf_i+0x210>
 800d39a:	e7eb      	b.n	800d374 <_printf_i+0x204>
 800d39c:	2500      	movs	r5, #0
 800d39e:	f104 0619 	add.w	r6, r4, #25
 800d3a2:	e7f5      	b.n	800d390 <_printf_i+0x220>
 800d3a4:	080105cc 	.word	0x080105cc
 800d3a8:	080105dd 	.word	0x080105dd

0800d3ac <std>:
 800d3ac:	2300      	movs	r3, #0
 800d3ae:	b510      	push	{r4, lr}
 800d3b0:	4604      	mov	r4, r0
 800d3b2:	e9c0 3300 	strd	r3, r3, [r0]
 800d3b6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d3ba:	6083      	str	r3, [r0, #8]
 800d3bc:	8181      	strh	r1, [r0, #12]
 800d3be:	6643      	str	r3, [r0, #100]	@ 0x64
 800d3c0:	81c2      	strh	r2, [r0, #14]
 800d3c2:	6183      	str	r3, [r0, #24]
 800d3c4:	4619      	mov	r1, r3
 800d3c6:	2208      	movs	r2, #8
 800d3c8:	305c      	adds	r0, #92	@ 0x5c
 800d3ca:	f000 f916 	bl	800d5fa <memset>
 800d3ce:	4b0d      	ldr	r3, [pc, #52]	@ (800d404 <std+0x58>)
 800d3d0:	6263      	str	r3, [r4, #36]	@ 0x24
 800d3d2:	4b0d      	ldr	r3, [pc, #52]	@ (800d408 <std+0x5c>)
 800d3d4:	62a3      	str	r3, [r4, #40]	@ 0x28
 800d3d6:	4b0d      	ldr	r3, [pc, #52]	@ (800d40c <std+0x60>)
 800d3d8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800d3da:	4b0d      	ldr	r3, [pc, #52]	@ (800d410 <std+0x64>)
 800d3dc:	6323      	str	r3, [r4, #48]	@ 0x30
 800d3de:	4b0d      	ldr	r3, [pc, #52]	@ (800d414 <std+0x68>)
 800d3e0:	6224      	str	r4, [r4, #32]
 800d3e2:	429c      	cmp	r4, r3
 800d3e4:	d006      	beq.n	800d3f4 <std+0x48>
 800d3e6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800d3ea:	4294      	cmp	r4, r2
 800d3ec:	d002      	beq.n	800d3f4 <std+0x48>
 800d3ee:	33d0      	adds	r3, #208	@ 0xd0
 800d3f0:	429c      	cmp	r4, r3
 800d3f2:	d105      	bne.n	800d400 <std+0x54>
 800d3f4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800d3f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d3fc:	f000 b99a 	b.w	800d734 <__retarget_lock_init_recursive>
 800d400:	bd10      	pop	{r4, pc}
 800d402:	bf00      	nop
 800d404:	0800d575 	.word	0x0800d575
 800d408:	0800d597 	.word	0x0800d597
 800d40c:	0800d5cf 	.word	0x0800d5cf
 800d410:	0800d5f3 	.word	0x0800d5f3
 800d414:	20001df8 	.word	0x20001df8

0800d418 <stdio_exit_handler>:
 800d418:	4a02      	ldr	r2, [pc, #8]	@ (800d424 <stdio_exit_handler+0xc>)
 800d41a:	4903      	ldr	r1, [pc, #12]	@ (800d428 <stdio_exit_handler+0x10>)
 800d41c:	4803      	ldr	r0, [pc, #12]	@ (800d42c <stdio_exit_handler+0x14>)
 800d41e:	f000 b869 	b.w	800d4f4 <_fwalk_sglue>
 800d422:	bf00      	nop
 800d424:	20000010 	.word	0x20000010
 800d428:	0800f9e5 	.word	0x0800f9e5
 800d42c:	2000018c 	.word	0x2000018c

0800d430 <cleanup_stdio>:
 800d430:	6841      	ldr	r1, [r0, #4]
 800d432:	4b0c      	ldr	r3, [pc, #48]	@ (800d464 <cleanup_stdio+0x34>)
 800d434:	4299      	cmp	r1, r3
 800d436:	b510      	push	{r4, lr}
 800d438:	4604      	mov	r4, r0
 800d43a:	d001      	beq.n	800d440 <cleanup_stdio+0x10>
 800d43c:	f002 fad2 	bl	800f9e4 <_fflush_r>
 800d440:	68a1      	ldr	r1, [r4, #8]
 800d442:	4b09      	ldr	r3, [pc, #36]	@ (800d468 <cleanup_stdio+0x38>)
 800d444:	4299      	cmp	r1, r3
 800d446:	d002      	beq.n	800d44e <cleanup_stdio+0x1e>
 800d448:	4620      	mov	r0, r4
 800d44a:	f002 facb 	bl	800f9e4 <_fflush_r>
 800d44e:	68e1      	ldr	r1, [r4, #12]
 800d450:	4b06      	ldr	r3, [pc, #24]	@ (800d46c <cleanup_stdio+0x3c>)
 800d452:	4299      	cmp	r1, r3
 800d454:	d004      	beq.n	800d460 <cleanup_stdio+0x30>
 800d456:	4620      	mov	r0, r4
 800d458:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d45c:	f002 bac2 	b.w	800f9e4 <_fflush_r>
 800d460:	bd10      	pop	{r4, pc}
 800d462:	bf00      	nop
 800d464:	20001df8 	.word	0x20001df8
 800d468:	20001e60 	.word	0x20001e60
 800d46c:	20001ec8 	.word	0x20001ec8

0800d470 <global_stdio_init.part.0>:
 800d470:	b510      	push	{r4, lr}
 800d472:	4b0b      	ldr	r3, [pc, #44]	@ (800d4a0 <global_stdio_init.part.0+0x30>)
 800d474:	4c0b      	ldr	r4, [pc, #44]	@ (800d4a4 <global_stdio_init.part.0+0x34>)
 800d476:	4a0c      	ldr	r2, [pc, #48]	@ (800d4a8 <global_stdio_init.part.0+0x38>)
 800d478:	601a      	str	r2, [r3, #0]
 800d47a:	4620      	mov	r0, r4
 800d47c:	2200      	movs	r2, #0
 800d47e:	2104      	movs	r1, #4
 800d480:	f7ff ff94 	bl	800d3ac <std>
 800d484:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800d488:	2201      	movs	r2, #1
 800d48a:	2109      	movs	r1, #9
 800d48c:	f7ff ff8e 	bl	800d3ac <std>
 800d490:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800d494:	2202      	movs	r2, #2
 800d496:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d49a:	2112      	movs	r1, #18
 800d49c:	f7ff bf86 	b.w	800d3ac <std>
 800d4a0:	20001f30 	.word	0x20001f30
 800d4a4:	20001df8 	.word	0x20001df8
 800d4a8:	0800d419 	.word	0x0800d419

0800d4ac <__sfp_lock_acquire>:
 800d4ac:	4801      	ldr	r0, [pc, #4]	@ (800d4b4 <__sfp_lock_acquire+0x8>)
 800d4ae:	f000 b942 	b.w	800d736 <__retarget_lock_acquire_recursive>
 800d4b2:	bf00      	nop
 800d4b4:	20001f39 	.word	0x20001f39

0800d4b8 <__sfp_lock_release>:
 800d4b8:	4801      	ldr	r0, [pc, #4]	@ (800d4c0 <__sfp_lock_release+0x8>)
 800d4ba:	f000 b93d 	b.w	800d738 <__retarget_lock_release_recursive>
 800d4be:	bf00      	nop
 800d4c0:	20001f39 	.word	0x20001f39

0800d4c4 <__sinit>:
 800d4c4:	b510      	push	{r4, lr}
 800d4c6:	4604      	mov	r4, r0
 800d4c8:	f7ff fff0 	bl	800d4ac <__sfp_lock_acquire>
 800d4cc:	6a23      	ldr	r3, [r4, #32]
 800d4ce:	b11b      	cbz	r3, 800d4d8 <__sinit+0x14>
 800d4d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d4d4:	f7ff bff0 	b.w	800d4b8 <__sfp_lock_release>
 800d4d8:	4b04      	ldr	r3, [pc, #16]	@ (800d4ec <__sinit+0x28>)
 800d4da:	6223      	str	r3, [r4, #32]
 800d4dc:	4b04      	ldr	r3, [pc, #16]	@ (800d4f0 <__sinit+0x2c>)
 800d4de:	681b      	ldr	r3, [r3, #0]
 800d4e0:	2b00      	cmp	r3, #0
 800d4e2:	d1f5      	bne.n	800d4d0 <__sinit+0xc>
 800d4e4:	f7ff ffc4 	bl	800d470 <global_stdio_init.part.0>
 800d4e8:	e7f2      	b.n	800d4d0 <__sinit+0xc>
 800d4ea:	bf00      	nop
 800d4ec:	0800d431 	.word	0x0800d431
 800d4f0:	20001f30 	.word	0x20001f30

0800d4f4 <_fwalk_sglue>:
 800d4f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d4f8:	4607      	mov	r7, r0
 800d4fa:	4688      	mov	r8, r1
 800d4fc:	4614      	mov	r4, r2
 800d4fe:	2600      	movs	r6, #0
 800d500:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d504:	f1b9 0901 	subs.w	r9, r9, #1
 800d508:	d505      	bpl.n	800d516 <_fwalk_sglue+0x22>
 800d50a:	6824      	ldr	r4, [r4, #0]
 800d50c:	2c00      	cmp	r4, #0
 800d50e:	d1f7      	bne.n	800d500 <_fwalk_sglue+0xc>
 800d510:	4630      	mov	r0, r6
 800d512:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d516:	89ab      	ldrh	r3, [r5, #12]
 800d518:	2b01      	cmp	r3, #1
 800d51a:	d907      	bls.n	800d52c <_fwalk_sglue+0x38>
 800d51c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d520:	3301      	adds	r3, #1
 800d522:	d003      	beq.n	800d52c <_fwalk_sglue+0x38>
 800d524:	4629      	mov	r1, r5
 800d526:	4638      	mov	r0, r7
 800d528:	47c0      	blx	r8
 800d52a:	4306      	orrs	r6, r0
 800d52c:	3568      	adds	r5, #104	@ 0x68
 800d52e:	e7e9      	b.n	800d504 <_fwalk_sglue+0x10>

0800d530 <siprintf>:
 800d530:	b40e      	push	{r1, r2, r3}
 800d532:	b510      	push	{r4, lr}
 800d534:	b09d      	sub	sp, #116	@ 0x74
 800d536:	ab1f      	add	r3, sp, #124	@ 0x7c
 800d538:	9002      	str	r0, [sp, #8]
 800d53a:	9006      	str	r0, [sp, #24]
 800d53c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800d540:	480a      	ldr	r0, [pc, #40]	@ (800d56c <siprintf+0x3c>)
 800d542:	9107      	str	r1, [sp, #28]
 800d544:	9104      	str	r1, [sp, #16]
 800d546:	490a      	ldr	r1, [pc, #40]	@ (800d570 <siprintf+0x40>)
 800d548:	f853 2b04 	ldr.w	r2, [r3], #4
 800d54c:	9105      	str	r1, [sp, #20]
 800d54e:	2400      	movs	r4, #0
 800d550:	a902      	add	r1, sp, #8
 800d552:	6800      	ldr	r0, [r0, #0]
 800d554:	9301      	str	r3, [sp, #4]
 800d556:	941b      	str	r4, [sp, #108]	@ 0x6c
 800d558:	f002 f8c4 	bl	800f6e4 <_svfiprintf_r>
 800d55c:	9b02      	ldr	r3, [sp, #8]
 800d55e:	701c      	strb	r4, [r3, #0]
 800d560:	b01d      	add	sp, #116	@ 0x74
 800d562:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d566:	b003      	add	sp, #12
 800d568:	4770      	bx	lr
 800d56a:	bf00      	nop
 800d56c:	20000188 	.word	0x20000188
 800d570:	ffff0208 	.word	0xffff0208

0800d574 <__sread>:
 800d574:	b510      	push	{r4, lr}
 800d576:	460c      	mov	r4, r1
 800d578:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d57c:	f000 f88c 	bl	800d698 <_read_r>
 800d580:	2800      	cmp	r0, #0
 800d582:	bfab      	itete	ge
 800d584:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800d586:	89a3      	ldrhlt	r3, [r4, #12]
 800d588:	181b      	addge	r3, r3, r0
 800d58a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800d58e:	bfac      	ite	ge
 800d590:	6563      	strge	r3, [r4, #84]	@ 0x54
 800d592:	81a3      	strhlt	r3, [r4, #12]
 800d594:	bd10      	pop	{r4, pc}

0800d596 <__swrite>:
 800d596:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d59a:	461f      	mov	r7, r3
 800d59c:	898b      	ldrh	r3, [r1, #12]
 800d59e:	05db      	lsls	r3, r3, #23
 800d5a0:	4605      	mov	r5, r0
 800d5a2:	460c      	mov	r4, r1
 800d5a4:	4616      	mov	r6, r2
 800d5a6:	d505      	bpl.n	800d5b4 <__swrite+0x1e>
 800d5a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d5ac:	2302      	movs	r3, #2
 800d5ae:	2200      	movs	r2, #0
 800d5b0:	f000 f860 	bl	800d674 <_lseek_r>
 800d5b4:	89a3      	ldrh	r3, [r4, #12]
 800d5b6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d5ba:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800d5be:	81a3      	strh	r3, [r4, #12]
 800d5c0:	4632      	mov	r2, r6
 800d5c2:	463b      	mov	r3, r7
 800d5c4:	4628      	mov	r0, r5
 800d5c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d5ca:	f000 b877 	b.w	800d6bc <_write_r>

0800d5ce <__sseek>:
 800d5ce:	b510      	push	{r4, lr}
 800d5d0:	460c      	mov	r4, r1
 800d5d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d5d6:	f000 f84d 	bl	800d674 <_lseek_r>
 800d5da:	1c43      	adds	r3, r0, #1
 800d5dc:	89a3      	ldrh	r3, [r4, #12]
 800d5de:	bf15      	itete	ne
 800d5e0:	6560      	strne	r0, [r4, #84]	@ 0x54
 800d5e2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800d5e6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800d5ea:	81a3      	strheq	r3, [r4, #12]
 800d5ec:	bf18      	it	ne
 800d5ee:	81a3      	strhne	r3, [r4, #12]
 800d5f0:	bd10      	pop	{r4, pc}

0800d5f2 <__sclose>:
 800d5f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d5f6:	f000 b82d 	b.w	800d654 <_close_r>

0800d5fa <memset>:
 800d5fa:	4402      	add	r2, r0
 800d5fc:	4603      	mov	r3, r0
 800d5fe:	4293      	cmp	r3, r2
 800d600:	d100      	bne.n	800d604 <memset+0xa>
 800d602:	4770      	bx	lr
 800d604:	f803 1b01 	strb.w	r1, [r3], #1
 800d608:	e7f9      	b.n	800d5fe <memset+0x4>

0800d60a <strcat>:
 800d60a:	b510      	push	{r4, lr}
 800d60c:	4602      	mov	r2, r0
 800d60e:	7814      	ldrb	r4, [r2, #0]
 800d610:	4613      	mov	r3, r2
 800d612:	3201      	adds	r2, #1
 800d614:	2c00      	cmp	r4, #0
 800d616:	d1fa      	bne.n	800d60e <strcat+0x4>
 800d618:	3b01      	subs	r3, #1
 800d61a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d61e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d622:	2a00      	cmp	r2, #0
 800d624:	d1f9      	bne.n	800d61a <strcat+0x10>
 800d626:	bd10      	pop	{r4, pc}

0800d628 <strncmp>:
 800d628:	b510      	push	{r4, lr}
 800d62a:	b16a      	cbz	r2, 800d648 <strncmp+0x20>
 800d62c:	3901      	subs	r1, #1
 800d62e:	1884      	adds	r4, r0, r2
 800d630:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d634:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800d638:	429a      	cmp	r2, r3
 800d63a:	d103      	bne.n	800d644 <strncmp+0x1c>
 800d63c:	42a0      	cmp	r0, r4
 800d63e:	d001      	beq.n	800d644 <strncmp+0x1c>
 800d640:	2a00      	cmp	r2, #0
 800d642:	d1f5      	bne.n	800d630 <strncmp+0x8>
 800d644:	1ad0      	subs	r0, r2, r3
 800d646:	bd10      	pop	{r4, pc}
 800d648:	4610      	mov	r0, r2
 800d64a:	e7fc      	b.n	800d646 <strncmp+0x1e>

0800d64c <_localeconv_r>:
 800d64c:	4800      	ldr	r0, [pc, #0]	@ (800d650 <_localeconv_r+0x4>)
 800d64e:	4770      	bx	lr
 800d650:	2000010c 	.word	0x2000010c

0800d654 <_close_r>:
 800d654:	b538      	push	{r3, r4, r5, lr}
 800d656:	4d06      	ldr	r5, [pc, #24]	@ (800d670 <_close_r+0x1c>)
 800d658:	2300      	movs	r3, #0
 800d65a:	4604      	mov	r4, r0
 800d65c:	4608      	mov	r0, r1
 800d65e:	602b      	str	r3, [r5, #0]
 800d660:	f7f5 f96a 	bl	8002938 <_close>
 800d664:	1c43      	adds	r3, r0, #1
 800d666:	d102      	bne.n	800d66e <_close_r+0x1a>
 800d668:	682b      	ldr	r3, [r5, #0]
 800d66a:	b103      	cbz	r3, 800d66e <_close_r+0x1a>
 800d66c:	6023      	str	r3, [r4, #0]
 800d66e:	bd38      	pop	{r3, r4, r5, pc}
 800d670:	20001f34 	.word	0x20001f34

0800d674 <_lseek_r>:
 800d674:	b538      	push	{r3, r4, r5, lr}
 800d676:	4d07      	ldr	r5, [pc, #28]	@ (800d694 <_lseek_r+0x20>)
 800d678:	4604      	mov	r4, r0
 800d67a:	4608      	mov	r0, r1
 800d67c:	4611      	mov	r1, r2
 800d67e:	2200      	movs	r2, #0
 800d680:	602a      	str	r2, [r5, #0]
 800d682:	461a      	mov	r2, r3
 800d684:	f7f5 f97f 	bl	8002986 <_lseek>
 800d688:	1c43      	adds	r3, r0, #1
 800d68a:	d102      	bne.n	800d692 <_lseek_r+0x1e>
 800d68c:	682b      	ldr	r3, [r5, #0]
 800d68e:	b103      	cbz	r3, 800d692 <_lseek_r+0x1e>
 800d690:	6023      	str	r3, [r4, #0]
 800d692:	bd38      	pop	{r3, r4, r5, pc}
 800d694:	20001f34 	.word	0x20001f34

0800d698 <_read_r>:
 800d698:	b538      	push	{r3, r4, r5, lr}
 800d69a:	4d07      	ldr	r5, [pc, #28]	@ (800d6b8 <_read_r+0x20>)
 800d69c:	4604      	mov	r4, r0
 800d69e:	4608      	mov	r0, r1
 800d6a0:	4611      	mov	r1, r2
 800d6a2:	2200      	movs	r2, #0
 800d6a4:	602a      	str	r2, [r5, #0]
 800d6a6:	461a      	mov	r2, r3
 800d6a8:	f7f5 f90d 	bl	80028c6 <_read>
 800d6ac:	1c43      	adds	r3, r0, #1
 800d6ae:	d102      	bne.n	800d6b6 <_read_r+0x1e>
 800d6b0:	682b      	ldr	r3, [r5, #0]
 800d6b2:	b103      	cbz	r3, 800d6b6 <_read_r+0x1e>
 800d6b4:	6023      	str	r3, [r4, #0]
 800d6b6:	bd38      	pop	{r3, r4, r5, pc}
 800d6b8:	20001f34 	.word	0x20001f34

0800d6bc <_write_r>:
 800d6bc:	b538      	push	{r3, r4, r5, lr}
 800d6be:	4d07      	ldr	r5, [pc, #28]	@ (800d6dc <_write_r+0x20>)
 800d6c0:	4604      	mov	r4, r0
 800d6c2:	4608      	mov	r0, r1
 800d6c4:	4611      	mov	r1, r2
 800d6c6:	2200      	movs	r2, #0
 800d6c8:	602a      	str	r2, [r5, #0]
 800d6ca:	461a      	mov	r2, r3
 800d6cc:	f7f5 f918 	bl	8002900 <_write>
 800d6d0:	1c43      	adds	r3, r0, #1
 800d6d2:	d102      	bne.n	800d6da <_write_r+0x1e>
 800d6d4:	682b      	ldr	r3, [r5, #0]
 800d6d6:	b103      	cbz	r3, 800d6da <_write_r+0x1e>
 800d6d8:	6023      	str	r3, [r4, #0]
 800d6da:	bd38      	pop	{r3, r4, r5, pc}
 800d6dc:	20001f34 	.word	0x20001f34

0800d6e0 <__errno>:
 800d6e0:	4b01      	ldr	r3, [pc, #4]	@ (800d6e8 <__errno+0x8>)
 800d6e2:	6818      	ldr	r0, [r3, #0]
 800d6e4:	4770      	bx	lr
 800d6e6:	bf00      	nop
 800d6e8:	20000188 	.word	0x20000188

0800d6ec <__libc_init_array>:
 800d6ec:	b570      	push	{r4, r5, r6, lr}
 800d6ee:	4d0d      	ldr	r5, [pc, #52]	@ (800d724 <__libc_init_array+0x38>)
 800d6f0:	4c0d      	ldr	r4, [pc, #52]	@ (800d728 <__libc_init_array+0x3c>)
 800d6f2:	1b64      	subs	r4, r4, r5
 800d6f4:	10a4      	asrs	r4, r4, #2
 800d6f6:	2600      	movs	r6, #0
 800d6f8:	42a6      	cmp	r6, r4
 800d6fa:	d109      	bne.n	800d710 <__libc_init_array+0x24>
 800d6fc:	4d0b      	ldr	r5, [pc, #44]	@ (800d72c <__libc_init_array+0x40>)
 800d6fe:	4c0c      	ldr	r4, [pc, #48]	@ (800d730 <__libc_init_array+0x44>)
 800d700:	f002 fed8 	bl	80104b4 <_init>
 800d704:	1b64      	subs	r4, r4, r5
 800d706:	10a4      	asrs	r4, r4, #2
 800d708:	2600      	movs	r6, #0
 800d70a:	42a6      	cmp	r6, r4
 800d70c:	d105      	bne.n	800d71a <__libc_init_array+0x2e>
 800d70e:	bd70      	pop	{r4, r5, r6, pc}
 800d710:	f855 3b04 	ldr.w	r3, [r5], #4
 800d714:	4798      	blx	r3
 800d716:	3601      	adds	r6, #1
 800d718:	e7ee      	b.n	800d6f8 <__libc_init_array+0xc>
 800d71a:	f855 3b04 	ldr.w	r3, [r5], #4
 800d71e:	4798      	blx	r3
 800d720:	3601      	adds	r6, #1
 800d722:	e7f2      	b.n	800d70a <__libc_init_array+0x1e>
 800d724:	080109e8 	.word	0x080109e8
 800d728:	080109e8 	.word	0x080109e8
 800d72c:	080109e8 	.word	0x080109e8
 800d730:	080109ec 	.word	0x080109ec

0800d734 <__retarget_lock_init_recursive>:
 800d734:	4770      	bx	lr

0800d736 <__retarget_lock_acquire_recursive>:
 800d736:	4770      	bx	lr

0800d738 <__retarget_lock_release_recursive>:
 800d738:	4770      	bx	lr

0800d73a <strcpy>:
 800d73a:	4603      	mov	r3, r0
 800d73c:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d740:	f803 2b01 	strb.w	r2, [r3], #1
 800d744:	2a00      	cmp	r2, #0
 800d746:	d1f9      	bne.n	800d73c <strcpy+0x2>
 800d748:	4770      	bx	lr

0800d74a <memcpy>:
 800d74a:	440a      	add	r2, r1
 800d74c:	4291      	cmp	r1, r2
 800d74e:	f100 33ff 	add.w	r3, r0, #4294967295
 800d752:	d100      	bne.n	800d756 <memcpy+0xc>
 800d754:	4770      	bx	lr
 800d756:	b510      	push	{r4, lr}
 800d758:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d75c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d760:	4291      	cmp	r1, r2
 800d762:	d1f9      	bne.n	800d758 <memcpy+0xe>
 800d764:	bd10      	pop	{r4, pc}
	...

0800d768 <nan>:
 800d768:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800d770 <nan+0x8>
 800d76c:	4770      	bx	lr
 800d76e:	bf00      	nop
 800d770:	00000000 	.word	0x00000000
 800d774:	7ff80000 	.word	0x7ff80000

0800d778 <quorem>:
 800d778:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d77c:	6903      	ldr	r3, [r0, #16]
 800d77e:	690c      	ldr	r4, [r1, #16]
 800d780:	42a3      	cmp	r3, r4
 800d782:	4607      	mov	r7, r0
 800d784:	db7e      	blt.n	800d884 <quorem+0x10c>
 800d786:	3c01      	subs	r4, #1
 800d788:	f101 0814 	add.w	r8, r1, #20
 800d78c:	00a3      	lsls	r3, r4, #2
 800d78e:	f100 0514 	add.w	r5, r0, #20
 800d792:	9300      	str	r3, [sp, #0]
 800d794:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d798:	9301      	str	r3, [sp, #4]
 800d79a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800d79e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d7a2:	3301      	adds	r3, #1
 800d7a4:	429a      	cmp	r2, r3
 800d7a6:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800d7aa:	fbb2 f6f3 	udiv	r6, r2, r3
 800d7ae:	d32e      	bcc.n	800d80e <quorem+0x96>
 800d7b0:	f04f 0a00 	mov.w	sl, #0
 800d7b4:	46c4      	mov	ip, r8
 800d7b6:	46ae      	mov	lr, r5
 800d7b8:	46d3      	mov	fp, sl
 800d7ba:	f85c 3b04 	ldr.w	r3, [ip], #4
 800d7be:	b298      	uxth	r0, r3
 800d7c0:	fb06 a000 	mla	r0, r6, r0, sl
 800d7c4:	0c02      	lsrs	r2, r0, #16
 800d7c6:	0c1b      	lsrs	r3, r3, #16
 800d7c8:	fb06 2303 	mla	r3, r6, r3, r2
 800d7cc:	f8de 2000 	ldr.w	r2, [lr]
 800d7d0:	b280      	uxth	r0, r0
 800d7d2:	b292      	uxth	r2, r2
 800d7d4:	1a12      	subs	r2, r2, r0
 800d7d6:	445a      	add	r2, fp
 800d7d8:	f8de 0000 	ldr.w	r0, [lr]
 800d7dc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d7e0:	b29b      	uxth	r3, r3
 800d7e2:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800d7e6:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800d7ea:	b292      	uxth	r2, r2
 800d7ec:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800d7f0:	45e1      	cmp	r9, ip
 800d7f2:	f84e 2b04 	str.w	r2, [lr], #4
 800d7f6:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800d7fa:	d2de      	bcs.n	800d7ba <quorem+0x42>
 800d7fc:	9b00      	ldr	r3, [sp, #0]
 800d7fe:	58eb      	ldr	r3, [r5, r3]
 800d800:	b92b      	cbnz	r3, 800d80e <quorem+0x96>
 800d802:	9b01      	ldr	r3, [sp, #4]
 800d804:	3b04      	subs	r3, #4
 800d806:	429d      	cmp	r5, r3
 800d808:	461a      	mov	r2, r3
 800d80a:	d32f      	bcc.n	800d86c <quorem+0xf4>
 800d80c:	613c      	str	r4, [r7, #16]
 800d80e:	4638      	mov	r0, r7
 800d810:	f001 fd12 	bl	800f238 <__mcmp>
 800d814:	2800      	cmp	r0, #0
 800d816:	db25      	blt.n	800d864 <quorem+0xec>
 800d818:	4629      	mov	r1, r5
 800d81a:	2000      	movs	r0, #0
 800d81c:	f858 2b04 	ldr.w	r2, [r8], #4
 800d820:	f8d1 c000 	ldr.w	ip, [r1]
 800d824:	fa1f fe82 	uxth.w	lr, r2
 800d828:	fa1f f38c 	uxth.w	r3, ip
 800d82c:	eba3 030e 	sub.w	r3, r3, lr
 800d830:	4403      	add	r3, r0
 800d832:	0c12      	lsrs	r2, r2, #16
 800d834:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800d838:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800d83c:	b29b      	uxth	r3, r3
 800d83e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d842:	45c1      	cmp	r9, r8
 800d844:	f841 3b04 	str.w	r3, [r1], #4
 800d848:	ea4f 4022 	mov.w	r0, r2, asr #16
 800d84c:	d2e6      	bcs.n	800d81c <quorem+0xa4>
 800d84e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d852:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d856:	b922      	cbnz	r2, 800d862 <quorem+0xea>
 800d858:	3b04      	subs	r3, #4
 800d85a:	429d      	cmp	r5, r3
 800d85c:	461a      	mov	r2, r3
 800d85e:	d30b      	bcc.n	800d878 <quorem+0x100>
 800d860:	613c      	str	r4, [r7, #16]
 800d862:	3601      	adds	r6, #1
 800d864:	4630      	mov	r0, r6
 800d866:	b003      	add	sp, #12
 800d868:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d86c:	6812      	ldr	r2, [r2, #0]
 800d86e:	3b04      	subs	r3, #4
 800d870:	2a00      	cmp	r2, #0
 800d872:	d1cb      	bne.n	800d80c <quorem+0x94>
 800d874:	3c01      	subs	r4, #1
 800d876:	e7c6      	b.n	800d806 <quorem+0x8e>
 800d878:	6812      	ldr	r2, [r2, #0]
 800d87a:	3b04      	subs	r3, #4
 800d87c:	2a00      	cmp	r2, #0
 800d87e:	d1ef      	bne.n	800d860 <quorem+0xe8>
 800d880:	3c01      	subs	r4, #1
 800d882:	e7ea      	b.n	800d85a <quorem+0xe2>
 800d884:	2000      	movs	r0, #0
 800d886:	e7ee      	b.n	800d866 <quorem+0xee>

0800d888 <_dtoa_r>:
 800d888:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d88c:	69c7      	ldr	r7, [r0, #28]
 800d88e:	b097      	sub	sp, #92	@ 0x5c
 800d890:	ed8d 0b04 	vstr	d0, [sp, #16]
 800d894:	ec55 4b10 	vmov	r4, r5, d0
 800d898:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800d89a:	9107      	str	r1, [sp, #28]
 800d89c:	4681      	mov	r9, r0
 800d89e:	920c      	str	r2, [sp, #48]	@ 0x30
 800d8a0:	9311      	str	r3, [sp, #68]	@ 0x44
 800d8a2:	b97f      	cbnz	r7, 800d8c4 <_dtoa_r+0x3c>
 800d8a4:	2010      	movs	r0, #16
 800d8a6:	f001 f943 	bl	800eb30 <malloc>
 800d8aa:	4602      	mov	r2, r0
 800d8ac:	f8c9 001c 	str.w	r0, [r9, #28]
 800d8b0:	b920      	cbnz	r0, 800d8bc <_dtoa_r+0x34>
 800d8b2:	4ba9      	ldr	r3, [pc, #676]	@ (800db58 <_dtoa_r+0x2d0>)
 800d8b4:	21ef      	movs	r1, #239	@ 0xef
 800d8b6:	48a9      	ldr	r0, [pc, #676]	@ (800db5c <_dtoa_r+0x2d4>)
 800d8b8:	f002 f8e6 	bl	800fa88 <__assert_func>
 800d8bc:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800d8c0:	6007      	str	r7, [r0, #0]
 800d8c2:	60c7      	str	r7, [r0, #12]
 800d8c4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800d8c8:	6819      	ldr	r1, [r3, #0]
 800d8ca:	b159      	cbz	r1, 800d8e4 <_dtoa_r+0x5c>
 800d8cc:	685a      	ldr	r2, [r3, #4]
 800d8ce:	604a      	str	r2, [r1, #4]
 800d8d0:	2301      	movs	r3, #1
 800d8d2:	4093      	lsls	r3, r2
 800d8d4:	608b      	str	r3, [r1, #8]
 800d8d6:	4648      	mov	r0, r9
 800d8d8:	f001 fa32 	bl	800ed40 <_Bfree>
 800d8dc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800d8e0:	2200      	movs	r2, #0
 800d8e2:	601a      	str	r2, [r3, #0]
 800d8e4:	1e2b      	subs	r3, r5, #0
 800d8e6:	bfb9      	ittee	lt
 800d8e8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800d8ec:	9305      	strlt	r3, [sp, #20]
 800d8ee:	2300      	movge	r3, #0
 800d8f0:	6033      	strge	r3, [r6, #0]
 800d8f2:	9f05      	ldr	r7, [sp, #20]
 800d8f4:	4b9a      	ldr	r3, [pc, #616]	@ (800db60 <_dtoa_r+0x2d8>)
 800d8f6:	bfbc      	itt	lt
 800d8f8:	2201      	movlt	r2, #1
 800d8fa:	6032      	strlt	r2, [r6, #0]
 800d8fc:	43bb      	bics	r3, r7
 800d8fe:	d112      	bne.n	800d926 <_dtoa_r+0x9e>
 800d900:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800d902:	f242 730f 	movw	r3, #9999	@ 0x270f
 800d906:	6013      	str	r3, [r2, #0]
 800d908:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800d90c:	4323      	orrs	r3, r4
 800d90e:	f000 855a 	beq.w	800e3c6 <_dtoa_r+0xb3e>
 800d912:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800d914:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800db74 <_dtoa_r+0x2ec>
 800d918:	2b00      	cmp	r3, #0
 800d91a:	f000 855c 	beq.w	800e3d6 <_dtoa_r+0xb4e>
 800d91e:	f10a 0303 	add.w	r3, sl, #3
 800d922:	f000 bd56 	b.w	800e3d2 <_dtoa_r+0xb4a>
 800d926:	ed9d 7b04 	vldr	d7, [sp, #16]
 800d92a:	2200      	movs	r2, #0
 800d92c:	ec51 0b17 	vmov	r0, r1, d7
 800d930:	2300      	movs	r3, #0
 800d932:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800d936:	f7f3 f8ef 	bl	8000b18 <__aeabi_dcmpeq>
 800d93a:	4680      	mov	r8, r0
 800d93c:	b158      	cbz	r0, 800d956 <_dtoa_r+0xce>
 800d93e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800d940:	2301      	movs	r3, #1
 800d942:	6013      	str	r3, [r2, #0]
 800d944:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800d946:	b113      	cbz	r3, 800d94e <_dtoa_r+0xc6>
 800d948:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800d94a:	4b86      	ldr	r3, [pc, #536]	@ (800db64 <_dtoa_r+0x2dc>)
 800d94c:	6013      	str	r3, [r2, #0]
 800d94e:	f8df a228 	ldr.w	sl, [pc, #552]	@ 800db78 <_dtoa_r+0x2f0>
 800d952:	f000 bd40 	b.w	800e3d6 <_dtoa_r+0xb4e>
 800d956:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800d95a:	aa14      	add	r2, sp, #80	@ 0x50
 800d95c:	a915      	add	r1, sp, #84	@ 0x54
 800d95e:	4648      	mov	r0, r9
 800d960:	f001 fd8a 	bl	800f478 <__d2b>
 800d964:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800d968:	9002      	str	r0, [sp, #8]
 800d96a:	2e00      	cmp	r6, #0
 800d96c:	d078      	beq.n	800da60 <_dtoa_r+0x1d8>
 800d96e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d970:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800d974:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d978:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800d97c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800d980:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800d984:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800d988:	4619      	mov	r1, r3
 800d98a:	2200      	movs	r2, #0
 800d98c:	4b76      	ldr	r3, [pc, #472]	@ (800db68 <_dtoa_r+0x2e0>)
 800d98e:	f7f2 fca3 	bl	80002d8 <__aeabi_dsub>
 800d992:	a36b      	add	r3, pc, #428	@ (adr r3, 800db40 <_dtoa_r+0x2b8>)
 800d994:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d998:	f7f2 fe56 	bl	8000648 <__aeabi_dmul>
 800d99c:	a36a      	add	r3, pc, #424	@ (adr r3, 800db48 <_dtoa_r+0x2c0>)
 800d99e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9a2:	f7f2 fc9b 	bl	80002dc <__adddf3>
 800d9a6:	4604      	mov	r4, r0
 800d9a8:	4630      	mov	r0, r6
 800d9aa:	460d      	mov	r5, r1
 800d9ac:	f7f2 fde2 	bl	8000574 <__aeabi_i2d>
 800d9b0:	a367      	add	r3, pc, #412	@ (adr r3, 800db50 <_dtoa_r+0x2c8>)
 800d9b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9b6:	f7f2 fe47 	bl	8000648 <__aeabi_dmul>
 800d9ba:	4602      	mov	r2, r0
 800d9bc:	460b      	mov	r3, r1
 800d9be:	4620      	mov	r0, r4
 800d9c0:	4629      	mov	r1, r5
 800d9c2:	f7f2 fc8b 	bl	80002dc <__adddf3>
 800d9c6:	4604      	mov	r4, r0
 800d9c8:	460d      	mov	r5, r1
 800d9ca:	f7f3 f8ed 	bl	8000ba8 <__aeabi_d2iz>
 800d9ce:	2200      	movs	r2, #0
 800d9d0:	4607      	mov	r7, r0
 800d9d2:	2300      	movs	r3, #0
 800d9d4:	4620      	mov	r0, r4
 800d9d6:	4629      	mov	r1, r5
 800d9d8:	f7f3 f8a8 	bl	8000b2c <__aeabi_dcmplt>
 800d9dc:	b140      	cbz	r0, 800d9f0 <_dtoa_r+0x168>
 800d9de:	4638      	mov	r0, r7
 800d9e0:	f7f2 fdc8 	bl	8000574 <__aeabi_i2d>
 800d9e4:	4622      	mov	r2, r4
 800d9e6:	462b      	mov	r3, r5
 800d9e8:	f7f3 f896 	bl	8000b18 <__aeabi_dcmpeq>
 800d9ec:	b900      	cbnz	r0, 800d9f0 <_dtoa_r+0x168>
 800d9ee:	3f01      	subs	r7, #1
 800d9f0:	2f16      	cmp	r7, #22
 800d9f2:	d852      	bhi.n	800da9a <_dtoa_r+0x212>
 800d9f4:	4b5d      	ldr	r3, [pc, #372]	@ (800db6c <_dtoa_r+0x2e4>)
 800d9f6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800d9fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9fe:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800da02:	f7f3 f893 	bl	8000b2c <__aeabi_dcmplt>
 800da06:	2800      	cmp	r0, #0
 800da08:	d049      	beq.n	800da9e <_dtoa_r+0x216>
 800da0a:	3f01      	subs	r7, #1
 800da0c:	2300      	movs	r3, #0
 800da0e:	9310      	str	r3, [sp, #64]	@ 0x40
 800da10:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800da12:	1b9b      	subs	r3, r3, r6
 800da14:	1e5a      	subs	r2, r3, #1
 800da16:	bf45      	ittet	mi
 800da18:	f1c3 0301 	rsbmi	r3, r3, #1
 800da1c:	9300      	strmi	r3, [sp, #0]
 800da1e:	2300      	movpl	r3, #0
 800da20:	2300      	movmi	r3, #0
 800da22:	9206      	str	r2, [sp, #24]
 800da24:	bf54      	ite	pl
 800da26:	9300      	strpl	r3, [sp, #0]
 800da28:	9306      	strmi	r3, [sp, #24]
 800da2a:	2f00      	cmp	r7, #0
 800da2c:	db39      	blt.n	800daa2 <_dtoa_r+0x21a>
 800da2e:	9b06      	ldr	r3, [sp, #24]
 800da30:	970d      	str	r7, [sp, #52]	@ 0x34
 800da32:	443b      	add	r3, r7
 800da34:	9306      	str	r3, [sp, #24]
 800da36:	2300      	movs	r3, #0
 800da38:	9308      	str	r3, [sp, #32]
 800da3a:	9b07      	ldr	r3, [sp, #28]
 800da3c:	2b09      	cmp	r3, #9
 800da3e:	d863      	bhi.n	800db08 <_dtoa_r+0x280>
 800da40:	2b05      	cmp	r3, #5
 800da42:	bfc4      	itt	gt
 800da44:	3b04      	subgt	r3, #4
 800da46:	9307      	strgt	r3, [sp, #28]
 800da48:	9b07      	ldr	r3, [sp, #28]
 800da4a:	f1a3 0302 	sub.w	r3, r3, #2
 800da4e:	bfcc      	ite	gt
 800da50:	2400      	movgt	r4, #0
 800da52:	2401      	movle	r4, #1
 800da54:	2b03      	cmp	r3, #3
 800da56:	d863      	bhi.n	800db20 <_dtoa_r+0x298>
 800da58:	e8df f003 	tbb	[pc, r3]
 800da5c:	2b375452 	.word	0x2b375452
 800da60:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800da64:	441e      	add	r6, r3
 800da66:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800da6a:	2b20      	cmp	r3, #32
 800da6c:	bfc1      	itttt	gt
 800da6e:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800da72:	409f      	lslgt	r7, r3
 800da74:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800da78:	fa24 f303 	lsrgt.w	r3, r4, r3
 800da7c:	bfd6      	itet	le
 800da7e:	f1c3 0320 	rsble	r3, r3, #32
 800da82:	ea47 0003 	orrgt.w	r0, r7, r3
 800da86:	fa04 f003 	lslle.w	r0, r4, r3
 800da8a:	f7f2 fd63 	bl	8000554 <__aeabi_ui2d>
 800da8e:	2201      	movs	r2, #1
 800da90:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800da94:	3e01      	subs	r6, #1
 800da96:	9212      	str	r2, [sp, #72]	@ 0x48
 800da98:	e776      	b.n	800d988 <_dtoa_r+0x100>
 800da9a:	2301      	movs	r3, #1
 800da9c:	e7b7      	b.n	800da0e <_dtoa_r+0x186>
 800da9e:	9010      	str	r0, [sp, #64]	@ 0x40
 800daa0:	e7b6      	b.n	800da10 <_dtoa_r+0x188>
 800daa2:	9b00      	ldr	r3, [sp, #0]
 800daa4:	1bdb      	subs	r3, r3, r7
 800daa6:	9300      	str	r3, [sp, #0]
 800daa8:	427b      	negs	r3, r7
 800daaa:	9308      	str	r3, [sp, #32]
 800daac:	2300      	movs	r3, #0
 800daae:	930d      	str	r3, [sp, #52]	@ 0x34
 800dab0:	e7c3      	b.n	800da3a <_dtoa_r+0x1b2>
 800dab2:	2301      	movs	r3, #1
 800dab4:	9309      	str	r3, [sp, #36]	@ 0x24
 800dab6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800dab8:	eb07 0b03 	add.w	fp, r7, r3
 800dabc:	f10b 0301 	add.w	r3, fp, #1
 800dac0:	2b01      	cmp	r3, #1
 800dac2:	9303      	str	r3, [sp, #12]
 800dac4:	bfb8      	it	lt
 800dac6:	2301      	movlt	r3, #1
 800dac8:	e006      	b.n	800dad8 <_dtoa_r+0x250>
 800daca:	2301      	movs	r3, #1
 800dacc:	9309      	str	r3, [sp, #36]	@ 0x24
 800dace:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800dad0:	2b00      	cmp	r3, #0
 800dad2:	dd28      	ble.n	800db26 <_dtoa_r+0x29e>
 800dad4:	469b      	mov	fp, r3
 800dad6:	9303      	str	r3, [sp, #12]
 800dad8:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800dadc:	2100      	movs	r1, #0
 800dade:	2204      	movs	r2, #4
 800dae0:	f102 0514 	add.w	r5, r2, #20
 800dae4:	429d      	cmp	r5, r3
 800dae6:	d926      	bls.n	800db36 <_dtoa_r+0x2ae>
 800dae8:	6041      	str	r1, [r0, #4]
 800daea:	4648      	mov	r0, r9
 800daec:	f001 f8e8 	bl	800ecc0 <_Balloc>
 800daf0:	4682      	mov	sl, r0
 800daf2:	2800      	cmp	r0, #0
 800daf4:	d142      	bne.n	800db7c <_dtoa_r+0x2f4>
 800daf6:	4b1e      	ldr	r3, [pc, #120]	@ (800db70 <_dtoa_r+0x2e8>)
 800daf8:	4602      	mov	r2, r0
 800dafa:	f240 11af 	movw	r1, #431	@ 0x1af
 800dafe:	e6da      	b.n	800d8b6 <_dtoa_r+0x2e>
 800db00:	2300      	movs	r3, #0
 800db02:	e7e3      	b.n	800dacc <_dtoa_r+0x244>
 800db04:	2300      	movs	r3, #0
 800db06:	e7d5      	b.n	800dab4 <_dtoa_r+0x22c>
 800db08:	2401      	movs	r4, #1
 800db0a:	2300      	movs	r3, #0
 800db0c:	9307      	str	r3, [sp, #28]
 800db0e:	9409      	str	r4, [sp, #36]	@ 0x24
 800db10:	f04f 3bff 	mov.w	fp, #4294967295
 800db14:	2200      	movs	r2, #0
 800db16:	f8cd b00c 	str.w	fp, [sp, #12]
 800db1a:	2312      	movs	r3, #18
 800db1c:	920c      	str	r2, [sp, #48]	@ 0x30
 800db1e:	e7db      	b.n	800dad8 <_dtoa_r+0x250>
 800db20:	2301      	movs	r3, #1
 800db22:	9309      	str	r3, [sp, #36]	@ 0x24
 800db24:	e7f4      	b.n	800db10 <_dtoa_r+0x288>
 800db26:	f04f 0b01 	mov.w	fp, #1
 800db2a:	f8cd b00c 	str.w	fp, [sp, #12]
 800db2e:	465b      	mov	r3, fp
 800db30:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800db34:	e7d0      	b.n	800dad8 <_dtoa_r+0x250>
 800db36:	3101      	adds	r1, #1
 800db38:	0052      	lsls	r2, r2, #1
 800db3a:	e7d1      	b.n	800dae0 <_dtoa_r+0x258>
 800db3c:	f3af 8000 	nop.w
 800db40:	636f4361 	.word	0x636f4361
 800db44:	3fd287a7 	.word	0x3fd287a7
 800db48:	8b60c8b3 	.word	0x8b60c8b3
 800db4c:	3fc68a28 	.word	0x3fc68a28
 800db50:	509f79fb 	.word	0x509f79fb
 800db54:	3fd34413 	.word	0x3fd34413
 800db58:	08010603 	.word	0x08010603
 800db5c:	0801061a 	.word	0x0801061a
 800db60:	7ff00000 	.word	0x7ff00000
 800db64:	080105cb 	.word	0x080105cb
 800db68:	3ff80000 	.word	0x3ff80000
 800db6c:	08010918 	.word	0x08010918
 800db70:	08010672 	.word	0x08010672
 800db74:	080105ff 	.word	0x080105ff
 800db78:	080105ca 	.word	0x080105ca
 800db7c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800db80:	6018      	str	r0, [r3, #0]
 800db82:	9b03      	ldr	r3, [sp, #12]
 800db84:	2b0e      	cmp	r3, #14
 800db86:	f200 80a1 	bhi.w	800dccc <_dtoa_r+0x444>
 800db8a:	2c00      	cmp	r4, #0
 800db8c:	f000 809e 	beq.w	800dccc <_dtoa_r+0x444>
 800db90:	2f00      	cmp	r7, #0
 800db92:	dd33      	ble.n	800dbfc <_dtoa_r+0x374>
 800db94:	4b9c      	ldr	r3, [pc, #624]	@ (800de08 <_dtoa_r+0x580>)
 800db96:	f007 020f 	and.w	r2, r7, #15
 800db9a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800db9e:	ed93 7b00 	vldr	d7, [r3]
 800dba2:	05f8      	lsls	r0, r7, #23
 800dba4:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 800dba8:	ea4f 1427 	mov.w	r4, r7, asr #4
 800dbac:	d516      	bpl.n	800dbdc <_dtoa_r+0x354>
 800dbae:	4b97      	ldr	r3, [pc, #604]	@ (800de0c <_dtoa_r+0x584>)
 800dbb0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800dbb4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800dbb8:	f7f2 fe70 	bl	800089c <__aeabi_ddiv>
 800dbbc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800dbc0:	f004 040f 	and.w	r4, r4, #15
 800dbc4:	2603      	movs	r6, #3
 800dbc6:	4d91      	ldr	r5, [pc, #580]	@ (800de0c <_dtoa_r+0x584>)
 800dbc8:	b954      	cbnz	r4, 800dbe0 <_dtoa_r+0x358>
 800dbca:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800dbce:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800dbd2:	f7f2 fe63 	bl	800089c <__aeabi_ddiv>
 800dbd6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800dbda:	e028      	b.n	800dc2e <_dtoa_r+0x3a6>
 800dbdc:	2602      	movs	r6, #2
 800dbde:	e7f2      	b.n	800dbc6 <_dtoa_r+0x33e>
 800dbe0:	07e1      	lsls	r1, r4, #31
 800dbe2:	d508      	bpl.n	800dbf6 <_dtoa_r+0x36e>
 800dbe4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800dbe8:	e9d5 2300 	ldrd	r2, r3, [r5]
 800dbec:	f7f2 fd2c 	bl	8000648 <__aeabi_dmul>
 800dbf0:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800dbf4:	3601      	adds	r6, #1
 800dbf6:	1064      	asrs	r4, r4, #1
 800dbf8:	3508      	adds	r5, #8
 800dbfa:	e7e5      	b.n	800dbc8 <_dtoa_r+0x340>
 800dbfc:	f000 80af 	beq.w	800dd5e <_dtoa_r+0x4d6>
 800dc00:	427c      	negs	r4, r7
 800dc02:	4b81      	ldr	r3, [pc, #516]	@ (800de08 <_dtoa_r+0x580>)
 800dc04:	4d81      	ldr	r5, [pc, #516]	@ (800de0c <_dtoa_r+0x584>)
 800dc06:	f004 020f 	and.w	r2, r4, #15
 800dc0a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800dc0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc12:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800dc16:	f7f2 fd17 	bl	8000648 <__aeabi_dmul>
 800dc1a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800dc1e:	1124      	asrs	r4, r4, #4
 800dc20:	2300      	movs	r3, #0
 800dc22:	2602      	movs	r6, #2
 800dc24:	2c00      	cmp	r4, #0
 800dc26:	f040 808f 	bne.w	800dd48 <_dtoa_r+0x4c0>
 800dc2a:	2b00      	cmp	r3, #0
 800dc2c:	d1d3      	bne.n	800dbd6 <_dtoa_r+0x34e>
 800dc2e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800dc30:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800dc34:	2b00      	cmp	r3, #0
 800dc36:	f000 8094 	beq.w	800dd62 <_dtoa_r+0x4da>
 800dc3a:	4b75      	ldr	r3, [pc, #468]	@ (800de10 <_dtoa_r+0x588>)
 800dc3c:	2200      	movs	r2, #0
 800dc3e:	4620      	mov	r0, r4
 800dc40:	4629      	mov	r1, r5
 800dc42:	f7f2 ff73 	bl	8000b2c <__aeabi_dcmplt>
 800dc46:	2800      	cmp	r0, #0
 800dc48:	f000 808b 	beq.w	800dd62 <_dtoa_r+0x4da>
 800dc4c:	9b03      	ldr	r3, [sp, #12]
 800dc4e:	2b00      	cmp	r3, #0
 800dc50:	f000 8087 	beq.w	800dd62 <_dtoa_r+0x4da>
 800dc54:	f1bb 0f00 	cmp.w	fp, #0
 800dc58:	dd34      	ble.n	800dcc4 <_dtoa_r+0x43c>
 800dc5a:	4620      	mov	r0, r4
 800dc5c:	4b6d      	ldr	r3, [pc, #436]	@ (800de14 <_dtoa_r+0x58c>)
 800dc5e:	2200      	movs	r2, #0
 800dc60:	4629      	mov	r1, r5
 800dc62:	f7f2 fcf1 	bl	8000648 <__aeabi_dmul>
 800dc66:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800dc6a:	f107 38ff 	add.w	r8, r7, #4294967295
 800dc6e:	3601      	adds	r6, #1
 800dc70:	465c      	mov	r4, fp
 800dc72:	4630      	mov	r0, r6
 800dc74:	f7f2 fc7e 	bl	8000574 <__aeabi_i2d>
 800dc78:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800dc7c:	f7f2 fce4 	bl	8000648 <__aeabi_dmul>
 800dc80:	4b65      	ldr	r3, [pc, #404]	@ (800de18 <_dtoa_r+0x590>)
 800dc82:	2200      	movs	r2, #0
 800dc84:	f7f2 fb2a 	bl	80002dc <__adddf3>
 800dc88:	4605      	mov	r5, r0
 800dc8a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800dc8e:	2c00      	cmp	r4, #0
 800dc90:	d16a      	bne.n	800dd68 <_dtoa_r+0x4e0>
 800dc92:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800dc96:	4b61      	ldr	r3, [pc, #388]	@ (800de1c <_dtoa_r+0x594>)
 800dc98:	2200      	movs	r2, #0
 800dc9a:	f7f2 fb1d 	bl	80002d8 <__aeabi_dsub>
 800dc9e:	4602      	mov	r2, r0
 800dca0:	460b      	mov	r3, r1
 800dca2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800dca6:	462a      	mov	r2, r5
 800dca8:	4633      	mov	r3, r6
 800dcaa:	f7f2 ff5d 	bl	8000b68 <__aeabi_dcmpgt>
 800dcae:	2800      	cmp	r0, #0
 800dcb0:	f040 8298 	bne.w	800e1e4 <_dtoa_r+0x95c>
 800dcb4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800dcb8:	462a      	mov	r2, r5
 800dcba:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800dcbe:	f7f2 ff35 	bl	8000b2c <__aeabi_dcmplt>
 800dcc2:	bb38      	cbnz	r0, 800dd14 <_dtoa_r+0x48c>
 800dcc4:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 800dcc8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800dccc:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800dcce:	2b00      	cmp	r3, #0
 800dcd0:	f2c0 8157 	blt.w	800df82 <_dtoa_r+0x6fa>
 800dcd4:	2f0e      	cmp	r7, #14
 800dcd6:	f300 8154 	bgt.w	800df82 <_dtoa_r+0x6fa>
 800dcda:	4b4b      	ldr	r3, [pc, #300]	@ (800de08 <_dtoa_r+0x580>)
 800dcdc:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800dce0:	ed93 7b00 	vldr	d7, [r3]
 800dce4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800dce6:	2b00      	cmp	r3, #0
 800dce8:	ed8d 7b00 	vstr	d7, [sp]
 800dcec:	f280 80e5 	bge.w	800deba <_dtoa_r+0x632>
 800dcf0:	9b03      	ldr	r3, [sp, #12]
 800dcf2:	2b00      	cmp	r3, #0
 800dcf4:	f300 80e1 	bgt.w	800deba <_dtoa_r+0x632>
 800dcf8:	d10c      	bne.n	800dd14 <_dtoa_r+0x48c>
 800dcfa:	4b48      	ldr	r3, [pc, #288]	@ (800de1c <_dtoa_r+0x594>)
 800dcfc:	2200      	movs	r2, #0
 800dcfe:	ec51 0b17 	vmov	r0, r1, d7
 800dd02:	f7f2 fca1 	bl	8000648 <__aeabi_dmul>
 800dd06:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800dd0a:	f7f2 ff23 	bl	8000b54 <__aeabi_dcmpge>
 800dd0e:	2800      	cmp	r0, #0
 800dd10:	f000 8266 	beq.w	800e1e0 <_dtoa_r+0x958>
 800dd14:	2400      	movs	r4, #0
 800dd16:	4625      	mov	r5, r4
 800dd18:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800dd1a:	4656      	mov	r6, sl
 800dd1c:	ea6f 0803 	mvn.w	r8, r3
 800dd20:	2700      	movs	r7, #0
 800dd22:	4621      	mov	r1, r4
 800dd24:	4648      	mov	r0, r9
 800dd26:	f001 f80b 	bl	800ed40 <_Bfree>
 800dd2a:	2d00      	cmp	r5, #0
 800dd2c:	f000 80bd 	beq.w	800deaa <_dtoa_r+0x622>
 800dd30:	b12f      	cbz	r7, 800dd3e <_dtoa_r+0x4b6>
 800dd32:	42af      	cmp	r7, r5
 800dd34:	d003      	beq.n	800dd3e <_dtoa_r+0x4b6>
 800dd36:	4639      	mov	r1, r7
 800dd38:	4648      	mov	r0, r9
 800dd3a:	f001 f801 	bl	800ed40 <_Bfree>
 800dd3e:	4629      	mov	r1, r5
 800dd40:	4648      	mov	r0, r9
 800dd42:	f000 fffd 	bl	800ed40 <_Bfree>
 800dd46:	e0b0      	b.n	800deaa <_dtoa_r+0x622>
 800dd48:	07e2      	lsls	r2, r4, #31
 800dd4a:	d505      	bpl.n	800dd58 <_dtoa_r+0x4d0>
 800dd4c:	e9d5 2300 	ldrd	r2, r3, [r5]
 800dd50:	f7f2 fc7a 	bl	8000648 <__aeabi_dmul>
 800dd54:	3601      	adds	r6, #1
 800dd56:	2301      	movs	r3, #1
 800dd58:	1064      	asrs	r4, r4, #1
 800dd5a:	3508      	adds	r5, #8
 800dd5c:	e762      	b.n	800dc24 <_dtoa_r+0x39c>
 800dd5e:	2602      	movs	r6, #2
 800dd60:	e765      	b.n	800dc2e <_dtoa_r+0x3a6>
 800dd62:	9c03      	ldr	r4, [sp, #12]
 800dd64:	46b8      	mov	r8, r7
 800dd66:	e784      	b.n	800dc72 <_dtoa_r+0x3ea>
 800dd68:	4b27      	ldr	r3, [pc, #156]	@ (800de08 <_dtoa_r+0x580>)
 800dd6a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800dd6c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800dd70:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800dd74:	4454      	add	r4, sl
 800dd76:	2900      	cmp	r1, #0
 800dd78:	d054      	beq.n	800de24 <_dtoa_r+0x59c>
 800dd7a:	4929      	ldr	r1, [pc, #164]	@ (800de20 <_dtoa_r+0x598>)
 800dd7c:	2000      	movs	r0, #0
 800dd7e:	f7f2 fd8d 	bl	800089c <__aeabi_ddiv>
 800dd82:	4633      	mov	r3, r6
 800dd84:	462a      	mov	r2, r5
 800dd86:	f7f2 faa7 	bl	80002d8 <__aeabi_dsub>
 800dd8a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800dd8e:	4656      	mov	r6, sl
 800dd90:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800dd94:	f7f2 ff08 	bl	8000ba8 <__aeabi_d2iz>
 800dd98:	4605      	mov	r5, r0
 800dd9a:	f7f2 fbeb 	bl	8000574 <__aeabi_i2d>
 800dd9e:	4602      	mov	r2, r0
 800dda0:	460b      	mov	r3, r1
 800dda2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800dda6:	f7f2 fa97 	bl	80002d8 <__aeabi_dsub>
 800ddaa:	3530      	adds	r5, #48	@ 0x30
 800ddac:	4602      	mov	r2, r0
 800ddae:	460b      	mov	r3, r1
 800ddb0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800ddb4:	f806 5b01 	strb.w	r5, [r6], #1
 800ddb8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800ddbc:	f7f2 feb6 	bl	8000b2c <__aeabi_dcmplt>
 800ddc0:	2800      	cmp	r0, #0
 800ddc2:	d172      	bne.n	800deaa <_dtoa_r+0x622>
 800ddc4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ddc8:	4911      	ldr	r1, [pc, #68]	@ (800de10 <_dtoa_r+0x588>)
 800ddca:	2000      	movs	r0, #0
 800ddcc:	f7f2 fa84 	bl	80002d8 <__aeabi_dsub>
 800ddd0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800ddd4:	f7f2 feaa 	bl	8000b2c <__aeabi_dcmplt>
 800ddd8:	2800      	cmp	r0, #0
 800ddda:	f040 80b4 	bne.w	800df46 <_dtoa_r+0x6be>
 800ddde:	42a6      	cmp	r6, r4
 800dde0:	f43f af70 	beq.w	800dcc4 <_dtoa_r+0x43c>
 800dde4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800dde8:	4b0a      	ldr	r3, [pc, #40]	@ (800de14 <_dtoa_r+0x58c>)
 800ddea:	2200      	movs	r2, #0
 800ddec:	f7f2 fc2c 	bl	8000648 <__aeabi_dmul>
 800ddf0:	4b08      	ldr	r3, [pc, #32]	@ (800de14 <_dtoa_r+0x58c>)
 800ddf2:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800ddf6:	2200      	movs	r2, #0
 800ddf8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ddfc:	f7f2 fc24 	bl	8000648 <__aeabi_dmul>
 800de00:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800de04:	e7c4      	b.n	800dd90 <_dtoa_r+0x508>
 800de06:	bf00      	nop
 800de08:	08010918 	.word	0x08010918
 800de0c:	080108f0 	.word	0x080108f0
 800de10:	3ff00000 	.word	0x3ff00000
 800de14:	40240000 	.word	0x40240000
 800de18:	401c0000 	.word	0x401c0000
 800de1c:	40140000 	.word	0x40140000
 800de20:	3fe00000 	.word	0x3fe00000
 800de24:	4631      	mov	r1, r6
 800de26:	4628      	mov	r0, r5
 800de28:	f7f2 fc0e 	bl	8000648 <__aeabi_dmul>
 800de2c:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800de30:	9413      	str	r4, [sp, #76]	@ 0x4c
 800de32:	4656      	mov	r6, sl
 800de34:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800de38:	f7f2 feb6 	bl	8000ba8 <__aeabi_d2iz>
 800de3c:	4605      	mov	r5, r0
 800de3e:	f7f2 fb99 	bl	8000574 <__aeabi_i2d>
 800de42:	4602      	mov	r2, r0
 800de44:	460b      	mov	r3, r1
 800de46:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800de4a:	f7f2 fa45 	bl	80002d8 <__aeabi_dsub>
 800de4e:	3530      	adds	r5, #48	@ 0x30
 800de50:	f806 5b01 	strb.w	r5, [r6], #1
 800de54:	4602      	mov	r2, r0
 800de56:	460b      	mov	r3, r1
 800de58:	42a6      	cmp	r6, r4
 800de5a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800de5e:	f04f 0200 	mov.w	r2, #0
 800de62:	d124      	bne.n	800deae <_dtoa_r+0x626>
 800de64:	4baf      	ldr	r3, [pc, #700]	@ (800e124 <_dtoa_r+0x89c>)
 800de66:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800de6a:	f7f2 fa37 	bl	80002dc <__adddf3>
 800de6e:	4602      	mov	r2, r0
 800de70:	460b      	mov	r3, r1
 800de72:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800de76:	f7f2 fe77 	bl	8000b68 <__aeabi_dcmpgt>
 800de7a:	2800      	cmp	r0, #0
 800de7c:	d163      	bne.n	800df46 <_dtoa_r+0x6be>
 800de7e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800de82:	49a8      	ldr	r1, [pc, #672]	@ (800e124 <_dtoa_r+0x89c>)
 800de84:	2000      	movs	r0, #0
 800de86:	f7f2 fa27 	bl	80002d8 <__aeabi_dsub>
 800de8a:	4602      	mov	r2, r0
 800de8c:	460b      	mov	r3, r1
 800de8e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800de92:	f7f2 fe4b 	bl	8000b2c <__aeabi_dcmplt>
 800de96:	2800      	cmp	r0, #0
 800de98:	f43f af14 	beq.w	800dcc4 <_dtoa_r+0x43c>
 800de9c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800de9e:	1e73      	subs	r3, r6, #1
 800dea0:	9313      	str	r3, [sp, #76]	@ 0x4c
 800dea2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800dea6:	2b30      	cmp	r3, #48	@ 0x30
 800dea8:	d0f8      	beq.n	800de9c <_dtoa_r+0x614>
 800deaa:	4647      	mov	r7, r8
 800deac:	e03b      	b.n	800df26 <_dtoa_r+0x69e>
 800deae:	4b9e      	ldr	r3, [pc, #632]	@ (800e128 <_dtoa_r+0x8a0>)
 800deb0:	f7f2 fbca 	bl	8000648 <__aeabi_dmul>
 800deb4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800deb8:	e7bc      	b.n	800de34 <_dtoa_r+0x5ac>
 800deba:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800debe:	4656      	mov	r6, sl
 800dec0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800dec4:	4620      	mov	r0, r4
 800dec6:	4629      	mov	r1, r5
 800dec8:	f7f2 fce8 	bl	800089c <__aeabi_ddiv>
 800decc:	f7f2 fe6c 	bl	8000ba8 <__aeabi_d2iz>
 800ded0:	4680      	mov	r8, r0
 800ded2:	f7f2 fb4f 	bl	8000574 <__aeabi_i2d>
 800ded6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800deda:	f7f2 fbb5 	bl	8000648 <__aeabi_dmul>
 800dede:	4602      	mov	r2, r0
 800dee0:	460b      	mov	r3, r1
 800dee2:	4620      	mov	r0, r4
 800dee4:	4629      	mov	r1, r5
 800dee6:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800deea:	f7f2 f9f5 	bl	80002d8 <__aeabi_dsub>
 800deee:	f806 4b01 	strb.w	r4, [r6], #1
 800def2:	9d03      	ldr	r5, [sp, #12]
 800def4:	eba6 040a 	sub.w	r4, r6, sl
 800def8:	42a5      	cmp	r5, r4
 800defa:	4602      	mov	r2, r0
 800defc:	460b      	mov	r3, r1
 800defe:	d133      	bne.n	800df68 <_dtoa_r+0x6e0>
 800df00:	f7f2 f9ec 	bl	80002dc <__adddf3>
 800df04:	e9dd 2300 	ldrd	r2, r3, [sp]
 800df08:	4604      	mov	r4, r0
 800df0a:	460d      	mov	r5, r1
 800df0c:	f7f2 fe2c 	bl	8000b68 <__aeabi_dcmpgt>
 800df10:	b9c0      	cbnz	r0, 800df44 <_dtoa_r+0x6bc>
 800df12:	e9dd 2300 	ldrd	r2, r3, [sp]
 800df16:	4620      	mov	r0, r4
 800df18:	4629      	mov	r1, r5
 800df1a:	f7f2 fdfd 	bl	8000b18 <__aeabi_dcmpeq>
 800df1e:	b110      	cbz	r0, 800df26 <_dtoa_r+0x69e>
 800df20:	f018 0f01 	tst.w	r8, #1
 800df24:	d10e      	bne.n	800df44 <_dtoa_r+0x6bc>
 800df26:	9902      	ldr	r1, [sp, #8]
 800df28:	4648      	mov	r0, r9
 800df2a:	f000 ff09 	bl	800ed40 <_Bfree>
 800df2e:	2300      	movs	r3, #0
 800df30:	7033      	strb	r3, [r6, #0]
 800df32:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800df34:	3701      	adds	r7, #1
 800df36:	601f      	str	r7, [r3, #0]
 800df38:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800df3a:	2b00      	cmp	r3, #0
 800df3c:	f000 824b 	beq.w	800e3d6 <_dtoa_r+0xb4e>
 800df40:	601e      	str	r6, [r3, #0]
 800df42:	e248      	b.n	800e3d6 <_dtoa_r+0xb4e>
 800df44:	46b8      	mov	r8, r7
 800df46:	4633      	mov	r3, r6
 800df48:	461e      	mov	r6, r3
 800df4a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800df4e:	2a39      	cmp	r2, #57	@ 0x39
 800df50:	d106      	bne.n	800df60 <_dtoa_r+0x6d8>
 800df52:	459a      	cmp	sl, r3
 800df54:	d1f8      	bne.n	800df48 <_dtoa_r+0x6c0>
 800df56:	2230      	movs	r2, #48	@ 0x30
 800df58:	f108 0801 	add.w	r8, r8, #1
 800df5c:	f88a 2000 	strb.w	r2, [sl]
 800df60:	781a      	ldrb	r2, [r3, #0]
 800df62:	3201      	adds	r2, #1
 800df64:	701a      	strb	r2, [r3, #0]
 800df66:	e7a0      	b.n	800deaa <_dtoa_r+0x622>
 800df68:	4b6f      	ldr	r3, [pc, #444]	@ (800e128 <_dtoa_r+0x8a0>)
 800df6a:	2200      	movs	r2, #0
 800df6c:	f7f2 fb6c 	bl	8000648 <__aeabi_dmul>
 800df70:	2200      	movs	r2, #0
 800df72:	2300      	movs	r3, #0
 800df74:	4604      	mov	r4, r0
 800df76:	460d      	mov	r5, r1
 800df78:	f7f2 fdce 	bl	8000b18 <__aeabi_dcmpeq>
 800df7c:	2800      	cmp	r0, #0
 800df7e:	d09f      	beq.n	800dec0 <_dtoa_r+0x638>
 800df80:	e7d1      	b.n	800df26 <_dtoa_r+0x69e>
 800df82:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800df84:	2a00      	cmp	r2, #0
 800df86:	f000 80ea 	beq.w	800e15e <_dtoa_r+0x8d6>
 800df8a:	9a07      	ldr	r2, [sp, #28]
 800df8c:	2a01      	cmp	r2, #1
 800df8e:	f300 80cd 	bgt.w	800e12c <_dtoa_r+0x8a4>
 800df92:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800df94:	2a00      	cmp	r2, #0
 800df96:	f000 80c1 	beq.w	800e11c <_dtoa_r+0x894>
 800df9a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800df9e:	9c08      	ldr	r4, [sp, #32]
 800dfa0:	9e00      	ldr	r6, [sp, #0]
 800dfa2:	9a00      	ldr	r2, [sp, #0]
 800dfa4:	441a      	add	r2, r3
 800dfa6:	9200      	str	r2, [sp, #0]
 800dfa8:	9a06      	ldr	r2, [sp, #24]
 800dfaa:	2101      	movs	r1, #1
 800dfac:	441a      	add	r2, r3
 800dfae:	4648      	mov	r0, r9
 800dfb0:	9206      	str	r2, [sp, #24]
 800dfb2:	f000 ffc3 	bl	800ef3c <__i2b>
 800dfb6:	4605      	mov	r5, r0
 800dfb8:	b166      	cbz	r6, 800dfd4 <_dtoa_r+0x74c>
 800dfba:	9b06      	ldr	r3, [sp, #24]
 800dfbc:	2b00      	cmp	r3, #0
 800dfbe:	dd09      	ble.n	800dfd4 <_dtoa_r+0x74c>
 800dfc0:	42b3      	cmp	r3, r6
 800dfc2:	9a00      	ldr	r2, [sp, #0]
 800dfc4:	bfa8      	it	ge
 800dfc6:	4633      	movge	r3, r6
 800dfc8:	1ad2      	subs	r2, r2, r3
 800dfca:	9200      	str	r2, [sp, #0]
 800dfcc:	9a06      	ldr	r2, [sp, #24]
 800dfce:	1af6      	subs	r6, r6, r3
 800dfd0:	1ad3      	subs	r3, r2, r3
 800dfd2:	9306      	str	r3, [sp, #24]
 800dfd4:	9b08      	ldr	r3, [sp, #32]
 800dfd6:	b30b      	cbz	r3, 800e01c <_dtoa_r+0x794>
 800dfd8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dfda:	2b00      	cmp	r3, #0
 800dfdc:	f000 80c6 	beq.w	800e16c <_dtoa_r+0x8e4>
 800dfe0:	2c00      	cmp	r4, #0
 800dfe2:	f000 80c0 	beq.w	800e166 <_dtoa_r+0x8de>
 800dfe6:	4629      	mov	r1, r5
 800dfe8:	4622      	mov	r2, r4
 800dfea:	4648      	mov	r0, r9
 800dfec:	f001 f85e 	bl	800f0ac <__pow5mult>
 800dff0:	9a02      	ldr	r2, [sp, #8]
 800dff2:	4601      	mov	r1, r0
 800dff4:	4605      	mov	r5, r0
 800dff6:	4648      	mov	r0, r9
 800dff8:	f000 ffb6 	bl	800ef68 <__multiply>
 800dffc:	9902      	ldr	r1, [sp, #8]
 800dffe:	4680      	mov	r8, r0
 800e000:	4648      	mov	r0, r9
 800e002:	f000 fe9d 	bl	800ed40 <_Bfree>
 800e006:	9b08      	ldr	r3, [sp, #32]
 800e008:	1b1b      	subs	r3, r3, r4
 800e00a:	9308      	str	r3, [sp, #32]
 800e00c:	f000 80b1 	beq.w	800e172 <_dtoa_r+0x8ea>
 800e010:	9a08      	ldr	r2, [sp, #32]
 800e012:	4641      	mov	r1, r8
 800e014:	4648      	mov	r0, r9
 800e016:	f001 f849 	bl	800f0ac <__pow5mult>
 800e01a:	9002      	str	r0, [sp, #8]
 800e01c:	2101      	movs	r1, #1
 800e01e:	4648      	mov	r0, r9
 800e020:	f000 ff8c 	bl	800ef3c <__i2b>
 800e024:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e026:	4604      	mov	r4, r0
 800e028:	2b00      	cmp	r3, #0
 800e02a:	f000 81d8 	beq.w	800e3de <_dtoa_r+0xb56>
 800e02e:	461a      	mov	r2, r3
 800e030:	4601      	mov	r1, r0
 800e032:	4648      	mov	r0, r9
 800e034:	f001 f83a 	bl	800f0ac <__pow5mult>
 800e038:	9b07      	ldr	r3, [sp, #28]
 800e03a:	2b01      	cmp	r3, #1
 800e03c:	4604      	mov	r4, r0
 800e03e:	f300 809f 	bgt.w	800e180 <_dtoa_r+0x8f8>
 800e042:	9b04      	ldr	r3, [sp, #16]
 800e044:	2b00      	cmp	r3, #0
 800e046:	f040 8097 	bne.w	800e178 <_dtoa_r+0x8f0>
 800e04a:	9b05      	ldr	r3, [sp, #20]
 800e04c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e050:	2b00      	cmp	r3, #0
 800e052:	f040 8093 	bne.w	800e17c <_dtoa_r+0x8f4>
 800e056:	9b05      	ldr	r3, [sp, #20]
 800e058:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800e05c:	0d1b      	lsrs	r3, r3, #20
 800e05e:	051b      	lsls	r3, r3, #20
 800e060:	b133      	cbz	r3, 800e070 <_dtoa_r+0x7e8>
 800e062:	9b00      	ldr	r3, [sp, #0]
 800e064:	3301      	adds	r3, #1
 800e066:	9300      	str	r3, [sp, #0]
 800e068:	9b06      	ldr	r3, [sp, #24]
 800e06a:	3301      	adds	r3, #1
 800e06c:	9306      	str	r3, [sp, #24]
 800e06e:	2301      	movs	r3, #1
 800e070:	9308      	str	r3, [sp, #32]
 800e072:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e074:	2b00      	cmp	r3, #0
 800e076:	f000 81b8 	beq.w	800e3ea <_dtoa_r+0xb62>
 800e07a:	6923      	ldr	r3, [r4, #16]
 800e07c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800e080:	6918      	ldr	r0, [r3, #16]
 800e082:	f000 ff0f 	bl	800eea4 <__hi0bits>
 800e086:	f1c0 0020 	rsb	r0, r0, #32
 800e08a:	9b06      	ldr	r3, [sp, #24]
 800e08c:	4418      	add	r0, r3
 800e08e:	f010 001f 	ands.w	r0, r0, #31
 800e092:	f000 8082 	beq.w	800e19a <_dtoa_r+0x912>
 800e096:	f1c0 0320 	rsb	r3, r0, #32
 800e09a:	2b04      	cmp	r3, #4
 800e09c:	dd73      	ble.n	800e186 <_dtoa_r+0x8fe>
 800e09e:	9b00      	ldr	r3, [sp, #0]
 800e0a0:	f1c0 001c 	rsb	r0, r0, #28
 800e0a4:	4403      	add	r3, r0
 800e0a6:	9300      	str	r3, [sp, #0]
 800e0a8:	9b06      	ldr	r3, [sp, #24]
 800e0aa:	4403      	add	r3, r0
 800e0ac:	4406      	add	r6, r0
 800e0ae:	9306      	str	r3, [sp, #24]
 800e0b0:	9b00      	ldr	r3, [sp, #0]
 800e0b2:	2b00      	cmp	r3, #0
 800e0b4:	dd05      	ble.n	800e0c2 <_dtoa_r+0x83a>
 800e0b6:	9902      	ldr	r1, [sp, #8]
 800e0b8:	461a      	mov	r2, r3
 800e0ba:	4648      	mov	r0, r9
 800e0bc:	f001 f850 	bl	800f160 <__lshift>
 800e0c0:	9002      	str	r0, [sp, #8]
 800e0c2:	9b06      	ldr	r3, [sp, #24]
 800e0c4:	2b00      	cmp	r3, #0
 800e0c6:	dd05      	ble.n	800e0d4 <_dtoa_r+0x84c>
 800e0c8:	4621      	mov	r1, r4
 800e0ca:	461a      	mov	r2, r3
 800e0cc:	4648      	mov	r0, r9
 800e0ce:	f001 f847 	bl	800f160 <__lshift>
 800e0d2:	4604      	mov	r4, r0
 800e0d4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800e0d6:	2b00      	cmp	r3, #0
 800e0d8:	d061      	beq.n	800e19e <_dtoa_r+0x916>
 800e0da:	9802      	ldr	r0, [sp, #8]
 800e0dc:	4621      	mov	r1, r4
 800e0de:	f001 f8ab 	bl	800f238 <__mcmp>
 800e0e2:	2800      	cmp	r0, #0
 800e0e4:	da5b      	bge.n	800e19e <_dtoa_r+0x916>
 800e0e6:	2300      	movs	r3, #0
 800e0e8:	9902      	ldr	r1, [sp, #8]
 800e0ea:	220a      	movs	r2, #10
 800e0ec:	4648      	mov	r0, r9
 800e0ee:	f000 fe49 	bl	800ed84 <__multadd>
 800e0f2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e0f4:	9002      	str	r0, [sp, #8]
 800e0f6:	f107 38ff 	add.w	r8, r7, #4294967295
 800e0fa:	2b00      	cmp	r3, #0
 800e0fc:	f000 8177 	beq.w	800e3ee <_dtoa_r+0xb66>
 800e100:	4629      	mov	r1, r5
 800e102:	2300      	movs	r3, #0
 800e104:	220a      	movs	r2, #10
 800e106:	4648      	mov	r0, r9
 800e108:	f000 fe3c 	bl	800ed84 <__multadd>
 800e10c:	f1bb 0f00 	cmp.w	fp, #0
 800e110:	4605      	mov	r5, r0
 800e112:	dc6f      	bgt.n	800e1f4 <_dtoa_r+0x96c>
 800e114:	9b07      	ldr	r3, [sp, #28]
 800e116:	2b02      	cmp	r3, #2
 800e118:	dc49      	bgt.n	800e1ae <_dtoa_r+0x926>
 800e11a:	e06b      	b.n	800e1f4 <_dtoa_r+0x96c>
 800e11c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800e11e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800e122:	e73c      	b.n	800df9e <_dtoa_r+0x716>
 800e124:	3fe00000 	.word	0x3fe00000
 800e128:	40240000 	.word	0x40240000
 800e12c:	9b03      	ldr	r3, [sp, #12]
 800e12e:	1e5c      	subs	r4, r3, #1
 800e130:	9b08      	ldr	r3, [sp, #32]
 800e132:	42a3      	cmp	r3, r4
 800e134:	db09      	blt.n	800e14a <_dtoa_r+0x8c2>
 800e136:	1b1c      	subs	r4, r3, r4
 800e138:	9b03      	ldr	r3, [sp, #12]
 800e13a:	2b00      	cmp	r3, #0
 800e13c:	f6bf af30 	bge.w	800dfa0 <_dtoa_r+0x718>
 800e140:	9b00      	ldr	r3, [sp, #0]
 800e142:	9a03      	ldr	r2, [sp, #12]
 800e144:	1a9e      	subs	r6, r3, r2
 800e146:	2300      	movs	r3, #0
 800e148:	e72b      	b.n	800dfa2 <_dtoa_r+0x71a>
 800e14a:	9b08      	ldr	r3, [sp, #32]
 800e14c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800e14e:	9408      	str	r4, [sp, #32]
 800e150:	1ae3      	subs	r3, r4, r3
 800e152:	441a      	add	r2, r3
 800e154:	9e00      	ldr	r6, [sp, #0]
 800e156:	9b03      	ldr	r3, [sp, #12]
 800e158:	920d      	str	r2, [sp, #52]	@ 0x34
 800e15a:	2400      	movs	r4, #0
 800e15c:	e721      	b.n	800dfa2 <_dtoa_r+0x71a>
 800e15e:	9c08      	ldr	r4, [sp, #32]
 800e160:	9e00      	ldr	r6, [sp, #0]
 800e162:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800e164:	e728      	b.n	800dfb8 <_dtoa_r+0x730>
 800e166:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800e16a:	e751      	b.n	800e010 <_dtoa_r+0x788>
 800e16c:	9a08      	ldr	r2, [sp, #32]
 800e16e:	9902      	ldr	r1, [sp, #8]
 800e170:	e750      	b.n	800e014 <_dtoa_r+0x78c>
 800e172:	f8cd 8008 	str.w	r8, [sp, #8]
 800e176:	e751      	b.n	800e01c <_dtoa_r+0x794>
 800e178:	2300      	movs	r3, #0
 800e17a:	e779      	b.n	800e070 <_dtoa_r+0x7e8>
 800e17c:	9b04      	ldr	r3, [sp, #16]
 800e17e:	e777      	b.n	800e070 <_dtoa_r+0x7e8>
 800e180:	2300      	movs	r3, #0
 800e182:	9308      	str	r3, [sp, #32]
 800e184:	e779      	b.n	800e07a <_dtoa_r+0x7f2>
 800e186:	d093      	beq.n	800e0b0 <_dtoa_r+0x828>
 800e188:	9a00      	ldr	r2, [sp, #0]
 800e18a:	331c      	adds	r3, #28
 800e18c:	441a      	add	r2, r3
 800e18e:	9200      	str	r2, [sp, #0]
 800e190:	9a06      	ldr	r2, [sp, #24]
 800e192:	441a      	add	r2, r3
 800e194:	441e      	add	r6, r3
 800e196:	9206      	str	r2, [sp, #24]
 800e198:	e78a      	b.n	800e0b0 <_dtoa_r+0x828>
 800e19a:	4603      	mov	r3, r0
 800e19c:	e7f4      	b.n	800e188 <_dtoa_r+0x900>
 800e19e:	9b03      	ldr	r3, [sp, #12]
 800e1a0:	2b00      	cmp	r3, #0
 800e1a2:	46b8      	mov	r8, r7
 800e1a4:	dc20      	bgt.n	800e1e8 <_dtoa_r+0x960>
 800e1a6:	469b      	mov	fp, r3
 800e1a8:	9b07      	ldr	r3, [sp, #28]
 800e1aa:	2b02      	cmp	r3, #2
 800e1ac:	dd1e      	ble.n	800e1ec <_dtoa_r+0x964>
 800e1ae:	f1bb 0f00 	cmp.w	fp, #0
 800e1b2:	f47f adb1 	bne.w	800dd18 <_dtoa_r+0x490>
 800e1b6:	4621      	mov	r1, r4
 800e1b8:	465b      	mov	r3, fp
 800e1ba:	2205      	movs	r2, #5
 800e1bc:	4648      	mov	r0, r9
 800e1be:	f000 fde1 	bl	800ed84 <__multadd>
 800e1c2:	4601      	mov	r1, r0
 800e1c4:	4604      	mov	r4, r0
 800e1c6:	9802      	ldr	r0, [sp, #8]
 800e1c8:	f001 f836 	bl	800f238 <__mcmp>
 800e1cc:	2800      	cmp	r0, #0
 800e1ce:	f77f ada3 	ble.w	800dd18 <_dtoa_r+0x490>
 800e1d2:	4656      	mov	r6, sl
 800e1d4:	2331      	movs	r3, #49	@ 0x31
 800e1d6:	f806 3b01 	strb.w	r3, [r6], #1
 800e1da:	f108 0801 	add.w	r8, r8, #1
 800e1de:	e59f      	b.n	800dd20 <_dtoa_r+0x498>
 800e1e0:	9c03      	ldr	r4, [sp, #12]
 800e1e2:	46b8      	mov	r8, r7
 800e1e4:	4625      	mov	r5, r4
 800e1e6:	e7f4      	b.n	800e1d2 <_dtoa_r+0x94a>
 800e1e8:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800e1ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e1ee:	2b00      	cmp	r3, #0
 800e1f0:	f000 8101 	beq.w	800e3f6 <_dtoa_r+0xb6e>
 800e1f4:	2e00      	cmp	r6, #0
 800e1f6:	dd05      	ble.n	800e204 <_dtoa_r+0x97c>
 800e1f8:	4629      	mov	r1, r5
 800e1fa:	4632      	mov	r2, r6
 800e1fc:	4648      	mov	r0, r9
 800e1fe:	f000 ffaf 	bl	800f160 <__lshift>
 800e202:	4605      	mov	r5, r0
 800e204:	9b08      	ldr	r3, [sp, #32]
 800e206:	2b00      	cmp	r3, #0
 800e208:	d05c      	beq.n	800e2c4 <_dtoa_r+0xa3c>
 800e20a:	6869      	ldr	r1, [r5, #4]
 800e20c:	4648      	mov	r0, r9
 800e20e:	f000 fd57 	bl	800ecc0 <_Balloc>
 800e212:	4606      	mov	r6, r0
 800e214:	b928      	cbnz	r0, 800e222 <_dtoa_r+0x99a>
 800e216:	4b82      	ldr	r3, [pc, #520]	@ (800e420 <_dtoa_r+0xb98>)
 800e218:	4602      	mov	r2, r0
 800e21a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800e21e:	f7ff bb4a 	b.w	800d8b6 <_dtoa_r+0x2e>
 800e222:	692a      	ldr	r2, [r5, #16]
 800e224:	3202      	adds	r2, #2
 800e226:	0092      	lsls	r2, r2, #2
 800e228:	f105 010c 	add.w	r1, r5, #12
 800e22c:	300c      	adds	r0, #12
 800e22e:	f7ff fa8c 	bl	800d74a <memcpy>
 800e232:	2201      	movs	r2, #1
 800e234:	4631      	mov	r1, r6
 800e236:	4648      	mov	r0, r9
 800e238:	f000 ff92 	bl	800f160 <__lshift>
 800e23c:	f10a 0301 	add.w	r3, sl, #1
 800e240:	9300      	str	r3, [sp, #0]
 800e242:	eb0a 030b 	add.w	r3, sl, fp
 800e246:	9308      	str	r3, [sp, #32]
 800e248:	9b04      	ldr	r3, [sp, #16]
 800e24a:	f003 0301 	and.w	r3, r3, #1
 800e24e:	462f      	mov	r7, r5
 800e250:	9306      	str	r3, [sp, #24]
 800e252:	4605      	mov	r5, r0
 800e254:	9b00      	ldr	r3, [sp, #0]
 800e256:	9802      	ldr	r0, [sp, #8]
 800e258:	4621      	mov	r1, r4
 800e25a:	f103 3bff 	add.w	fp, r3, #4294967295
 800e25e:	f7ff fa8b 	bl	800d778 <quorem>
 800e262:	4603      	mov	r3, r0
 800e264:	3330      	adds	r3, #48	@ 0x30
 800e266:	9003      	str	r0, [sp, #12]
 800e268:	4639      	mov	r1, r7
 800e26a:	9802      	ldr	r0, [sp, #8]
 800e26c:	9309      	str	r3, [sp, #36]	@ 0x24
 800e26e:	f000 ffe3 	bl	800f238 <__mcmp>
 800e272:	462a      	mov	r2, r5
 800e274:	9004      	str	r0, [sp, #16]
 800e276:	4621      	mov	r1, r4
 800e278:	4648      	mov	r0, r9
 800e27a:	f000 fff9 	bl	800f270 <__mdiff>
 800e27e:	68c2      	ldr	r2, [r0, #12]
 800e280:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e282:	4606      	mov	r6, r0
 800e284:	bb02      	cbnz	r2, 800e2c8 <_dtoa_r+0xa40>
 800e286:	4601      	mov	r1, r0
 800e288:	9802      	ldr	r0, [sp, #8]
 800e28a:	f000 ffd5 	bl	800f238 <__mcmp>
 800e28e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e290:	4602      	mov	r2, r0
 800e292:	4631      	mov	r1, r6
 800e294:	4648      	mov	r0, r9
 800e296:	920c      	str	r2, [sp, #48]	@ 0x30
 800e298:	9309      	str	r3, [sp, #36]	@ 0x24
 800e29a:	f000 fd51 	bl	800ed40 <_Bfree>
 800e29e:	9b07      	ldr	r3, [sp, #28]
 800e2a0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800e2a2:	9e00      	ldr	r6, [sp, #0]
 800e2a4:	ea42 0103 	orr.w	r1, r2, r3
 800e2a8:	9b06      	ldr	r3, [sp, #24]
 800e2aa:	4319      	orrs	r1, r3
 800e2ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e2ae:	d10d      	bne.n	800e2cc <_dtoa_r+0xa44>
 800e2b0:	2b39      	cmp	r3, #57	@ 0x39
 800e2b2:	d027      	beq.n	800e304 <_dtoa_r+0xa7c>
 800e2b4:	9a04      	ldr	r2, [sp, #16]
 800e2b6:	2a00      	cmp	r2, #0
 800e2b8:	dd01      	ble.n	800e2be <_dtoa_r+0xa36>
 800e2ba:	9b03      	ldr	r3, [sp, #12]
 800e2bc:	3331      	adds	r3, #49	@ 0x31
 800e2be:	f88b 3000 	strb.w	r3, [fp]
 800e2c2:	e52e      	b.n	800dd22 <_dtoa_r+0x49a>
 800e2c4:	4628      	mov	r0, r5
 800e2c6:	e7b9      	b.n	800e23c <_dtoa_r+0x9b4>
 800e2c8:	2201      	movs	r2, #1
 800e2ca:	e7e2      	b.n	800e292 <_dtoa_r+0xa0a>
 800e2cc:	9904      	ldr	r1, [sp, #16]
 800e2ce:	2900      	cmp	r1, #0
 800e2d0:	db04      	blt.n	800e2dc <_dtoa_r+0xa54>
 800e2d2:	9807      	ldr	r0, [sp, #28]
 800e2d4:	4301      	orrs	r1, r0
 800e2d6:	9806      	ldr	r0, [sp, #24]
 800e2d8:	4301      	orrs	r1, r0
 800e2da:	d120      	bne.n	800e31e <_dtoa_r+0xa96>
 800e2dc:	2a00      	cmp	r2, #0
 800e2de:	ddee      	ble.n	800e2be <_dtoa_r+0xa36>
 800e2e0:	9902      	ldr	r1, [sp, #8]
 800e2e2:	9300      	str	r3, [sp, #0]
 800e2e4:	2201      	movs	r2, #1
 800e2e6:	4648      	mov	r0, r9
 800e2e8:	f000 ff3a 	bl	800f160 <__lshift>
 800e2ec:	4621      	mov	r1, r4
 800e2ee:	9002      	str	r0, [sp, #8]
 800e2f0:	f000 ffa2 	bl	800f238 <__mcmp>
 800e2f4:	2800      	cmp	r0, #0
 800e2f6:	9b00      	ldr	r3, [sp, #0]
 800e2f8:	dc02      	bgt.n	800e300 <_dtoa_r+0xa78>
 800e2fa:	d1e0      	bne.n	800e2be <_dtoa_r+0xa36>
 800e2fc:	07da      	lsls	r2, r3, #31
 800e2fe:	d5de      	bpl.n	800e2be <_dtoa_r+0xa36>
 800e300:	2b39      	cmp	r3, #57	@ 0x39
 800e302:	d1da      	bne.n	800e2ba <_dtoa_r+0xa32>
 800e304:	2339      	movs	r3, #57	@ 0x39
 800e306:	f88b 3000 	strb.w	r3, [fp]
 800e30a:	4633      	mov	r3, r6
 800e30c:	461e      	mov	r6, r3
 800e30e:	3b01      	subs	r3, #1
 800e310:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800e314:	2a39      	cmp	r2, #57	@ 0x39
 800e316:	d04e      	beq.n	800e3b6 <_dtoa_r+0xb2e>
 800e318:	3201      	adds	r2, #1
 800e31a:	701a      	strb	r2, [r3, #0]
 800e31c:	e501      	b.n	800dd22 <_dtoa_r+0x49a>
 800e31e:	2a00      	cmp	r2, #0
 800e320:	dd03      	ble.n	800e32a <_dtoa_r+0xaa2>
 800e322:	2b39      	cmp	r3, #57	@ 0x39
 800e324:	d0ee      	beq.n	800e304 <_dtoa_r+0xa7c>
 800e326:	3301      	adds	r3, #1
 800e328:	e7c9      	b.n	800e2be <_dtoa_r+0xa36>
 800e32a:	9a00      	ldr	r2, [sp, #0]
 800e32c:	9908      	ldr	r1, [sp, #32]
 800e32e:	f802 3c01 	strb.w	r3, [r2, #-1]
 800e332:	428a      	cmp	r2, r1
 800e334:	d028      	beq.n	800e388 <_dtoa_r+0xb00>
 800e336:	9902      	ldr	r1, [sp, #8]
 800e338:	2300      	movs	r3, #0
 800e33a:	220a      	movs	r2, #10
 800e33c:	4648      	mov	r0, r9
 800e33e:	f000 fd21 	bl	800ed84 <__multadd>
 800e342:	42af      	cmp	r7, r5
 800e344:	9002      	str	r0, [sp, #8]
 800e346:	f04f 0300 	mov.w	r3, #0
 800e34a:	f04f 020a 	mov.w	r2, #10
 800e34e:	4639      	mov	r1, r7
 800e350:	4648      	mov	r0, r9
 800e352:	d107      	bne.n	800e364 <_dtoa_r+0xadc>
 800e354:	f000 fd16 	bl	800ed84 <__multadd>
 800e358:	4607      	mov	r7, r0
 800e35a:	4605      	mov	r5, r0
 800e35c:	9b00      	ldr	r3, [sp, #0]
 800e35e:	3301      	adds	r3, #1
 800e360:	9300      	str	r3, [sp, #0]
 800e362:	e777      	b.n	800e254 <_dtoa_r+0x9cc>
 800e364:	f000 fd0e 	bl	800ed84 <__multadd>
 800e368:	4629      	mov	r1, r5
 800e36a:	4607      	mov	r7, r0
 800e36c:	2300      	movs	r3, #0
 800e36e:	220a      	movs	r2, #10
 800e370:	4648      	mov	r0, r9
 800e372:	f000 fd07 	bl	800ed84 <__multadd>
 800e376:	4605      	mov	r5, r0
 800e378:	e7f0      	b.n	800e35c <_dtoa_r+0xad4>
 800e37a:	f1bb 0f00 	cmp.w	fp, #0
 800e37e:	bfcc      	ite	gt
 800e380:	465e      	movgt	r6, fp
 800e382:	2601      	movle	r6, #1
 800e384:	4456      	add	r6, sl
 800e386:	2700      	movs	r7, #0
 800e388:	9902      	ldr	r1, [sp, #8]
 800e38a:	9300      	str	r3, [sp, #0]
 800e38c:	2201      	movs	r2, #1
 800e38e:	4648      	mov	r0, r9
 800e390:	f000 fee6 	bl	800f160 <__lshift>
 800e394:	4621      	mov	r1, r4
 800e396:	9002      	str	r0, [sp, #8]
 800e398:	f000 ff4e 	bl	800f238 <__mcmp>
 800e39c:	2800      	cmp	r0, #0
 800e39e:	dcb4      	bgt.n	800e30a <_dtoa_r+0xa82>
 800e3a0:	d102      	bne.n	800e3a8 <_dtoa_r+0xb20>
 800e3a2:	9b00      	ldr	r3, [sp, #0]
 800e3a4:	07db      	lsls	r3, r3, #31
 800e3a6:	d4b0      	bmi.n	800e30a <_dtoa_r+0xa82>
 800e3a8:	4633      	mov	r3, r6
 800e3aa:	461e      	mov	r6, r3
 800e3ac:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e3b0:	2a30      	cmp	r2, #48	@ 0x30
 800e3b2:	d0fa      	beq.n	800e3aa <_dtoa_r+0xb22>
 800e3b4:	e4b5      	b.n	800dd22 <_dtoa_r+0x49a>
 800e3b6:	459a      	cmp	sl, r3
 800e3b8:	d1a8      	bne.n	800e30c <_dtoa_r+0xa84>
 800e3ba:	2331      	movs	r3, #49	@ 0x31
 800e3bc:	f108 0801 	add.w	r8, r8, #1
 800e3c0:	f88a 3000 	strb.w	r3, [sl]
 800e3c4:	e4ad      	b.n	800dd22 <_dtoa_r+0x49a>
 800e3c6:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800e3c8:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800e424 <_dtoa_r+0xb9c>
 800e3cc:	b11b      	cbz	r3, 800e3d6 <_dtoa_r+0xb4e>
 800e3ce:	f10a 0308 	add.w	r3, sl, #8
 800e3d2:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800e3d4:	6013      	str	r3, [r2, #0]
 800e3d6:	4650      	mov	r0, sl
 800e3d8:	b017      	add	sp, #92	@ 0x5c
 800e3da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e3de:	9b07      	ldr	r3, [sp, #28]
 800e3e0:	2b01      	cmp	r3, #1
 800e3e2:	f77f ae2e 	ble.w	800e042 <_dtoa_r+0x7ba>
 800e3e6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e3e8:	9308      	str	r3, [sp, #32]
 800e3ea:	2001      	movs	r0, #1
 800e3ec:	e64d      	b.n	800e08a <_dtoa_r+0x802>
 800e3ee:	f1bb 0f00 	cmp.w	fp, #0
 800e3f2:	f77f aed9 	ble.w	800e1a8 <_dtoa_r+0x920>
 800e3f6:	4656      	mov	r6, sl
 800e3f8:	9802      	ldr	r0, [sp, #8]
 800e3fa:	4621      	mov	r1, r4
 800e3fc:	f7ff f9bc 	bl	800d778 <quorem>
 800e400:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800e404:	f806 3b01 	strb.w	r3, [r6], #1
 800e408:	eba6 020a 	sub.w	r2, r6, sl
 800e40c:	4593      	cmp	fp, r2
 800e40e:	ddb4      	ble.n	800e37a <_dtoa_r+0xaf2>
 800e410:	9902      	ldr	r1, [sp, #8]
 800e412:	2300      	movs	r3, #0
 800e414:	220a      	movs	r2, #10
 800e416:	4648      	mov	r0, r9
 800e418:	f000 fcb4 	bl	800ed84 <__multadd>
 800e41c:	9002      	str	r0, [sp, #8]
 800e41e:	e7eb      	b.n	800e3f8 <_dtoa_r+0xb70>
 800e420:	08010672 	.word	0x08010672
 800e424:	080105f6 	.word	0x080105f6

0800e428 <_free_r>:
 800e428:	b538      	push	{r3, r4, r5, lr}
 800e42a:	4605      	mov	r5, r0
 800e42c:	2900      	cmp	r1, #0
 800e42e:	d041      	beq.n	800e4b4 <_free_r+0x8c>
 800e430:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e434:	1f0c      	subs	r4, r1, #4
 800e436:	2b00      	cmp	r3, #0
 800e438:	bfb8      	it	lt
 800e43a:	18e4      	addlt	r4, r4, r3
 800e43c:	f000 fc34 	bl	800eca8 <__malloc_lock>
 800e440:	4a1d      	ldr	r2, [pc, #116]	@ (800e4b8 <_free_r+0x90>)
 800e442:	6813      	ldr	r3, [r2, #0]
 800e444:	b933      	cbnz	r3, 800e454 <_free_r+0x2c>
 800e446:	6063      	str	r3, [r4, #4]
 800e448:	6014      	str	r4, [r2, #0]
 800e44a:	4628      	mov	r0, r5
 800e44c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e450:	f000 bc30 	b.w	800ecb4 <__malloc_unlock>
 800e454:	42a3      	cmp	r3, r4
 800e456:	d908      	bls.n	800e46a <_free_r+0x42>
 800e458:	6820      	ldr	r0, [r4, #0]
 800e45a:	1821      	adds	r1, r4, r0
 800e45c:	428b      	cmp	r3, r1
 800e45e:	bf01      	itttt	eq
 800e460:	6819      	ldreq	r1, [r3, #0]
 800e462:	685b      	ldreq	r3, [r3, #4]
 800e464:	1809      	addeq	r1, r1, r0
 800e466:	6021      	streq	r1, [r4, #0]
 800e468:	e7ed      	b.n	800e446 <_free_r+0x1e>
 800e46a:	461a      	mov	r2, r3
 800e46c:	685b      	ldr	r3, [r3, #4]
 800e46e:	b10b      	cbz	r3, 800e474 <_free_r+0x4c>
 800e470:	42a3      	cmp	r3, r4
 800e472:	d9fa      	bls.n	800e46a <_free_r+0x42>
 800e474:	6811      	ldr	r1, [r2, #0]
 800e476:	1850      	adds	r0, r2, r1
 800e478:	42a0      	cmp	r0, r4
 800e47a:	d10b      	bne.n	800e494 <_free_r+0x6c>
 800e47c:	6820      	ldr	r0, [r4, #0]
 800e47e:	4401      	add	r1, r0
 800e480:	1850      	adds	r0, r2, r1
 800e482:	4283      	cmp	r3, r0
 800e484:	6011      	str	r1, [r2, #0]
 800e486:	d1e0      	bne.n	800e44a <_free_r+0x22>
 800e488:	6818      	ldr	r0, [r3, #0]
 800e48a:	685b      	ldr	r3, [r3, #4]
 800e48c:	6053      	str	r3, [r2, #4]
 800e48e:	4408      	add	r0, r1
 800e490:	6010      	str	r0, [r2, #0]
 800e492:	e7da      	b.n	800e44a <_free_r+0x22>
 800e494:	d902      	bls.n	800e49c <_free_r+0x74>
 800e496:	230c      	movs	r3, #12
 800e498:	602b      	str	r3, [r5, #0]
 800e49a:	e7d6      	b.n	800e44a <_free_r+0x22>
 800e49c:	6820      	ldr	r0, [r4, #0]
 800e49e:	1821      	adds	r1, r4, r0
 800e4a0:	428b      	cmp	r3, r1
 800e4a2:	bf04      	itt	eq
 800e4a4:	6819      	ldreq	r1, [r3, #0]
 800e4a6:	685b      	ldreq	r3, [r3, #4]
 800e4a8:	6063      	str	r3, [r4, #4]
 800e4aa:	bf04      	itt	eq
 800e4ac:	1809      	addeq	r1, r1, r0
 800e4ae:	6021      	streq	r1, [r4, #0]
 800e4b0:	6054      	str	r4, [r2, #4]
 800e4b2:	e7ca      	b.n	800e44a <_free_r+0x22>
 800e4b4:	bd38      	pop	{r3, r4, r5, pc}
 800e4b6:	bf00      	nop
 800e4b8:	20001f40 	.word	0x20001f40

0800e4bc <rshift>:
 800e4bc:	6903      	ldr	r3, [r0, #16]
 800e4be:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800e4c2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e4c6:	ea4f 1261 	mov.w	r2, r1, asr #5
 800e4ca:	f100 0414 	add.w	r4, r0, #20
 800e4ce:	dd45      	ble.n	800e55c <rshift+0xa0>
 800e4d0:	f011 011f 	ands.w	r1, r1, #31
 800e4d4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800e4d8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800e4dc:	d10c      	bne.n	800e4f8 <rshift+0x3c>
 800e4de:	f100 0710 	add.w	r7, r0, #16
 800e4e2:	4629      	mov	r1, r5
 800e4e4:	42b1      	cmp	r1, r6
 800e4e6:	d334      	bcc.n	800e552 <rshift+0x96>
 800e4e8:	1a9b      	subs	r3, r3, r2
 800e4ea:	009b      	lsls	r3, r3, #2
 800e4ec:	1eea      	subs	r2, r5, #3
 800e4ee:	4296      	cmp	r6, r2
 800e4f0:	bf38      	it	cc
 800e4f2:	2300      	movcc	r3, #0
 800e4f4:	4423      	add	r3, r4
 800e4f6:	e015      	b.n	800e524 <rshift+0x68>
 800e4f8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800e4fc:	f1c1 0820 	rsb	r8, r1, #32
 800e500:	40cf      	lsrs	r7, r1
 800e502:	f105 0e04 	add.w	lr, r5, #4
 800e506:	46a1      	mov	r9, r4
 800e508:	4576      	cmp	r6, lr
 800e50a:	46f4      	mov	ip, lr
 800e50c:	d815      	bhi.n	800e53a <rshift+0x7e>
 800e50e:	1a9a      	subs	r2, r3, r2
 800e510:	0092      	lsls	r2, r2, #2
 800e512:	3a04      	subs	r2, #4
 800e514:	3501      	adds	r5, #1
 800e516:	42ae      	cmp	r6, r5
 800e518:	bf38      	it	cc
 800e51a:	2200      	movcc	r2, #0
 800e51c:	18a3      	adds	r3, r4, r2
 800e51e:	50a7      	str	r7, [r4, r2]
 800e520:	b107      	cbz	r7, 800e524 <rshift+0x68>
 800e522:	3304      	adds	r3, #4
 800e524:	1b1a      	subs	r2, r3, r4
 800e526:	42a3      	cmp	r3, r4
 800e528:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800e52c:	bf08      	it	eq
 800e52e:	2300      	moveq	r3, #0
 800e530:	6102      	str	r2, [r0, #16]
 800e532:	bf08      	it	eq
 800e534:	6143      	streq	r3, [r0, #20]
 800e536:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e53a:	f8dc c000 	ldr.w	ip, [ip]
 800e53e:	fa0c fc08 	lsl.w	ip, ip, r8
 800e542:	ea4c 0707 	orr.w	r7, ip, r7
 800e546:	f849 7b04 	str.w	r7, [r9], #4
 800e54a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800e54e:	40cf      	lsrs	r7, r1
 800e550:	e7da      	b.n	800e508 <rshift+0x4c>
 800e552:	f851 cb04 	ldr.w	ip, [r1], #4
 800e556:	f847 cf04 	str.w	ip, [r7, #4]!
 800e55a:	e7c3      	b.n	800e4e4 <rshift+0x28>
 800e55c:	4623      	mov	r3, r4
 800e55e:	e7e1      	b.n	800e524 <rshift+0x68>

0800e560 <__hexdig_fun>:
 800e560:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800e564:	2b09      	cmp	r3, #9
 800e566:	d802      	bhi.n	800e56e <__hexdig_fun+0xe>
 800e568:	3820      	subs	r0, #32
 800e56a:	b2c0      	uxtb	r0, r0
 800e56c:	4770      	bx	lr
 800e56e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800e572:	2b05      	cmp	r3, #5
 800e574:	d801      	bhi.n	800e57a <__hexdig_fun+0x1a>
 800e576:	3847      	subs	r0, #71	@ 0x47
 800e578:	e7f7      	b.n	800e56a <__hexdig_fun+0xa>
 800e57a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800e57e:	2b05      	cmp	r3, #5
 800e580:	d801      	bhi.n	800e586 <__hexdig_fun+0x26>
 800e582:	3827      	subs	r0, #39	@ 0x27
 800e584:	e7f1      	b.n	800e56a <__hexdig_fun+0xa>
 800e586:	2000      	movs	r0, #0
 800e588:	4770      	bx	lr
	...

0800e58c <__gethex>:
 800e58c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e590:	b085      	sub	sp, #20
 800e592:	468a      	mov	sl, r1
 800e594:	9302      	str	r3, [sp, #8]
 800e596:	680b      	ldr	r3, [r1, #0]
 800e598:	9001      	str	r0, [sp, #4]
 800e59a:	4690      	mov	r8, r2
 800e59c:	1c9c      	adds	r4, r3, #2
 800e59e:	46a1      	mov	r9, r4
 800e5a0:	f814 0b01 	ldrb.w	r0, [r4], #1
 800e5a4:	2830      	cmp	r0, #48	@ 0x30
 800e5a6:	d0fa      	beq.n	800e59e <__gethex+0x12>
 800e5a8:	eba9 0303 	sub.w	r3, r9, r3
 800e5ac:	f1a3 0b02 	sub.w	fp, r3, #2
 800e5b0:	f7ff ffd6 	bl	800e560 <__hexdig_fun>
 800e5b4:	4605      	mov	r5, r0
 800e5b6:	2800      	cmp	r0, #0
 800e5b8:	d168      	bne.n	800e68c <__gethex+0x100>
 800e5ba:	49a0      	ldr	r1, [pc, #640]	@ (800e83c <__gethex+0x2b0>)
 800e5bc:	2201      	movs	r2, #1
 800e5be:	4648      	mov	r0, r9
 800e5c0:	f7ff f832 	bl	800d628 <strncmp>
 800e5c4:	4607      	mov	r7, r0
 800e5c6:	2800      	cmp	r0, #0
 800e5c8:	d167      	bne.n	800e69a <__gethex+0x10e>
 800e5ca:	f899 0001 	ldrb.w	r0, [r9, #1]
 800e5ce:	4626      	mov	r6, r4
 800e5d0:	f7ff ffc6 	bl	800e560 <__hexdig_fun>
 800e5d4:	2800      	cmp	r0, #0
 800e5d6:	d062      	beq.n	800e69e <__gethex+0x112>
 800e5d8:	4623      	mov	r3, r4
 800e5da:	7818      	ldrb	r0, [r3, #0]
 800e5dc:	2830      	cmp	r0, #48	@ 0x30
 800e5de:	4699      	mov	r9, r3
 800e5e0:	f103 0301 	add.w	r3, r3, #1
 800e5e4:	d0f9      	beq.n	800e5da <__gethex+0x4e>
 800e5e6:	f7ff ffbb 	bl	800e560 <__hexdig_fun>
 800e5ea:	fab0 f580 	clz	r5, r0
 800e5ee:	096d      	lsrs	r5, r5, #5
 800e5f0:	f04f 0b01 	mov.w	fp, #1
 800e5f4:	464a      	mov	r2, r9
 800e5f6:	4616      	mov	r6, r2
 800e5f8:	3201      	adds	r2, #1
 800e5fa:	7830      	ldrb	r0, [r6, #0]
 800e5fc:	f7ff ffb0 	bl	800e560 <__hexdig_fun>
 800e600:	2800      	cmp	r0, #0
 800e602:	d1f8      	bne.n	800e5f6 <__gethex+0x6a>
 800e604:	498d      	ldr	r1, [pc, #564]	@ (800e83c <__gethex+0x2b0>)
 800e606:	2201      	movs	r2, #1
 800e608:	4630      	mov	r0, r6
 800e60a:	f7ff f80d 	bl	800d628 <strncmp>
 800e60e:	2800      	cmp	r0, #0
 800e610:	d13f      	bne.n	800e692 <__gethex+0x106>
 800e612:	b944      	cbnz	r4, 800e626 <__gethex+0x9a>
 800e614:	1c74      	adds	r4, r6, #1
 800e616:	4622      	mov	r2, r4
 800e618:	4616      	mov	r6, r2
 800e61a:	3201      	adds	r2, #1
 800e61c:	7830      	ldrb	r0, [r6, #0]
 800e61e:	f7ff ff9f 	bl	800e560 <__hexdig_fun>
 800e622:	2800      	cmp	r0, #0
 800e624:	d1f8      	bne.n	800e618 <__gethex+0x8c>
 800e626:	1ba4      	subs	r4, r4, r6
 800e628:	00a7      	lsls	r7, r4, #2
 800e62a:	7833      	ldrb	r3, [r6, #0]
 800e62c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800e630:	2b50      	cmp	r3, #80	@ 0x50
 800e632:	d13e      	bne.n	800e6b2 <__gethex+0x126>
 800e634:	7873      	ldrb	r3, [r6, #1]
 800e636:	2b2b      	cmp	r3, #43	@ 0x2b
 800e638:	d033      	beq.n	800e6a2 <__gethex+0x116>
 800e63a:	2b2d      	cmp	r3, #45	@ 0x2d
 800e63c:	d034      	beq.n	800e6a8 <__gethex+0x11c>
 800e63e:	1c71      	adds	r1, r6, #1
 800e640:	2400      	movs	r4, #0
 800e642:	7808      	ldrb	r0, [r1, #0]
 800e644:	f7ff ff8c 	bl	800e560 <__hexdig_fun>
 800e648:	1e43      	subs	r3, r0, #1
 800e64a:	b2db      	uxtb	r3, r3
 800e64c:	2b18      	cmp	r3, #24
 800e64e:	d830      	bhi.n	800e6b2 <__gethex+0x126>
 800e650:	f1a0 0210 	sub.w	r2, r0, #16
 800e654:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800e658:	f7ff ff82 	bl	800e560 <__hexdig_fun>
 800e65c:	f100 3cff 	add.w	ip, r0, #4294967295
 800e660:	fa5f fc8c 	uxtb.w	ip, ip
 800e664:	f1bc 0f18 	cmp.w	ip, #24
 800e668:	f04f 030a 	mov.w	r3, #10
 800e66c:	d91e      	bls.n	800e6ac <__gethex+0x120>
 800e66e:	b104      	cbz	r4, 800e672 <__gethex+0xe6>
 800e670:	4252      	negs	r2, r2
 800e672:	4417      	add	r7, r2
 800e674:	f8ca 1000 	str.w	r1, [sl]
 800e678:	b1ed      	cbz	r5, 800e6b6 <__gethex+0x12a>
 800e67a:	f1bb 0f00 	cmp.w	fp, #0
 800e67e:	bf0c      	ite	eq
 800e680:	2506      	moveq	r5, #6
 800e682:	2500      	movne	r5, #0
 800e684:	4628      	mov	r0, r5
 800e686:	b005      	add	sp, #20
 800e688:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e68c:	2500      	movs	r5, #0
 800e68e:	462c      	mov	r4, r5
 800e690:	e7b0      	b.n	800e5f4 <__gethex+0x68>
 800e692:	2c00      	cmp	r4, #0
 800e694:	d1c7      	bne.n	800e626 <__gethex+0x9a>
 800e696:	4627      	mov	r7, r4
 800e698:	e7c7      	b.n	800e62a <__gethex+0x9e>
 800e69a:	464e      	mov	r6, r9
 800e69c:	462f      	mov	r7, r5
 800e69e:	2501      	movs	r5, #1
 800e6a0:	e7c3      	b.n	800e62a <__gethex+0x9e>
 800e6a2:	2400      	movs	r4, #0
 800e6a4:	1cb1      	adds	r1, r6, #2
 800e6a6:	e7cc      	b.n	800e642 <__gethex+0xb6>
 800e6a8:	2401      	movs	r4, #1
 800e6aa:	e7fb      	b.n	800e6a4 <__gethex+0x118>
 800e6ac:	fb03 0002 	mla	r0, r3, r2, r0
 800e6b0:	e7ce      	b.n	800e650 <__gethex+0xc4>
 800e6b2:	4631      	mov	r1, r6
 800e6b4:	e7de      	b.n	800e674 <__gethex+0xe8>
 800e6b6:	eba6 0309 	sub.w	r3, r6, r9
 800e6ba:	3b01      	subs	r3, #1
 800e6bc:	4629      	mov	r1, r5
 800e6be:	2b07      	cmp	r3, #7
 800e6c0:	dc0a      	bgt.n	800e6d8 <__gethex+0x14c>
 800e6c2:	9801      	ldr	r0, [sp, #4]
 800e6c4:	f000 fafc 	bl	800ecc0 <_Balloc>
 800e6c8:	4604      	mov	r4, r0
 800e6ca:	b940      	cbnz	r0, 800e6de <__gethex+0x152>
 800e6cc:	4b5c      	ldr	r3, [pc, #368]	@ (800e840 <__gethex+0x2b4>)
 800e6ce:	4602      	mov	r2, r0
 800e6d0:	21e4      	movs	r1, #228	@ 0xe4
 800e6d2:	485c      	ldr	r0, [pc, #368]	@ (800e844 <__gethex+0x2b8>)
 800e6d4:	f001 f9d8 	bl	800fa88 <__assert_func>
 800e6d8:	3101      	adds	r1, #1
 800e6da:	105b      	asrs	r3, r3, #1
 800e6dc:	e7ef      	b.n	800e6be <__gethex+0x132>
 800e6de:	f100 0a14 	add.w	sl, r0, #20
 800e6e2:	2300      	movs	r3, #0
 800e6e4:	4655      	mov	r5, sl
 800e6e6:	469b      	mov	fp, r3
 800e6e8:	45b1      	cmp	r9, r6
 800e6ea:	d337      	bcc.n	800e75c <__gethex+0x1d0>
 800e6ec:	f845 bb04 	str.w	fp, [r5], #4
 800e6f0:	eba5 050a 	sub.w	r5, r5, sl
 800e6f4:	10ad      	asrs	r5, r5, #2
 800e6f6:	6125      	str	r5, [r4, #16]
 800e6f8:	4658      	mov	r0, fp
 800e6fa:	f000 fbd3 	bl	800eea4 <__hi0bits>
 800e6fe:	016d      	lsls	r5, r5, #5
 800e700:	f8d8 6000 	ldr.w	r6, [r8]
 800e704:	1a2d      	subs	r5, r5, r0
 800e706:	42b5      	cmp	r5, r6
 800e708:	dd54      	ble.n	800e7b4 <__gethex+0x228>
 800e70a:	1bad      	subs	r5, r5, r6
 800e70c:	4629      	mov	r1, r5
 800e70e:	4620      	mov	r0, r4
 800e710:	f000 ff5f 	bl	800f5d2 <__any_on>
 800e714:	4681      	mov	r9, r0
 800e716:	b178      	cbz	r0, 800e738 <__gethex+0x1ac>
 800e718:	1e6b      	subs	r3, r5, #1
 800e71a:	1159      	asrs	r1, r3, #5
 800e71c:	f003 021f 	and.w	r2, r3, #31
 800e720:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800e724:	f04f 0901 	mov.w	r9, #1
 800e728:	fa09 f202 	lsl.w	r2, r9, r2
 800e72c:	420a      	tst	r2, r1
 800e72e:	d003      	beq.n	800e738 <__gethex+0x1ac>
 800e730:	454b      	cmp	r3, r9
 800e732:	dc36      	bgt.n	800e7a2 <__gethex+0x216>
 800e734:	f04f 0902 	mov.w	r9, #2
 800e738:	4629      	mov	r1, r5
 800e73a:	4620      	mov	r0, r4
 800e73c:	f7ff febe 	bl	800e4bc <rshift>
 800e740:	442f      	add	r7, r5
 800e742:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800e746:	42bb      	cmp	r3, r7
 800e748:	da42      	bge.n	800e7d0 <__gethex+0x244>
 800e74a:	9801      	ldr	r0, [sp, #4]
 800e74c:	4621      	mov	r1, r4
 800e74e:	f000 faf7 	bl	800ed40 <_Bfree>
 800e752:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e754:	2300      	movs	r3, #0
 800e756:	6013      	str	r3, [r2, #0]
 800e758:	25a3      	movs	r5, #163	@ 0xa3
 800e75a:	e793      	b.n	800e684 <__gethex+0xf8>
 800e75c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800e760:	2a2e      	cmp	r2, #46	@ 0x2e
 800e762:	d012      	beq.n	800e78a <__gethex+0x1fe>
 800e764:	2b20      	cmp	r3, #32
 800e766:	d104      	bne.n	800e772 <__gethex+0x1e6>
 800e768:	f845 bb04 	str.w	fp, [r5], #4
 800e76c:	f04f 0b00 	mov.w	fp, #0
 800e770:	465b      	mov	r3, fp
 800e772:	7830      	ldrb	r0, [r6, #0]
 800e774:	9303      	str	r3, [sp, #12]
 800e776:	f7ff fef3 	bl	800e560 <__hexdig_fun>
 800e77a:	9b03      	ldr	r3, [sp, #12]
 800e77c:	f000 000f 	and.w	r0, r0, #15
 800e780:	4098      	lsls	r0, r3
 800e782:	ea4b 0b00 	orr.w	fp, fp, r0
 800e786:	3304      	adds	r3, #4
 800e788:	e7ae      	b.n	800e6e8 <__gethex+0x15c>
 800e78a:	45b1      	cmp	r9, r6
 800e78c:	d8ea      	bhi.n	800e764 <__gethex+0x1d8>
 800e78e:	492b      	ldr	r1, [pc, #172]	@ (800e83c <__gethex+0x2b0>)
 800e790:	9303      	str	r3, [sp, #12]
 800e792:	2201      	movs	r2, #1
 800e794:	4630      	mov	r0, r6
 800e796:	f7fe ff47 	bl	800d628 <strncmp>
 800e79a:	9b03      	ldr	r3, [sp, #12]
 800e79c:	2800      	cmp	r0, #0
 800e79e:	d1e1      	bne.n	800e764 <__gethex+0x1d8>
 800e7a0:	e7a2      	b.n	800e6e8 <__gethex+0x15c>
 800e7a2:	1ea9      	subs	r1, r5, #2
 800e7a4:	4620      	mov	r0, r4
 800e7a6:	f000 ff14 	bl	800f5d2 <__any_on>
 800e7aa:	2800      	cmp	r0, #0
 800e7ac:	d0c2      	beq.n	800e734 <__gethex+0x1a8>
 800e7ae:	f04f 0903 	mov.w	r9, #3
 800e7b2:	e7c1      	b.n	800e738 <__gethex+0x1ac>
 800e7b4:	da09      	bge.n	800e7ca <__gethex+0x23e>
 800e7b6:	1b75      	subs	r5, r6, r5
 800e7b8:	4621      	mov	r1, r4
 800e7ba:	9801      	ldr	r0, [sp, #4]
 800e7bc:	462a      	mov	r2, r5
 800e7be:	f000 fccf 	bl	800f160 <__lshift>
 800e7c2:	1b7f      	subs	r7, r7, r5
 800e7c4:	4604      	mov	r4, r0
 800e7c6:	f100 0a14 	add.w	sl, r0, #20
 800e7ca:	f04f 0900 	mov.w	r9, #0
 800e7ce:	e7b8      	b.n	800e742 <__gethex+0x1b6>
 800e7d0:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800e7d4:	42bd      	cmp	r5, r7
 800e7d6:	dd6f      	ble.n	800e8b8 <__gethex+0x32c>
 800e7d8:	1bed      	subs	r5, r5, r7
 800e7da:	42ae      	cmp	r6, r5
 800e7dc:	dc34      	bgt.n	800e848 <__gethex+0x2bc>
 800e7de:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800e7e2:	2b02      	cmp	r3, #2
 800e7e4:	d022      	beq.n	800e82c <__gethex+0x2a0>
 800e7e6:	2b03      	cmp	r3, #3
 800e7e8:	d024      	beq.n	800e834 <__gethex+0x2a8>
 800e7ea:	2b01      	cmp	r3, #1
 800e7ec:	d115      	bne.n	800e81a <__gethex+0x28e>
 800e7ee:	42ae      	cmp	r6, r5
 800e7f0:	d113      	bne.n	800e81a <__gethex+0x28e>
 800e7f2:	2e01      	cmp	r6, #1
 800e7f4:	d10b      	bne.n	800e80e <__gethex+0x282>
 800e7f6:	9a02      	ldr	r2, [sp, #8]
 800e7f8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800e7fc:	6013      	str	r3, [r2, #0]
 800e7fe:	2301      	movs	r3, #1
 800e800:	6123      	str	r3, [r4, #16]
 800e802:	f8ca 3000 	str.w	r3, [sl]
 800e806:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e808:	2562      	movs	r5, #98	@ 0x62
 800e80a:	601c      	str	r4, [r3, #0]
 800e80c:	e73a      	b.n	800e684 <__gethex+0xf8>
 800e80e:	1e71      	subs	r1, r6, #1
 800e810:	4620      	mov	r0, r4
 800e812:	f000 fede 	bl	800f5d2 <__any_on>
 800e816:	2800      	cmp	r0, #0
 800e818:	d1ed      	bne.n	800e7f6 <__gethex+0x26a>
 800e81a:	9801      	ldr	r0, [sp, #4]
 800e81c:	4621      	mov	r1, r4
 800e81e:	f000 fa8f 	bl	800ed40 <_Bfree>
 800e822:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e824:	2300      	movs	r3, #0
 800e826:	6013      	str	r3, [r2, #0]
 800e828:	2550      	movs	r5, #80	@ 0x50
 800e82a:	e72b      	b.n	800e684 <__gethex+0xf8>
 800e82c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e82e:	2b00      	cmp	r3, #0
 800e830:	d1f3      	bne.n	800e81a <__gethex+0x28e>
 800e832:	e7e0      	b.n	800e7f6 <__gethex+0x26a>
 800e834:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e836:	2b00      	cmp	r3, #0
 800e838:	d1dd      	bne.n	800e7f6 <__gethex+0x26a>
 800e83a:	e7ee      	b.n	800e81a <__gethex+0x28e>
 800e83c:	080105b8 	.word	0x080105b8
 800e840:	08010672 	.word	0x08010672
 800e844:	08010683 	.word	0x08010683
 800e848:	1e6f      	subs	r7, r5, #1
 800e84a:	f1b9 0f00 	cmp.w	r9, #0
 800e84e:	d130      	bne.n	800e8b2 <__gethex+0x326>
 800e850:	b127      	cbz	r7, 800e85c <__gethex+0x2d0>
 800e852:	4639      	mov	r1, r7
 800e854:	4620      	mov	r0, r4
 800e856:	f000 febc 	bl	800f5d2 <__any_on>
 800e85a:	4681      	mov	r9, r0
 800e85c:	117a      	asrs	r2, r7, #5
 800e85e:	2301      	movs	r3, #1
 800e860:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800e864:	f007 071f 	and.w	r7, r7, #31
 800e868:	40bb      	lsls	r3, r7
 800e86a:	4213      	tst	r3, r2
 800e86c:	4629      	mov	r1, r5
 800e86e:	4620      	mov	r0, r4
 800e870:	bf18      	it	ne
 800e872:	f049 0902 	orrne.w	r9, r9, #2
 800e876:	f7ff fe21 	bl	800e4bc <rshift>
 800e87a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800e87e:	1b76      	subs	r6, r6, r5
 800e880:	2502      	movs	r5, #2
 800e882:	f1b9 0f00 	cmp.w	r9, #0
 800e886:	d047      	beq.n	800e918 <__gethex+0x38c>
 800e888:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800e88c:	2b02      	cmp	r3, #2
 800e88e:	d015      	beq.n	800e8bc <__gethex+0x330>
 800e890:	2b03      	cmp	r3, #3
 800e892:	d017      	beq.n	800e8c4 <__gethex+0x338>
 800e894:	2b01      	cmp	r3, #1
 800e896:	d109      	bne.n	800e8ac <__gethex+0x320>
 800e898:	f019 0f02 	tst.w	r9, #2
 800e89c:	d006      	beq.n	800e8ac <__gethex+0x320>
 800e89e:	f8da 3000 	ldr.w	r3, [sl]
 800e8a2:	ea49 0903 	orr.w	r9, r9, r3
 800e8a6:	f019 0f01 	tst.w	r9, #1
 800e8aa:	d10e      	bne.n	800e8ca <__gethex+0x33e>
 800e8ac:	f045 0510 	orr.w	r5, r5, #16
 800e8b0:	e032      	b.n	800e918 <__gethex+0x38c>
 800e8b2:	f04f 0901 	mov.w	r9, #1
 800e8b6:	e7d1      	b.n	800e85c <__gethex+0x2d0>
 800e8b8:	2501      	movs	r5, #1
 800e8ba:	e7e2      	b.n	800e882 <__gethex+0x2f6>
 800e8bc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e8be:	f1c3 0301 	rsb	r3, r3, #1
 800e8c2:	930f      	str	r3, [sp, #60]	@ 0x3c
 800e8c4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e8c6:	2b00      	cmp	r3, #0
 800e8c8:	d0f0      	beq.n	800e8ac <__gethex+0x320>
 800e8ca:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800e8ce:	f104 0314 	add.w	r3, r4, #20
 800e8d2:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800e8d6:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800e8da:	f04f 0c00 	mov.w	ip, #0
 800e8de:	4618      	mov	r0, r3
 800e8e0:	f853 2b04 	ldr.w	r2, [r3], #4
 800e8e4:	f1b2 3fff 	cmp.w	r2, #4294967295
 800e8e8:	d01b      	beq.n	800e922 <__gethex+0x396>
 800e8ea:	3201      	adds	r2, #1
 800e8ec:	6002      	str	r2, [r0, #0]
 800e8ee:	2d02      	cmp	r5, #2
 800e8f0:	f104 0314 	add.w	r3, r4, #20
 800e8f4:	d13c      	bne.n	800e970 <__gethex+0x3e4>
 800e8f6:	f8d8 2000 	ldr.w	r2, [r8]
 800e8fa:	3a01      	subs	r2, #1
 800e8fc:	42b2      	cmp	r2, r6
 800e8fe:	d109      	bne.n	800e914 <__gethex+0x388>
 800e900:	1171      	asrs	r1, r6, #5
 800e902:	2201      	movs	r2, #1
 800e904:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800e908:	f006 061f 	and.w	r6, r6, #31
 800e90c:	fa02 f606 	lsl.w	r6, r2, r6
 800e910:	421e      	tst	r6, r3
 800e912:	d13a      	bne.n	800e98a <__gethex+0x3fe>
 800e914:	f045 0520 	orr.w	r5, r5, #32
 800e918:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e91a:	601c      	str	r4, [r3, #0]
 800e91c:	9b02      	ldr	r3, [sp, #8]
 800e91e:	601f      	str	r7, [r3, #0]
 800e920:	e6b0      	b.n	800e684 <__gethex+0xf8>
 800e922:	4299      	cmp	r1, r3
 800e924:	f843 cc04 	str.w	ip, [r3, #-4]
 800e928:	d8d9      	bhi.n	800e8de <__gethex+0x352>
 800e92a:	68a3      	ldr	r3, [r4, #8]
 800e92c:	459b      	cmp	fp, r3
 800e92e:	db17      	blt.n	800e960 <__gethex+0x3d4>
 800e930:	6861      	ldr	r1, [r4, #4]
 800e932:	9801      	ldr	r0, [sp, #4]
 800e934:	3101      	adds	r1, #1
 800e936:	f000 f9c3 	bl	800ecc0 <_Balloc>
 800e93a:	4681      	mov	r9, r0
 800e93c:	b918      	cbnz	r0, 800e946 <__gethex+0x3ba>
 800e93e:	4b1a      	ldr	r3, [pc, #104]	@ (800e9a8 <__gethex+0x41c>)
 800e940:	4602      	mov	r2, r0
 800e942:	2184      	movs	r1, #132	@ 0x84
 800e944:	e6c5      	b.n	800e6d2 <__gethex+0x146>
 800e946:	6922      	ldr	r2, [r4, #16]
 800e948:	3202      	adds	r2, #2
 800e94a:	f104 010c 	add.w	r1, r4, #12
 800e94e:	0092      	lsls	r2, r2, #2
 800e950:	300c      	adds	r0, #12
 800e952:	f7fe fefa 	bl	800d74a <memcpy>
 800e956:	4621      	mov	r1, r4
 800e958:	9801      	ldr	r0, [sp, #4]
 800e95a:	f000 f9f1 	bl	800ed40 <_Bfree>
 800e95e:	464c      	mov	r4, r9
 800e960:	6923      	ldr	r3, [r4, #16]
 800e962:	1c5a      	adds	r2, r3, #1
 800e964:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800e968:	6122      	str	r2, [r4, #16]
 800e96a:	2201      	movs	r2, #1
 800e96c:	615a      	str	r2, [r3, #20]
 800e96e:	e7be      	b.n	800e8ee <__gethex+0x362>
 800e970:	6922      	ldr	r2, [r4, #16]
 800e972:	455a      	cmp	r2, fp
 800e974:	dd0b      	ble.n	800e98e <__gethex+0x402>
 800e976:	2101      	movs	r1, #1
 800e978:	4620      	mov	r0, r4
 800e97a:	f7ff fd9f 	bl	800e4bc <rshift>
 800e97e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800e982:	3701      	adds	r7, #1
 800e984:	42bb      	cmp	r3, r7
 800e986:	f6ff aee0 	blt.w	800e74a <__gethex+0x1be>
 800e98a:	2501      	movs	r5, #1
 800e98c:	e7c2      	b.n	800e914 <__gethex+0x388>
 800e98e:	f016 061f 	ands.w	r6, r6, #31
 800e992:	d0fa      	beq.n	800e98a <__gethex+0x3fe>
 800e994:	4453      	add	r3, sl
 800e996:	f1c6 0620 	rsb	r6, r6, #32
 800e99a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800e99e:	f000 fa81 	bl	800eea4 <__hi0bits>
 800e9a2:	42b0      	cmp	r0, r6
 800e9a4:	dbe7      	blt.n	800e976 <__gethex+0x3ea>
 800e9a6:	e7f0      	b.n	800e98a <__gethex+0x3fe>
 800e9a8:	08010672 	.word	0x08010672

0800e9ac <L_shift>:
 800e9ac:	f1c2 0208 	rsb	r2, r2, #8
 800e9b0:	0092      	lsls	r2, r2, #2
 800e9b2:	b570      	push	{r4, r5, r6, lr}
 800e9b4:	f1c2 0620 	rsb	r6, r2, #32
 800e9b8:	6843      	ldr	r3, [r0, #4]
 800e9ba:	6804      	ldr	r4, [r0, #0]
 800e9bc:	fa03 f506 	lsl.w	r5, r3, r6
 800e9c0:	432c      	orrs	r4, r5
 800e9c2:	40d3      	lsrs	r3, r2
 800e9c4:	6004      	str	r4, [r0, #0]
 800e9c6:	f840 3f04 	str.w	r3, [r0, #4]!
 800e9ca:	4288      	cmp	r0, r1
 800e9cc:	d3f4      	bcc.n	800e9b8 <L_shift+0xc>
 800e9ce:	bd70      	pop	{r4, r5, r6, pc}

0800e9d0 <__match>:
 800e9d0:	b530      	push	{r4, r5, lr}
 800e9d2:	6803      	ldr	r3, [r0, #0]
 800e9d4:	3301      	adds	r3, #1
 800e9d6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e9da:	b914      	cbnz	r4, 800e9e2 <__match+0x12>
 800e9dc:	6003      	str	r3, [r0, #0]
 800e9de:	2001      	movs	r0, #1
 800e9e0:	bd30      	pop	{r4, r5, pc}
 800e9e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e9e6:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800e9ea:	2d19      	cmp	r5, #25
 800e9ec:	bf98      	it	ls
 800e9ee:	3220      	addls	r2, #32
 800e9f0:	42a2      	cmp	r2, r4
 800e9f2:	d0f0      	beq.n	800e9d6 <__match+0x6>
 800e9f4:	2000      	movs	r0, #0
 800e9f6:	e7f3      	b.n	800e9e0 <__match+0x10>

0800e9f8 <__hexnan>:
 800e9f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e9fc:	680b      	ldr	r3, [r1, #0]
 800e9fe:	6801      	ldr	r1, [r0, #0]
 800ea00:	115e      	asrs	r6, r3, #5
 800ea02:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800ea06:	f013 031f 	ands.w	r3, r3, #31
 800ea0a:	b087      	sub	sp, #28
 800ea0c:	bf18      	it	ne
 800ea0e:	3604      	addne	r6, #4
 800ea10:	2500      	movs	r5, #0
 800ea12:	1f37      	subs	r7, r6, #4
 800ea14:	4682      	mov	sl, r0
 800ea16:	4690      	mov	r8, r2
 800ea18:	9301      	str	r3, [sp, #4]
 800ea1a:	f846 5c04 	str.w	r5, [r6, #-4]
 800ea1e:	46b9      	mov	r9, r7
 800ea20:	463c      	mov	r4, r7
 800ea22:	9502      	str	r5, [sp, #8]
 800ea24:	46ab      	mov	fp, r5
 800ea26:	784a      	ldrb	r2, [r1, #1]
 800ea28:	1c4b      	adds	r3, r1, #1
 800ea2a:	9303      	str	r3, [sp, #12]
 800ea2c:	b342      	cbz	r2, 800ea80 <__hexnan+0x88>
 800ea2e:	4610      	mov	r0, r2
 800ea30:	9105      	str	r1, [sp, #20]
 800ea32:	9204      	str	r2, [sp, #16]
 800ea34:	f7ff fd94 	bl	800e560 <__hexdig_fun>
 800ea38:	2800      	cmp	r0, #0
 800ea3a:	d151      	bne.n	800eae0 <__hexnan+0xe8>
 800ea3c:	9a04      	ldr	r2, [sp, #16]
 800ea3e:	9905      	ldr	r1, [sp, #20]
 800ea40:	2a20      	cmp	r2, #32
 800ea42:	d818      	bhi.n	800ea76 <__hexnan+0x7e>
 800ea44:	9b02      	ldr	r3, [sp, #8]
 800ea46:	459b      	cmp	fp, r3
 800ea48:	dd13      	ble.n	800ea72 <__hexnan+0x7a>
 800ea4a:	454c      	cmp	r4, r9
 800ea4c:	d206      	bcs.n	800ea5c <__hexnan+0x64>
 800ea4e:	2d07      	cmp	r5, #7
 800ea50:	dc04      	bgt.n	800ea5c <__hexnan+0x64>
 800ea52:	462a      	mov	r2, r5
 800ea54:	4649      	mov	r1, r9
 800ea56:	4620      	mov	r0, r4
 800ea58:	f7ff ffa8 	bl	800e9ac <L_shift>
 800ea5c:	4544      	cmp	r4, r8
 800ea5e:	d952      	bls.n	800eb06 <__hexnan+0x10e>
 800ea60:	2300      	movs	r3, #0
 800ea62:	f1a4 0904 	sub.w	r9, r4, #4
 800ea66:	f844 3c04 	str.w	r3, [r4, #-4]
 800ea6a:	f8cd b008 	str.w	fp, [sp, #8]
 800ea6e:	464c      	mov	r4, r9
 800ea70:	461d      	mov	r5, r3
 800ea72:	9903      	ldr	r1, [sp, #12]
 800ea74:	e7d7      	b.n	800ea26 <__hexnan+0x2e>
 800ea76:	2a29      	cmp	r2, #41	@ 0x29
 800ea78:	d157      	bne.n	800eb2a <__hexnan+0x132>
 800ea7a:	3102      	adds	r1, #2
 800ea7c:	f8ca 1000 	str.w	r1, [sl]
 800ea80:	f1bb 0f00 	cmp.w	fp, #0
 800ea84:	d051      	beq.n	800eb2a <__hexnan+0x132>
 800ea86:	454c      	cmp	r4, r9
 800ea88:	d206      	bcs.n	800ea98 <__hexnan+0xa0>
 800ea8a:	2d07      	cmp	r5, #7
 800ea8c:	dc04      	bgt.n	800ea98 <__hexnan+0xa0>
 800ea8e:	462a      	mov	r2, r5
 800ea90:	4649      	mov	r1, r9
 800ea92:	4620      	mov	r0, r4
 800ea94:	f7ff ff8a 	bl	800e9ac <L_shift>
 800ea98:	4544      	cmp	r4, r8
 800ea9a:	d936      	bls.n	800eb0a <__hexnan+0x112>
 800ea9c:	f1a8 0204 	sub.w	r2, r8, #4
 800eaa0:	4623      	mov	r3, r4
 800eaa2:	f853 1b04 	ldr.w	r1, [r3], #4
 800eaa6:	f842 1f04 	str.w	r1, [r2, #4]!
 800eaaa:	429f      	cmp	r7, r3
 800eaac:	d2f9      	bcs.n	800eaa2 <__hexnan+0xaa>
 800eaae:	1b3b      	subs	r3, r7, r4
 800eab0:	f023 0303 	bic.w	r3, r3, #3
 800eab4:	3304      	adds	r3, #4
 800eab6:	3401      	adds	r4, #1
 800eab8:	3e03      	subs	r6, #3
 800eaba:	42b4      	cmp	r4, r6
 800eabc:	bf88      	it	hi
 800eabe:	2304      	movhi	r3, #4
 800eac0:	4443      	add	r3, r8
 800eac2:	2200      	movs	r2, #0
 800eac4:	f843 2b04 	str.w	r2, [r3], #4
 800eac8:	429f      	cmp	r7, r3
 800eaca:	d2fb      	bcs.n	800eac4 <__hexnan+0xcc>
 800eacc:	683b      	ldr	r3, [r7, #0]
 800eace:	b91b      	cbnz	r3, 800ead8 <__hexnan+0xe0>
 800ead0:	4547      	cmp	r7, r8
 800ead2:	d128      	bne.n	800eb26 <__hexnan+0x12e>
 800ead4:	2301      	movs	r3, #1
 800ead6:	603b      	str	r3, [r7, #0]
 800ead8:	2005      	movs	r0, #5
 800eada:	b007      	add	sp, #28
 800eadc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eae0:	3501      	adds	r5, #1
 800eae2:	2d08      	cmp	r5, #8
 800eae4:	f10b 0b01 	add.w	fp, fp, #1
 800eae8:	dd06      	ble.n	800eaf8 <__hexnan+0x100>
 800eaea:	4544      	cmp	r4, r8
 800eaec:	d9c1      	bls.n	800ea72 <__hexnan+0x7a>
 800eaee:	2300      	movs	r3, #0
 800eaf0:	f844 3c04 	str.w	r3, [r4, #-4]
 800eaf4:	2501      	movs	r5, #1
 800eaf6:	3c04      	subs	r4, #4
 800eaf8:	6822      	ldr	r2, [r4, #0]
 800eafa:	f000 000f 	and.w	r0, r0, #15
 800eafe:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800eb02:	6020      	str	r0, [r4, #0]
 800eb04:	e7b5      	b.n	800ea72 <__hexnan+0x7a>
 800eb06:	2508      	movs	r5, #8
 800eb08:	e7b3      	b.n	800ea72 <__hexnan+0x7a>
 800eb0a:	9b01      	ldr	r3, [sp, #4]
 800eb0c:	2b00      	cmp	r3, #0
 800eb0e:	d0dd      	beq.n	800eacc <__hexnan+0xd4>
 800eb10:	f1c3 0320 	rsb	r3, r3, #32
 800eb14:	f04f 32ff 	mov.w	r2, #4294967295
 800eb18:	40da      	lsrs	r2, r3
 800eb1a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800eb1e:	4013      	ands	r3, r2
 800eb20:	f846 3c04 	str.w	r3, [r6, #-4]
 800eb24:	e7d2      	b.n	800eacc <__hexnan+0xd4>
 800eb26:	3f04      	subs	r7, #4
 800eb28:	e7d0      	b.n	800eacc <__hexnan+0xd4>
 800eb2a:	2004      	movs	r0, #4
 800eb2c:	e7d5      	b.n	800eada <__hexnan+0xe2>
	...

0800eb30 <malloc>:
 800eb30:	4b02      	ldr	r3, [pc, #8]	@ (800eb3c <malloc+0xc>)
 800eb32:	4601      	mov	r1, r0
 800eb34:	6818      	ldr	r0, [r3, #0]
 800eb36:	f000 b825 	b.w	800eb84 <_malloc_r>
 800eb3a:	bf00      	nop
 800eb3c:	20000188 	.word	0x20000188

0800eb40 <sbrk_aligned>:
 800eb40:	b570      	push	{r4, r5, r6, lr}
 800eb42:	4e0f      	ldr	r6, [pc, #60]	@ (800eb80 <sbrk_aligned+0x40>)
 800eb44:	460c      	mov	r4, r1
 800eb46:	6831      	ldr	r1, [r6, #0]
 800eb48:	4605      	mov	r5, r0
 800eb4a:	b911      	cbnz	r1, 800eb52 <sbrk_aligned+0x12>
 800eb4c:	f000 ff8c 	bl	800fa68 <_sbrk_r>
 800eb50:	6030      	str	r0, [r6, #0]
 800eb52:	4621      	mov	r1, r4
 800eb54:	4628      	mov	r0, r5
 800eb56:	f000 ff87 	bl	800fa68 <_sbrk_r>
 800eb5a:	1c43      	adds	r3, r0, #1
 800eb5c:	d103      	bne.n	800eb66 <sbrk_aligned+0x26>
 800eb5e:	f04f 34ff 	mov.w	r4, #4294967295
 800eb62:	4620      	mov	r0, r4
 800eb64:	bd70      	pop	{r4, r5, r6, pc}
 800eb66:	1cc4      	adds	r4, r0, #3
 800eb68:	f024 0403 	bic.w	r4, r4, #3
 800eb6c:	42a0      	cmp	r0, r4
 800eb6e:	d0f8      	beq.n	800eb62 <sbrk_aligned+0x22>
 800eb70:	1a21      	subs	r1, r4, r0
 800eb72:	4628      	mov	r0, r5
 800eb74:	f000 ff78 	bl	800fa68 <_sbrk_r>
 800eb78:	3001      	adds	r0, #1
 800eb7a:	d1f2      	bne.n	800eb62 <sbrk_aligned+0x22>
 800eb7c:	e7ef      	b.n	800eb5e <sbrk_aligned+0x1e>
 800eb7e:	bf00      	nop
 800eb80:	20001f3c 	.word	0x20001f3c

0800eb84 <_malloc_r>:
 800eb84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800eb88:	1ccd      	adds	r5, r1, #3
 800eb8a:	f025 0503 	bic.w	r5, r5, #3
 800eb8e:	3508      	adds	r5, #8
 800eb90:	2d0c      	cmp	r5, #12
 800eb92:	bf38      	it	cc
 800eb94:	250c      	movcc	r5, #12
 800eb96:	2d00      	cmp	r5, #0
 800eb98:	4606      	mov	r6, r0
 800eb9a:	db01      	blt.n	800eba0 <_malloc_r+0x1c>
 800eb9c:	42a9      	cmp	r1, r5
 800eb9e:	d904      	bls.n	800ebaa <_malloc_r+0x26>
 800eba0:	230c      	movs	r3, #12
 800eba2:	6033      	str	r3, [r6, #0]
 800eba4:	2000      	movs	r0, #0
 800eba6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ebaa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800ec80 <_malloc_r+0xfc>
 800ebae:	f000 f87b 	bl	800eca8 <__malloc_lock>
 800ebb2:	f8d8 3000 	ldr.w	r3, [r8]
 800ebb6:	461c      	mov	r4, r3
 800ebb8:	bb44      	cbnz	r4, 800ec0c <_malloc_r+0x88>
 800ebba:	4629      	mov	r1, r5
 800ebbc:	4630      	mov	r0, r6
 800ebbe:	f7ff ffbf 	bl	800eb40 <sbrk_aligned>
 800ebc2:	1c43      	adds	r3, r0, #1
 800ebc4:	4604      	mov	r4, r0
 800ebc6:	d158      	bne.n	800ec7a <_malloc_r+0xf6>
 800ebc8:	f8d8 4000 	ldr.w	r4, [r8]
 800ebcc:	4627      	mov	r7, r4
 800ebce:	2f00      	cmp	r7, #0
 800ebd0:	d143      	bne.n	800ec5a <_malloc_r+0xd6>
 800ebd2:	2c00      	cmp	r4, #0
 800ebd4:	d04b      	beq.n	800ec6e <_malloc_r+0xea>
 800ebd6:	6823      	ldr	r3, [r4, #0]
 800ebd8:	4639      	mov	r1, r7
 800ebda:	4630      	mov	r0, r6
 800ebdc:	eb04 0903 	add.w	r9, r4, r3
 800ebe0:	f000 ff42 	bl	800fa68 <_sbrk_r>
 800ebe4:	4581      	cmp	r9, r0
 800ebe6:	d142      	bne.n	800ec6e <_malloc_r+0xea>
 800ebe8:	6821      	ldr	r1, [r4, #0]
 800ebea:	1a6d      	subs	r5, r5, r1
 800ebec:	4629      	mov	r1, r5
 800ebee:	4630      	mov	r0, r6
 800ebf0:	f7ff ffa6 	bl	800eb40 <sbrk_aligned>
 800ebf4:	3001      	adds	r0, #1
 800ebf6:	d03a      	beq.n	800ec6e <_malloc_r+0xea>
 800ebf8:	6823      	ldr	r3, [r4, #0]
 800ebfa:	442b      	add	r3, r5
 800ebfc:	6023      	str	r3, [r4, #0]
 800ebfe:	f8d8 3000 	ldr.w	r3, [r8]
 800ec02:	685a      	ldr	r2, [r3, #4]
 800ec04:	bb62      	cbnz	r2, 800ec60 <_malloc_r+0xdc>
 800ec06:	f8c8 7000 	str.w	r7, [r8]
 800ec0a:	e00f      	b.n	800ec2c <_malloc_r+0xa8>
 800ec0c:	6822      	ldr	r2, [r4, #0]
 800ec0e:	1b52      	subs	r2, r2, r5
 800ec10:	d420      	bmi.n	800ec54 <_malloc_r+0xd0>
 800ec12:	2a0b      	cmp	r2, #11
 800ec14:	d917      	bls.n	800ec46 <_malloc_r+0xc2>
 800ec16:	1961      	adds	r1, r4, r5
 800ec18:	42a3      	cmp	r3, r4
 800ec1a:	6025      	str	r5, [r4, #0]
 800ec1c:	bf18      	it	ne
 800ec1e:	6059      	strne	r1, [r3, #4]
 800ec20:	6863      	ldr	r3, [r4, #4]
 800ec22:	bf08      	it	eq
 800ec24:	f8c8 1000 	streq.w	r1, [r8]
 800ec28:	5162      	str	r2, [r4, r5]
 800ec2a:	604b      	str	r3, [r1, #4]
 800ec2c:	4630      	mov	r0, r6
 800ec2e:	f000 f841 	bl	800ecb4 <__malloc_unlock>
 800ec32:	f104 000b 	add.w	r0, r4, #11
 800ec36:	1d23      	adds	r3, r4, #4
 800ec38:	f020 0007 	bic.w	r0, r0, #7
 800ec3c:	1ac2      	subs	r2, r0, r3
 800ec3e:	bf1c      	itt	ne
 800ec40:	1a1b      	subne	r3, r3, r0
 800ec42:	50a3      	strne	r3, [r4, r2]
 800ec44:	e7af      	b.n	800eba6 <_malloc_r+0x22>
 800ec46:	6862      	ldr	r2, [r4, #4]
 800ec48:	42a3      	cmp	r3, r4
 800ec4a:	bf0c      	ite	eq
 800ec4c:	f8c8 2000 	streq.w	r2, [r8]
 800ec50:	605a      	strne	r2, [r3, #4]
 800ec52:	e7eb      	b.n	800ec2c <_malloc_r+0xa8>
 800ec54:	4623      	mov	r3, r4
 800ec56:	6864      	ldr	r4, [r4, #4]
 800ec58:	e7ae      	b.n	800ebb8 <_malloc_r+0x34>
 800ec5a:	463c      	mov	r4, r7
 800ec5c:	687f      	ldr	r7, [r7, #4]
 800ec5e:	e7b6      	b.n	800ebce <_malloc_r+0x4a>
 800ec60:	461a      	mov	r2, r3
 800ec62:	685b      	ldr	r3, [r3, #4]
 800ec64:	42a3      	cmp	r3, r4
 800ec66:	d1fb      	bne.n	800ec60 <_malloc_r+0xdc>
 800ec68:	2300      	movs	r3, #0
 800ec6a:	6053      	str	r3, [r2, #4]
 800ec6c:	e7de      	b.n	800ec2c <_malloc_r+0xa8>
 800ec6e:	230c      	movs	r3, #12
 800ec70:	6033      	str	r3, [r6, #0]
 800ec72:	4630      	mov	r0, r6
 800ec74:	f000 f81e 	bl	800ecb4 <__malloc_unlock>
 800ec78:	e794      	b.n	800eba4 <_malloc_r+0x20>
 800ec7a:	6005      	str	r5, [r0, #0]
 800ec7c:	e7d6      	b.n	800ec2c <_malloc_r+0xa8>
 800ec7e:	bf00      	nop
 800ec80:	20001f40 	.word	0x20001f40

0800ec84 <__ascii_mbtowc>:
 800ec84:	b082      	sub	sp, #8
 800ec86:	b901      	cbnz	r1, 800ec8a <__ascii_mbtowc+0x6>
 800ec88:	a901      	add	r1, sp, #4
 800ec8a:	b142      	cbz	r2, 800ec9e <__ascii_mbtowc+0x1a>
 800ec8c:	b14b      	cbz	r3, 800eca2 <__ascii_mbtowc+0x1e>
 800ec8e:	7813      	ldrb	r3, [r2, #0]
 800ec90:	600b      	str	r3, [r1, #0]
 800ec92:	7812      	ldrb	r2, [r2, #0]
 800ec94:	1e10      	subs	r0, r2, #0
 800ec96:	bf18      	it	ne
 800ec98:	2001      	movne	r0, #1
 800ec9a:	b002      	add	sp, #8
 800ec9c:	4770      	bx	lr
 800ec9e:	4610      	mov	r0, r2
 800eca0:	e7fb      	b.n	800ec9a <__ascii_mbtowc+0x16>
 800eca2:	f06f 0001 	mvn.w	r0, #1
 800eca6:	e7f8      	b.n	800ec9a <__ascii_mbtowc+0x16>

0800eca8 <__malloc_lock>:
 800eca8:	4801      	ldr	r0, [pc, #4]	@ (800ecb0 <__malloc_lock+0x8>)
 800ecaa:	f7fe bd44 	b.w	800d736 <__retarget_lock_acquire_recursive>
 800ecae:	bf00      	nop
 800ecb0:	20001f38 	.word	0x20001f38

0800ecb4 <__malloc_unlock>:
 800ecb4:	4801      	ldr	r0, [pc, #4]	@ (800ecbc <__malloc_unlock+0x8>)
 800ecb6:	f7fe bd3f 	b.w	800d738 <__retarget_lock_release_recursive>
 800ecba:	bf00      	nop
 800ecbc:	20001f38 	.word	0x20001f38

0800ecc0 <_Balloc>:
 800ecc0:	b570      	push	{r4, r5, r6, lr}
 800ecc2:	69c6      	ldr	r6, [r0, #28]
 800ecc4:	4604      	mov	r4, r0
 800ecc6:	460d      	mov	r5, r1
 800ecc8:	b976      	cbnz	r6, 800ece8 <_Balloc+0x28>
 800ecca:	2010      	movs	r0, #16
 800eccc:	f7ff ff30 	bl	800eb30 <malloc>
 800ecd0:	4602      	mov	r2, r0
 800ecd2:	61e0      	str	r0, [r4, #28]
 800ecd4:	b920      	cbnz	r0, 800ece0 <_Balloc+0x20>
 800ecd6:	4b18      	ldr	r3, [pc, #96]	@ (800ed38 <_Balloc+0x78>)
 800ecd8:	4818      	ldr	r0, [pc, #96]	@ (800ed3c <_Balloc+0x7c>)
 800ecda:	216b      	movs	r1, #107	@ 0x6b
 800ecdc:	f000 fed4 	bl	800fa88 <__assert_func>
 800ece0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ece4:	6006      	str	r6, [r0, #0]
 800ece6:	60c6      	str	r6, [r0, #12]
 800ece8:	69e6      	ldr	r6, [r4, #28]
 800ecea:	68f3      	ldr	r3, [r6, #12]
 800ecec:	b183      	cbz	r3, 800ed10 <_Balloc+0x50>
 800ecee:	69e3      	ldr	r3, [r4, #28]
 800ecf0:	68db      	ldr	r3, [r3, #12]
 800ecf2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ecf6:	b9b8      	cbnz	r0, 800ed28 <_Balloc+0x68>
 800ecf8:	2101      	movs	r1, #1
 800ecfa:	fa01 f605 	lsl.w	r6, r1, r5
 800ecfe:	1d72      	adds	r2, r6, #5
 800ed00:	0092      	lsls	r2, r2, #2
 800ed02:	4620      	mov	r0, r4
 800ed04:	f000 fede 	bl	800fac4 <_calloc_r>
 800ed08:	b160      	cbz	r0, 800ed24 <_Balloc+0x64>
 800ed0a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ed0e:	e00e      	b.n	800ed2e <_Balloc+0x6e>
 800ed10:	2221      	movs	r2, #33	@ 0x21
 800ed12:	2104      	movs	r1, #4
 800ed14:	4620      	mov	r0, r4
 800ed16:	f000 fed5 	bl	800fac4 <_calloc_r>
 800ed1a:	69e3      	ldr	r3, [r4, #28]
 800ed1c:	60f0      	str	r0, [r6, #12]
 800ed1e:	68db      	ldr	r3, [r3, #12]
 800ed20:	2b00      	cmp	r3, #0
 800ed22:	d1e4      	bne.n	800ecee <_Balloc+0x2e>
 800ed24:	2000      	movs	r0, #0
 800ed26:	bd70      	pop	{r4, r5, r6, pc}
 800ed28:	6802      	ldr	r2, [r0, #0]
 800ed2a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ed2e:	2300      	movs	r3, #0
 800ed30:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ed34:	e7f7      	b.n	800ed26 <_Balloc+0x66>
 800ed36:	bf00      	nop
 800ed38:	08010603 	.word	0x08010603
 800ed3c:	080106e3 	.word	0x080106e3

0800ed40 <_Bfree>:
 800ed40:	b570      	push	{r4, r5, r6, lr}
 800ed42:	69c6      	ldr	r6, [r0, #28]
 800ed44:	4605      	mov	r5, r0
 800ed46:	460c      	mov	r4, r1
 800ed48:	b976      	cbnz	r6, 800ed68 <_Bfree+0x28>
 800ed4a:	2010      	movs	r0, #16
 800ed4c:	f7ff fef0 	bl	800eb30 <malloc>
 800ed50:	4602      	mov	r2, r0
 800ed52:	61e8      	str	r0, [r5, #28]
 800ed54:	b920      	cbnz	r0, 800ed60 <_Bfree+0x20>
 800ed56:	4b09      	ldr	r3, [pc, #36]	@ (800ed7c <_Bfree+0x3c>)
 800ed58:	4809      	ldr	r0, [pc, #36]	@ (800ed80 <_Bfree+0x40>)
 800ed5a:	218f      	movs	r1, #143	@ 0x8f
 800ed5c:	f000 fe94 	bl	800fa88 <__assert_func>
 800ed60:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ed64:	6006      	str	r6, [r0, #0]
 800ed66:	60c6      	str	r6, [r0, #12]
 800ed68:	b13c      	cbz	r4, 800ed7a <_Bfree+0x3a>
 800ed6a:	69eb      	ldr	r3, [r5, #28]
 800ed6c:	6862      	ldr	r2, [r4, #4]
 800ed6e:	68db      	ldr	r3, [r3, #12]
 800ed70:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ed74:	6021      	str	r1, [r4, #0]
 800ed76:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ed7a:	bd70      	pop	{r4, r5, r6, pc}
 800ed7c:	08010603 	.word	0x08010603
 800ed80:	080106e3 	.word	0x080106e3

0800ed84 <__multadd>:
 800ed84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ed88:	690d      	ldr	r5, [r1, #16]
 800ed8a:	4607      	mov	r7, r0
 800ed8c:	460c      	mov	r4, r1
 800ed8e:	461e      	mov	r6, r3
 800ed90:	f101 0c14 	add.w	ip, r1, #20
 800ed94:	2000      	movs	r0, #0
 800ed96:	f8dc 3000 	ldr.w	r3, [ip]
 800ed9a:	b299      	uxth	r1, r3
 800ed9c:	fb02 6101 	mla	r1, r2, r1, r6
 800eda0:	0c1e      	lsrs	r6, r3, #16
 800eda2:	0c0b      	lsrs	r3, r1, #16
 800eda4:	fb02 3306 	mla	r3, r2, r6, r3
 800eda8:	b289      	uxth	r1, r1
 800edaa:	3001      	adds	r0, #1
 800edac:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800edb0:	4285      	cmp	r5, r0
 800edb2:	f84c 1b04 	str.w	r1, [ip], #4
 800edb6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800edba:	dcec      	bgt.n	800ed96 <__multadd+0x12>
 800edbc:	b30e      	cbz	r6, 800ee02 <__multadd+0x7e>
 800edbe:	68a3      	ldr	r3, [r4, #8]
 800edc0:	42ab      	cmp	r3, r5
 800edc2:	dc19      	bgt.n	800edf8 <__multadd+0x74>
 800edc4:	6861      	ldr	r1, [r4, #4]
 800edc6:	4638      	mov	r0, r7
 800edc8:	3101      	adds	r1, #1
 800edca:	f7ff ff79 	bl	800ecc0 <_Balloc>
 800edce:	4680      	mov	r8, r0
 800edd0:	b928      	cbnz	r0, 800edde <__multadd+0x5a>
 800edd2:	4602      	mov	r2, r0
 800edd4:	4b0c      	ldr	r3, [pc, #48]	@ (800ee08 <__multadd+0x84>)
 800edd6:	480d      	ldr	r0, [pc, #52]	@ (800ee0c <__multadd+0x88>)
 800edd8:	21ba      	movs	r1, #186	@ 0xba
 800edda:	f000 fe55 	bl	800fa88 <__assert_func>
 800edde:	6922      	ldr	r2, [r4, #16]
 800ede0:	3202      	adds	r2, #2
 800ede2:	f104 010c 	add.w	r1, r4, #12
 800ede6:	0092      	lsls	r2, r2, #2
 800ede8:	300c      	adds	r0, #12
 800edea:	f7fe fcae 	bl	800d74a <memcpy>
 800edee:	4621      	mov	r1, r4
 800edf0:	4638      	mov	r0, r7
 800edf2:	f7ff ffa5 	bl	800ed40 <_Bfree>
 800edf6:	4644      	mov	r4, r8
 800edf8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800edfc:	3501      	adds	r5, #1
 800edfe:	615e      	str	r6, [r3, #20]
 800ee00:	6125      	str	r5, [r4, #16]
 800ee02:	4620      	mov	r0, r4
 800ee04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ee08:	08010672 	.word	0x08010672
 800ee0c:	080106e3 	.word	0x080106e3

0800ee10 <__s2b>:
 800ee10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ee14:	460c      	mov	r4, r1
 800ee16:	4615      	mov	r5, r2
 800ee18:	461f      	mov	r7, r3
 800ee1a:	2209      	movs	r2, #9
 800ee1c:	3308      	adds	r3, #8
 800ee1e:	4606      	mov	r6, r0
 800ee20:	fb93 f3f2 	sdiv	r3, r3, r2
 800ee24:	2100      	movs	r1, #0
 800ee26:	2201      	movs	r2, #1
 800ee28:	429a      	cmp	r2, r3
 800ee2a:	db09      	blt.n	800ee40 <__s2b+0x30>
 800ee2c:	4630      	mov	r0, r6
 800ee2e:	f7ff ff47 	bl	800ecc0 <_Balloc>
 800ee32:	b940      	cbnz	r0, 800ee46 <__s2b+0x36>
 800ee34:	4602      	mov	r2, r0
 800ee36:	4b19      	ldr	r3, [pc, #100]	@ (800ee9c <__s2b+0x8c>)
 800ee38:	4819      	ldr	r0, [pc, #100]	@ (800eea0 <__s2b+0x90>)
 800ee3a:	21d3      	movs	r1, #211	@ 0xd3
 800ee3c:	f000 fe24 	bl	800fa88 <__assert_func>
 800ee40:	0052      	lsls	r2, r2, #1
 800ee42:	3101      	adds	r1, #1
 800ee44:	e7f0      	b.n	800ee28 <__s2b+0x18>
 800ee46:	9b08      	ldr	r3, [sp, #32]
 800ee48:	6143      	str	r3, [r0, #20]
 800ee4a:	2d09      	cmp	r5, #9
 800ee4c:	f04f 0301 	mov.w	r3, #1
 800ee50:	6103      	str	r3, [r0, #16]
 800ee52:	dd16      	ble.n	800ee82 <__s2b+0x72>
 800ee54:	f104 0909 	add.w	r9, r4, #9
 800ee58:	46c8      	mov	r8, r9
 800ee5a:	442c      	add	r4, r5
 800ee5c:	f818 3b01 	ldrb.w	r3, [r8], #1
 800ee60:	4601      	mov	r1, r0
 800ee62:	3b30      	subs	r3, #48	@ 0x30
 800ee64:	220a      	movs	r2, #10
 800ee66:	4630      	mov	r0, r6
 800ee68:	f7ff ff8c 	bl	800ed84 <__multadd>
 800ee6c:	45a0      	cmp	r8, r4
 800ee6e:	d1f5      	bne.n	800ee5c <__s2b+0x4c>
 800ee70:	f1a5 0408 	sub.w	r4, r5, #8
 800ee74:	444c      	add	r4, r9
 800ee76:	1b2d      	subs	r5, r5, r4
 800ee78:	1963      	adds	r3, r4, r5
 800ee7a:	42bb      	cmp	r3, r7
 800ee7c:	db04      	blt.n	800ee88 <__s2b+0x78>
 800ee7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ee82:	340a      	adds	r4, #10
 800ee84:	2509      	movs	r5, #9
 800ee86:	e7f6      	b.n	800ee76 <__s2b+0x66>
 800ee88:	f814 3b01 	ldrb.w	r3, [r4], #1
 800ee8c:	4601      	mov	r1, r0
 800ee8e:	3b30      	subs	r3, #48	@ 0x30
 800ee90:	220a      	movs	r2, #10
 800ee92:	4630      	mov	r0, r6
 800ee94:	f7ff ff76 	bl	800ed84 <__multadd>
 800ee98:	e7ee      	b.n	800ee78 <__s2b+0x68>
 800ee9a:	bf00      	nop
 800ee9c:	08010672 	.word	0x08010672
 800eea0:	080106e3 	.word	0x080106e3

0800eea4 <__hi0bits>:
 800eea4:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800eea8:	4603      	mov	r3, r0
 800eeaa:	bf36      	itet	cc
 800eeac:	0403      	lslcc	r3, r0, #16
 800eeae:	2000      	movcs	r0, #0
 800eeb0:	2010      	movcc	r0, #16
 800eeb2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800eeb6:	bf3c      	itt	cc
 800eeb8:	021b      	lslcc	r3, r3, #8
 800eeba:	3008      	addcc	r0, #8
 800eebc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800eec0:	bf3c      	itt	cc
 800eec2:	011b      	lslcc	r3, r3, #4
 800eec4:	3004      	addcc	r0, #4
 800eec6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800eeca:	bf3c      	itt	cc
 800eecc:	009b      	lslcc	r3, r3, #2
 800eece:	3002      	addcc	r0, #2
 800eed0:	2b00      	cmp	r3, #0
 800eed2:	db05      	blt.n	800eee0 <__hi0bits+0x3c>
 800eed4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800eed8:	f100 0001 	add.w	r0, r0, #1
 800eedc:	bf08      	it	eq
 800eede:	2020      	moveq	r0, #32
 800eee0:	4770      	bx	lr

0800eee2 <__lo0bits>:
 800eee2:	6803      	ldr	r3, [r0, #0]
 800eee4:	4602      	mov	r2, r0
 800eee6:	f013 0007 	ands.w	r0, r3, #7
 800eeea:	d00b      	beq.n	800ef04 <__lo0bits+0x22>
 800eeec:	07d9      	lsls	r1, r3, #31
 800eeee:	d421      	bmi.n	800ef34 <__lo0bits+0x52>
 800eef0:	0798      	lsls	r0, r3, #30
 800eef2:	bf49      	itett	mi
 800eef4:	085b      	lsrmi	r3, r3, #1
 800eef6:	089b      	lsrpl	r3, r3, #2
 800eef8:	2001      	movmi	r0, #1
 800eefa:	6013      	strmi	r3, [r2, #0]
 800eefc:	bf5c      	itt	pl
 800eefe:	6013      	strpl	r3, [r2, #0]
 800ef00:	2002      	movpl	r0, #2
 800ef02:	4770      	bx	lr
 800ef04:	b299      	uxth	r1, r3
 800ef06:	b909      	cbnz	r1, 800ef0c <__lo0bits+0x2a>
 800ef08:	0c1b      	lsrs	r3, r3, #16
 800ef0a:	2010      	movs	r0, #16
 800ef0c:	b2d9      	uxtb	r1, r3
 800ef0e:	b909      	cbnz	r1, 800ef14 <__lo0bits+0x32>
 800ef10:	3008      	adds	r0, #8
 800ef12:	0a1b      	lsrs	r3, r3, #8
 800ef14:	0719      	lsls	r1, r3, #28
 800ef16:	bf04      	itt	eq
 800ef18:	091b      	lsreq	r3, r3, #4
 800ef1a:	3004      	addeq	r0, #4
 800ef1c:	0799      	lsls	r1, r3, #30
 800ef1e:	bf04      	itt	eq
 800ef20:	089b      	lsreq	r3, r3, #2
 800ef22:	3002      	addeq	r0, #2
 800ef24:	07d9      	lsls	r1, r3, #31
 800ef26:	d403      	bmi.n	800ef30 <__lo0bits+0x4e>
 800ef28:	085b      	lsrs	r3, r3, #1
 800ef2a:	f100 0001 	add.w	r0, r0, #1
 800ef2e:	d003      	beq.n	800ef38 <__lo0bits+0x56>
 800ef30:	6013      	str	r3, [r2, #0]
 800ef32:	4770      	bx	lr
 800ef34:	2000      	movs	r0, #0
 800ef36:	4770      	bx	lr
 800ef38:	2020      	movs	r0, #32
 800ef3a:	4770      	bx	lr

0800ef3c <__i2b>:
 800ef3c:	b510      	push	{r4, lr}
 800ef3e:	460c      	mov	r4, r1
 800ef40:	2101      	movs	r1, #1
 800ef42:	f7ff febd 	bl	800ecc0 <_Balloc>
 800ef46:	4602      	mov	r2, r0
 800ef48:	b928      	cbnz	r0, 800ef56 <__i2b+0x1a>
 800ef4a:	4b05      	ldr	r3, [pc, #20]	@ (800ef60 <__i2b+0x24>)
 800ef4c:	4805      	ldr	r0, [pc, #20]	@ (800ef64 <__i2b+0x28>)
 800ef4e:	f240 1145 	movw	r1, #325	@ 0x145
 800ef52:	f000 fd99 	bl	800fa88 <__assert_func>
 800ef56:	2301      	movs	r3, #1
 800ef58:	6144      	str	r4, [r0, #20]
 800ef5a:	6103      	str	r3, [r0, #16]
 800ef5c:	bd10      	pop	{r4, pc}
 800ef5e:	bf00      	nop
 800ef60:	08010672 	.word	0x08010672
 800ef64:	080106e3 	.word	0x080106e3

0800ef68 <__multiply>:
 800ef68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ef6c:	4617      	mov	r7, r2
 800ef6e:	690a      	ldr	r2, [r1, #16]
 800ef70:	693b      	ldr	r3, [r7, #16]
 800ef72:	429a      	cmp	r2, r3
 800ef74:	bfa8      	it	ge
 800ef76:	463b      	movge	r3, r7
 800ef78:	4689      	mov	r9, r1
 800ef7a:	bfa4      	itt	ge
 800ef7c:	460f      	movge	r7, r1
 800ef7e:	4699      	movge	r9, r3
 800ef80:	693d      	ldr	r5, [r7, #16]
 800ef82:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800ef86:	68bb      	ldr	r3, [r7, #8]
 800ef88:	6879      	ldr	r1, [r7, #4]
 800ef8a:	eb05 060a 	add.w	r6, r5, sl
 800ef8e:	42b3      	cmp	r3, r6
 800ef90:	b085      	sub	sp, #20
 800ef92:	bfb8      	it	lt
 800ef94:	3101      	addlt	r1, #1
 800ef96:	f7ff fe93 	bl	800ecc0 <_Balloc>
 800ef9a:	b930      	cbnz	r0, 800efaa <__multiply+0x42>
 800ef9c:	4602      	mov	r2, r0
 800ef9e:	4b41      	ldr	r3, [pc, #260]	@ (800f0a4 <__multiply+0x13c>)
 800efa0:	4841      	ldr	r0, [pc, #260]	@ (800f0a8 <__multiply+0x140>)
 800efa2:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800efa6:	f000 fd6f 	bl	800fa88 <__assert_func>
 800efaa:	f100 0414 	add.w	r4, r0, #20
 800efae:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800efb2:	4623      	mov	r3, r4
 800efb4:	2200      	movs	r2, #0
 800efb6:	4573      	cmp	r3, lr
 800efb8:	d320      	bcc.n	800effc <__multiply+0x94>
 800efba:	f107 0814 	add.w	r8, r7, #20
 800efbe:	f109 0114 	add.w	r1, r9, #20
 800efc2:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800efc6:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800efca:	9302      	str	r3, [sp, #8]
 800efcc:	1beb      	subs	r3, r5, r7
 800efce:	3b15      	subs	r3, #21
 800efd0:	f023 0303 	bic.w	r3, r3, #3
 800efd4:	3304      	adds	r3, #4
 800efd6:	3715      	adds	r7, #21
 800efd8:	42bd      	cmp	r5, r7
 800efda:	bf38      	it	cc
 800efdc:	2304      	movcc	r3, #4
 800efde:	9301      	str	r3, [sp, #4]
 800efe0:	9b02      	ldr	r3, [sp, #8]
 800efe2:	9103      	str	r1, [sp, #12]
 800efe4:	428b      	cmp	r3, r1
 800efe6:	d80c      	bhi.n	800f002 <__multiply+0x9a>
 800efe8:	2e00      	cmp	r6, #0
 800efea:	dd03      	ble.n	800eff4 <__multiply+0x8c>
 800efec:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800eff0:	2b00      	cmp	r3, #0
 800eff2:	d055      	beq.n	800f0a0 <__multiply+0x138>
 800eff4:	6106      	str	r6, [r0, #16]
 800eff6:	b005      	add	sp, #20
 800eff8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800effc:	f843 2b04 	str.w	r2, [r3], #4
 800f000:	e7d9      	b.n	800efb6 <__multiply+0x4e>
 800f002:	f8b1 a000 	ldrh.w	sl, [r1]
 800f006:	f1ba 0f00 	cmp.w	sl, #0
 800f00a:	d01f      	beq.n	800f04c <__multiply+0xe4>
 800f00c:	46c4      	mov	ip, r8
 800f00e:	46a1      	mov	r9, r4
 800f010:	2700      	movs	r7, #0
 800f012:	f85c 2b04 	ldr.w	r2, [ip], #4
 800f016:	f8d9 3000 	ldr.w	r3, [r9]
 800f01a:	fa1f fb82 	uxth.w	fp, r2
 800f01e:	b29b      	uxth	r3, r3
 800f020:	fb0a 330b 	mla	r3, sl, fp, r3
 800f024:	443b      	add	r3, r7
 800f026:	f8d9 7000 	ldr.w	r7, [r9]
 800f02a:	0c12      	lsrs	r2, r2, #16
 800f02c:	0c3f      	lsrs	r7, r7, #16
 800f02e:	fb0a 7202 	mla	r2, sl, r2, r7
 800f032:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800f036:	b29b      	uxth	r3, r3
 800f038:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f03c:	4565      	cmp	r5, ip
 800f03e:	f849 3b04 	str.w	r3, [r9], #4
 800f042:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800f046:	d8e4      	bhi.n	800f012 <__multiply+0xaa>
 800f048:	9b01      	ldr	r3, [sp, #4]
 800f04a:	50e7      	str	r7, [r4, r3]
 800f04c:	9b03      	ldr	r3, [sp, #12]
 800f04e:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800f052:	3104      	adds	r1, #4
 800f054:	f1b9 0f00 	cmp.w	r9, #0
 800f058:	d020      	beq.n	800f09c <__multiply+0x134>
 800f05a:	6823      	ldr	r3, [r4, #0]
 800f05c:	4647      	mov	r7, r8
 800f05e:	46a4      	mov	ip, r4
 800f060:	f04f 0a00 	mov.w	sl, #0
 800f064:	f8b7 b000 	ldrh.w	fp, [r7]
 800f068:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800f06c:	fb09 220b 	mla	r2, r9, fp, r2
 800f070:	4452      	add	r2, sl
 800f072:	b29b      	uxth	r3, r3
 800f074:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f078:	f84c 3b04 	str.w	r3, [ip], #4
 800f07c:	f857 3b04 	ldr.w	r3, [r7], #4
 800f080:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800f084:	f8bc 3000 	ldrh.w	r3, [ip]
 800f088:	fb09 330a 	mla	r3, r9, sl, r3
 800f08c:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800f090:	42bd      	cmp	r5, r7
 800f092:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800f096:	d8e5      	bhi.n	800f064 <__multiply+0xfc>
 800f098:	9a01      	ldr	r2, [sp, #4]
 800f09a:	50a3      	str	r3, [r4, r2]
 800f09c:	3404      	adds	r4, #4
 800f09e:	e79f      	b.n	800efe0 <__multiply+0x78>
 800f0a0:	3e01      	subs	r6, #1
 800f0a2:	e7a1      	b.n	800efe8 <__multiply+0x80>
 800f0a4:	08010672 	.word	0x08010672
 800f0a8:	080106e3 	.word	0x080106e3

0800f0ac <__pow5mult>:
 800f0ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f0b0:	4615      	mov	r5, r2
 800f0b2:	f012 0203 	ands.w	r2, r2, #3
 800f0b6:	4607      	mov	r7, r0
 800f0b8:	460e      	mov	r6, r1
 800f0ba:	d007      	beq.n	800f0cc <__pow5mult+0x20>
 800f0bc:	4c25      	ldr	r4, [pc, #148]	@ (800f154 <__pow5mult+0xa8>)
 800f0be:	3a01      	subs	r2, #1
 800f0c0:	2300      	movs	r3, #0
 800f0c2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800f0c6:	f7ff fe5d 	bl	800ed84 <__multadd>
 800f0ca:	4606      	mov	r6, r0
 800f0cc:	10ad      	asrs	r5, r5, #2
 800f0ce:	d03d      	beq.n	800f14c <__pow5mult+0xa0>
 800f0d0:	69fc      	ldr	r4, [r7, #28]
 800f0d2:	b97c      	cbnz	r4, 800f0f4 <__pow5mult+0x48>
 800f0d4:	2010      	movs	r0, #16
 800f0d6:	f7ff fd2b 	bl	800eb30 <malloc>
 800f0da:	4602      	mov	r2, r0
 800f0dc:	61f8      	str	r0, [r7, #28]
 800f0de:	b928      	cbnz	r0, 800f0ec <__pow5mult+0x40>
 800f0e0:	4b1d      	ldr	r3, [pc, #116]	@ (800f158 <__pow5mult+0xac>)
 800f0e2:	481e      	ldr	r0, [pc, #120]	@ (800f15c <__pow5mult+0xb0>)
 800f0e4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800f0e8:	f000 fcce 	bl	800fa88 <__assert_func>
 800f0ec:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800f0f0:	6004      	str	r4, [r0, #0]
 800f0f2:	60c4      	str	r4, [r0, #12]
 800f0f4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800f0f8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800f0fc:	b94c      	cbnz	r4, 800f112 <__pow5mult+0x66>
 800f0fe:	f240 2171 	movw	r1, #625	@ 0x271
 800f102:	4638      	mov	r0, r7
 800f104:	f7ff ff1a 	bl	800ef3c <__i2b>
 800f108:	2300      	movs	r3, #0
 800f10a:	f8c8 0008 	str.w	r0, [r8, #8]
 800f10e:	4604      	mov	r4, r0
 800f110:	6003      	str	r3, [r0, #0]
 800f112:	f04f 0900 	mov.w	r9, #0
 800f116:	07eb      	lsls	r3, r5, #31
 800f118:	d50a      	bpl.n	800f130 <__pow5mult+0x84>
 800f11a:	4631      	mov	r1, r6
 800f11c:	4622      	mov	r2, r4
 800f11e:	4638      	mov	r0, r7
 800f120:	f7ff ff22 	bl	800ef68 <__multiply>
 800f124:	4631      	mov	r1, r6
 800f126:	4680      	mov	r8, r0
 800f128:	4638      	mov	r0, r7
 800f12a:	f7ff fe09 	bl	800ed40 <_Bfree>
 800f12e:	4646      	mov	r6, r8
 800f130:	106d      	asrs	r5, r5, #1
 800f132:	d00b      	beq.n	800f14c <__pow5mult+0xa0>
 800f134:	6820      	ldr	r0, [r4, #0]
 800f136:	b938      	cbnz	r0, 800f148 <__pow5mult+0x9c>
 800f138:	4622      	mov	r2, r4
 800f13a:	4621      	mov	r1, r4
 800f13c:	4638      	mov	r0, r7
 800f13e:	f7ff ff13 	bl	800ef68 <__multiply>
 800f142:	6020      	str	r0, [r4, #0]
 800f144:	f8c0 9000 	str.w	r9, [r0]
 800f148:	4604      	mov	r4, r0
 800f14a:	e7e4      	b.n	800f116 <__pow5mult+0x6a>
 800f14c:	4630      	mov	r0, r6
 800f14e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f152:	bf00      	nop
 800f154:	080108e4 	.word	0x080108e4
 800f158:	08010603 	.word	0x08010603
 800f15c:	080106e3 	.word	0x080106e3

0800f160 <__lshift>:
 800f160:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f164:	460c      	mov	r4, r1
 800f166:	6849      	ldr	r1, [r1, #4]
 800f168:	6923      	ldr	r3, [r4, #16]
 800f16a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800f16e:	68a3      	ldr	r3, [r4, #8]
 800f170:	4607      	mov	r7, r0
 800f172:	4691      	mov	r9, r2
 800f174:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800f178:	f108 0601 	add.w	r6, r8, #1
 800f17c:	42b3      	cmp	r3, r6
 800f17e:	db0b      	blt.n	800f198 <__lshift+0x38>
 800f180:	4638      	mov	r0, r7
 800f182:	f7ff fd9d 	bl	800ecc0 <_Balloc>
 800f186:	4605      	mov	r5, r0
 800f188:	b948      	cbnz	r0, 800f19e <__lshift+0x3e>
 800f18a:	4602      	mov	r2, r0
 800f18c:	4b28      	ldr	r3, [pc, #160]	@ (800f230 <__lshift+0xd0>)
 800f18e:	4829      	ldr	r0, [pc, #164]	@ (800f234 <__lshift+0xd4>)
 800f190:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800f194:	f000 fc78 	bl	800fa88 <__assert_func>
 800f198:	3101      	adds	r1, #1
 800f19a:	005b      	lsls	r3, r3, #1
 800f19c:	e7ee      	b.n	800f17c <__lshift+0x1c>
 800f19e:	2300      	movs	r3, #0
 800f1a0:	f100 0114 	add.w	r1, r0, #20
 800f1a4:	f100 0210 	add.w	r2, r0, #16
 800f1a8:	4618      	mov	r0, r3
 800f1aa:	4553      	cmp	r3, sl
 800f1ac:	db33      	blt.n	800f216 <__lshift+0xb6>
 800f1ae:	6920      	ldr	r0, [r4, #16]
 800f1b0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800f1b4:	f104 0314 	add.w	r3, r4, #20
 800f1b8:	f019 091f 	ands.w	r9, r9, #31
 800f1bc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800f1c0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800f1c4:	d02b      	beq.n	800f21e <__lshift+0xbe>
 800f1c6:	f1c9 0e20 	rsb	lr, r9, #32
 800f1ca:	468a      	mov	sl, r1
 800f1cc:	2200      	movs	r2, #0
 800f1ce:	6818      	ldr	r0, [r3, #0]
 800f1d0:	fa00 f009 	lsl.w	r0, r0, r9
 800f1d4:	4310      	orrs	r0, r2
 800f1d6:	f84a 0b04 	str.w	r0, [sl], #4
 800f1da:	f853 2b04 	ldr.w	r2, [r3], #4
 800f1de:	459c      	cmp	ip, r3
 800f1e0:	fa22 f20e 	lsr.w	r2, r2, lr
 800f1e4:	d8f3      	bhi.n	800f1ce <__lshift+0x6e>
 800f1e6:	ebac 0304 	sub.w	r3, ip, r4
 800f1ea:	3b15      	subs	r3, #21
 800f1ec:	f023 0303 	bic.w	r3, r3, #3
 800f1f0:	3304      	adds	r3, #4
 800f1f2:	f104 0015 	add.w	r0, r4, #21
 800f1f6:	4560      	cmp	r0, ip
 800f1f8:	bf88      	it	hi
 800f1fa:	2304      	movhi	r3, #4
 800f1fc:	50ca      	str	r2, [r1, r3]
 800f1fe:	b10a      	cbz	r2, 800f204 <__lshift+0xa4>
 800f200:	f108 0602 	add.w	r6, r8, #2
 800f204:	3e01      	subs	r6, #1
 800f206:	4638      	mov	r0, r7
 800f208:	612e      	str	r6, [r5, #16]
 800f20a:	4621      	mov	r1, r4
 800f20c:	f7ff fd98 	bl	800ed40 <_Bfree>
 800f210:	4628      	mov	r0, r5
 800f212:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f216:	f842 0f04 	str.w	r0, [r2, #4]!
 800f21a:	3301      	adds	r3, #1
 800f21c:	e7c5      	b.n	800f1aa <__lshift+0x4a>
 800f21e:	3904      	subs	r1, #4
 800f220:	f853 2b04 	ldr.w	r2, [r3], #4
 800f224:	f841 2f04 	str.w	r2, [r1, #4]!
 800f228:	459c      	cmp	ip, r3
 800f22a:	d8f9      	bhi.n	800f220 <__lshift+0xc0>
 800f22c:	e7ea      	b.n	800f204 <__lshift+0xa4>
 800f22e:	bf00      	nop
 800f230:	08010672 	.word	0x08010672
 800f234:	080106e3 	.word	0x080106e3

0800f238 <__mcmp>:
 800f238:	690a      	ldr	r2, [r1, #16]
 800f23a:	4603      	mov	r3, r0
 800f23c:	6900      	ldr	r0, [r0, #16]
 800f23e:	1a80      	subs	r0, r0, r2
 800f240:	b530      	push	{r4, r5, lr}
 800f242:	d10e      	bne.n	800f262 <__mcmp+0x2a>
 800f244:	3314      	adds	r3, #20
 800f246:	3114      	adds	r1, #20
 800f248:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800f24c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800f250:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800f254:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800f258:	4295      	cmp	r5, r2
 800f25a:	d003      	beq.n	800f264 <__mcmp+0x2c>
 800f25c:	d205      	bcs.n	800f26a <__mcmp+0x32>
 800f25e:	f04f 30ff 	mov.w	r0, #4294967295
 800f262:	bd30      	pop	{r4, r5, pc}
 800f264:	42a3      	cmp	r3, r4
 800f266:	d3f3      	bcc.n	800f250 <__mcmp+0x18>
 800f268:	e7fb      	b.n	800f262 <__mcmp+0x2a>
 800f26a:	2001      	movs	r0, #1
 800f26c:	e7f9      	b.n	800f262 <__mcmp+0x2a>
	...

0800f270 <__mdiff>:
 800f270:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f274:	4689      	mov	r9, r1
 800f276:	4606      	mov	r6, r0
 800f278:	4611      	mov	r1, r2
 800f27a:	4648      	mov	r0, r9
 800f27c:	4614      	mov	r4, r2
 800f27e:	f7ff ffdb 	bl	800f238 <__mcmp>
 800f282:	1e05      	subs	r5, r0, #0
 800f284:	d112      	bne.n	800f2ac <__mdiff+0x3c>
 800f286:	4629      	mov	r1, r5
 800f288:	4630      	mov	r0, r6
 800f28a:	f7ff fd19 	bl	800ecc0 <_Balloc>
 800f28e:	4602      	mov	r2, r0
 800f290:	b928      	cbnz	r0, 800f29e <__mdiff+0x2e>
 800f292:	4b3f      	ldr	r3, [pc, #252]	@ (800f390 <__mdiff+0x120>)
 800f294:	f240 2137 	movw	r1, #567	@ 0x237
 800f298:	483e      	ldr	r0, [pc, #248]	@ (800f394 <__mdiff+0x124>)
 800f29a:	f000 fbf5 	bl	800fa88 <__assert_func>
 800f29e:	2301      	movs	r3, #1
 800f2a0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800f2a4:	4610      	mov	r0, r2
 800f2a6:	b003      	add	sp, #12
 800f2a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f2ac:	bfbc      	itt	lt
 800f2ae:	464b      	movlt	r3, r9
 800f2b0:	46a1      	movlt	r9, r4
 800f2b2:	4630      	mov	r0, r6
 800f2b4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800f2b8:	bfba      	itte	lt
 800f2ba:	461c      	movlt	r4, r3
 800f2bc:	2501      	movlt	r5, #1
 800f2be:	2500      	movge	r5, #0
 800f2c0:	f7ff fcfe 	bl	800ecc0 <_Balloc>
 800f2c4:	4602      	mov	r2, r0
 800f2c6:	b918      	cbnz	r0, 800f2d0 <__mdiff+0x60>
 800f2c8:	4b31      	ldr	r3, [pc, #196]	@ (800f390 <__mdiff+0x120>)
 800f2ca:	f240 2145 	movw	r1, #581	@ 0x245
 800f2ce:	e7e3      	b.n	800f298 <__mdiff+0x28>
 800f2d0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800f2d4:	6926      	ldr	r6, [r4, #16]
 800f2d6:	60c5      	str	r5, [r0, #12]
 800f2d8:	f109 0310 	add.w	r3, r9, #16
 800f2dc:	f109 0514 	add.w	r5, r9, #20
 800f2e0:	f104 0e14 	add.w	lr, r4, #20
 800f2e4:	f100 0b14 	add.w	fp, r0, #20
 800f2e8:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800f2ec:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800f2f0:	9301      	str	r3, [sp, #4]
 800f2f2:	46d9      	mov	r9, fp
 800f2f4:	f04f 0c00 	mov.w	ip, #0
 800f2f8:	9b01      	ldr	r3, [sp, #4]
 800f2fa:	f85e 0b04 	ldr.w	r0, [lr], #4
 800f2fe:	f853 af04 	ldr.w	sl, [r3, #4]!
 800f302:	9301      	str	r3, [sp, #4]
 800f304:	fa1f f38a 	uxth.w	r3, sl
 800f308:	4619      	mov	r1, r3
 800f30a:	b283      	uxth	r3, r0
 800f30c:	1acb      	subs	r3, r1, r3
 800f30e:	0c00      	lsrs	r0, r0, #16
 800f310:	4463      	add	r3, ip
 800f312:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800f316:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800f31a:	b29b      	uxth	r3, r3
 800f31c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800f320:	4576      	cmp	r6, lr
 800f322:	f849 3b04 	str.w	r3, [r9], #4
 800f326:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800f32a:	d8e5      	bhi.n	800f2f8 <__mdiff+0x88>
 800f32c:	1b33      	subs	r3, r6, r4
 800f32e:	3b15      	subs	r3, #21
 800f330:	f023 0303 	bic.w	r3, r3, #3
 800f334:	3415      	adds	r4, #21
 800f336:	3304      	adds	r3, #4
 800f338:	42a6      	cmp	r6, r4
 800f33a:	bf38      	it	cc
 800f33c:	2304      	movcc	r3, #4
 800f33e:	441d      	add	r5, r3
 800f340:	445b      	add	r3, fp
 800f342:	461e      	mov	r6, r3
 800f344:	462c      	mov	r4, r5
 800f346:	4544      	cmp	r4, r8
 800f348:	d30e      	bcc.n	800f368 <__mdiff+0xf8>
 800f34a:	f108 0103 	add.w	r1, r8, #3
 800f34e:	1b49      	subs	r1, r1, r5
 800f350:	f021 0103 	bic.w	r1, r1, #3
 800f354:	3d03      	subs	r5, #3
 800f356:	45a8      	cmp	r8, r5
 800f358:	bf38      	it	cc
 800f35a:	2100      	movcc	r1, #0
 800f35c:	440b      	add	r3, r1
 800f35e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800f362:	b191      	cbz	r1, 800f38a <__mdiff+0x11a>
 800f364:	6117      	str	r7, [r2, #16]
 800f366:	e79d      	b.n	800f2a4 <__mdiff+0x34>
 800f368:	f854 1b04 	ldr.w	r1, [r4], #4
 800f36c:	46e6      	mov	lr, ip
 800f36e:	0c08      	lsrs	r0, r1, #16
 800f370:	fa1c fc81 	uxtah	ip, ip, r1
 800f374:	4471      	add	r1, lr
 800f376:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800f37a:	b289      	uxth	r1, r1
 800f37c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800f380:	f846 1b04 	str.w	r1, [r6], #4
 800f384:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800f388:	e7dd      	b.n	800f346 <__mdiff+0xd6>
 800f38a:	3f01      	subs	r7, #1
 800f38c:	e7e7      	b.n	800f35e <__mdiff+0xee>
 800f38e:	bf00      	nop
 800f390:	08010672 	.word	0x08010672
 800f394:	080106e3 	.word	0x080106e3

0800f398 <__ulp>:
 800f398:	b082      	sub	sp, #8
 800f39a:	ed8d 0b00 	vstr	d0, [sp]
 800f39e:	9a01      	ldr	r2, [sp, #4]
 800f3a0:	4b0f      	ldr	r3, [pc, #60]	@ (800f3e0 <__ulp+0x48>)
 800f3a2:	4013      	ands	r3, r2
 800f3a4:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800f3a8:	2b00      	cmp	r3, #0
 800f3aa:	dc08      	bgt.n	800f3be <__ulp+0x26>
 800f3ac:	425b      	negs	r3, r3
 800f3ae:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800f3b2:	ea4f 5223 	mov.w	r2, r3, asr #20
 800f3b6:	da04      	bge.n	800f3c2 <__ulp+0x2a>
 800f3b8:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800f3bc:	4113      	asrs	r3, r2
 800f3be:	2200      	movs	r2, #0
 800f3c0:	e008      	b.n	800f3d4 <__ulp+0x3c>
 800f3c2:	f1a2 0314 	sub.w	r3, r2, #20
 800f3c6:	2b1e      	cmp	r3, #30
 800f3c8:	bfda      	itte	le
 800f3ca:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800f3ce:	40da      	lsrle	r2, r3
 800f3d0:	2201      	movgt	r2, #1
 800f3d2:	2300      	movs	r3, #0
 800f3d4:	4619      	mov	r1, r3
 800f3d6:	4610      	mov	r0, r2
 800f3d8:	ec41 0b10 	vmov	d0, r0, r1
 800f3dc:	b002      	add	sp, #8
 800f3de:	4770      	bx	lr
 800f3e0:	7ff00000 	.word	0x7ff00000

0800f3e4 <__b2d>:
 800f3e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f3e8:	6906      	ldr	r6, [r0, #16]
 800f3ea:	f100 0814 	add.w	r8, r0, #20
 800f3ee:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800f3f2:	1f37      	subs	r7, r6, #4
 800f3f4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800f3f8:	4610      	mov	r0, r2
 800f3fa:	f7ff fd53 	bl	800eea4 <__hi0bits>
 800f3fe:	f1c0 0320 	rsb	r3, r0, #32
 800f402:	280a      	cmp	r0, #10
 800f404:	600b      	str	r3, [r1, #0]
 800f406:	491b      	ldr	r1, [pc, #108]	@ (800f474 <__b2d+0x90>)
 800f408:	dc15      	bgt.n	800f436 <__b2d+0x52>
 800f40a:	f1c0 0c0b 	rsb	ip, r0, #11
 800f40e:	fa22 f30c 	lsr.w	r3, r2, ip
 800f412:	45b8      	cmp	r8, r7
 800f414:	ea43 0501 	orr.w	r5, r3, r1
 800f418:	bf34      	ite	cc
 800f41a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800f41e:	2300      	movcs	r3, #0
 800f420:	3015      	adds	r0, #21
 800f422:	fa02 f000 	lsl.w	r0, r2, r0
 800f426:	fa23 f30c 	lsr.w	r3, r3, ip
 800f42a:	4303      	orrs	r3, r0
 800f42c:	461c      	mov	r4, r3
 800f42e:	ec45 4b10 	vmov	d0, r4, r5
 800f432:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f436:	45b8      	cmp	r8, r7
 800f438:	bf3a      	itte	cc
 800f43a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800f43e:	f1a6 0708 	subcc.w	r7, r6, #8
 800f442:	2300      	movcs	r3, #0
 800f444:	380b      	subs	r0, #11
 800f446:	d012      	beq.n	800f46e <__b2d+0x8a>
 800f448:	f1c0 0120 	rsb	r1, r0, #32
 800f44c:	fa23 f401 	lsr.w	r4, r3, r1
 800f450:	4082      	lsls	r2, r0
 800f452:	4322      	orrs	r2, r4
 800f454:	4547      	cmp	r7, r8
 800f456:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800f45a:	bf8c      	ite	hi
 800f45c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800f460:	2200      	movls	r2, #0
 800f462:	4083      	lsls	r3, r0
 800f464:	40ca      	lsrs	r2, r1
 800f466:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800f46a:	4313      	orrs	r3, r2
 800f46c:	e7de      	b.n	800f42c <__b2d+0x48>
 800f46e:	ea42 0501 	orr.w	r5, r2, r1
 800f472:	e7db      	b.n	800f42c <__b2d+0x48>
 800f474:	3ff00000 	.word	0x3ff00000

0800f478 <__d2b>:
 800f478:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800f47c:	460f      	mov	r7, r1
 800f47e:	2101      	movs	r1, #1
 800f480:	ec59 8b10 	vmov	r8, r9, d0
 800f484:	4616      	mov	r6, r2
 800f486:	f7ff fc1b 	bl	800ecc0 <_Balloc>
 800f48a:	4604      	mov	r4, r0
 800f48c:	b930      	cbnz	r0, 800f49c <__d2b+0x24>
 800f48e:	4602      	mov	r2, r0
 800f490:	4b23      	ldr	r3, [pc, #140]	@ (800f520 <__d2b+0xa8>)
 800f492:	4824      	ldr	r0, [pc, #144]	@ (800f524 <__d2b+0xac>)
 800f494:	f240 310f 	movw	r1, #783	@ 0x30f
 800f498:	f000 faf6 	bl	800fa88 <__assert_func>
 800f49c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800f4a0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800f4a4:	b10d      	cbz	r5, 800f4aa <__d2b+0x32>
 800f4a6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800f4aa:	9301      	str	r3, [sp, #4]
 800f4ac:	f1b8 0300 	subs.w	r3, r8, #0
 800f4b0:	d023      	beq.n	800f4fa <__d2b+0x82>
 800f4b2:	4668      	mov	r0, sp
 800f4b4:	9300      	str	r3, [sp, #0]
 800f4b6:	f7ff fd14 	bl	800eee2 <__lo0bits>
 800f4ba:	e9dd 1200 	ldrd	r1, r2, [sp]
 800f4be:	b1d0      	cbz	r0, 800f4f6 <__d2b+0x7e>
 800f4c0:	f1c0 0320 	rsb	r3, r0, #32
 800f4c4:	fa02 f303 	lsl.w	r3, r2, r3
 800f4c8:	430b      	orrs	r3, r1
 800f4ca:	40c2      	lsrs	r2, r0
 800f4cc:	6163      	str	r3, [r4, #20]
 800f4ce:	9201      	str	r2, [sp, #4]
 800f4d0:	9b01      	ldr	r3, [sp, #4]
 800f4d2:	61a3      	str	r3, [r4, #24]
 800f4d4:	2b00      	cmp	r3, #0
 800f4d6:	bf0c      	ite	eq
 800f4d8:	2201      	moveq	r2, #1
 800f4da:	2202      	movne	r2, #2
 800f4dc:	6122      	str	r2, [r4, #16]
 800f4de:	b1a5      	cbz	r5, 800f50a <__d2b+0x92>
 800f4e0:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800f4e4:	4405      	add	r5, r0
 800f4e6:	603d      	str	r5, [r7, #0]
 800f4e8:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800f4ec:	6030      	str	r0, [r6, #0]
 800f4ee:	4620      	mov	r0, r4
 800f4f0:	b003      	add	sp, #12
 800f4f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f4f6:	6161      	str	r1, [r4, #20]
 800f4f8:	e7ea      	b.n	800f4d0 <__d2b+0x58>
 800f4fa:	a801      	add	r0, sp, #4
 800f4fc:	f7ff fcf1 	bl	800eee2 <__lo0bits>
 800f500:	9b01      	ldr	r3, [sp, #4]
 800f502:	6163      	str	r3, [r4, #20]
 800f504:	3020      	adds	r0, #32
 800f506:	2201      	movs	r2, #1
 800f508:	e7e8      	b.n	800f4dc <__d2b+0x64>
 800f50a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800f50e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800f512:	6038      	str	r0, [r7, #0]
 800f514:	6918      	ldr	r0, [r3, #16]
 800f516:	f7ff fcc5 	bl	800eea4 <__hi0bits>
 800f51a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800f51e:	e7e5      	b.n	800f4ec <__d2b+0x74>
 800f520:	08010672 	.word	0x08010672
 800f524:	080106e3 	.word	0x080106e3

0800f528 <__ratio>:
 800f528:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f52c:	b085      	sub	sp, #20
 800f52e:	e9cd 1000 	strd	r1, r0, [sp]
 800f532:	a902      	add	r1, sp, #8
 800f534:	f7ff ff56 	bl	800f3e4 <__b2d>
 800f538:	9800      	ldr	r0, [sp, #0]
 800f53a:	a903      	add	r1, sp, #12
 800f53c:	ec55 4b10 	vmov	r4, r5, d0
 800f540:	f7ff ff50 	bl	800f3e4 <__b2d>
 800f544:	9b01      	ldr	r3, [sp, #4]
 800f546:	6919      	ldr	r1, [r3, #16]
 800f548:	9b00      	ldr	r3, [sp, #0]
 800f54a:	691b      	ldr	r3, [r3, #16]
 800f54c:	1ac9      	subs	r1, r1, r3
 800f54e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800f552:	1a9b      	subs	r3, r3, r2
 800f554:	ec5b ab10 	vmov	sl, fp, d0
 800f558:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800f55c:	2b00      	cmp	r3, #0
 800f55e:	bfce      	itee	gt
 800f560:	462a      	movgt	r2, r5
 800f562:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800f566:	465a      	movle	r2, fp
 800f568:	462f      	mov	r7, r5
 800f56a:	46d9      	mov	r9, fp
 800f56c:	bfcc      	ite	gt
 800f56e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800f572:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800f576:	464b      	mov	r3, r9
 800f578:	4652      	mov	r2, sl
 800f57a:	4620      	mov	r0, r4
 800f57c:	4639      	mov	r1, r7
 800f57e:	f7f1 f98d 	bl	800089c <__aeabi_ddiv>
 800f582:	ec41 0b10 	vmov	d0, r0, r1
 800f586:	b005      	add	sp, #20
 800f588:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800f58c <__copybits>:
 800f58c:	3901      	subs	r1, #1
 800f58e:	b570      	push	{r4, r5, r6, lr}
 800f590:	1149      	asrs	r1, r1, #5
 800f592:	6914      	ldr	r4, [r2, #16]
 800f594:	3101      	adds	r1, #1
 800f596:	f102 0314 	add.w	r3, r2, #20
 800f59a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800f59e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800f5a2:	1f05      	subs	r5, r0, #4
 800f5a4:	42a3      	cmp	r3, r4
 800f5a6:	d30c      	bcc.n	800f5c2 <__copybits+0x36>
 800f5a8:	1aa3      	subs	r3, r4, r2
 800f5aa:	3b11      	subs	r3, #17
 800f5ac:	f023 0303 	bic.w	r3, r3, #3
 800f5b0:	3211      	adds	r2, #17
 800f5b2:	42a2      	cmp	r2, r4
 800f5b4:	bf88      	it	hi
 800f5b6:	2300      	movhi	r3, #0
 800f5b8:	4418      	add	r0, r3
 800f5ba:	2300      	movs	r3, #0
 800f5bc:	4288      	cmp	r0, r1
 800f5be:	d305      	bcc.n	800f5cc <__copybits+0x40>
 800f5c0:	bd70      	pop	{r4, r5, r6, pc}
 800f5c2:	f853 6b04 	ldr.w	r6, [r3], #4
 800f5c6:	f845 6f04 	str.w	r6, [r5, #4]!
 800f5ca:	e7eb      	b.n	800f5a4 <__copybits+0x18>
 800f5cc:	f840 3b04 	str.w	r3, [r0], #4
 800f5d0:	e7f4      	b.n	800f5bc <__copybits+0x30>

0800f5d2 <__any_on>:
 800f5d2:	f100 0214 	add.w	r2, r0, #20
 800f5d6:	6900      	ldr	r0, [r0, #16]
 800f5d8:	114b      	asrs	r3, r1, #5
 800f5da:	4298      	cmp	r0, r3
 800f5dc:	b510      	push	{r4, lr}
 800f5de:	db11      	blt.n	800f604 <__any_on+0x32>
 800f5e0:	dd0a      	ble.n	800f5f8 <__any_on+0x26>
 800f5e2:	f011 011f 	ands.w	r1, r1, #31
 800f5e6:	d007      	beq.n	800f5f8 <__any_on+0x26>
 800f5e8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800f5ec:	fa24 f001 	lsr.w	r0, r4, r1
 800f5f0:	fa00 f101 	lsl.w	r1, r0, r1
 800f5f4:	428c      	cmp	r4, r1
 800f5f6:	d10b      	bne.n	800f610 <__any_on+0x3e>
 800f5f8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800f5fc:	4293      	cmp	r3, r2
 800f5fe:	d803      	bhi.n	800f608 <__any_on+0x36>
 800f600:	2000      	movs	r0, #0
 800f602:	bd10      	pop	{r4, pc}
 800f604:	4603      	mov	r3, r0
 800f606:	e7f7      	b.n	800f5f8 <__any_on+0x26>
 800f608:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800f60c:	2900      	cmp	r1, #0
 800f60e:	d0f5      	beq.n	800f5fc <__any_on+0x2a>
 800f610:	2001      	movs	r0, #1
 800f612:	e7f6      	b.n	800f602 <__any_on+0x30>

0800f614 <__ascii_wctomb>:
 800f614:	4603      	mov	r3, r0
 800f616:	4608      	mov	r0, r1
 800f618:	b141      	cbz	r1, 800f62c <__ascii_wctomb+0x18>
 800f61a:	2aff      	cmp	r2, #255	@ 0xff
 800f61c:	d904      	bls.n	800f628 <__ascii_wctomb+0x14>
 800f61e:	228a      	movs	r2, #138	@ 0x8a
 800f620:	601a      	str	r2, [r3, #0]
 800f622:	f04f 30ff 	mov.w	r0, #4294967295
 800f626:	4770      	bx	lr
 800f628:	700a      	strb	r2, [r1, #0]
 800f62a:	2001      	movs	r0, #1
 800f62c:	4770      	bx	lr

0800f62e <__ssputs_r>:
 800f62e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f632:	688e      	ldr	r6, [r1, #8]
 800f634:	461f      	mov	r7, r3
 800f636:	42be      	cmp	r6, r7
 800f638:	680b      	ldr	r3, [r1, #0]
 800f63a:	4682      	mov	sl, r0
 800f63c:	460c      	mov	r4, r1
 800f63e:	4690      	mov	r8, r2
 800f640:	d82d      	bhi.n	800f69e <__ssputs_r+0x70>
 800f642:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800f646:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800f64a:	d026      	beq.n	800f69a <__ssputs_r+0x6c>
 800f64c:	6965      	ldr	r5, [r4, #20]
 800f64e:	6909      	ldr	r1, [r1, #16]
 800f650:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f654:	eba3 0901 	sub.w	r9, r3, r1
 800f658:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800f65c:	1c7b      	adds	r3, r7, #1
 800f65e:	444b      	add	r3, r9
 800f660:	106d      	asrs	r5, r5, #1
 800f662:	429d      	cmp	r5, r3
 800f664:	bf38      	it	cc
 800f666:	461d      	movcc	r5, r3
 800f668:	0553      	lsls	r3, r2, #21
 800f66a:	d527      	bpl.n	800f6bc <__ssputs_r+0x8e>
 800f66c:	4629      	mov	r1, r5
 800f66e:	f7ff fa89 	bl	800eb84 <_malloc_r>
 800f672:	4606      	mov	r6, r0
 800f674:	b360      	cbz	r0, 800f6d0 <__ssputs_r+0xa2>
 800f676:	6921      	ldr	r1, [r4, #16]
 800f678:	464a      	mov	r2, r9
 800f67a:	f7fe f866 	bl	800d74a <memcpy>
 800f67e:	89a3      	ldrh	r3, [r4, #12]
 800f680:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800f684:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f688:	81a3      	strh	r3, [r4, #12]
 800f68a:	6126      	str	r6, [r4, #16]
 800f68c:	6165      	str	r5, [r4, #20]
 800f68e:	444e      	add	r6, r9
 800f690:	eba5 0509 	sub.w	r5, r5, r9
 800f694:	6026      	str	r6, [r4, #0]
 800f696:	60a5      	str	r5, [r4, #8]
 800f698:	463e      	mov	r6, r7
 800f69a:	42be      	cmp	r6, r7
 800f69c:	d900      	bls.n	800f6a0 <__ssputs_r+0x72>
 800f69e:	463e      	mov	r6, r7
 800f6a0:	6820      	ldr	r0, [r4, #0]
 800f6a2:	4632      	mov	r2, r6
 800f6a4:	4641      	mov	r1, r8
 800f6a6:	f000 f9c5 	bl	800fa34 <memmove>
 800f6aa:	68a3      	ldr	r3, [r4, #8]
 800f6ac:	1b9b      	subs	r3, r3, r6
 800f6ae:	60a3      	str	r3, [r4, #8]
 800f6b0:	6823      	ldr	r3, [r4, #0]
 800f6b2:	4433      	add	r3, r6
 800f6b4:	6023      	str	r3, [r4, #0]
 800f6b6:	2000      	movs	r0, #0
 800f6b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f6bc:	462a      	mov	r2, r5
 800f6be:	f000 fa15 	bl	800faec <_realloc_r>
 800f6c2:	4606      	mov	r6, r0
 800f6c4:	2800      	cmp	r0, #0
 800f6c6:	d1e0      	bne.n	800f68a <__ssputs_r+0x5c>
 800f6c8:	6921      	ldr	r1, [r4, #16]
 800f6ca:	4650      	mov	r0, sl
 800f6cc:	f7fe feac 	bl	800e428 <_free_r>
 800f6d0:	230c      	movs	r3, #12
 800f6d2:	f8ca 3000 	str.w	r3, [sl]
 800f6d6:	89a3      	ldrh	r3, [r4, #12]
 800f6d8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f6dc:	81a3      	strh	r3, [r4, #12]
 800f6de:	f04f 30ff 	mov.w	r0, #4294967295
 800f6e2:	e7e9      	b.n	800f6b8 <__ssputs_r+0x8a>

0800f6e4 <_svfiprintf_r>:
 800f6e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f6e8:	4698      	mov	r8, r3
 800f6ea:	898b      	ldrh	r3, [r1, #12]
 800f6ec:	061b      	lsls	r3, r3, #24
 800f6ee:	b09d      	sub	sp, #116	@ 0x74
 800f6f0:	4607      	mov	r7, r0
 800f6f2:	460d      	mov	r5, r1
 800f6f4:	4614      	mov	r4, r2
 800f6f6:	d510      	bpl.n	800f71a <_svfiprintf_r+0x36>
 800f6f8:	690b      	ldr	r3, [r1, #16]
 800f6fa:	b973      	cbnz	r3, 800f71a <_svfiprintf_r+0x36>
 800f6fc:	2140      	movs	r1, #64	@ 0x40
 800f6fe:	f7ff fa41 	bl	800eb84 <_malloc_r>
 800f702:	6028      	str	r0, [r5, #0]
 800f704:	6128      	str	r0, [r5, #16]
 800f706:	b930      	cbnz	r0, 800f716 <_svfiprintf_r+0x32>
 800f708:	230c      	movs	r3, #12
 800f70a:	603b      	str	r3, [r7, #0]
 800f70c:	f04f 30ff 	mov.w	r0, #4294967295
 800f710:	b01d      	add	sp, #116	@ 0x74
 800f712:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f716:	2340      	movs	r3, #64	@ 0x40
 800f718:	616b      	str	r3, [r5, #20]
 800f71a:	2300      	movs	r3, #0
 800f71c:	9309      	str	r3, [sp, #36]	@ 0x24
 800f71e:	2320      	movs	r3, #32
 800f720:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800f724:	f8cd 800c 	str.w	r8, [sp, #12]
 800f728:	2330      	movs	r3, #48	@ 0x30
 800f72a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800f8c8 <_svfiprintf_r+0x1e4>
 800f72e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800f732:	f04f 0901 	mov.w	r9, #1
 800f736:	4623      	mov	r3, r4
 800f738:	469a      	mov	sl, r3
 800f73a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f73e:	b10a      	cbz	r2, 800f744 <_svfiprintf_r+0x60>
 800f740:	2a25      	cmp	r2, #37	@ 0x25
 800f742:	d1f9      	bne.n	800f738 <_svfiprintf_r+0x54>
 800f744:	ebba 0b04 	subs.w	fp, sl, r4
 800f748:	d00b      	beq.n	800f762 <_svfiprintf_r+0x7e>
 800f74a:	465b      	mov	r3, fp
 800f74c:	4622      	mov	r2, r4
 800f74e:	4629      	mov	r1, r5
 800f750:	4638      	mov	r0, r7
 800f752:	f7ff ff6c 	bl	800f62e <__ssputs_r>
 800f756:	3001      	adds	r0, #1
 800f758:	f000 80a7 	beq.w	800f8aa <_svfiprintf_r+0x1c6>
 800f75c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f75e:	445a      	add	r2, fp
 800f760:	9209      	str	r2, [sp, #36]	@ 0x24
 800f762:	f89a 3000 	ldrb.w	r3, [sl]
 800f766:	2b00      	cmp	r3, #0
 800f768:	f000 809f 	beq.w	800f8aa <_svfiprintf_r+0x1c6>
 800f76c:	2300      	movs	r3, #0
 800f76e:	f04f 32ff 	mov.w	r2, #4294967295
 800f772:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f776:	f10a 0a01 	add.w	sl, sl, #1
 800f77a:	9304      	str	r3, [sp, #16]
 800f77c:	9307      	str	r3, [sp, #28]
 800f77e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800f782:	931a      	str	r3, [sp, #104]	@ 0x68
 800f784:	4654      	mov	r4, sl
 800f786:	2205      	movs	r2, #5
 800f788:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f78c:	484e      	ldr	r0, [pc, #312]	@ (800f8c8 <_svfiprintf_r+0x1e4>)
 800f78e:	f7f0 fd47 	bl	8000220 <memchr>
 800f792:	9a04      	ldr	r2, [sp, #16]
 800f794:	b9d8      	cbnz	r0, 800f7ce <_svfiprintf_r+0xea>
 800f796:	06d0      	lsls	r0, r2, #27
 800f798:	bf44      	itt	mi
 800f79a:	2320      	movmi	r3, #32
 800f79c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f7a0:	0711      	lsls	r1, r2, #28
 800f7a2:	bf44      	itt	mi
 800f7a4:	232b      	movmi	r3, #43	@ 0x2b
 800f7a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f7aa:	f89a 3000 	ldrb.w	r3, [sl]
 800f7ae:	2b2a      	cmp	r3, #42	@ 0x2a
 800f7b0:	d015      	beq.n	800f7de <_svfiprintf_r+0xfa>
 800f7b2:	9a07      	ldr	r2, [sp, #28]
 800f7b4:	4654      	mov	r4, sl
 800f7b6:	2000      	movs	r0, #0
 800f7b8:	f04f 0c0a 	mov.w	ip, #10
 800f7bc:	4621      	mov	r1, r4
 800f7be:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f7c2:	3b30      	subs	r3, #48	@ 0x30
 800f7c4:	2b09      	cmp	r3, #9
 800f7c6:	d94b      	bls.n	800f860 <_svfiprintf_r+0x17c>
 800f7c8:	b1b0      	cbz	r0, 800f7f8 <_svfiprintf_r+0x114>
 800f7ca:	9207      	str	r2, [sp, #28]
 800f7cc:	e014      	b.n	800f7f8 <_svfiprintf_r+0x114>
 800f7ce:	eba0 0308 	sub.w	r3, r0, r8
 800f7d2:	fa09 f303 	lsl.w	r3, r9, r3
 800f7d6:	4313      	orrs	r3, r2
 800f7d8:	9304      	str	r3, [sp, #16]
 800f7da:	46a2      	mov	sl, r4
 800f7dc:	e7d2      	b.n	800f784 <_svfiprintf_r+0xa0>
 800f7de:	9b03      	ldr	r3, [sp, #12]
 800f7e0:	1d19      	adds	r1, r3, #4
 800f7e2:	681b      	ldr	r3, [r3, #0]
 800f7e4:	9103      	str	r1, [sp, #12]
 800f7e6:	2b00      	cmp	r3, #0
 800f7e8:	bfbb      	ittet	lt
 800f7ea:	425b      	neglt	r3, r3
 800f7ec:	f042 0202 	orrlt.w	r2, r2, #2
 800f7f0:	9307      	strge	r3, [sp, #28]
 800f7f2:	9307      	strlt	r3, [sp, #28]
 800f7f4:	bfb8      	it	lt
 800f7f6:	9204      	strlt	r2, [sp, #16]
 800f7f8:	7823      	ldrb	r3, [r4, #0]
 800f7fa:	2b2e      	cmp	r3, #46	@ 0x2e
 800f7fc:	d10a      	bne.n	800f814 <_svfiprintf_r+0x130>
 800f7fe:	7863      	ldrb	r3, [r4, #1]
 800f800:	2b2a      	cmp	r3, #42	@ 0x2a
 800f802:	d132      	bne.n	800f86a <_svfiprintf_r+0x186>
 800f804:	9b03      	ldr	r3, [sp, #12]
 800f806:	1d1a      	adds	r2, r3, #4
 800f808:	681b      	ldr	r3, [r3, #0]
 800f80a:	9203      	str	r2, [sp, #12]
 800f80c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800f810:	3402      	adds	r4, #2
 800f812:	9305      	str	r3, [sp, #20]
 800f814:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800f8d8 <_svfiprintf_r+0x1f4>
 800f818:	7821      	ldrb	r1, [r4, #0]
 800f81a:	2203      	movs	r2, #3
 800f81c:	4650      	mov	r0, sl
 800f81e:	f7f0 fcff 	bl	8000220 <memchr>
 800f822:	b138      	cbz	r0, 800f834 <_svfiprintf_r+0x150>
 800f824:	9b04      	ldr	r3, [sp, #16]
 800f826:	eba0 000a 	sub.w	r0, r0, sl
 800f82a:	2240      	movs	r2, #64	@ 0x40
 800f82c:	4082      	lsls	r2, r0
 800f82e:	4313      	orrs	r3, r2
 800f830:	3401      	adds	r4, #1
 800f832:	9304      	str	r3, [sp, #16]
 800f834:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f838:	4824      	ldr	r0, [pc, #144]	@ (800f8cc <_svfiprintf_r+0x1e8>)
 800f83a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800f83e:	2206      	movs	r2, #6
 800f840:	f7f0 fcee 	bl	8000220 <memchr>
 800f844:	2800      	cmp	r0, #0
 800f846:	d036      	beq.n	800f8b6 <_svfiprintf_r+0x1d2>
 800f848:	4b21      	ldr	r3, [pc, #132]	@ (800f8d0 <_svfiprintf_r+0x1ec>)
 800f84a:	bb1b      	cbnz	r3, 800f894 <_svfiprintf_r+0x1b0>
 800f84c:	9b03      	ldr	r3, [sp, #12]
 800f84e:	3307      	adds	r3, #7
 800f850:	f023 0307 	bic.w	r3, r3, #7
 800f854:	3308      	adds	r3, #8
 800f856:	9303      	str	r3, [sp, #12]
 800f858:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f85a:	4433      	add	r3, r6
 800f85c:	9309      	str	r3, [sp, #36]	@ 0x24
 800f85e:	e76a      	b.n	800f736 <_svfiprintf_r+0x52>
 800f860:	fb0c 3202 	mla	r2, ip, r2, r3
 800f864:	460c      	mov	r4, r1
 800f866:	2001      	movs	r0, #1
 800f868:	e7a8      	b.n	800f7bc <_svfiprintf_r+0xd8>
 800f86a:	2300      	movs	r3, #0
 800f86c:	3401      	adds	r4, #1
 800f86e:	9305      	str	r3, [sp, #20]
 800f870:	4619      	mov	r1, r3
 800f872:	f04f 0c0a 	mov.w	ip, #10
 800f876:	4620      	mov	r0, r4
 800f878:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f87c:	3a30      	subs	r2, #48	@ 0x30
 800f87e:	2a09      	cmp	r2, #9
 800f880:	d903      	bls.n	800f88a <_svfiprintf_r+0x1a6>
 800f882:	2b00      	cmp	r3, #0
 800f884:	d0c6      	beq.n	800f814 <_svfiprintf_r+0x130>
 800f886:	9105      	str	r1, [sp, #20]
 800f888:	e7c4      	b.n	800f814 <_svfiprintf_r+0x130>
 800f88a:	fb0c 2101 	mla	r1, ip, r1, r2
 800f88e:	4604      	mov	r4, r0
 800f890:	2301      	movs	r3, #1
 800f892:	e7f0      	b.n	800f876 <_svfiprintf_r+0x192>
 800f894:	ab03      	add	r3, sp, #12
 800f896:	9300      	str	r3, [sp, #0]
 800f898:	462a      	mov	r2, r5
 800f89a:	4b0e      	ldr	r3, [pc, #56]	@ (800f8d4 <_svfiprintf_r+0x1f0>)
 800f89c:	a904      	add	r1, sp, #16
 800f89e:	4638      	mov	r0, r7
 800f8a0:	f7fd f9ce 	bl	800cc40 <_printf_float>
 800f8a4:	1c42      	adds	r2, r0, #1
 800f8a6:	4606      	mov	r6, r0
 800f8a8:	d1d6      	bne.n	800f858 <_svfiprintf_r+0x174>
 800f8aa:	89ab      	ldrh	r3, [r5, #12]
 800f8ac:	065b      	lsls	r3, r3, #25
 800f8ae:	f53f af2d 	bmi.w	800f70c <_svfiprintf_r+0x28>
 800f8b2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f8b4:	e72c      	b.n	800f710 <_svfiprintf_r+0x2c>
 800f8b6:	ab03      	add	r3, sp, #12
 800f8b8:	9300      	str	r3, [sp, #0]
 800f8ba:	462a      	mov	r2, r5
 800f8bc:	4b05      	ldr	r3, [pc, #20]	@ (800f8d4 <_svfiprintf_r+0x1f0>)
 800f8be:	a904      	add	r1, sp, #16
 800f8c0:	4638      	mov	r0, r7
 800f8c2:	f7fd fc55 	bl	800d170 <_printf_i>
 800f8c6:	e7ed      	b.n	800f8a4 <_svfiprintf_r+0x1c0>
 800f8c8:	0801073c 	.word	0x0801073c
 800f8cc:	08010746 	.word	0x08010746
 800f8d0:	0800cc41 	.word	0x0800cc41
 800f8d4:	0800f62f 	.word	0x0800f62f
 800f8d8:	08010742 	.word	0x08010742

0800f8dc <__sflush_r>:
 800f8dc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800f8e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f8e4:	0716      	lsls	r6, r2, #28
 800f8e6:	4605      	mov	r5, r0
 800f8e8:	460c      	mov	r4, r1
 800f8ea:	d454      	bmi.n	800f996 <__sflush_r+0xba>
 800f8ec:	684b      	ldr	r3, [r1, #4]
 800f8ee:	2b00      	cmp	r3, #0
 800f8f0:	dc02      	bgt.n	800f8f8 <__sflush_r+0x1c>
 800f8f2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800f8f4:	2b00      	cmp	r3, #0
 800f8f6:	dd48      	ble.n	800f98a <__sflush_r+0xae>
 800f8f8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800f8fa:	2e00      	cmp	r6, #0
 800f8fc:	d045      	beq.n	800f98a <__sflush_r+0xae>
 800f8fe:	2300      	movs	r3, #0
 800f900:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800f904:	682f      	ldr	r7, [r5, #0]
 800f906:	6a21      	ldr	r1, [r4, #32]
 800f908:	602b      	str	r3, [r5, #0]
 800f90a:	d030      	beq.n	800f96e <__sflush_r+0x92>
 800f90c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800f90e:	89a3      	ldrh	r3, [r4, #12]
 800f910:	0759      	lsls	r1, r3, #29
 800f912:	d505      	bpl.n	800f920 <__sflush_r+0x44>
 800f914:	6863      	ldr	r3, [r4, #4]
 800f916:	1ad2      	subs	r2, r2, r3
 800f918:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800f91a:	b10b      	cbz	r3, 800f920 <__sflush_r+0x44>
 800f91c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800f91e:	1ad2      	subs	r2, r2, r3
 800f920:	2300      	movs	r3, #0
 800f922:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800f924:	6a21      	ldr	r1, [r4, #32]
 800f926:	4628      	mov	r0, r5
 800f928:	47b0      	blx	r6
 800f92a:	1c43      	adds	r3, r0, #1
 800f92c:	89a3      	ldrh	r3, [r4, #12]
 800f92e:	d106      	bne.n	800f93e <__sflush_r+0x62>
 800f930:	6829      	ldr	r1, [r5, #0]
 800f932:	291d      	cmp	r1, #29
 800f934:	d82b      	bhi.n	800f98e <__sflush_r+0xb2>
 800f936:	4a2a      	ldr	r2, [pc, #168]	@ (800f9e0 <__sflush_r+0x104>)
 800f938:	40ca      	lsrs	r2, r1
 800f93a:	07d6      	lsls	r6, r2, #31
 800f93c:	d527      	bpl.n	800f98e <__sflush_r+0xb2>
 800f93e:	2200      	movs	r2, #0
 800f940:	6062      	str	r2, [r4, #4]
 800f942:	04d9      	lsls	r1, r3, #19
 800f944:	6922      	ldr	r2, [r4, #16]
 800f946:	6022      	str	r2, [r4, #0]
 800f948:	d504      	bpl.n	800f954 <__sflush_r+0x78>
 800f94a:	1c42      	adds	r2, r0, #1
 800f94c:	d101      	bne.n	800f952 <__sflush_r+0x76>
 800f94e:	682b      	ldr	r3, [r5, #0]
 800f950:	b903      	cbnz	r3, 800f954 <__sflush_r+0x78>
 800f952:	6560      	str	r0, [r4, #84]	@ 0x54
 800f954:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f956:	602f      	str	r7, [r5, #0]
 800f958:	b1b9      	cbz	r1, 800f98a <__sflush_r+0xae>
 800f95a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f95e:	4299      	cmp	r1, r3
 800f960:	d002      	beq.n	800f968 <__sflush_r+0x8c>
 800f962:	4628      	mov	r0, r5
 800f964:	f7fe fd60 	bl	800e428 <_free_r>
 800f968:	2300      	movs	r3, #0
 800f96a:	6363      	str	r3, [r4, #52]	@ 0x34
 800f96c:	e00d      	b.n	800f98a <__sflush_r+0xae>
 800f96e:	2301      	movs	r3, #1
 800f970:	4628      	mov	r0, r5
 800f972:	47b0      	blx	r6
 800f974:	4602      	mov	r2, r0
 800f976:	1c50      	adds	r0, r2, #1
 800f978:	d1c9      	bne.n	800f90e <__sflush_r+0x32>
 800f97a:	682b      	ldr	r3, [r5, #0]
 800f97c:	2b00      	cmp	r3, #0
 800f97e:	d0c6      	beq.n	800f90e <__sflush_r+0x32>
 800f980:	2b1d      	cmp	r3, #29
 800f982:	d001      	beq.n	800f988 <__sflush_r+0xac>
 800f984:	2b16      	cmp	r3, #22
 800f986:	d11e      	bne.n	800f9c6 <__sflush_r+0xea>
 800f988:	602f      	str	r7, [r5, #0]
 800f98a:	2000      	movs	r0, #0
 800f98c:	e022      	b.n	800f9d4 <__sflush_r+0xf8>
 800f98e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f992:	b21b      	sxth	r3, r3
 800f994:	e01b      	b.n	800f9ce <__sflush_r+0xf2>
 800f996:	690f      	ldr	r7, [r1, #16]
 800f998:	2f00      	cmp	r7, #0
 800f99a:	d0f6      	beq.n	800f98a <__sflush_r+0xae>
 800f99c:	0793      	lsls	r3, r2, #30
 800f99e:	680e      	ldr	r6, [r1, #0]
 800f9a0:	bf08      	it	eq
 800f9a2:	694b      	ldreq	r3, [r1, #20]
 800f9a4:	600f      	str	r7, [r1, #0]
 800f9a6:	bf18      	it	ne
 800f9a8:	2300      	movne	r3, #0
 800f9aa:	eba6 0807 	sub.w	r8, r6, r7
 800f9ae:	608b      	str	r3, [r1, #8]
 800f9b0:	f1b8 0f00 	cmp.w	r8, #0
 800f9b4:	dde9      	ble.n	800f98a <__sflush_r+0xae>
 800f9b6:	6a21      	ldr	r1, [r4, #32]
 800f9b8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800f9ba:	4643      	mov	r3, r8
 800f9bc:	463a      	mov	r2, r7
 800f9be:	4628      	mov	r0, r5
 800f9c0:	47b0      	blx	r6
 800f9c2:	2800      	cmp	r0, #0
 800f9c4:	dc08      	bgt.n	800f9d8 <__sflush_r+0xfc>
 800f9c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f9ca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f9ce:	81a3      	strh	r3, [r4, #12]
 800f9d0:	f04f 30ff 	mov.w	r0, #4294967295
 800f9d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f9d8:	4407      	add	r7, r0
 800f9da:	eba8 0800 	sub.w	r8, r8, r0
 800f9de:	e7e7      	b.n	800f9b0 <__sflush_r+0xd4>
 800f9e0:	20400001 	.word	0x20400001

0800f9e4 <_fflush_r>:
 800f9e4:	b538      	push	{r3, r4, r5, lr}
 800f9e6:	690b      	ldr	r3, [r1, #16]
 800f9e8:	4605      	mov	r5, r0
 800f9ea:	460c      	mov	r4, r1
 800f9ec:	b913      	cbnz	r3, 800f9f4 <_fflush_r+0x10>
 800f9ee:	2500      	movs	r5, #0
 800f9f0:	4628      	mov	r0, r5
 800f9f2:	bd38      	pop	{r3, r4, r5, pc}
 800f9f4:	b118      	cbz	r0, 800f9fe <_fflush_r+0x1a>
 800f9f6:	6a03      	ldr	r3, [r0, #32]
 800f9f8:	b90b      	cbnz	r3, 800f9fe <_fflush_r+0x1a>
 800f9fa:	f7fd fd63 	bl	800d4c4 <__sinit>
 800f9fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fa02:	2b00      	cmp	r3, #0
 800fa04:	d0f3      	beq.n	800f9ee <_fflush_r+0xa>
 800fa06:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800fa08:	07d0      	lsls	r0, r2, #31
 800fa0a:	d404      	bmi.n	800fa16 <_fflush_r+0x32>
 800fa0c:	0599      	lsls	r1, r3, #22
 800fa0e:	d402      	bmi.n	800fa16 <_fflush_r+0x32>
 800fa10:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800fa12:	f7fd fe90 	bl	800d736 <__retarget_lock_acquire_recursive>
 800fa16:	4628      	mov	r0, r5
 800fa18:	4621      	mov	r1, r4
 800fa1a:	f7ff ff5f 	bl	800f8dc <__sflush_r>
 800fa1e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800fa20:	07da      	lsls	r2, r3, #31
 800fa22:	4605      	mov	r5, r0
 800fa24:	d4e4      	bmi.n	800f9f0 <_fflush_r+0xc>
 800fa26:	89a3      	ldrh	r3, [r4, #12]
 800fa28:	059b      	lsls	r3, r3, #22
 800fa2a:	d4e1      	bmi.n	800f9f0 <_fflush_r+0xc>
 800fa2c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800fa2e:	f7fd fe83 	bl	800d738 <__retarget_lock_release_recursive>
 800fa32:	e7dd      	b.n	800f9f0 <_fflush_r+0xc>

0800fa34 <memmove>:
 800fa34:	4288      	cmp	r0, r1
 800fa36:	b510      	push	{r4, lr}
 800fa38:	eb01 0402 	add.w	r4, r1, r2
 800fa3c:	d902      	bls.n	800fa44 <memmove+0x10>
 800fa3e:	4284      	cmp	r4, r0
 800fa40:	4623      	mov	r3, r4
 800fa42:	d807      	bhi.n	800fa54 <memmove+0x20>
 800fa44:	1e43      	subs	r3, r0, #1
 800fa46:	42a1      	cmp	r1, r4
 800fa48:	d008      	beq.n	800fa5c <memmove+0x28>
 800fa4a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800fa4e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800fa52:	e7f8      	b.n	800fa46 <memmove+0x12>
 800fa54:	4402      	add	r2, r0
 800fa56:	4601      	mov	r1, r0
 800fa58:	428a      	cmp	r2, r1
 800fa5a:	d100      	bne.n	800fa5e <memmove+0x2a>
 800fa5c:	bd10      	pop	{r4, pc}
 800fa5e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800fa62:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800fa66:	e7f7      	b.n	800fa58 <memmove+0x24>

0800fa68 <_sbrk_r>:
 800fa68:	b538      	push	{r3, r4, r5, lr}
 800fa6a:	4d06      	ldr	r5, [pc, #24]	@ (800fa84 <_sbrk_r+0x1c>)
 800fa6c:	2300      	movs	r3, #0
 800fa6e:	4604      	mov	r4, r0
 800fa70:	4608      	mov	r0, r1
 800fa72:	602b      	str	r3, [r5, #0]
 800fa74:	f7f2 ff94 	bl	80029a0 <_sbrk>
 800fa78:	1c43      	adds	r3, r0, #1
 800fa7a:	d102      	bne.n	800fa82 <_sbrk_r+0x1a>
 800fa7c:	682b      	ldr	r3, [r5, #0]
 800fa7e:	b103      	cbz	r3, 800fa82 <_sbrk_r+0x1a>
 800fa80:	6023      	str	r3, [r4, #0]
 800fa82:	bd38      	pop	{r3, r4, r5, pc}
 800fa84:	20001f34 	.word	0x20001f34

0800fa88 <__assert_func>:
 800fa88:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800fa8a:	4614      	mov	r4, r2
 800fa8c:	461a      	mov	r2, r3
 800fa8e:	4b09      	ldr	r3, [pc, #36]	@ (800fab4 <__assert_func+0x2c>)
 800fa90:	681b      	ldr	r3, [r3, #0]
 800fa92:	4605      	mov	r5, r0
 800fa94:	68d8      	ldr	r0, [r3, #12]
 800fa96:	b14c      	cbz	r4, 800faac <__assert_func+0x24>
 800fa98:	4b07      	ldr	r3, [pc, #28]	@ (800fab8 <__assert_func+0x30>)
 800fa9a:	9100      	str	r1, [sp, #0]
 800fa9c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800faa0:	4906      	ldr	r1, [pc, #24]	@ (800fabc <__assert_func+0x34>)
 800faa2:	462b      	mov	r3, r5
 800faa4:	f000 f850 	bl	800fb48 <fiprintf>
 800faa8:	f000 f860 	bl	800fb6c <abort>
 800faac:	4b04      	ldr	r3, [pc, #16]	@ (800fac0 <__assert_func+0x38>)
 800faae:	461c      	mov	r4, r3
 800fab0:	e7f3      	b.n	800fa9a <__assert_func+0x12>
 800fab2:	bf00      	nop
 800fab4:	20000188 	.word	0x20000188
 800fab8:	0801074d 	.word	0x0801074d
 800fabc:	0801075a 	.word	0x0801075a
 800fac0:	08010788 	.word	0x08010788

0800fac4 <_calloc_r>:
 800fac4:	b570      	push	{r4, r5, r6, lr}
 800fac6:	fba1 5402 	umull	r5, r4, r1, r2
 800faca:	b934      	cbnz	r4, 800fada <_calloc_r+0x16>
 800facc:	4629      	mov	r1, r5
 800face:	f7ff f859 	bl	800eb84 <_malloc_r>
 800fad2:	4606      	mov	r6, r0
 800fad4:	b928      	cbnz	r0, 800fae2 <_calloc_r+0x1e>
 800fad6:	4630      	mov	r0, r6
 800fad8:	bd70      	pop	{r4, r5, r6, pc}
 800fada:	220c      	movs	r2, #12
 800fadc:	6002      	str	r2, [r0, #0]
 800fade:	2600      	movs	r6, #0
 800fae0:	e7f9      	b.n	800fad6 <_calloc_r+0x12>
 800fae2:	462a      	mov	r2, r5
 800fae4:	4621      	mov	r1, r4
 800fae6:	f7fd fd88 	bl	800d5fa <memset>
 800faea:	e7f4      	b.n	800fad6 <_calloc_r+0x12>

0800faec <_realloc_r>:
 800faec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800faf0:	4607      	mov	r7, r0
 800faf2:	4614      	mov	r4, r2
 800faf4:	460d      	mov	r5, r1
 800faf6:	b921      	cbnz	r1, 800fb02 <_realloc_r+0x16>
 800faf8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fafc:	4611      	mov	r1, r2
 800fafe:	f7ff b841 	b.w	800eb84 <_malloc_r>
 800fb02:	b92a      	cbnz	r2, 800fb10 <_realloc_r+0x24>
 800fb04:	f7fe fc90 	bl	800e428 <_free_r>
 800fb08:	4625      	mov	r5, r4
 800fb0a:	4628      	mov	r0, r5
 800fb0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fb10:	f000 f833 	bl	800fb7a <_malloc_usable_size_r>
 800fb14:	4284      	cmp	r4, r0
 800fb16:	4606      	mov	r6, r0
 800fb18:	d802      	bhi.n	800fb20 <_realloc_r+0x34>
 800fb1a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800fb1e:	d8f4      	bhi.n	800fb0a <_realloc_r+0x1e>
 800fb20:	4621      	mov	r1, r4
 800fb22:	4638      	mov	r0, r7
 800fb24:	f7ff f82e 	bl	800eb84 <_malloc_r>
 800fb28:	4680      	mov	r8, r0
 800fb2a:	b908      	cbnz	r0, 800fb30 <_realloc_r+0x44>
 800fb2c:	4645      	mov	r5, r8
 800fb2e:	e7ec      	b.n	800fb0a <_realloc_r+0x1e>
 800fb30:	42b4      	cmp	r4, r6
 800fb32:	4622      	mov	r2, r4
 800fb34:	4629      	mov	r1, r5
 800fb36:	bf28      	it	cs
 800fb38:	4632      	movcs	r2, r6
 800fb3a:	f7fd fe06 	bl	800d74a <memcpy>
 800fb3e:	4629      	mov	r1, r5
 800fb40:	4638      	mov	r0, r7
 800fb42:	f7fe fc71 	bl	800e428 <_free_r>
 800fb46:	e7f1      	b.n	800fb2c <_realloc_r+0x40>

0800fb48 <fiprintf>:
 800fb48:	b40e      	push	{r1, r2, r3}
 800fb4a:	b503      	push	{r0, r1, lr}
 800fb4c:	4601      	mov	r1, r0
 800fb4e:	ab03      	add	r3, sp, #12
 800fb50:	4805      	ldr	r0, [pc, #20]	@ (800fb68 <fiprintf+0x20>)
 800fb52:	f853 2b04 	ldr.w	r2, [r3], #4
 800fb56:	6800      	ldr	r0, [r0, #0]
 800fb58:	9301      	str	r3, [sp, #4]
 800fb5a:	f000 f83f 	bl	800fbdc <_vfiprintf_r>
 800fb5e:	b002      	add	sp, #8
 800fb60:	f85d eb04 	ldr.w	lr, [sp], #4
 800fb64:	b003      	add	sp, #12
 800fb66:	4770      	bx	lr
 800fb68:	20000188 	.word	0x20000188

0800fb6c <abort>:
 800fb6c:	b508      	push	{r3, lr}
 800fb6e:	2006      	movs	r0, #6
 800fb70:	f000 fa08 	bl	800ff84 <raise>
 800fb74:	2001      	movs	r0, #1
 800fb76:	f7f2 fe9b 	bl	80028b0 <_exit>

0800fb7a <_malloc_usable_size_r>:
 800fb7a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fb7e:	1f18      	subs	r0, r3, #4
 800fb80:	2b00      	cmp	r3, #0
 800fb82:	bfbc      	itt	lt
 800fb84:	580b      	ldrlt	r3, [r1, r0]
 800fb86:	18c0      	addlt	r0, r0, r3
 800fb88:	4770      	bx	lr

0800fb8a <__sfputc_r>:
 800fb8a:	6893      	ldr	r3, [r2, #8]
 800fb8c:	3b01      	subs	r3, #1
 800fb8e:	2b00      	cmp	r3, #0
 800fb90:	b410      	push	{r4}
 800fb92:	6093      	str	r3, [r2, #8]
 800fb94:	da08      	bge.n	800fba8 <__sfputc_r+0x1e>
 800fb96:	6994      	ldr	r4, [r2, #24]
 800fb98:	42a3      	cmp	r3, r4
 800fb9a:	db01      	blt.n	800fba0 <__sfputc_r+0x16>
 800fb9c:	290a      	cmp	r1, #10
 800fb9e:	d103      	bne.n	800fba8 <__sfputc_r+0x1e>
 800fba0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fba4:	f000 b932 	b.w	800fe0c <__swbuf_r>
 800fba8:	6813      	ldr	r3, [r2, #0]
 800fbaa:	1c58      	adds	r0, r3, #1
 800fbac:	6010      	str	r0, [r2, #0]
 800fbae:	7019      	strb	r1, [r3, #0]
 800fbb0:	4608      	mov	r0, r1
 800fbb2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fbb6:	4770      	bx	lr

0800fbb8 <__sfputs_r>:
 800fbb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fbba:	4606      	mov	r6, r0
 800fbbc:	460f      	mov	r7, r1
 800fbbe:	4614      	mov	r4, r2
 800fbc0:	18d5      	adds	r5, r2, r3
 800fbc2:	42ac      	cmp	r4, r5
 800fbc4:	d101      	bne.n	800fbca <__sfputs_r+0x12>
 800fbc6:	2000      	movs	r0, #0
 800fbc8:	e007      	b.n	800fbda <__sfputs_r+0x22>
 800fbca:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fbce:	463a      	mov	r2, r7
 800fbd0:	4630      	mov	r0, r6
 800fbd2:	f7ff ffda 	bl	800fb8a <__sfputc_r>
 800fbd6:	1c43      	adds	r3, r0, #1
 800fbd8:	d1f3      	bne.n	800fbc2 <__sfputs_r+0xa>
 800fbda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800fbdc <_vfiprintf_r>:
 800fbdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fbe0:	460d      	mov	r5, r1
 800fbe2:	b09d      	sub	sp, #116	@ 0x74
 800fbe4:	4614      	mov	r4, r2
 800fbe6:	4698      	mov	r8, r3
 800fbe8:	4606      	mov	r6, r0
 800fbea:	b118      	cbz	r0, 800fbf4 <_vfiprintf_r+0x18>
 800fbec:	6a03      	ldr	r3, [r0, #32]
 800fbee:	b90b      	cbnz	r3, 800fbf4 <_vfiprintf_r+0x18>
 800fbf0:	f7fd fc68 	bl	800d4c4 <__sinit>
 800fbf4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800fbf6:	07d9      	lsls	r1, r3, #31
 800fbf8:	d405      	bmi.n	800fc06 <_vfiprintf_r+0x2a>
 800fbfa:	89ab      	ldrh	r3, [r5, #12]
 800fbfc:	059a      	lsls	r2, r3, #22
 800fbfe:	d402      	bmi.n	800fc06 <_vfiprintf_r+0x2a>
 800fc00:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800fc02:	f7fd fd98 	bl	800d736 <__retarget_lock_acquire_recursive>
 800fc06:	89ab      	ldrh	r3, [r5, #12]
 800fc08:	071b      	lsls	r3, r3, #28
 800fc0a:	d501      	bpl.n	800fc10 <_vfiprintf_r+0x34>
 800fc0c:	692b      	ldr	r3, [r5, #16]
 800fc0e:	b99b      	cbnz	r3, 800fc38 <_vfiprintf_r+0x5c>
 800fc10:	4629      	mov	r1, r5
 800fc12:	4630      	mov	r0, r6
 800fc14:	f000 f938 	bl	800fe88 <__swsetup_r>
 800fc18:	b170      	cbz	r0, 800fc38 <_vfiprintf_r+0x5c>
 800fc1a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800fc1c:	07dc      	lsls	r4, r3, #31
 800fc1e:	d504      	bpl.n	800fc2a <_vfiprintf_r+0x4e>
 800fc20:	f04f 30ff 	mov.w	r0, #4294967295
 800fc24:	b01d      	add	sp, #116	@ 0x74
 800fc26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fc2a:	89ab      	ldrh	r3, [r5, #12]
 800fc2c:	0598      	lsls	r0, r3, #22
 800fc2e:	d4f7      	bmi.n	800fc20 <_vfiprintf_r+0x44>
 800fc30:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800fc32:	f7fd fd81 	bl	800d738 <__retarget_lock_release_recursive>
 800fc36:	e7f3      	b.n	800fc20 <_vfiprintf_r+0x44>
 800fc38:	2300      	movs	r3, #0
 800fc3a:	9309      	str	r3, [sp, #36]	@ 0x24
 800fc3c:	2320      	movs	r3, #32
 800fc3e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800fc42:	f8cd 800c 	str.w	r8, [sp, #12]
 800fc46:	2330      	movs	r3, #48	@ 0x30
 800fc48:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800fdf8 <_vfiprintf_r+0x21c>
 800fc4c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800fc50:	f04f 0901 	mov.w	r9, #1
 800fc54:	4623      	mov	r3, r4
 800fc56:	469a      	mov	sl, r3
 800fc58:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fc5c:	b10a      	cbz	r2, 800fc62 <_vfiprintf_r+0x86>
 800fc5e:	2a25      	cmp	r2, #37	@ 0x25
 800fc60:	d1f9      	bne.n	800fc56 <_vfiprintf_r+0x7a>
 800fc62:	ebba 0b04 	subs.w	fp, sl, r4
 800fc66:	d00b      	beq.n	800fc80 <_vfiprintf_r+0xa4>
 800fc68:	465b      	mov	r3, fp
 800fc6a:	4622      	mov	r2, r4
 800fc6c:	4629      	mov	r1, r5
 800fc6e:	4630      	mov	r0, r6
 800fc70:	f7ff ffa2 	bl	800fbb8 <__sfputs_r>
 800fc74:	3001      	adds	r0, #1
 800fc76:	f000 80a7 	beq.w	800fdc8 <_vfiprintf_r+0x1ec>
 800fc7a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800fc7c:	445a      	add	r2, fp
 800fc7e:	9209      	str	r2, [sp, #36]	@ 0x24
 800fc80:	f89a 3000 	ldrb.w	r3, [sl]
 800fc84:	2b00      	cmp	r3, #0
 800fc86:	f000 809f 	beq.w	800fdc8 <_vfiprintf_r+0x1ec>
 800fc8a:	2300      	movs	r3, #0
 800fc8c:	f04f 32ff 	mov.w	r2, #4294967295
 800fc90:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800fc94:	f10a 0a01 	add.w	sl, sl, #1
 800fc98:	9304      	str	r3, [sp, #16]
 800fc9a:	9307      	str	r3, [sp, #28]
 800fc9c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800fca0:	931a      	str	r3, [sp, #104]	@ 0x68
 800fca2:	4654      	mov	r4, sl
 800fca4:	2205      	movs	r2, #5
 800fca6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fcaa:	4853      	ldr	r0, [pc, #332]	@ (800fdf8 <_vfiprintf_r+0x21c>)
 800fcac:	f7f0 fab8 	bl	8000220 <memchr>
 800fcb0:	9a04      	ldr	r2, [sp, #16]
 800fcb2:	b9d8      	cbnz	r0, 800fcec <_vfiprintf_r+0x110>
 800fcb4:	06d1      	lsls	r1, r2, #27
 800fcb6:	bf44      	itt	mi
 800fcb8:	2320      	movmi	r3, #32
 800fcba:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800fcbe:	0713      	lsls	r3, r2, #28
 800fcc0:	bf44      	itt	mi
 800fcc2:	232b      	movmi	r3, #43	@ 0x2b
 800fcc4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800fcc8:	f89a 3000 	ldrb.w	r3, [sl]
 800fccc:	2b2a      	cmp	r3, #42	@ 0x2a
 800fcce:	d015      	beq.n	800fcfc <_vfiprintf_r+0x120>
 800fcd0:	9a07      	ldr	r2, [sp, #28]
 800fcd2:	4654      	mov	r4, sl
 800fcd4:	2000      	movs	r0, #0
 800fcd6:	f04f 0c0a 	mov.w	ip, #10
 800fcda:	4621      	mov	r1, r4
 800fcdc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800fce0:	3b30      	subs	r3, #48	@ 0x30
 800fce2:	2b09      	cmp	r3, #9
 800fce4:	d94b      	bls.n	800fd7e <_vfiprintf_r+0x1a2>
 800fce6:	b1b0      	cbz	r0, 800fd16 <_vfiprintf_r+0x13a>
 800fce8:	9207      	str	r2, [sp, #28]
 800fcea:	e014      	b.n	800fd16 <_vfiprintf_r+0x13a>
 800fcec:	eba0 0308 	sub.w	r3, r0, r8
 800fcf0:	fa09 f303 	lsl.w	r3, r9, r3
 800fcf4:	4313      	orrs	r3, r2
 800fcf6:	9304      	str	r3, [sp, #16]
 800fcf8:	46a2      	mov	sl, r4
 800fcfa:	e7d2      	b.n	800fca2 <_vfiprintf_r+0xc6>
 800fcfc:	9b03      	ldr	r3, [sp, #12]
 800fcfe:	1d19      	adds	r1, r3, #4
 800fd00:	681b      	ldr	r3, [r3, #0]
 800fd02:	9103      	str	r1, [sp, #12]
 800fd04:	2b00      	cmp	r3, #0
 800fd06:	bfbb      	ittet	lt
 800fd08:	425b      	neglt	r3, r3
 800fd0a:	f042 0202 	orrlt.w	r2, r2, #2
 800fd0e:	9307      	strge	r3, [sp, #28]
 800fd10:	9307      	strlt	r3, [sp, #28]
 800fd12:	bfb8      	it	lt
 800fd14:	9204      	strlt	r2, [sp, #16]
 800fd16:	7823      	ldrb	r3, [r4, #0]
 800fd18:	2b2e      	cmp	r3, #46	@ 0x2e
 800fd1a:	d10a      	bne.n	800fd32 <_vfiprintf_r+0x156>
 800fd1c:	7863      	ldrb	r3, [r4, #1]
 800fd1e:	2b2a      	cmp	r3, #42	@ 0x2a
 800fd20:	d132      	bne.n	800fd88 <_vfiprintf_r+0x1ac>
 800fd22:	9b03      	ldr	r3, [sp, #12]
 800fd24:	1d1a      	adds	r2, r3, #4
 800fd26:	681b      	ldr	r3, [r3, #0]
 800fd28:	9203      	str	r2, [sp, #12]
 800fd2a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800fd2e:	3402      	adds	r4, #2
 800fd30:	9305      	str	r3, [sp, #20]
 800fd32:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800fe08 <_vfiprintf_r+0x22c>
 800fd36:	7821      	ldrb	r1, [r4, #0]
 800fd38:	2203      	movs	r2, #3
 800fd3a:	4650      	mov	r0, sl
 800fd3c:	f7f0 fa70 	bl	8000220 <memchr>
 800fd40:	b138      	cbz	r0, 800fd52 <_vfiprintf_r+0x176>
 800fd42:	9b04      	ldr	r3, [sp, #16]
 800fd44:	eba0 000a 	sub.w	r0, r0, sl
 800fd48:	2240      	movs	r2, #64	@ 0x40
 800fd4a:	4082      	lsls	r2, r0
 800fd4c:	4313      	orrs	r3, r2
 800fd4e:	3401      	adds	r4, #1
 800fd50:	9304      	str	r3, [sp, #16]
 800fd52:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fd56:	4829      	ldr	r0, [pc, #164]	@ (800fdfc <_vfiprintf_r+0x220>)
 800fd58:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800fd5c:	2206      	movs	r2, #6
 800fd5e:	f7f0 fa5f 	bl	8000220 <memchr>
 800fd62:	2800      	cmp	r0, #0
 800fd64:	d03f      	beq.n	800fde6 <_vfiprintf_r+0x20a>
 800fd66:	4b26      	ldr	r3, [pc, #152]	@ (800fe00 <_vfiprintf_r+0x224>)
 800fd68:	bb1b      	cbnz	r3, 800fdb2 <_vfiprintf_r+0x1d6>
 800fd6a:	9b03      	ldr	r3, [sp, #12]
 800fd6c:	3307      	adds	r3, #7
 800fd6e:	f023 0307 	bic.w	r3, r3, #7
 800fd72:	3308      	adds	r3, #8
 800fd74:	9303      	str	r3, [sp, #12]
 800fd76:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fd78:	443b      	add	r3, r7
 800fd7a:	9309      	str	r3, [sp, #36]	@ 0x24
 800fd7c:	e76a      	b.n	800fc54 <_vfiprintf_r+0x78>
 800fd7e:	fb0c 3202 	mla	r2, ip, r2, r3
 800fd82:	460c      	mov	r4, r1
 800fd84:	2001      	movs	r0, #1
 800fd86:	e7a8      	b.n	800fcda <_vfiprintf_r+0xfe>
 800fd88:	2300      	movs	r3, #0
 800fd8a:	3401      	adds	r4, #1
 800fd8c:	9305      	str	r3, [sp, #20]
 800fd8e:	4619      	mov	r1, r3
 800fd90:	f04f 0c0a 	mov.w	ip, #10
 800fd94:	4620      	mov	r0, r4
 800fd96:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fd9a:	3a30      	subs	r2, #48	@ 0x30
 800fd9c:	2a09      	cmp	r2, #9
 800fd9e:	d903      	bls.n	800fda8 <_vfiprintf_r+0x1cc>
 800fda0:	2b00      	cmp	r3, #0
 800fda2:	d0c6      	beq.n	800fd32 <_vfiprintf_r+0x156>
 800fda4:	9105      	str	r1, [sp, #20]
 800fda6:	e7c4      	b.n	800fd32 <_vfiprintf_r+0x156>
 800fda8:	fb0c 2101 	mla	r1, ip, r1, r2
 800fdac:	4604      	mov	r4, r0
 800fdae:	2301      	movs	r3, #1
 800fdb0:	e7f0      	b.n	800fd94 <_vfiprintf_r+0x1b8>
 800fdb2:	ab03      	add	r3, sp, #12
 800fdb4:	9300      	str	r3, [sp, #0]
 800fdb6:	462a      	mov	r2, r5
 800fdb8:	4b12      	ldr	r3, [pc, #72]	@ (800fe04 <_vfiprintf_r+0x228>)
 800fdba:	a904      	add	r1, sp, #16
 800fdbc:	4630      	mov	r0, r6
 800fdbe:	f7fc ff3f 	bl	800cc40 <_printf_float>
 800fdc2:	4607      	mov	r7, r0
 800fdc4:	1c78      	adds	r0, r7, #1
 800fdc6:	d1d6      	bne.n	800fd76 <_vfiprintf_r+0x19a>
 800fdc8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800fdca:	07d9      	lsls	r1, r3, #31
 800fdcc:	d405      	bmi.n	800fdda <_vfiprintf_r+0x1fe>
 800fdce:	89ab      	ldrh	r3, [r5, #12]
 800fdd0:	059a      	lsls	r2, r3, #22
 800fdd2:	d402      	bmi.n	800fdda <_vfiprintf_r+0x1fe>
 800fdd4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800fdd6:	f7fd fcaf 	bl	800d738 <__retarget_lock_release_recursive>
 800fdda:	89ab      	ldrh	r3, [r5, #12]
 800fddc:	065b      	lsls	r3, r3, #25
 800fdde:	f53f af1f 	bmi.w	800fc20 <_vfiprintf_r+0x44>
 800fde2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800fde4:	e71e      	b.n	800fc24 <_vfiprintf_r+0x48>
 800fde6:	ab03      	add	r3, sp, #12
 800fde8:	9300      	str	r3, [sp, #0]
 800fdea:	462a      	mov	r2, r5
 800fdec:	4b05      	ldr	r3, [pc, #20]	@ (800fe04 <_vfiprintf_r+0x228>)
 800fdee:	a904      	add	r1, sp, #16
 800fdf0:	4630      	mov	r0, r6
 800fdf2:	f7fd f9bd 	bl	800d170 <_printf_i>
 800fdf6:	e7e4      	b.n	800fdc2 <_vfiprintf_r+0x1e6>
 800fdf8:	0801073c 	.word	0x0801073c
 800fdfc:	08010746 	.word	0x08010746
 800fe00:	0800cc41 	.word	0x0800cc41
 800fe04:	0800fbb9 	.word	0x0800fbb9
 800fe08:	08010742 	.word	0x08010742

0800fe0c <__swbuf_r>:
 800fe0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fe0e:	460e      	mov	r6, r1
 800fe10:	4614      	mov	r4, r2
 800fe12:	4605      	mov	r5, r0
 800fe14:	b118      	cbz	r0, 800fe1e <__swbuf_r+0x12>
 800fe16:	6a03      	ldr	r3, [r0, #32]
 800fe18:	b90b      	cbnz	r3, 800fe1e <__swbuf_r+0x12>
 800fe1a:	f7fd fb53 	bl	800d4c4 <__sinit>
 800fe1e:	69a3      	ldr	r3, [r4, #24]
 800fe20:	60a3      	str	r3, [r4, #8]
 800fe22:	89a3      	ldrh	r3, [r4, #12]
 800fe24:	071a      	lsls	r2, r3, #28
 800fe26:	d501      	bpl.n	800fe2c <__swbuf_r+0x20>
 800fe28:	6923      	ldr	r3, [r4, #16]
 800fe2a:	b943      	cbnz	r3, 800fe3e <__swbuf_r+0x32>
 800fe2c:	4621      	mov	r1, r4
 800fe2e:	4628      	mov	r0, r5
 800fe30:	f000 f82a 	bl	800fe88 <__swsetup_r>
 800fe34:	b118      	cbz	r0, 800fe3e <__swbuf_r+0x32>
 800fe36:	f04f 37ff 	mov.w	r7, #4294967295
 800fe3a:	4638      	mov	r0, r7
 800fe3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fe3e:	6823      	ldr	r3, [r4, #0]
 800fe40:	6922      	ldr	r2, [r4, #16]
 800fe42:	1a98      	subs	r0, r3, r2
 800fe44:	6963      	ldr	r3, [r4, #20]
 800fe46:	b2f6      	uxtb	r6, r6
 800fe48:	4283      	cmp	r3, r0
 800fe4a:	4637      	mov	r7, r6
 800fe4c:	dc05      	bgt.n	800fe5a <__swbuf_r+0x4e>
 800fe4e:	4621      	mov	r1, r4
 800fe50:	4628      	mov	r0, r5
 800fe52:	f7ff fdc7 	bl	800f9e4 <_fflush_r>
 800fe56:	2800      	cmp	r0, #0
 800fe58:	d1ed      	bne.n	800fe36 <__swbuf_r+0x2a>
 800fe5a:	68a3      	ldr	r3, [r4, #8]
 800fe5c:	3b01      	subs	r3, #1
 800fe5e:	60a3      	str	r3, [r4, #8]
 800fe60:	6823      	ldr	r3, [r4, #0]
 800fe62:	1c5a      	adds	r2, r3, #1
 800fe64:	6022      	str	r2, [r4, #0]
 800fe66:	701e      	strb	r6, [r3, #0]
 800fe68:	6962      	ldr	r2, [r4, #20]
 800fe6a:	1c43      	adds	r3, r0, #1
 800fe6c:	429a      	cmp	r2, r3
 800fe6e:	d004      	beq.n	800fe7a <__swbuf_r+0x6e>
 800fe70:	89a3      	ldrh	r3, [r4, #12]
 800fe72:	07db      	lsls	r3, r3, #31
 800fe74:	d5e1      	bpl.n	800fe3a <__swbuf_r+0x2e>
 800fe76:	2e0a      	cmp	r6, #10
 800fe78:	d1df      	bne.n	800fe3a <__swbuf_r+0x2e>
 800fe7a:	4621      	mov	r1, r4
 800fe7c:	4628      	mov	r0, r5
 800fe7e:	f7ff fdb1 	bl	800f9e4 <_fflush_r>
 800fe82:	2800      	cmp	r0, #0
 800fe84:	d0d9      	beq.n	800fe3a <__swbuf_r+0x2e>
 800fe86:	e7d6      	b.n	800fe36 <__swbuf_r+0x2a>

0800fe88 <__swsetup_r>:
 800fe88:	b538      	push	{r3, r4, r5, lr}
 800fe8a:	4b29      	ldr	r3, [pc, #164]	@ (800ff30 <__swsetup_r+0xa8>)
 800fe8c:	4605      	mov	r5, r0
 800fe8e:	6818      	ldr	r0, [r3, #0]
 800fe90:	460c      	mov	r4, r1
 800fe92:	b118      	cbz	r0, 800fe9c <__swsetup_r+0x14>
 800fe94:	6a03      	ldr	r3, [r0, #32]
 800fe96:	b90b      	cbnz	r3, 800fe9c <__swsetup_r+0x14>
 800fe98:	f7fd fb14 	bl	800d4c4 <__sinit>
 800fe9c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fea0:	0719      	lsls	r1, r3, #28
 800fea2:	d422      	bmi.n	800feea <__swsetup_r+0x62>
 800fea4:	06da      	lsls	r2, r3, #27
 800fea6:	d407      	bmi.n	800feb8 <__swsetup_r+0x30>
 800fea8:	2209      	movs	r2, #9
 800feaa:	602a      	str	r2, [r5, #0]
 800feac:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800feb0:	81a3      	strh	r3, [r4, #12]
 800feb2:	f04f 30ff 	mov.w	r0, #4294967295
 800feb6:	e033      	b.n	800ff20 <__swsetup_r+0x98>
 800feb8:	0758      	lsls	r0, r3, #29
 800feba:	d512      	bpl.n	800fee2 <__swsetup_r+0x5a>
 800febc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800febe:	b141      	cbz	r1, 800fed2 <__swsetup_r+0x4a>
 800fec0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800fec4:	4299      	cmp	r1, r3
 800fec6:	d002      	beq.n	800fece <__swsetup_r+0x46>
 800fec8:	4628      	mov	r0, r5
 800feca:	f7fe faad 	bl	800e428 <_free_r>
 800fece:	2300      	movs	r3, #0
 800fed0:	6363      	str	r3, [r4, #52]	@ 0x34
 800fed2:	89a3      	ldrh	r3, [r4, #12]
 800fed4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800fed8:	81a3      	strh	r3, [r4, #12]
 800feda:	2300      	movs	r3, #0
 800fedc:	6063      	str	r3, [r4, #4]
 800fede:	6923      	ldr	r3, [r4, #16]
 800fee0:	6023      	str	r3, [r4, #0]
 800fee2:	89a3      	ldrh	r3, [r4, #12]
 800fee4:	f043 0308 	orr.w	r3, r3, #8
 800fee8:	81a3      	strh	r3, [r4, #12]
 800feea:	6923      	ldr	r3, [r4, #16]
 800feec:	b94b      	cbnz	r3, 800ff02 <__swsetup_r+0x7a>
 800feee:	89a3      	ldrh	r3, [r4, #12]
 800fef0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800fef4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800fef8:	d003      	beq.n	800ff02 <__swsetup_r+0x7a>
 800fefa:	4621      	mov	r1, r4
 800fefc:	4628      	mov	r0, r5
 800fefe:	f000 f883 	bl	8010008 <__smakebuf_r>
 800ff02:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ff06:	f013 0201 	ands.w	r2, r3, #1
 800ff0a:	d00a      	beq.n	800ff22 <__swsetup_r+0x9a>
 800ff0c:	2200      	movs	r2, #0
 800ff0e:	60a2      	str	r2, [r4, #8]
 800ff10:	6962      	ldr	r2, [r4, #20]
 800ff12:	4252      	negs	r2, r2
 800ff14:	61a2      	str	r2, [r4, #24]
 800ff16:	6922      	ldr	r2, [r4, #16]
 800ff18:	b942      	cbnz	r2, 800ff2c <__swsetup_r+0xa4>
 800ff1a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800ff1e:	d1c5      	bne.n	800feac <__swsetup_r+0x24>
 800ff20:	bd38      	pop	{r3, r4, r5, pc}
 800ff22:	0799      	lsls	r1, r3, #30
 800ff24:	bf58      	it	pl
 800ff26:	6962      	ldrpl	r2, [r4, #20]
 800ff28:	60a2      	str	r2, [r4, #8]
 800ff2a:	e7f4      	b.n	800ff16 <__swsetup_r+0x8e>
 800ff2c:	2000      	movs	r0, #0
 800ff2e:	e7f7      	b.n	800ff20 <__swsetup_r+0x98>
 800ff30:	20000188 	.word	0x20000188

0800ff34 <_raise_r>:
 800ff34:	291f      	cmp	r1, #31
 800ff36:	b538      	push	{r3, r4, r5, lr}
 800ff38:	4605      	mov	r5, r0
 800ff3a:	460c      	mov	r4, r1
 800ff3c:	d904      	bls.n	800ff48 <_raise_r+0x14>
 800ff3e:	2316      	movs	r3, #22
 800ff40:	6003      	str	r3, [r0, #0]
 800ff42:	f04f 30ff 	mov.w	r0, #4294967295
 800ff46:	bd38      	pop	{r3, r4, r5, pc}
 800ff48:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800ff4a:	b112      	cbz	r2, 800ff52 <_raise_r+0x1e>
 800ff4c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ff50:	b94b      	cbnz	r3, 800ff66 <_raise_r+0x32>
 800ff52:	4628      	mov	r0, r5
 800ff54:	f000 f830 	bl	800ffb8 <_getpid_r>
 800ff58:	4622      	mov	r2, r4
 800ff5a:	4601      	mov	r1, r0
 800ff5c:	4628      	mov	r0, r5
 800ff5e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ff62:	f000 b817 	b.w	800ff94 <_kill_r>
 800ff66:	2b01      	cmp	r3, #1
 800ff68:	d00a      	beq.n	800ff80 <_raise_r+0x4c>
 800ff6a:	1c59      	adds	r1, r3, #1
 800ff6c:	d103      	bne.n	800ff76 <_raise_r+0x42>
 800ff6e:	2316      	movs	r3, #22
 800ff70:	6003      	str	r3, [r0, #0]
 800ff72:	2001      	movs	r0, #1
 800ff74:	e7e7      	b.n	800ff46 <_raise_r+0x12>
 800ff76:	2100      	movs	r1, #0
 800ff78:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800ff7c:	4620      	mov	r0, r4
 800ff7e:	4798      	blx	r3
 800ff80:	2000      	movs	r0, #0
 800ff82:	e7e0      	b.n	800ff46 <_raise_r+0x12>

0800ff84 <raise>:
 800ff84:	4b02      	ldr	r3, [pc, #8]	@ (800ff90 <raise+0xc>)
 800ff86:	4601      	mov	r1, r0
 800ff88:	6818      	ldr	r0, [r3, #0]
 800ff8a:	f7ff bfd3 	b.w	800ff34 <_raise_r>
 800ff8e:	bf00      	nop
 800ff90:	20000188 	.word	0x20000188

0800ff94 <_kill_r>:
 800ff94:	b538      	push	{r3, r4, r5, lr}
 800ff96:	4d07      	ldr	r5, [pc, #28]	@ (800ffb4 <_kill_r+0x20>)
 800ff98:	2300      	movs	r3, #0
 800ff9a:	4604      	mov	r4, r0
 800ff9c:	4608      	mov	r0, r1
 800ff9e:	4611      	mov	r1, r2
 800ffa0:	602b      	str	r3, [r5, #0]
 800ffa2:	f7f2 fc75 	bl	8002890 <_kill>
 800ffa6:	1c43      	adds	r3, r0, #1
 800ffa8:	d102      	bne.n	800ffb0 <_kill_r+0x1c>
 800ffaa:	682b      	ldr	r3, [r5, #0]
 800ffac:	b103      	cbz	r3, 800ffb0 <_kill_r+0x1c>
 800ffae:	6023      	str	r3, [r4, #0]
 800ffb0:	bd38      	pop	{r3, r4, r5, pc}
 800ffb2:	bf00      	nop
 800ffb4:	20001f34 	.word	0x20001f34

0800ffb8 <_getpid_r>:
 800ffb8:	f7f2 bc62 	b.w	8002880 <_getpid>

0800ffbc <__swhatbuf_r>:
 800ffbc:	b570      	push	{r4, r5, r6, lr}
 800ffbe:	460c      	mov	r4, r1
 800ffc0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ffc4:	2900      	cmp	r1, #0
 800ffc6:	b096      	sub	sp, #88	@ 0x58
 800ffc8:	4615      	mov	r5, r2
 800ffca:	461e      	mov	r6, r3
 800ffcc:	da0d      	bge.n	800ffea <__swhatbuf_r+0x2e>
 800ffce:	89a3      	ldrh	r3, [r4, #12]
 800ffd0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800ffd4:	f04f 0100 	mov.w	r1, #0
 800ffd8:	bf14      	ite	ne
 800ffda:	2340      	movne	r3, #64	@ 0x40
 800ffdc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800ffe0:	2000      	movs	r0, #0
 800ffe2:	6031      	str	r1, [r6, #0]
 800ffe4:	602b      	str	r3, [r5, #0]
 800ffe6:	b016      	add	sp, #88	@ 0x58
 800ffe8:	bd70      	pop	{r4, r5, r6, pc}
 800ffea:	466a      	mov	r2, sp
 800ffec:	f000 f848 	bl	8010080 <_fstat_r>
 800fff0:	2800      	cmp	r0, #0
 800fff2:	dbec      	blt.n	800ffce <__swhatbuf_r+0x12>
 800fff4:	9901      	ldr	r1, [sp, #4]
 800fff6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800fffa:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800fffe:	4259      	negs	r1, r3
 8010000:	4159      	adcs	r1, r3
 8010002:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8010006:	e7eb      	b.n	800ffe0 <__swhatbuf_r+0x24>

08010008 <__smakebuf_r>:
 8010008:	898b      	ldrh	r3, [r1, #12]
 801000a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801000c:	079d      	lsls	r5, r3, #30
 801000e:	4606      	mov	r6, r0
 8010010:	460c      	mov	r4, r1
 8010012:	d507      	bpl.n	8010024 <__smakebuf_r+0x1c>
 8010014:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8010018:	6023      	str	r3, [r4, #0]
 801001a:	6123      	str	r3, [r4, #16]
 801001c:	2301      	movs	r3, #1
 801001e:	6163      	str	r3, [r4, #20]
 8010020:	b003      	add	sp, #12
 8010022:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010024:	ab01      	add	r3, sp, #4
 8010026:	466a      	mov	r2, sp
 8010028:	f7ff ffc8 	bl	800ffbc <__swhatbuf_r>
 801002c:	9f00      	ldr	r7, [sp, #0]
 801002e:	4605      	mov	r5, r0
 8010030:	4639      	mov	r1, r7
 8010032:	4630      	mov	r0, r6
 8010034:	f7fe fda6 	bl	800eb84 <_malloc_r>
 8010038:	b948      	cbnz	r0, 801004e <__smakebuf_r+0x46>
 801003a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801003e:	059a      	lsls	r2, r3, #22
 8010040:	d4ee      	bmi.n	8010020 <__smakebuf_r+0x18>
 8010042:	f023 0303 	bic.w	r3, r3, #3
 8010046:	f043 0302 	orr.w	r3, r3, #2
 801004a:	81a3      	strh	r3, [r4, #12]
 801004c:	e7e2      	b.n	8010014 <__smakebuf_r+0xc>
 801004e:	89a3      	ldrh	r3, [r4, #12]
 8010050:	6020      	str	r0, [r4, #0]
 8010052:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010056:	81a3      	strh	r3, [r4, #12]
 8010058:	9b01      	ldr	r3, [sp, #4]
 801005a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801005e:	b15b      	cbz	r3, 8010078 <__smakebuf_r+0x70>
 8010060:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010064:	4630      	mov	r0, r6
 8010066:	f000 f81d 	bl	80100a4 <_isatty_r>
 801006a:	b128      	cbz	r0, 8010078 <__smakebuf_r+0x70>
 801006c:	89a3      	ldrh	r3, [r4, #12]
 801006e:	f023 0303 	bic.w	r3, r3, #3
 8010072:	f043 0301 	orr.w	r3, r3, #1
 8010076:	81a3      	strh	r3, [r4, #12]
 8010078:	89a3      	ldrh	r3, [r4, #12]
 801007a:	431d      	orrs	r5, r3
 801007c:	81a5      	strh	r5, [r4, #12]
 801007e:	e7cf      	b.n	8010020 <__smakebuf_r+0x18>

08010080 <_fstat_r>:
 8010080:	b538      	push	{r3, r4, r5, lr}
 8010082:	4d07      	ldr	r5, [pc, #28]	@ (80100a0 <_fstat_r+0x20>)
 8010084:	2300      	movs	r3, #0
 8010086:	4604      	mov	r4, r0
 8010088:	4608      	mov	r0, r1
 801008a:	4611      	mov	r1, r2
 801008c:	602b      	str	r3, [r5, #0]
 801008e:	f7f2 fc5f 	bl	8002950 <_fstat>
 8010092:	1c43      	adds	r3, r0, #1
 8010094:	d102      	bne.n	801009c <_fstat_r+0x1c>
 8010096:	682b      	ldr	r3, [r5, #0]
 8010098:	b103      	cbz	r3, 801009c <_fstat_r+0x1c>
 801009a:	6023      	str	r3, [r4, #0]
 801009c:	bd38      	pop	{r3, r4, r5, pc}
 801009e:	bf00      	nop
 80100a0:	20001f34 	.word	0x20001f34

080100a4 <_isatty_r>:
 80100a4:	b538      	push	{r3, r4, r5, lr}
 80100a6:	4d06      	ldr	r5, [pc, #24]	@ (80100c0 <_isatty_r+0x1c>)
 80100a8:	2300      	movs	r3, #0
 80100aa:	4604      	mov	r4, r0
 80100ac:	4608      	mov	r0, r1
 80100ae:	602b      	str	r3, [r5, #0]
 80100b0:	f7f2 fc5e 	bl	8002970 <_isatty>
 80100b4:	1c43      	adds	r3, r0, #1
 80100b6:	d102      	bne.n	80100be <_isatty_r+0x1a>
 80100b8:	682b      	ldr	r3, [r5, #0]
 80100ba:	b103      	cbz	r3, 80100be <_isatty_r+0x1a>
 80100bc:	6023      	str	r3, [r4, #0]
 80100be:	bd38      	pop	{r3, r4, r5, pc}
 80100c0:	20001f34 	.word	0x20001f34
 80100c4:	00000000 	.word	0x00000000

080100c8 <log>:
 80100c8:	b538      	push	{r3, r4, r5, lr}
 80100ca:	ed2d 8b02 	vpush	{d8}
 80100ce:	ec55 4b10 	vmov	r4, r5, d0
 80100d2:	f000 f839 	bl	8010148 <__ieee754_log>
 80100d6:	4622      	mov	r2, r4
 80100d8:	462b      	mov	r3, r5
 80100da:	4620      	mov	r0, r4
 80100dc:	4629      	mov	r1, r5
 80100de:	eeb0 8a40 	vmov.f32	s16, s0
 80100e2:	eef0 8a60 	vmov.f32	s17, s1
 80100e6:	f7f0 fd49 	bl	8000b7c <__aeabi_dcmpun>
 80100ea:	b998      	cbnz	r0, 8010114 <log+0x4c>
 80100ec:	2200      	movs	r2, #0
 80100ee:	2300      	movs	r3, #0
 80100f0:	4620      	mov	r0, r4
 80100f2:	4629      	mov	r1, r5
 80100f4:	f7f0 fd38 	bl	8000b68 <__aeabi_dcmpgt>
 80100f8:	b960      	cbnz	r0, 8010114 <log+0x4c>
 80100fa:	2200      	movs	r2, #0
 80100fc:	2300      	movs	r3, #0
 80100fe:	4620      	mov	r0, r4
 8010100:	4629      	mov	r1, r5
 8010102:	f7f0 fd09 	bl	8000b18 <__aeabi_dcmpeq>
 8010106:	b160      	cbz	r0, 8010122 <log+0x5a>
 8010108:	f7fd faea 	bl	800d6e0 <__errno>
 801010c:	ed9f 8b0a 	vldr	d8, [pc, #40]	@ 8010138 <log+0x70>
 8010110:	2322      	movs	r3, #34	@ 0x22
 8010112:	6003      	str	r3, [r0, #0]
 8010114:	eeb0 0a48 	vmov.f32	s0, s16
 8010118:	eef0 0a68 	vmov.f32	s1, s17
 801011c:	ecbd 8b02 	vpop	{d8}
 8010120:	bd38      	pop	{r3, r4, r5, pc}
 8010122:	f7fd fadd 	bl	800d6e0 <__errno>
 8010126:	ecbd 8b02 	vpop	{d8}
 801012a:	2321      	movs	r3, #33	@ 0x21
 801012c:	6003      	str	r3, [r0, #0]
 801012e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010132:	4803      	ldr	r0, [pc, #12]	@ (8010140 <log+0x78>)
 8010134:	f7fd bb18 	b.w	800d768 <nan>
 8010138:	00000000 	.word	0x00000000
 801013c:	fff00000 	.word	0xfff00000
 8010140:	08010788 	.word	0x08010788
 8010144:	00000000 	.word	0x00000000

08010148 <__ieee754_log>:
 8010148:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801014c:	ec51 0b10 	vmov	r0, r1, d0
 8010150:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8010154:	b087      	sub	sp, #28
 8010156:	460d      	mov	r5, r1
 8010158:	da26      	bge.n	80101a8 <__ieee754_log+0x60>
 801015a:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 801015e:	4303      	orrs	r3, r0
 8010160:	4602      	mov	r2, r0
 8010162:	d10a      	bne.n	801017a <__ieee754_log+0x32>
 8010164:	49ce      	ldr	r1, [pc, #824]	@ (80104a0 <__ieee754_log+0x358>)
 8010166:	2200      	movs	r2, #0
 8010168:	2300      	movs	r3, #0
 801016a:	2000      	movs	r0, #0
 801016c:	f7f0 fb96 	bl	800089c <__aeabi_ddiv>
 8010170:	ec41 0b10 	vmov	d0, r0, r1
 8010174:	b007      	add	sp, #28
 8010176:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801017a:	2900      	cmp	r1, #0
 801017c:	da05      	bge.n	801018a <__ieee754_log+0x42>
 801017e:	460b      	mov	r3, r1
 8010180:	f7f0 f8aa 	bl	80002d8 <__aeabi_dsub>
 8010184:	2200      	movs	r2, #0
 8010186:	2300      	movs	r3, #0
 8010188:	e7f0      	b.n	801016c <__ieee754_log+0x24>
 801018a:	4bc6      	ldr	r3, [pc, #792]	@ (80104a4 <__ieee754_log+0x35c>)
 801018c:	2200      	movs	r2, #0
 801018e:	f7f0 fa5b 	bl	8000648 <__aeabi_dmul>
 8010192:	f06f 0335 	mvn.w	r3, #53	@ 0x35
 8010196:	460d      	mov	r5, r1
 8010198:	4ac3      	ldr	r2, [pc, #780]	@ (80104a8 <__ieee754_log+0x360>)
 801019a:	4295      	cmp	r5, r2
 801019c:	dd06      	ble.n	80101ac <__ieee754_log+0x64>
 801019e:	4602      	mov	r2, r0
 80101a0:	460b      	mov	r3, r1
 80101a2:	f7f0 f89b 	bl	80002dc <__adddf3>
 80101a6:	e7e3      	b.n	8010170 <__ieee754_log+0x28>
 80101a8:	2300      	movs	r3, #0
 80101aa:	e7f5      	b.n	8010198 <__ieee754_log+0x50>
 80101ac:	152c      	asrs	r4, r5, #20
 80101ae:	f2a4 34ff 	subw	r4, r4, #1023	@ 0x3ff
 80101b2:	f3c5 0513 	ubfx	r5, r5, #0, #20
 80101b6:	441c      	add	r4, r3
 80101b8:	f505 2315 	add.w	r3, r5, #610304	@ 0x95000
 80101bc:	f603 7364 	addw	r3, r3, #3940	@ 0xf64
 80101c0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80101c4:	f083 527f 	eor.w	r2, r3, #1069547520	@ 0x3fc00000
 80101c8:	f482 1240 	eor.w	r2, r2, #3145728	@ 0x300000
 80101cc:	ea42 0105 	orr.w	r1, r2, r5
 80101d0:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 80101d4:	2200      	movs	r2, #0
 80101d6:	4bb5      	ldr	r3, [pc, #724]	@ (80104ac <__ieee754_log+0x364>)
 80101d8:	f7f0 f87e 	bl	80002d8 <__aeabi_dsub>
 80101dc:	1cab      	adds	r3, r5, #2
 80101de:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80101e2:	2b02      	cmp	r3, #2
 80101e4:	4682      	mov	sl, r0
 80101e6:	468b      	mov	fp, r1
 80101e8:	f04f 0200 	mov.w	r2, #0
 80101ec:	dc53      	bgt.n	8010296 <__ieee754_log+0x14e>
 80101ee:	2300      	movs	r3, #0
 80101f0:	f7f0 fc92 	bl	8000b18 <__aeabi_dcmpeq>
 80101f4:	b1d0      	cbz	r0, 801022c <__ieee754_log+0xe4>
 80101f6:	2c00      	cmp	r4, #0
 80101f8:	f000 8120 	beq.w	801043c <__ieee754_log+0x2f4>
 80101fc:	4620      	mov	r0, r4
 80101fe:	f7f0 f9b9 	bl	8000574 <__aeabi_i2d>
 8010202:	a391      	add	r3, pc, #580	@ (adr r3, 8010448 <__ieee754_log+0x300>)
 8010204:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010208:	4606      	mov	r6, r0
 801020a:	460f      	mov	r7, r1
 801020c:	f7f0 fa1c 	bl	8000648 <__aeabi_dmul>
 8010210:	a38f      	add	r3, pc, #572	@ (adr r3, 8010450 <__ieee754_log+0x308>)
 8010212:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010216:	4604      	mov	r4, r0
 8010218:	460d      	mov	r5, r1
 801021a:	4630      	mov	r0, r6
 801021c:	4639      	mov	r1, r7
 801021e:	f7f0 fa13 	bl	8000648 <__aeabi_dmul>
 8010222:	4602      	mov	r2, r0
 8010224:	460b      	mov	r3, r1
 8010226:	4620      	mov	r0, r4
 8010228:	4629      	mov	r1, r5
 801022a:	e7ba      	b.n	80101a2 <__ieee754_log+0x5a>
 801022c:	a38a      	add	r3, pc, #552	@ (adr r3, 8010458 <__ieee754_log+0x310>)
 801022e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010232:	4650      	mov	r0, sl
 8010234:	4659      	mov	r1, fp
 8010236:	f7f0 fa07 	bl	8000648 <__aeabi_dmul>
 801023a:	4602      	mov	r2, r0
 801023c:	460b      	mov	r3, r1
 801023e:	2000      	movs	r0, #0
 8010240:	499b      	ldr	r1, [pc, #620]	@ (80104b0 <__ieee754_log+0x368>)
 8010242:	f7f0 f849 	bl	80002d8 <__aeabi_dsub>
 8010246:	4652      	mov	r2, sl
 8010248:	4606      	mov	r6, r0
 801024a:	460f      	mov	r7, r1
 801024c:	465b      	mov	r3, fp
 801024e:	4650      	mov	r0, sl
 8010250:	4659      	mov	r1, fp
 8010252:	f7f0 f9f9 	bl	8000648 <__aeabi_dmul>
 8010256:	4602      	mov	r2, r0
 8010258:	460b      	mov	r3, r1
 801025a:	4630      	mov	r0, r6
 801025c:	4639      	mov	r1, r7
 801025e:	f7f0 f9f3 	bl	8000648 <__aeabi_dmul>
 8010262:	4606      	mov	r6, r0
 8010264:	460f      	mov	r7, r1
 8010266:	b914      	cbnz	r4, 801026e <__ieee754_log+0x126>
 8010268:	4632      	mov	r2, r6
 801026a:	463b      	mov	r3, r7
 801026c:	e0a0      	b.n	80103b0 <__ieee754_log+0x268>
 801026e:	4620      	mov	r0, r4
 8010270:	f7f0 f980 	bl	8000574 <__aeabi_i2d>
 8010274:	a374      	add	r3, pc, #464	@ (adr r3, 8010448 <__ieee754_log+0x300>)
 8010276:	e9d3 2300 	ldrd	r2, r3, [r3]
 801027a:	4680      	mov	r8, r0
 801027c:	4689      	mov	r9, r1
 801027e:	f7f0 f9e3 	bl	8000648 <__aeabi_dmul>
 8010282:	a373      	add	r3, pc, #460	@ (adr r3, 8010450 <__ieee754_log+0x308>)
 8010284:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010288:	4604      	mov	r4, r0
 801028a:	460d      	mov	r5, r1
 801028c:	4640      	mov	r0, r8
 801028e:	4649      	mov	r1, r9
 8010290:	f7f0 f9da 	bl	8000648 <__aeabi_dmul>
 8010294:	e0a5      	b.n	80103e2 <__ieee754_log+0x29a>
 8010296:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 801029a:	f7f0 f81f 	bl	80002dc <__adddf3>
 801029e:	4602      	mov	r2, r0
 80102a0:	460b      	mov	r3, r1
 80102a2:	4650      	mov	r0, sl
 80102a4:	4659      	mov	r1, fp
 80102a6:	f7f0 faf9 	bl	800089c <__aeabi_ddiv>
 80102aa:	e9cd 0100 	strd	r0, r1, [sp]
 80102ae:	4620      	mov	r0, r4
 80102b0:	f7f0 f960 	bl	8000574 <__aeabi_i2d>
 80102b4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80102b8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80102bc:	4610      	mov	r0, r2
 80102be:	4619      	mov	r1, r3
 80102c0:	f7f0 f9c2 	bl	8000648 <__aeabi_dmul>
 80102c4:	4602      	mov	r2, r0
 80102c6:	460b      	mov	r3, r1
 80102c8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80102cc:	f7f0 f9bc 	bl	8000648 <__aeabi_dmul>
 80102d0:	a363      	add	r3, pc, #396	@ (adr r3, 8010460 <__ieee754_log+0x318>)
 80102d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80102d6:	4680      	mov	r8, r0
 80102d8:	4689      	mov	r9, r1
 80102da:	f7f0 f9b5 	bl	8000648 <__aeabi_dmul>
 80102de:	a362      	add	r3, pc, #392	@ (adr r3, 8010468 <__ieee754_log+0x320>)
 80102e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80102e4:	f7ef fffa 	bl	80002dc <__adddf3>
 80102e8:	4642      	mov	r2, r8
 80102ea:	464b      	mov	r3, r9
 80102ec:	f7f0 f9ac 	bl	8000648 <__aeabi_dmul>
 80102f0:	a35f      	add	r3, pc, #380	@ (adr r3, 8010470 <__ieee754_log+0x328>)
 80102f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80102f6:	f7ef fff1 	bl	80002dc <__adddf3>
 80102fa:	4642      	mov	r2, r8
 80102fc:	464b      	mov	r3, r9
 80102fe:	f7f0 f9a3 	bl	8000648 <__aeabi_dmul>
 8010302:	a35d      	add	r3, pc, #372	@ (adr r3, 8010478 <__ieee754_log+0x330>)
 8010304:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010308:	f7ef ffe8 	bl	80002dc <__adddf3>
 801030c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010310:	f7f0 f99a 	bl	8000648 <__aeabi_dmul>
 8010314:	a35a      	add	r3, pc, #360	@ (adr r3, 8010480 <__ieee754_log+0x338>)
 8010316:	e9d3 2300 	ldrd	r2, r3, [r3]
 801031a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801031e:	4640      	mov	r0, r8
 8010320:	4649      	mov	r1, r9
 8010322:	f7f0 f991 	bl	8000648 <__aeabi_dmul>
 8010326:	a358      	add	r3, pc, #352	@ (adr r3, 8010488 <__ieee754_log+0x340>)
 8010328:	e9d3 2300 	ldrd	r2, r3, [r3]
 801032c:	f7ef ffd6 	bl	80002dc <__adddf3>
 8010330:	4642      	mov	r2, r8
 8010332:	464b      	mov	r3, r9
 8010334:	f7f0 f988 	bl	8000648 <__aeabi_dmul>
 8010338:	a355      	add	r3, pc, #340	@ (adr r3, 8010490 <__ieee754_log+0x348>)
 801033a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801033e:	f7ef ffcd 	bl	80002dc <__adddf3>
 8010342:	4642      	mov	r2, r8
 8010344:	464b      	mov	r3, r9
 8010346:	f7f0 f97f 	bl	8000648 <__aeabi_dmul>
 801034a:	f5a5 26c2 	sub.w	r6, r5, #397312	@ 0x61000
 801034e:	4602      	mov	r2, r0
 8010350:	460b      	mov	r3, r1
 8010352:	f5c5 25d7 	rsb	r5, r5, #440320	@ 0x6b800
 8010356:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801035a:	f7ef ffbf 	bl	80002dc <__adddf3>
 801035e:	f2a6 467a 	subw	r6, r6, #1146	@ 0x47a
 8010362:	3551      	adds	r5, #81	@ 0x51
 8010364:	4335      	orrs	r5, r6
 8010366:	2d00      	cmp	r5, #0
 8010368:	4680      	mov	r8, r0
 801036a:	4689      	mov	r9, r1
 801036c:	dd48      	ble.n	8010400 <__ieee754_log+0x2b8>
 801036e:	4b50      	ldr	r3, [pc, #320]	@ (80104b0 <__ieee754_log+0x368>)
 8010370:	2200      	movs	r2, #0
 8010372:	4650      	mov	r0, sl
 8010374:	4659      	mov	r1, fp
 8010376:	f7f0 f967 	bl	8000648 <__aeabi_dmul>
 801037a:	4652      	mov	r2, sl
 801037c:	465b      	mov	r3, fp
 801037e:	f7f0 f963 	bl	8000648 <__aeabi_dmul>
 8010382:	4602      	mov	r2, r0
 8010384:	460b      	mov	r3, r1
 8010386:	4606      	mov	r6, r0
 8010388:	460f      	mov	r7, r1
 801038a:	4640      	mov	r0, r8
 801038c:	4649      	mov	r1, r9
 801038e:	f7ef ffa5 	bl	80002dc <__adddf3>
 8010392:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010396:	f7f0 f957 	bl	8000648 <__aeabi_dmul>
 801039a:	4680      	mov	r8, r0
 801039c:	4689      	mov	r9, r1
 801039e:	b964      	cbnz	r4, 80103ba <__ieee754_log+0x272>
 80103a0:	4602      	mov	r2, r0
 80103a2:	460b      	mov	r3, r1
 80103a4:	4630      	mov	r0, r6
 80103a6:	4639      	mov	r1, r7
 80103a8:	f7ef ff96 	bl	80002d8 <__aeabi_dsub>
 80103ac:	4602      	mov	r2, r0
 80103ae:	460b      	mov	r3, r1
 80103b0:	4650      	mov	r0, sl
 80103b2:	4659      	mov	r1, fp
 80103b4:	f7ef ff90 	bl	80002d8 <__aeabi_dsub>
 80103b8:	e6da      	b.n	8010170 <__ieee754_log+0x28>
 80103ba:	a323      	add	r3, pc, #140	@ (adr r3, 8010448 <__ieee754_log+0x300>)
 80103bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80103c0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80103c4:	f7f0 f940 	bl	8000648 <__aeabi_dmul>
 80103c8:	a321      	add	r3, pc, #132	@ (adr r3, 8010450 <__ieee754_log+0x308>)
 80103ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80103ce:	4604      	mov	r4, r0
 80103d0:	460d      	mov	r5, r1
 80103d2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80103d6:	f7f0 f937 	bl	8000648 <__aeabi_dmul>
 80103da:	4642      	mov	r2, r8
 80103dc:	464b      	mov	r3, r9
 80103de:	f7ef ff7d 	bl	80002dc <__adddf3>
 80103e2:	4602      	mov	r2, r0
 80103e4:	460b      	mov	r3, r1
 80103e6:	4630      	mov	r0, r6
 80103e8:	4639      	mov	r1, r7
 80103ea:	f7ef ff75 	bl	80002d8 <__aeabi_dsub>
 80103ee:	4652      	mov	r2, sl
 80103f0:	465b      	mov	r3, fp
 80103f2:	f7ef ff71 	bl	80002d8 <__aeabi_dsub>
 80103f6:	4602      	mov	r2, r0
 80103f8:	460b      	mov	r3, r1
 80103fa:	4620      	mov	r0, r4
 80103fc:	4629      	mov	r1, r5
 80103fe:	e7d9      	b.n	80103b4 <__ieee754_log+0x26c>
 8010400:	4602      	mov	r2, r0
 8010402:	460b      	mov	r3, r1
 8010404:	4650      	mov	r0, sl
 8010406:	4659      	mov	r1, fp
 8010408:	f7ef ff66 	bl	80002d8 <__aeabi_dsub>
 801040c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010410:	f7f0 f91a 	bl	8000648 <__aeabi_dmul>
 8010414:	4606      	mov	r6, r0
 8010416:	460f      	mov	r7, r1
 8010418:	2c00      	cmp	r4, #0
 801041a:	f43f af25 	beq.w	8010268 <__ieee754_log+0x120>
 801041e:	a30a      	add	r3, pc, #40	@ (adr r3, 8010448 <__ieee754_log+0x300>)
 8010420:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010424:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010428:	f7f0 f90e 	bl	8000648 <__aeabi_dmul>
 801042c:	a308      	add	r3, pc, #32	@ (adr r3, 8010450 <__ieee754_log+0x308>)
 801042e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010432:	4604      	mov	r4, r0
 8010434:	460d      	mov	r5, r1
 8010436:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801043a:	e729      	b.n	8010290 <__ieee754_log+0x148>
 801043c:	ed9f 0b16 	vldr	d0, [pc, #88]	@ 8010498 <__ieee754_log+0x350>
 8010440:	e698      	b.n	8010174 <__ieee754_log+0x2c>
 8010442:	bf00      	nop
 8010444:	f3af 8000 	nop.w
 8010448:	fee00000 	.word	0xfee00000
 801044c:	3fe62e42 	.word	0x3fe62e42
 8010450:	35793c76 	.word	0x35793c76
 8010454:	3dea39ef 	.word	0x3dea39ef
 8010458:	55555555 	.word	0x55555555
 801045c:	3fd55555 	.word	0x3fd55555
 8010460:	df3e5244 	.word	0xdf3e5244
 8010464:	3fc2f112 	.word	0x3fc2f112
 8010468:	96cb03de 	.word	0x96cb03de
 801046c:	3fc74664 	.word	0x3fc74664
 8010470:	94229359 	.word	0x94229359
 8010474:	3fd24924 	.word	0x3fd24924
 8010478:	55555593 	.word	0x55555593
 801047c:	3fe55555 	.word	0x3fe55555
 8010480:	d078c69f 	.word	0xd078c69f
 8010484:	3fc39a09 	.word	0x3fc39a09
 8010488:	1d8e78af 	.word	0x1d8e78af
 801048c:	3fcc71c5 	.word	0x3fcc71c5
 8010490:	9997fa04 	.word	0x9997fa04
 8010494:	3fd99999 	.word	0x3fd99999
	...
 80104a0:	c3500000 	.word	0xc3500000
 80104a4:	43500000 	.word	0x43500000
 80104a8:	7fefffff 	.word	0x7fefffff
 80104ac:	3ff00000 	.word	0x3ff00000
 80104b0:	3fe00000 	.word	0x3fe00000

080104b4 <_init>:
 80104b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80104b6:	bf00      	nop
 80104b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80104ba:	bc08      	pop	{r3}
 80104bc:	469e      	mov	lr, r3
 80104be:	4770      	bx	lr

080104c0 <_fini>:
 80104c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80104c2:	bf00      	nop
 80104c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80104c6:	bc08      	pop	{r3}
 80104c8:	469e      	mov	lr, r3
 80104ca:	4770      	bx	lr
